#get the mode flag from the command line
#default to 'release' if the user didn't specify
mymode = ARGUMENTS.get('mode', 'release')   #holds current mode

#check if the user has been naughty: only 'debug' or 'release' allowed
if not (mymode in ['debug', 'release']):
    print "Error: expected 'debug' or 'release', found: " + mymode
    Exit(1)

#tell the user what we're doing
print '**** Compiling in ' + mymode + ' mode...'

ccflags = '-src=c++11 -fexceptions '
#extra compile flags for debug
debugcflags = ccflags + '-Wall -GX -EHsc -D_DEBUG /MDd'
#extra compile flags for release
releasecflags = ccflags + '-O3 -EHsc -DNDEBUG /MD'

env = Environment()

#make sure the sconscripts can get to the variables
Export('env', 'mymode', 'debugcflags', 'releasecflags')

#put all .sconsign files in one place
env.SConsignFile()

#specify the sconscript for metal
project = 'adapters'
SConscript(project + '/sconscript', exports=['project'])

#specify the sconscript for benchmark
#project = 'benchmark'
#SConscript(project + '/sconscript', exports=['project'])

#specify the sconscript for samples
#project = 'bronze'
#SConscript( 'samples/' + project + '/sconscript', exports=['project'])
#project = 'silver'
#SConscript( 'samples/' + project + '/sconscript', exports=['project'])
