#get the mode flag from the command line
#default to 'release' if the user didn't specify
mymode = ARGUMENTS.get('mode', 'release')   #holds current mode

#check if the user has been naughty: only 'debug' or 'release' allowed
if not (mymode in ['debug', 'release']):
    print "Error: expected 'debug' or 'release', found: " + mymode
    Exit(1)

#tell the user what we're doing
print '**** Compiling in ' + mymode + ' mode...'

ccflags = '-std=c++11 -fexceptions -Wall -fPIC '
#extra compile flags for debug
debugcflags = ccflags + '-D_DEBUG '
#extra compile flags for release
releasecflags = ccflags + '-O3 -DNDEBUG'

env = Environment()

#make sure the sconscripts can get to the variables
Export('env', 'mymode', 'debugcflags', 'releasecflags')

#put all .sconsign files in one place
env.SConsignFile()

# Compile core
SConscript( 'metal/sconscript')
SConscript( 'bootstrapper/sconscript')
SConscript( '3rdparties/netLink/sconscript')
SConscript( '3rdparties/jsoncpp/sconscript')
SConscript( 'metal/adapters/QuickFIXAdapter/sconscript')
SConscript( 'metal/adapters/LSETradingAdapter/sconscript')
#SConscript( 'metal/adapters/AquisATPAdapter/sconscript')
