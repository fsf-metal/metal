import glob

src_files = 'TradingAdapter.cpp Translator.cpp MessageMapper.cpp MappingException.cpp'
lib_files = 'pthread xml2 z'
include_path = '../quickfix/include'

#get all the build variables we need
Import('env', 'project', 'mymode', 'debugcflags', 'releasecflags')
localenv = env.Clone()

#holds the root of the build directory tree
buildroot = '../../bin/' + mymode  
#holds the build directory for this project
builddir = buildroot + '/' + project   
#holds the path to the executable in the build directory
targetpath = builddir + '/libMetal.so'  

#append the user's additional compile flags
#assume debugcflags and releasecflags are defined
if mymode == 'debug':
    localenv.Append(CCFLAGS=Split('-fPIC ' + debugcflags))
else:
    localenv.Append(CCFLAGS=Split('-fPIC ' + releasecflags))

#specify the build directory
localenv.VariantDir(builddir, ".", duplicate=0)


localenv.Append( source=Split(src_files))
localenv.Append( LIBS=Split(lib_files))
localenv.Append( LIBPATH='../../lib')
localenv.Append( CPPPATH=Split( include_path))

# Actually build the Library
localenv.Library( targetpath);

