//
//	FIX Unified Repository mapping to Google Protocol Buffers
//
//	Copyright (c) FIX Protocol Ltd. All Rights Reserved.
//
//	Category: Common
//
//	File: common.proto
//
import "meta.proto";
import "fix.proto";

option java_outer_classname = "Common";
option java_package = "org.fixprotocol.components";
package Common;

enum PartySubIdTypeEnum {
	PARTY_SUB_ID_TYPE_APPLICATION = 0			[(fix.enum_value)="4"];
	PARTY_SUB_ID_TYPE_BIC = 1				[(fix.enum_value)="16"];
	PARTY_SUB_ID_TYPE_CSDPARTICIPANT_MEMBER_CODE = 2	[(fix.enum_value)="17"];
	PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME = 3			[(fix.enum_value)="23"];
	PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NUMBER = 4		[(fix.enum_value)="15"];
	PARTY_SUB_ID_TYPE_CONTACT_NAME = 5			[(fix.enum_value)="9"];
	PARTY_SUB_ID_TYPE_DEPARTMENT = 6			[(fix.enum_value)="24"];
	PARTY_SUB_ID_TYPE_EMAIL_ADDRESS = 7			[(fix.enum_value)="8"];
	PARTY_SUB_ID_TYPE_FAX_NUMBER = 8			[(fix.enum_value)="21"];
	PARTY_SUB_ID_TYPE_FIRM = 9				[(fix.enum_value)="1"];
	PARTY_SUB_ID_TYPE_FULL_LEGAL_NAME_OF_FIRM = 10		[(fix.enum_value)="5"];
	PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME = 11		[(fix.enum_value)="19"];
	PARTY_SUB_ID_TYPE_LOCATION_DESK = 12			[(fix.enum_value)="25"];
	PARTY_SUB_ID_TYPE_PERSON = 13				[(fix.enum_value)="2"];
	PARTY_SUB_ID_TYPE_PHONE_NUMBER = 14			[(fix.enum_value)="7"];
	PARTY_SUB_ID_TYPE_POSITION_ACCOUNT_TYPE = 15		[(fix.enum_value)="26"];
	PARTY_SUB_ID_TYPE_POSTAL_ADDRESS = 16			[(fix.enum_value)="6"];
	PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS = 17		[(fix.enum_value)="18"];
	PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_FOR_CONFIRMATION = 18	[(fix.enum_value)="12"];
	PARTY_SUB_ID_TYPE_REGISTRATION_NAME = 19		[(fix.enum_value)="14"];
	PARTY_SUB_ID_TYPE_REGISTRATION_NUMBER = 20		[(fix.enum_value)="11"];
	PARTY_SUB_ID_TYPE_REGULATORY_STATUS = 21		[(fix.enum_value)="13"];
	PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NAME = 22		[(fix.enum_value)="22"];
	PARTY_SUB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER = 23	[(fix.enum_value)="10"];
	PARTY_SUB_ID_TYPE_SYSTEM = 24				[(fix.enum_value)="3"];
	PARTY_SUB_ID_TYPE_TELEX_NUMBER = 25			[(fix.enum_value)="20"];
	PARTY_SUB_ID_TYPE_SECURITY_LOCATE_ID = 26		[(fix.enum_value)="27"];
	PARTY_SUB_ID_TYPE_ELIGIBLE_COUNTERPARTY = 27		[(fix.enum_value)="29"];
	PARTY_SUB_ID_TYPE_EXECUTION_VENUE = 28			[(fix.enum_value)="32"];
	PARTY_SUB_ID_TYPE_LOCATION = 29				[(fix.enum_value)="31"];
	PARTY_SUB_ID_TYPE_MARKET_MAKER = 30			[(fix.enum_value)="28"];
	PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIENT = 31		[(fix.enum_value)="30"];
	PARTY_SUB_ID_TYPE_CURRENCY_DELIVERY_IDENTIFIER = 32	[(fix.enum_value)="33"];
}

message PartySubIdTypeUnion {
	optional PartySubIdTypeEnum party_sub_id_type = 1;
	optional sfixed64 party_sub_id_type_sfixed64 = 2;
}

message PtysSubGrp {
	optional string party_sub_id = 1			[(fix.tag)=523, (fix.type)=STRING];
	optional PartySubIdTypeEnum party_sub_id_type = 2	[(fix.tag)=803, (fix.type)=INT];
}

enum PartyIdSourceEnum {
	PARTY_ID_SOURCE_AUSTRALIAN_BUSINESS_NUMBER = 0		[(fix.enum_value)="9"];
	PARTY_ID_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER = 1		[(fix.enum_value)="A"];
	PARTY_ID_SOURCE_BIC = 2					[(fix.enum_value)="B"];
	PARTY_ID_SOURCE_CHINESE_INVESTOR_ID = 3			[(fix.enum_value)="5"];
	PARTY_ID_SOURCE_GENERAL_IDENTIFIER = 4			[(fix.enum_value)="C"];
	PARTY_ID_SOURCE_ISO_COUNTRY_CODE = 5			[(fix.enum_value)="E"];
	PARTY_ID_SOURCE_KOREAN_INVESTOR_ID = 6			[(fix.enum_value)="1"];
	PARTY_ID_SOURCE_MALAYSIAN_CENTRAL_DEPOSITORY = 7	[(fix.enum_value)="4"];
	PARTY_ID_SOURCE_PROPRIETARY = 8				[(fix.enum_value)="D"];
	PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LOCATION = 9		[(fix.enum_value)="F"];
	PARTY_ID_SOURCE_TAIWANESE_FOREIGN_INVESTOR_ID = 10	[(fix.enum_value)="2"];
	PARTY_ID_SOURCE_TAIWANESE_TRADING_ACCT = 11		[(fix.enum_value)="3"];
	PARTY_ID_SOURCE_UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = 12	[(fix.enum_value)="6"];
	PARTY_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER = 13	[(fix.enum_value)="8"];
	PARTY_ID_SOURCE_US_SOCIAL_SECURITY_NUMBER = 14		[(fix.enum_value)="7"];
	PARTY_ID_SOURCE_CSDPARTICIPANT = 15			[(fix.enum_value)="H"];
	PARTY_ID_SOURCE_ISITCACRONYM = 16			[(fix.enum_value)="I"];
	PARTY_ID_SOURCE_MIC = 17				[(fix.enum_value)="G"];
}

enum PartyRoleEnum {
	PARTY_ROLE_BROKER_OF_CREDIT = 0				[(fix.enum_value)="2"];
	PARTY_ROLE_CLEARING_FIRM = 1				[(fix.enum_value)="4"];
	PARTY_ROLE_CLIENT_ID = 2				[(fix.enum_value)="3"];
	PARTY_ROLE_CONTRA_CLEARING_FIRM = 3			[(fix.enum_value)="18"];
	PARTY_ROLE_CONTRA_FIRM = 4				[(fix.enum_value)="17"];
	PARTY_ROLE_CORRESPONDANT_CLEARING_FIRM = 5		[(fix.enum_value)="15"];
	PARTY_ROLE_ENTERING_FIRM = 6				[(fix.enum_value)="7"];
	PARTY_ROLE_EXECUTING_FIRM = 7				[(fix.enum_value)="1"];
	PARTY_ROLE_EXECUTING_SYSTEM = 8				[(fix.enum_value)="16"];
	PARTY_ROLE_EXECUTING_TRADER = 9				[(fix.enum_value)="12"];
	PARTY_ROLE_FUND_MANAGER_CLIENT_ID = 10			[(fix.enum_value)="9"];
	PARTY_ROLE_GIVEUP_CLEARING_FIRM = 11			[(fix.enum_value)="14"];
	PARTY_ROLE_INTRODUCING_FIRM = 12			[(fix.enum_value)="6"];
	PARTY_ROLE_INVESTOR_ID = 13				[(fix.enum_value)="5"];
	PARTY_ROLE_LOCATE = 14					[(fix.enum_value)="8"];
	PARTY_ROLE_ORDER_ORIGINATION_FIRM = 15			[(fix.enum_value)="13"];
	PARTY_ROLE_ORDER_ORIGINATION_TRADER = 16		[(fix.enum_value)="11"];
	PARTY_ROLE_SETTLEMENT_LOCATION = 17			[(fix.enum_value)="10"];
	PARTY_ROLE_SPONSORING_FIRM = 18				[(fix.enum_value)="19"];
	PARTY_ROLE_UNDERLYING_CONTRA_FIRM = 19			[(fix.enum_value)="20"];
	PARTY_ROLE_CONTRA_INVESTOR_ID = 20			[(fix.enum_value)="39"];
	PARTY_ROLE_TRANSFER_TO_FIRM = 21			[(fix.enum_value)="40"];
	PARTY_ROLE_AGENT = 22					[(fix.enum_value)="30"];
	PARTY_ROLE_BENEFICIARY = 23				[(fix.enum_value)="32"];
	PARTY_ROLE_BUYER = 24					[(fix.enum_value)="27"];
	PARTY_ROLE_CLEARING_ORGANIZATION = 25			[(fix.enum_value)="21"];
	PARTY_ROLE_CONTRA_TRADER = 26				[(fix.enum_value)="37"];
	PARTY_ROLE_CORRESPONDENT_BROKER = 27			[(fix.enum_value)="26"];
	PARTY_ROLE_CORRESPONDENT_CLEARING_ORGANIZATION = 28	[(fix.enum_value)="25"];
	PARTY_ROLE_CUSTODIAN = 29				[(fix.enum_value)="28"];
	PARTY_ROLE_CUSTOMER_ACCOUNT = 30			[(fix.enum_value)="24"];
	PARTY_ROLE_ENTERING_TRADER = 31				[(fix.enum_value)="36"];
	PARTY_ROLE_EXCHANGE = 32				[(fix.enum_value)="22"];
	PARTY_ROLE_INTERESTED_PARTY = 33			[(fix.enum_value)="33"];
	PARTY_ROLE_INTERMEDIARY = 34				[(fix.enum_value)="29"];
	PARTY_ROLE_LIQUIDITY_PROVIDER = 35			[(fix.enum_value)="35"];
	PARTY_ROLE_POSITION_ACCOUNT = 36			[(fix.enum_value)="38"];
	PARTY_ROLE_REGULATORY_BODY = 37				[(fix.enum_value)="34"];
	PARTY_ROLE_SUB_CUSTODIAN = 38				[(fix.enum_value)="31"];
	PARTY_ROLE_INTRODUCING_BROKER = 39			[(fix.enum_value)="60"];
	PARTY_ROLE_CONTRA_EXCHANGE = 40				[(fix.enum_value)="42"];
	PARTY_ROLE_CONTRA_POSITION_ACCOUNT = 41			[(fix.enum_value)="41"];
	PARTY_ROLE_INTERNAL_CARRY_ACCOUNT = 42			[(fix.enum_value)="43"];
	PARTY_ROLE_ORDER_ENTRY_OPERATOR_ID = 43			[(fix.enum_value)="44"];
	PARTY_ROLE_SECONDARY_ACCOUNT_NUMBER = 44		[(fix.enum_value)="45"];
	PARTY_ROLE_ASSET_MANAGER = 45				[(fix.enum_value)="49"];
	PARTY_ROLE_CLAIMING_ACCOUNT = 46			[(fix.enum_value)="48"];
	PARTY_ROLE_FOREIGN_FIRM = 47				[(fix.enum_value)="46"];
	PARTY_ROLE_LARGE_TRADER_REPORTABLE_ACCOUNT = 48		[(fix.enum_value)="52"];
	PARTY_ROLE_PLEDGEE_ACCOUNT = 49				[(fix.enum_value)="51"];
	PARTY_ROLE_PLEDGOR_ACCOUNT = 50				[(fix.enum_value)="50"];
	PARTY_ROLE_SENDER_LOCATION = 51				[(fix.enum_value)="54"];
	PARTY_ROLE_SESSION_ID = 52				[(fix.enum_value)="55"];
	PARTY_ROLE_THIRD_PARTY_ALLOCATION_FIRM = 53		[(fix.enum_value)="47"];
	PARTY_ROLE_TRADER_MNEMONIC = 54				[(fix.enum_value)="53"];
	PARTY_ROLE_ACCEPTABLE_COUNTERPARTY = 55			[(fix.enum_value)="56"];
	PARTY_ROLE_ENTERING_UNIT = 56				[(fix.enum_value)="58"];
	PARTY_ROLE_EXECUTING_UNIT = 57				[(fix.enum_value)="59"];
	PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY = 58		[(fix.enum_value)="57"];
	PARTY_ROLE_COMPETENT_AUTHORITY_LIQUIDITY = 59		[(fix.enum_value)="70"];
	PARTY_ROLE_COMPETENT_AUTHORITY_TRANSACTION_VENUE = 60	[(fix.enum_value)="71"];
	PARTY_ROLE_DESK_ID = 61					[(fix.enum_value)="76"];
	PARTY_ROLE_EXECUTION_VENUE = 62				[(fix.enum_value)="73"];
	PARTY_ROLE_HOME_COMPETENT_AUTHORITY = 63		[(fix.enum_value)="69"];
	PARTY_ROLE_HOST_COMPETENT_AUTHORITY = 64		[(fix.enum_value)="68"];
	PARTY_ROLE_INVESTMENT_FIRM = 65				[(fix.enum_value)="67"];
	PARTY_ROLE_LOCATION_ID = 66				[(fix.enum_value)="75"];
	PARTY_ROLE_MARKET_DATA_ENTRY_ORIGINATOR = 67		[(fix.enum_value)="74"];
	PARTY_ROLE_MARKET_DATA_MARKET = 68			[(fix.enum_value)="77"];
	PARTY_ROLE_MARKET_MAKER = 69				[(fix.enum_value)="66"];
	PARTY_ROLE_MULTILATERAL_TRADING_FACILITY = 70		[(fix.enum_value)="64"];
	PARTY_ROLE_QUOTE_ORIGINATOR = 71			[(fix.enum_value)="61"];
	PARTY_ROLE_REGULATED_MARKET = 72			[(fix.enum_value)="65"];
	PARTY_ROLE_REPORT_ORIGINATOR = 73			[(fix.enum_value)="62"];
	PARTY_ROLE_REPORTING_INTERMEDIARY = 74			[(fix.enum_value)="72"];
	PARTY_ROLE_SYSTEMATIC_INTERNALISER = 75			[(fix.enum_value)="63"];
	PARTY_ROLE_ALLOCATION_ENTITY = 76			[(fix.enum_value)="78"];
	PARTY_ROLE_BROKER_CLEARING_ID = 77			[(fix.enum_value)="81"];
	PARTY_ROLE_PRIME_BROKER = 78				[(fix.enum_value)="79"];
	PARTY_ROLE_STEP_OUT_FIRM = 79				[(fix.enum_value)="80"];
	PARTY_ROLE_CENTRAL_REGISTRATION_DEPOSITORY = 80		[(fix.enum_value)="82"];
	PARTY_ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY = 81	[(fix.enum_value)="84"];
	PARTY_ROLE_CLEARING_ACCOUNT = 82			[(fix.enum_value)="83"];
	PARTY_ROLE_UNACCEPTABLE_SETTLING_COUNTERPARTY = 83	[(fix.enum_value)="85"];
}

message Parties {
	optional string party_id = 1				[(fix.tag)=448, (fix.type)=STRING];
	optional PartyIdSourceEnum party_id_source = 2		[(fix.tag)=447, (fix.type)=CHAR];
	optional PartyRoleEnum party_role = 3			[(fix.tag)=452, (fix.type)=INT];
	repeated PtysSubGrp ptys_sub_grp = 4			[(fix.tag)=802];
}

message NstdPtysSubGrp {
	optional string nested_party_sub_id = 1			[(fix.tag)=545, (fix.type)=STRING];
	optional sfixed64 nested_party_sub_id_type = 2		[(fix.tag)=805, (fix.type)=INT];
}

message NestedParties {
	optional string nested_party_id = 1			[(fix.tag)=524, (fix.type)=STRING];
	optional string nested_party_id_source = 2		[(fix.tag)=525, (fix.type)=CHAR];
	optional sfixed64 nested_party_role = 3			[(fix.tag)=538, (fix.type)=INT];
	repeated NstdPtysSubGrp nstd_ptys_sub_grp = 4		[(fix.tag)=804];
}

message PreAllocGrp {
	optional string alloc_account = 1			[(fix.tag)=79, (fix.type)=STRING];
	optional sfixed64 alloc_acct_id_source = 2		[(fix.tag)=661, (fix.type)=INT];
	optional sfixed64 alloc_qty = 3				[(fix.tag)=80, (fix.type)=QTY];
	optional sfixed32 alloc_qty_exponent = 4;
	optional string alloc_settl_currency = 5		[(fix.tag)=736, (fix.type)=CURRENCY];
	optional string individual_alloc_id = 6			[(fix.tag)=467, (fix.type)=STRING];
	repeated NestedParties nested_parties = 7		[(fix.tag)=539];
}

enum DisplayWhenEnum {
	DISPLAY_WHEN_EXHAUST = 0				[(fix.enum_value)="2"];
	DISPLAY_WHEN_IMMEDIATE = 1				[(fix.enum_value)="1"];
}

enum DisplayMethodEnum {
	DISPLAY_METHOD_INITIAL = 0				[(fix.enum_value)="1"];
	DISPLAY_METHOD_NEW = 1					[(fix.enum_value)="2"];
	DISPLAY_METHOD_RANDOM = 2				[(fix.enum_value)="3"];
	DISPLAY_METHOD_UNDISCLOSED = 3				[(fix.enum_value)="4"];
}

message DisplayInstruction {
	optional sfixed64 display_high_qty = 1			[(fix.tag)=1086, (fix.type)=QTY];
	optional sfixed32 display_high_qty_exponent = 2;
	optional sfixed64 display_low_qty = 3			[(fix.tag)=1085, (fix.type)=QTY];
	optional sfixed32 display_low_qty_exponent = 4;
	optional DisplayMethodEnum display_method = 5		[(fix.tag)=1084, (fix.type)=CHAR];
	optional sfixed64 display_min_incr = 6			[(fix.tag)=1087, (fix.type)=QTY];
	optional sfixed32 display_min_incr_exponent = 7;
	optional sfixed64 display_qty = 8			[(fix.tag)=1138, (fix.type)=QTY];
	optional sfixed32 display_qty_exponent = 9;
	optional DisplayWhenEnum display_when = 10		[(fix.tag)=1083, (fix.type)=CHAR];
	optional sfixed64 refresh_qty = 11			[(fix.tag)=1088, (fix.type)=QTY];
	optional sfixed32 refresh_qty_exponent = 12;
	optional sfixed64 secondary_display_qty = 13		[(fix.tag)=1082, (fix.type)=QTY];
	optional sfixed32 secondary_display_qty_exponent = 14;
}

enum TradingSessionIdEnum {
	TRADING_SESSION_ID_AFTER_HOURS = 0			[(fix.enum_value)="6"];
	TRADING_SESSION_ID_AFTERNOON = 1			[(fix.enum_value)="4"];
	TRADING_SESSION_ID_DAY = 2				[(fix.enum_value)="1"];
	TRADING_SESSION_ID_EVENING = 3				[(fix.enum_value)="5"];
	TRADING_SESSION_ID_HALF_DAY = 4				[(fix.enum_value)="2"];
	TRADING_SESSION_ID_MORNING = 5				[(fix.enum_value)="3"];
}

enum TradingSessionSubIdEnum {
	TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION = 0	[(fix.enum_value)="4"];
	TRADING_SESSION_SUB_ID_CONTINUOUS = 1			[(fix.enum_value)="3"];
	TRADING_SESSION_SUB_ID_INTRADAY_AUCTION = 2		[(fix.enum_value)="6"];
	TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION = 3	[(fix.enum_value)="2"];
	TRADING_SESSION_SUB_ID_POST_TRADING = 4			[(fix.enum_value)="5"];
	TRADING_SESSION_SUB_ID_PRE_TRADING = 5			[(fix.enum_value)="1"];
	TRADING_SESSION_SUB_ID_QUIESCENT = 6			[(fix.enum_value)="7"];
}

message TradingSessionIdUnion {
	optional TradingSessionIdEnum trading_session_id = 1;
	optional sfixed64 trading_session_id_sfixed64 = 2;
}

message TradingSessionSubIdUnion {
	optional TradingSessionSubIdEnum trading_session_sub_id = 1;
	optional sfixed64 trading_session_sub_id_sfixed64 = 2;
}

message TrdgSesGrp {
	optional TradingSessionIdEnum trading_session_id = 1	[(fix.tag)=336, (fix.type)=STRING];
	optional TradingSessionSubIdEnum trading_session_sub_id = 2	[(fix.tag)=625, (fix.type)=STRING];
}

message SecAltIdGrp {
	optional string security_alt_id = 1			[(fix.tag)=455, (fix.type)=STRING];
	optional string security_alt_id_source = 2		[(fix.tag)=456, (fix.type)=STRING];
}

message SecurityXml {
	optional string security_xml = 1			[(fix.tag)=1185, (fix.type)=XML_DATA];
	optional fixed32 security_xml_len = 2			[(fix.tag)=1184, (fix.type)=LENGTH];
	optional string security_xml_schema = 3			[(fix.tag)=1186, (fix.type)=STRING];
}

enum EventTypeEnum {
	EVENT_TYPE_CALL = 0					[(fix.enum_value)="2"];
	EVENT_TYPE_OTHER = 1					[(fix.enum_value)="99"];
	EVENT_TYPE_PUT = 2					[(fix.enum_value)="1"];
	EVENT_TYPE_SINKING_FUND_CALL = 3			[(fix.enum_value)="4"];
	EVENT_TYPE_TENDER = 4					[(fix.enum_value)="3"];
	EVENT_TYPE_ACTIVATION = 5				[(fix.enum_value)="5"];
	EVENT_TYPE_INACTIVIATION = 6				[(fix.enum_value)="6"];
	EVENT_TYPE_LAST_ELIGIBLE_TRADE_DATE = 7			[(fix.enum_value)="7"];
	EVENT_TYPE_FINAL_INVENTORY_DUE_DATE = 8			[(fix.enum_value)="16"];
	EVENT_TYPE_FIRST_DELIVERY_DATE = 9			[(fix.enum_value)="13"];
	EVENT_TYPE_FIRST_INTENT_DATE = 10			[(fix.enum_value)="17"];
	EVENT_TYPE_INITIAL_INVENTORY_DUE_DATE = 11		[(fix.enum_value)="15"];
	EVENT_TYPE_LAST_DELIVERY_DATE = 12			[(fix.enum_value)="14"];
	EVENT_TYPE_LAST_INTENT_DATE = 13			[(fix.enum_value)="18"];
	EVENT_TYPE_POSITION_REMOVAL_DATE = 14			[(fix.enum_value)="19"];
	EVENT_TYPE_SWAP_END_DATE = 15				[(fix.enum_value)="9"];
	EVENT_TYPE_SWAP_NEXT_ROLL_DATE = 16			[(fix.enum_value)="12"];
	EVENT_TYPE_SWAP_NEXT_START_DATE = 17			[(fix.enum_value)="11"];
	EVENT_TYPE_SWAP_ROLL_DATE = 18				[(fix.enum_value)="10"];
	EVENT_TYPE_SWAP_START_DATE = 19				[(fix.enum_value)="8"];
}

message EventTypeUnion {
	optional EventTypeEnum event_type = 1;
	optional sfixed64 event_type_sfixed64 = 2;
}

message EvntGrp {
	optional sfixed32 event_date = 1			[(fix.tag)=866, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 event_px = 2				[(fix.tag)=867, (fix.type)=PRICE];
	optional sfixed32 event_px_exponent = 3;
	optional string event_text = 4				[(fix.tag)=868, (fix.type)=STRING];
	optional EventTypeEnum event_type = 5			[(fix.tag)=865, (fix.type)=INT];
	optional sfixed64 event_time = 6			[(fix.tag)=1145, (fix.type)=UTC_TIMESTAMP];
}

message InstrumentPtysSubGrp {
	optional string instrument_party_sub_id = 1		[(fix.tag)=1053, (fix.type)=STRING];
	optional sfixed64 instrument_party_sub_id_type = 2	[(fix.tag)=1054, (fix.type)=INT];
}

message InstrumentParties {
	optional string instrument_party_id = 1			[(fix.tag)=1019, (fix.type)=STRING];
	optional string instrument_party_id_source = 2		[(fix.tag)=1050, (fix.type)=CHAR];
	optional sfixed64 instrument_party_role = 3		[(fix.tag)=1051, (fix.type)=INT];
	repeated InstrumentPtysSubGrp instrument_ptys_sub_grp = 4	[(fix.tag)=1052];
}

message ComplexEventTimes {
	optional sfixed64 complex_event_end_time = 1		[(fix.tag)=1496, (fix.type)=UTC_TIME_ONLY];
	optional sfixed64 complex_event_start_time = 2		[(fix.tag)=1495, (fix.type)=UTC_TIME_ONLY];
}

message ComplexEventDates {
	optional sfixed64 complex_event_end_date = 1		[(fix.tag)=1493, (fix.type)=UTC_TIMESTAMP];
	optional sfixed64 complex_event_start_date = 2		[(fix.tag)=1492, (fix.type)=UTC_TIMESTAMP];
	repeated ComplexEventTimes complex_event_times = 3	[(fix.tag)=1494];
}

enum ComplexEventTypeEnum {
	COMPLEX_EVENT_TYPE_CAPPED = 0				[(fix.enum_value)="1"];
	COMPLEX_EVENT_TYPE_KNOCK_IN_UP = 1			[(fix.enum_value)="3"];
	COMPLEX_EVENT_TYPE_KNOCK_OUT_DOWN = 2			[(fix.enum_value)="6"];
	COMPLEX_EVENT_TYPE_KNOCK_OUT_UP = 3			[(fix.enum_value)="5"];
	COMPLEX_EVENT_TYPE_KOCK_IN_DOWN = 4			[(fix.enum_value)="4"];
	COMPLEX_EVENT_TYPE_RESET_BARRIER = 5			[(fix.enum_value)="8"];
	COMPLEX_EVENT_TYPE_ROLLING_BARRIER = 6			[(fix.enum_value)="9"];
	COMPLEX_EVENT_TYPE_TRIGGER = 7				[(fix.enum_value)="2"];
	COMPLEX_EVENT_TYPE_UNDERLYING = 8			[(fix.enum_value)="7"];
}

enum ComplexEventPriceBoundaryMethodEnum {
	COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_EQUAL_TO_COMPLEX_EVENT_PRICE = 0	[(fix.enum_value)="3"];
	COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_COMPLEX_EVENT_PRICE = 1	[(fix.enum_value)="5"];
	COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE = 2	[(fix.enum_value)="4"];
	COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_COMPLEX_EVENT_PRICE = 3	[(fix.enum_value)="1"];
	COMPLEX_EVENT_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE = 4	[(fix.enum_value)="2"];
}

enum ComplexEventPriceTimeTypeEnum {
	COMPLEX_EVENT_PRICE_TIME_TYPE_EXPIRATION = 0		[(fix.enum_value)="1"];
	COMPLEX_EVENT_PRICE_TIME_TYPE_IMMEDIATE = 1		[(fix.enum_value)="2"];
	COMPLEX_EVENT_PRICE_TIME_TYPE_SPECIFIED_DATE = 2	[(fix.enum_value)="3"];
}

enum ComplexEventConditionEnum {
	COMPLEX_EVENT_CONDITION_AND = 0				[(fix.enum_value)="1"];
	COMPLEX_EVENT_CONDITION_OR = 1				[(fix.enum_value)="2"];
}

message ComplexEvents {
	optional ComplexEventConditionEnum complex_event_condition = 1	[(fix.tag)=1490, (fix.type)=INT];
	repeated ComplexEventDates complex_event_dates = 2	[(fix.tag)=1491];
	optional sfixed64 complex_event_price = 3		[(fix.tag)=1486, (fix.type)=PRICE];
	optional sfixed32 complex_event_price_exponent = 4;
	optional ComplexEventPriceBoundaryMethodEnum complex_event_price_boundary_method = 5	[(fix.tag)=1487, (fix.type)=INT];
	optional sfixed64 complex_event_price_boundary_precision = 6	[(fix.tag)=1488, (fix.type)=PERCENTAGE];
	optional sfixed32 complex_event_price_boundary_precision_exponent = 7;
	optional ComplexEventPriceTimeTypeEnum complex_event_price_time_type = 8	[(fix.tag)=1489, (fix.type)=INT];
	optional ComplexEventTypeEnum complex_event_type = 9	[(fix.tag)=1484, (fix.type)=INT];
	optional sfixed64 complex_opt_payout_amount = 10	[(fix.tag)=1485, (fix.type)=AMT];
	optional sfixed32 complex_opt_payout_amount_exponent = 11;
}

enum SymbolSfxEnum {
	SYMBOL_SFX_EUCP_WITH_LUMP_SUM_INTEREST = 0		[(fix.enum_value)="CD"];
	SYMBOL_SFX_WHEN_ISSUED = 1				[(fix.enum_value)="WI"];
}

enum SecurityIdSourceEnum {
	SECURITY_ID_SOURCE_CUSIP = 0				[(fix.enum_value)="1"];
	SECURITY_ID_SOURCE_QUIK = 1				[(fix.enum_value)="3"];
	SECURITY_ID_SOURCE_SEDOL = 2				[(fix.enum_value)="2"];
	SECURITY_ID_SOURCE_ISIN_NUMBER = 3			[(fix.enum_value)="4"];
	SECURITY_ID_SOURCE_RIC_CODE = 4				[(fix.enum_value)="5"];
	SECURITY_ID_SOURCE_ISO_COUNTRY_CODE = 5			[(fix.enum_value)="7"];
	SECURITY_ID_SOURCE_ISO_CURRENCY_CODE = 6		[(fix.enum_value)="6"];
	SECURITY_ID_SOURCE_CONSOLIDATED_TAPE_ASSOCIATION = 7	[(fix.enum_value)="9"];
	SECURITY_ID_SOURCE_EXCHANGE_SYMBOL = 8			[(fix.enum_value)="8"];
	SECURITY_ID_SOURCE_BELGIAN = 9				[(fix.enum_value)="F"];
	SECURITY_ID_SOURCE_BLOOMBERG_SYMBOL = 10		[(fix.enum_value)="A"];
	SECURITY_ID_SOURCE_COMMON = 11				[(fix.enum_value)="G"];
	SECURITY_ID_SOURCE_DUTCH = 12				[(fix.enum_value)="C"];
	SECURITY_ID_SOURCE_SICOVAM = 13				[(fix.enum_value)="E"];
	SECURITY_ID_SOURCE_VALOREN = 14				[(fix.enum_value)="D"];
	SECURITY_ID_SOURCE_WERTPAPIER = 15			[(fix.enum_value)="B"];
	SECURITY_ID_SOURCE_CLEARING_HOUSE = 16			[(fix.enum_value)="H"];
	SECURITY_ID_SOURCE_ISDA_FPML_SPECIFICATION = 17		[(fix.enum_value)="I"];
	SECURITY_ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORITY = 18	[(fix.enum_value)="J"];
	SECURITY_ID_SOURCE_LETTER_OF_CREDIT = 19		[(fix.enum_value)="L"];
	SECURITY_ID_SOURCE_ISDA_FPML_URL = 20			[(fix.enum_value)="K"];
	SECURITY_ID_SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER = 21	[(fix.enum_value)="M"];
}

enum ProductEnum {
	PRODUCT_AGENCY = 0					[(fix.enum_value)="1"];
	PRODUCT_COMMODITY = 1					[(fix.enum_value)="2"];
	PRODUCT_CORPORATE = 2					[(fix.enum_value)="3"];
	PRODUCT_CURRENCY = 3					[(fix.enum_value)="4"];
	PRODUCT_EQUITY = 4					[(fix.enum_value)="5"];
	PRODUCT_GOVERNMENT = 5					[(fix.enum_value)="6"];
	PRODUCT_INDEX = 6					[(fix.enum_value)="7"];
	PRODUCT_LOAN = 7					[(fix.enum_value)="8"];
	PRODUCT_MONEYMARKET = 8					[(fix.enum_value)="9"];
	PRODUCT_MORTGAGE = 9					[(fix.enum_value)="10"];
	PRODUCT_MUNICIPAL = 10					[(fix.enum_value)="11"];
	PRODUCT_OTHER = 11					[(fix.enum_value)="12"];
	PRODUCT_FINANCING = 12					[(fix.enum_value)="13"];
}

enum SecurityTypeEnum {
	SECURITY_TYPE_BANKERS_ACCEPTANCE = 0			[(fix.enum_value)="BA"];
	SECURITY_TYPE_CERTIFICATE_OF_DEPOSIT = 1		[(fix.enum_value)="CD"];
	SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OBLIGATION = 2	[(fix.enum_value)="CMO"];
	SECURITY_TYPE_COMMERCIAL_PAPER = 3			[(fix.enum_value)="CP"];
	SECURITY_TYPE_COMMON_STOCK = 4				[(fix.enum_value)="CS"];
	SECURITY_TYPE_CORPORATE_BOND = 5			[(fix.enum_value)="CORP"];
	SECURITY_TYPE_CORPORATE_PRIVATE_PLACEMENT = 6		[(fix.enum_value)="CPP"];
	SECURITY_TYPE_FOREIGN_EXCHANGE_CONTRACT = 7		[(fix.enum_value)="FOR", (fix.enum_deprecated)=FIX_5_0_SP_1];
	SECURITY_TYPE_FUTURE = 8				[(fix.enum_value)="FUT"];
	SECURITY_TYPE_MISCELLANEOUS_PASS_THROUGH = 9		[(fix.enum_value)="MPT"];
	SECURITY_TYPE_MORTGAGE_INTEREST_ONLY = 10		[(fix.enum_value)="MIO"];
	SECURITY_TYPE_MORTGAGE_PRINCIPAL_ONLY = 11		[(fix.enum_value)="MPO"];
	SECURITY_TYPE_MORTGAGE_PRIVATE_PLACEMENT = 12		[(fix.enum_value)="MPP"];
	SECURITY_TYPE_MUTUAL_FUND = 13				[(fix.enum_value)="MF"];
	SECURITY_TYPE_NO_SECURITY_TYPE = 14			[(fix.enum_value)="NONE"];
	SECURITY_TYPE_OPTION = 15				[(fix.enum_value)="OPT"];
	SECURITY_TYPE_PREFERRED_STOCK = 16			[(fix.enum_value)="PS"];
	SECURITY_TYPE_TIME_DEPOSIT = 17				[(fix.enum_value)="TD"];
	SECURITY_TYPE_US_TREASURY_BILL_OLD = 18			[(fix.enum_value)="USTB", (fix.enum_deprecated)=FIX_4_4];
	SECURITY_TYPE_WARRANT = 19				[(fix.enum_value)="WAR"];
	SECURITY_TYPE_CONVERTIBLE_BOND = 20			[(fix.enum_value)="CB"];
	SECURITY_TYPE_IOETTEMORTGAGE = 21			[(fix.enum_value)="IET"];
	SECURITY_TYPE_WILDCARD = 22				[(fix.enum_value)="?"];
	SECURITY_TYPE_AMENDED = 23				[(fix.enum_value)="AMENDED"];
	SECURITY_TYPE_ASSET_BACKED_SECURITIES = 24		[(fix.enum_value)="ABS"];
	SECURITY_TYPE_BANK_NOTES = 25				[(fix.enum_value)="BN"];
	SECURITY_TYPE_BILL_OF_EXCHANGES = 26			[(fix.enum_value)="BOX"];
	SECURITY_TYPE_BRADY_BOND = 27				[(fix.enum_value)="BRADY"];
	SECURITY_TYPE_BRIDGE_LOAN = 28				[(fix.enum_value)="BRIDGE"];
	SECURITY_TYPE_CALL_LOANS = 29				[(fix.enum_value)="CL"];
	SECURITY_TYPE_CERTIFICATE_OF_OBLIGATION = 30		[(fix.enum_value)="COFO"];
	SECURITY_TYPE_CERTIFICATE_OF_PARTICIPATION = 31		[(fix.enum_value)="COFP"];
	SECURITY_TYPE_CORP = 32					[(fix.enum_value)="CMBS"];
	SECURITY_TYPE_DEBTOR_IN_POSSESSION = 33			[(fix.enum_value)="DINP"];
	SECURITY_TYPE_DEFAULTED = 34				[(fix.enum_value)="DEFLTED"];
	SECURITY_TYPE_DEPOSIT_NOTES = 35			[(fix.enum_value)="DN"];
	SECURITY_TYPE_DUAL_CURRENCY = 36			[(fix.enum_value)="DUAL"];
	SECURITY_TYPE_EXTENDED_COMM_NOTE = 37			[(fix.enum_value)="XCN"];
	SECURITY_TYPE_FEDERAL_AGENCY_COUPON = 38		[(fix.enum_value)="FAC"];
	SECURITY_TYPE_FEDERAL_AGENCY_DISCOUNT_NOTE = 39		[(fix.enum_value)="FADN"];
	SECURITY_TYPE_GENERAL_OBLIGATION_BONDS = 40		[(fix.enum_value)="GO"];
	SECURITY_TYPE_INDEXED_LINKED = 41			[(fix.enum_value)="XLINKD"];
	SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = 42	[(fix.enum_value)="TINT"];
	SECURITY_TYPE_LETTER_OF_CREDIT = 43			[(fix.enum_value)="LOFC"];
	SECURITY_TYPE_LIQUIDITY_NOTE = 44			[(fix.enum_value)="LQN"];
	SECURITY_TYPE_MANDATORY_TENDER = 45			[(fix.enum_value)="MT"];
	SECURITY_TYPE_MATURED = 46				[(fix.enum_value)="MATURED"];
	SECURITY_TYPE_MEDIUM_TERM_NOTES = 47			[(fix.enum_value)="MTN"];
	SECURITY_TYPE_MORTGAGE_BACKED_SECURITIES = 48		[(fix.enum_value)="MBS"];
	SECURITY_TYPE_MULTILEG_INSTRUMENT = 49			[(fix.enum_value)="MLEG"];
	SECURITY_TYPE_OTHER_ANTICIPATION_NOTES = 50		[(fix.enum_value)="AN"];
	SECURITY_TYPE_OVERNIGHT = 51				[(fix.enum_value)="ONITE"];
	SECURITY_TYPE_PLAZOS_FIJOS = 52				[(fix.enum_value)="PZFJ"];
	SECURITY_TYPE_PRINCIPAL_STRIP_FROM_ANON_CALLABLE_BOND_OR_NOTE = 53	[(fix.enum_value)="TPRN"];
	SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALLABLE_BOND_OR_NOTE = 54	[(fix.enum_value)="TCAL"];
	SECURITY_TYPE_PRIVATE_EXPORT_FUNDING = 55		[(fix.enum_value)="PEF"];
	SECURITY_TYPE_PROMISSORY_NOTE = 56			[(fix.enum_value)="PN"];
	SECURITY_TYPE_REPLACED = 57				[(fix.enum_value)="REPLACD"];
	SECURITY_TYPE_RETIRED = 58				[(fix.enum_value)="RETIRED"];
	SECURITY_TYPE_REVENUE_ANTICIPATION_NOTE = 59		[(fix.enum_value)="RAN"];
	SECURITY_TYPE_REVENUE_BONDS = 60			[(fix.enum_value)="REV"];
	SECURITY_TYPE_REVOLVER = 61				[(fix.enum_value)="RVLVTRM"];
	SECURITY_TYPE_REVOLVER_LOAN = 62			[(fix.enum_value)="RVLV"];
	SECURITY_TYPE_SHORT_TERM_LOAN_NOTE = 63			[(fix.enum_value)="STN"];
	SECURITY_TYPE_SPECIAL_ASSESSMENT = 64			[(fix.enum_value)="SPCLA"];
	SECURITY_TYPE_SPECIAL_OBLIGATION = 65			[(fix.enum_value)="SPCLO"];
	SECURITY_TYPE_SPECIAL_TAX = 66				[(fix.enum_value)="SPCLT"];
	SECURITY_TYPE_STRUCTURED_NOTES = 67			[(fix.enum_value)="STRUCT"];
	SECURITY_TYPE_SWING_LINE_FACILITY = 68			[(fix.enum_value)="SWING"];
	SECURITY_TYPE_TAX_ALLOCATION = 69			[(fix.enum_value)="TAXA"];
	SECURITY_TYPE_TAX_ANTICIPATION_NOTE = 70		[(fix.enum_value)="TAN"];
	SECURITY_TYPE_TAX_EXEMPT_COMMERCIAL_PAPER = 71		[(fix.enum_value)="TECP"];
	SECURITY_TYPE_TAX_REVENUE_ANTICIPATION_NOTE = 72	[(fix.enum_value)="TRAN"];
	SECURITY_TYPE_TERM_LOAN = 73				[(fix.enum_value)="TERM"];
	SECURITY_TYPE_TO_BE_ANNOUNCED = 74			[(fix.enum_value)="TBA"];
	SECURITY_TYPE_TREASURY_INFLATION_PROTECTED_SECURITIES = 75	[(fix.enum_value)="TIPS"];
	SECURITY_TYPE_US_TREASURY_BOND = 76			[(fix.enum_value)="TBOND"];
	SECURITY_TYPE_US_TREASURY_NOTE_OLD = 77			[(fix.enum_value)="UST", (fix.enum_deprecated)=FIX_4_4];
	SECURITY_TYPE_VARIABLE_RATE_DEMAND_NOTE = 78		[(fix.enum_value)="VRDN"];
	SECURITY_TYPE_WITHDRAWN = 79				[(fix.enum_value)="WITHDRN"];
	SECURITY_TYPE_YANKEE_CORPORATE_BOND = 80		[(fix.enum_value)="YANK"];
	SECURITY_TYPE_BUY_SELLBACK = 81				[(fix.enum_value)="BUYSELL"];
	SECURITY_TYPE_EURO_CERTIFICATE_OF_DEPOSIT = 82		[(fix.enum_value)="EUCD"];
	SECURITY_TYPE_EURO_COMMERCIAL_PAPER = 83		[(fix.enum_value)="EUCP"];
	SECURITY_TYPE_EURO_CORPORATE_BOND = 84			[(fix.enum_value)="EUCORP"];
	SECURITY_TYPE_EURO_SOVEREIGNS = 85			[(fix.enum_value)="EUSOV"];
	SECURITY_TYPE_EURO_SUPRANATIONAL_COUPONS = 86		[(fix.enum_value)="EUSUPRA"];
	SECURITY_TYPE_FORWARD = 87				[(fix.enum_value)="FORWARD"];
	SECURITY_TYPE_PFANDBRIEFE = 88				[(fix.enum_value)="PFAND"];
	SECURITY_TYPE_REPURCHASE = 89				[(fix.enum_value)="REPO"];
	SECURITY_TYPE_SECURITIES_LOAN = 90			[(fix.enum_value)="SECLOAN"];
	SECURITY_TYPE_SECURITIES_PLEDGE = 91			[(fix.enum_value)="SECPLEDGE"];
	SECURITY_TYPE_USD_SUPRANATIONAL_COUPONS = 92		[(fix.enum_value)="SUPRA"];
	SECURITY_TYPE_US_TREASURY_BILL = 93			[(fix.enum_value)="TBILL"];
	SECURITY_TYPE_US_TREASURY_NOTE = 94			[(fix.enum_value)="TNOTE"];
	SECURITY_TYPE_YANKEE_CERTIFICATE_OF_DEPOSIT = 95	[(fix.enum_value)="YCD"];
	SECURITY_TYPE_OPTIONS_ON_FUTURES = 96			[(fix.enum_value)="OOF"];
	SECURITY_TYPE_OPTIONS_ON_PHYSICAL = 97			[(fix.enum_value)="OOP"];
	SECURITY_TYPE_CASH = 98					[(fix.enum_value)="CASH"];
	SECURITY_TYPE_OPTIONS_ON_COMBO = 99			[(fix.enum_value)="OOC"];
	SECURITY_TYPE_INTEREST_RATE_SWAP = 100			[(fix.enum_value)="IRS"];
	SECURITY_TYPE_BANK_DEPOSITORY_NOTE = 101		[(fix.enum_value)="BDN"];
	SECURITY_TYPE_CANADIAN_MONEY_MARKETS = 102		[(fix.enum_value)="CAMM"];
	SECURITY_TYPE_CANADIAN_MORTGAGE_BONDS = 103		[(fix.enum_value)="CMB"];
	SECURITY_TYPE_CANADIAN_PROVINCIAL_BONDS = 104		[(fix.enum_value)="PROV"];
	SECURITY_TYPE_CANADIAN_TREASURY_BILLS = 105		[(fix.enum_value)="CTB"];
	SECURITY_TYPE_CANADIAN_TREASURY_NOTES = 106		[(fix.enum_value)="CAN"];
	SECURITY_TYPE_CREDIT_DEFAULT_SWAP = 107			[(fix.enum_value)="CDS"];
	SECURITY_TYPE_EURO_CORPORATE_FLOATING_RATE_NOTES = 108	[(fix.enum_value)="EUFRN"];
	SECURITY_TYPE_SECURED_LIQUIDITY_NOTE = 109		[(fix.enum_value)="SLQN"];
	SECURITY_TYPE_TAXABLE_MUNICIPAL_CP = 110		[(fix.enum_value)="TMCP"];
	SECURITY_TYPE_TERM_LIQUIDITY_NOTE = 111			[(fix.enum_value)="TLQN"];
	SECURITY_TYPE_TREASURY_BILL = 112			[(fix.enum_value)="TB"];
	SECURITY_TYPE_US_CORPORATE_FLOATING_RATE_NOTES = 113	[(fix.enum_value)="FRN"];
	SECURITY_TYPE_FX_FORWARD = 114				[(fix.enum_value)="FXFWD"];
	SECURITY_TYPE_FX_SPOT = 115				[(fix.enum_value)="FXSPOT"];
	SECURITY_TYPE_FX_SWAP = 116				[(fix.enum_value)="FXSWAP"];
	SECURITY_TYPE_NON_DELIVERABLE_FORWARD = 117		[(fix.enum_value)="FXNDF"];
}

enum SecurityStatusEnum {
	SECURITY_STATUS_ACTIVE = 0				[(fix.enum_value)="1"];
	SECURITY_STATUS_INACTIVE = 1				[(fix.enum_value)="2"];
}

enum RestructuringTypeEnum {
	RESTRUCTURING_TYPE_FULL_RESTRUCTURING = 0		[(fix.enum_value)="FR"];
	RESTRUCTURING_TYPE_MODIFIED_MOD_RESTRUCTURING = 1	[(fix.enum_value)="MM"];
	RESTRUCTURING_TYPE_MODIFIED_RESTRUCTURING = 2		[(fix.enum_value)="MR"];
	RESTRUCTURING_TYPE_NO_RESTRUCTURING_SPECIFIED = 3	[(fix.enum_value)="XR"];
}

enum SeniorityEnum {
	SENIORITY_SENIOR = 0					[(fix.enum_value)="SR"];
	SENIORITY_SENIOR_SECURED = 1				[(fix.enum_value)="SD"];
	SENIORITY_SUBORDINATED = 2				[(fix.enum_value)="SB"];
}

enum StrikePriceDeterminationMethodEnum {
	STRIKE_PRICE_DETERMINATION_METHOD_FIXED_STRIKE = 0	[(fix.enum_value)="1"];
	STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_AT_EXPIRATION = 1	[(fix.enum_value)="2"];
	STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE = 2	[(fix.enum_value)="3"];
	STRIKE_PRICE_DETERMINATION_METHOD_STRIKE_SET_TO_OPTIMAL_VALUE = 3	[(fix.enum_value)="4"];
}

enum StrikePriceBoundaryMethodEnum {
	STRIKE_PRICE_BOUNDARY_METHOD_EQUAL = 0			[(fix.enum_value)="3"];
	STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN = 1		[(fix.enum_value)="5"];
	STRIKE_PRICE_BOUNDARY_METHOD_GREATER_THAN_OR_EQUAL = 2	[(fix.enum_value)="4"];
	STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN = 3		[(fix.enum_value)="1"];
	STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN_OR_EQUAL = 4	[(fix.enum_value)="2"];
}

enum UnderlyingPriceDeterminationMethodEnum {
	UNDERLYING_PRICE_DETERMINATION_METHOD_OPTIMAL_VALUE = 0	[(fix.enum_value)="3"];
	UNDERLYING_PRICE_DETERMINATION_METHOD_REGULAR = 1	[(fix.enum_value)="1"];
	UNDERLYING_PRICE_DETERMINATION_METHOD_SPECIAL_REFERENCE = 2	[(fix.enum_value)="2"];
}

enum ContractMultiplierUnitEnum {
	CONTRACT_MULTIPLIER_UNIT_DAYS = 0			[(fix.enum_value)="2"];
	CONTRACT_MULTIPLIER_UNIT_HOURS = 1			[(fix.enum_value)="1"];
	CONTRACT_MULTIPLIER_UNIT_SHARES = 2			[(fix.enum_value)="0"];
}

enum FlowScheduleTypeEnum {
	FLOW_SCHEDULE_TYPE_NERC_CALENDAR_ALL_DAYS_IN_MONTH = 0	[(fix.enum_value)="2"];
	FLOW_SCHEDULE_TYPE_NERC_EASTERN_OFF_PEAK = 1		[(fix.enum_value)="0"];
	FLOW_SCHEDULE_TYPE_NERC_EASTERN_PEAK = 2		[(fix.enum_value)="3"];
	FLOW_SCHEDULE_TYPE_NERC_WESTERN_OFF_PEAK = 3		[(fix.enum_value)="1"];
	FLOW_SCHEDULE_TYPE_NERC_WESTERN_PEAK = 4		[(fix.enum_value)="4"];
}

enum UnitOfMeasureEnum {
	UNIT_OF_MEASURE_BARRELS = 0				[(fix.enum_value)="Bbl"];
	UNIT_OF_MEASURE_BILLION_CUBIC_FEET = 1			[(fix.enum_value)="Bcf"];
	UNIT_OF_MEASURE_BUSHELS = 2				[(fix.enum_value)="Bu"];
	UNIT_OF_MEASURE_GALLONS = 3				[(fix.enum_value)="Gal"];
	UNIT_OF_MEASURE_MEGAWATT_HOURS = 4			[(fix.enum_value)="MWh"];
	UNIT_OF_MEASURE_METRIC_TONS = 5				[(fix.enum_value)="t"];
	UNIT_OF_MEASURE_MILLION_BARRELS = 6			[(fix.enum_value)="MMbbl", (fix.enum_deprecated)=FIX_5_0_SP_1];
	UNIT_OF_MEASURE_ONE_MILLION_BTU = 7			[(fix.enum_value)="MMBtu"];
	UNIT_OF_MEASURE_POUNDS = 8				[(fix.enum_value)="lbs"];
	UNIT_OF_MEASURE_TONS = 9				[(fix.enum_value)="tn"];
	UNIT_OF_MEASURE_TROY_OUNCES = 10			[(fix.enum_value)="oz_tr"];
	UNIT_OF_MEASURE_USDOLLARS = 11				[(fix.enum_value)="USD"];
	UNIT_OF_MEASURE_ALLOWANCES = 12				[(fix.enum_value)="Alw"];
}

enum SettlMethodEnum {
	SETTL_METHOD_CASH_SETTLEMENT_REQUIRED = 0		[(fix.enum_value)="C"];
	SETTL_METHOD_PHYSICAL_SETTLEMENT_REQUIRED = 1		[(fix.enum_value)="P"];
}

enum ExerciseStyleEnum {
	EXERCISE_STYLE_AMERICAN = 0				[(fix.enum_value)="1"];
	EXERCISE_STYLE_BERMUDA = 1				[(fix.enum_value)="2"];
	EXERCISE_STYLE_EUROPEAN = 2				[(fix.enum_value)="0"];
}

enum OptPayoutTypeEnum {
	OPT_PAYOUT_TYPE_BINARY = 0				[(fix.enum_value)="3"];
	OPT_PAYOUT_TYPE_CAPPED = 1				[(fix.enum_value)="2"];
	OPT_PAYOUT_TYPE_VANILLA = 2				[(fix.enum_value)="1"];
}

enum PriceQuoteMethodEnum {
	PRICE_QUOTE_METHOD_INDEX = 0				[(fix.enum_value)="INX"];
	PRICE_QUOTE_METHOD_INTEREST_RATE_INDEX = 1		[(fix.enum_value)="INT"];
	PRICE_QUOTE_METHOD_STANDARD = 2				[(fix.enum_value)="STD"];
	PRICE_QUOTE_METHOD_PERCENT_OF_PAR = 3			[(fix.enum_value)="PCTPAR"];
}

enum ValuationMethodEnum {
	VALUATION_METHOD_FUTURES_STYLE_MARK_TO_MARKET = 0	[(fix.enum_value)="FUT"];
	VALUATION_METHOD_FUTURES_STYLE_WITH_AN_ATTACHED_CASH_ADJUSTMENT = 1	[(fix.enum_value)="FUTDA"];
	VALUATION_METHOD_PREMIUM_STYLE = 2			[(fix.enum_value)="EQTY"];
	VALUATION_METHOD_CDS_IN_DELIVERY_USE_RECOVERY_RATE_TO_CALCULATE = 3	[(fix.enum_value)="CDSD"];
	VALUATION_METHOD_CDS_STYLE_COLLATERALIZATION = 4	[(fix.enum_value)="CDS"];
}

enum ListMethodEnum {
	LIST_METHOD_PRE_LISTED_ONLY = 0				[(fix.enum_value)="0"];
	LIST_METHOD_USER_REQUESTED = 1				[(fix.enum_value)="1"];
}

enum PutOrCallEnum {
	PUT_OR_CALL_CALL = 0					[(fix.enum_value)="1"];
	PUT_OR_CALL_PUT = 1					[(fix.enum_value)="0"];
}

enum TimeUnitEnum {
	TIME_UNIT_DAY = 0					[(fix.enum_value)="D"];
	TIME_UNIT_HOUR = 1					[(fix.enum_value)="H"];
	TIME_UNIT_MINUTE = 2					[(fix.enum_value)="Min"];
	TIME_UNIT_MONTH = 3					[(fix.enum_value)="Mo"];
	TIME_UNIT_SECOND = 4					[(fix.enum_value)="S"];
	TIME_UNIT_WEEK = 5					[(fix.enum_value)="Wk"];
	TIME_UNIT_YEAR = 6					[(fix.enum_value)="Yr"];
}

enum CpProgramEnum {
	CP_PROGRAM_OTHER = 0					[(fix.enum_value)="99"];
	CP_PROGRAM_PROGRAM3A3 = 1				[(fix.enum_value)="1"];
	CP_PROGRAM_PROGRAM42 = 2				[(fix.enum_value)="2"];
}

message StrikePriceDeterminationMethodUnion {
	optional StrikePriceDeterminationMethodEnum strike_price_determination_method = 1;
	optional sfixed64 strike_price_determination_method_sfixed64 = 2;
}

message FlowScheduleTypeUnion {
	optional FlowScheduleTypeEnum flow_schedule_type = 1;
	optional sfixed64 flow_schedule_type_sfixed64 = 2;
}

message CpProgramUnion {
	optional CpProgramEnum cp_program = 1;
	optional sfixed64 cp_program_sfixed64 = 2;
}

message Instrument {
	optional string cfi_code = 1				[(fix.tag)=461, (fix.type)=STRING];
	optional double contract_multiplier = 2			[(fix.tag)=231, (fix.type)=FLOAT];
	optional string country_of_issue = 3			[(fix.tag)=470, (fix.type)=COUNTRY];
	optional sfixed32 coupon_payment_date = 4		[(fix.tag)=224, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 coupon_rate = 5			[(fix.tag)=223, (fix.type)=PERCENTAGE];
	optional sfixed32 coupon_rate_exponent = 6;
	optional string credit_rating = 7			[(fix.tag)=255, (fix.type)=STRING];
	optional bytes encoded_issuer = 8			[(fix.tag)=349, (fix.type)=DATA];
	optional fixed32 encoded_issuer_len = 9			[(fix.tag)=348, (fix.type)=LENGTH];
	optional bytes encoded_security_desc = 10		[(fix.tag)=351, (fix.type)=DATA];
	optional fixed32 encoded_security_desc_len = 11		[(fix.tag)=350, (fix.type)=LENGTH];
	optional double factor = 12				[(fix.tag)=228, (fix.type)=FLOAT];
	optional string instr_registry = 13			[(fix.tag)=543, (fix.type)=STRING];
	optional sfixed32 issue_date = 14			[(fix.tag)=225, (fix.type)=LOCAL_MKT_DATE];
	optional string issuer = 15				[(fix.tag)=106, (fix.type)=STRING];
	optional string locale_of_issue = 16			[(fix.tag)=472, (fix.type)=STRING];
	optional sfixed32 maturity_date = 17			[(fix.tag)=541, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed32 maturity_month_year = 18		[(fix.tag)=200, (fix.type)=MONTH_YEAR];
	optional string opt_attribute = 19			[(fix.tag)=206, (fix.type)=CHAR];
	optional ProductEnum product = 20			[(fix.tag)=460, (fix.type)=INT];
	optional sfixed32 redemption_date = 21			[(fix.tag)=240, (fix.type)=LOCAL_MKT_DATE, (fix.field_deprecated)=FIX_4_4];
	optional string repo_collateral_security_type = 22	[(fix.tag)=239, (fix.type)=STRING, (fix.field_deprecated)=FIX_4_4];
	optional sfixed64 repurchase_rate = 23			[(fix.tag)=227, (fix.type)=PERCENTAGE, (fix.field_deprecated)=FIX_4_4];
	optional sfixed32 repurchase_rate_exponent = 24;
	optional sfixed64 repurchase_term = 25			[(fix.tag)=226, (fix.type)=INT, (fix.field_deprecated)=FIX_4_4];
	optional string security_desc = 26			[(fix.tag)=107, (fix.type)=STRING];
	optional string security_exchange = 27			[(fix.tag)=207, (fix.type)=EXCHANGE];
	optional string security_id = 28			[(fix.tag)=48, (fix.type)=STRING];
	optional SecurityIdSourceEnum security_id_source = 29	[(fix.tag)=22, (fix.type)=STRING];
	optional SecurityTypeEnum security_type = 30		[(fix.tag)=167, (fix.type)=STRING];
	optional string state_or_province_of_issue = 31		[(fix.tag)=471, (fix.type)=STRING];
	optional sfixed64 strike_price = 32			[(fix.tag)=202, (fix.type)=PRICE];
	optional sfixed32 strike_price_exponent = 33;
	optional string symbol = 34				[(fix.tag)=55, (fix.type)=STRING];
	optional SymbolSfxEnum symbol_sfx = 35			[(fix.tag)=65, (fix.type)=STRING];
	optional CpProgramEnum cp_program = 36			[(fix.tag)=875, (fix.type)=INT];
	optional string cp_reg_type = 37			[(fix.tag)=876, (fix.type)=STRING];
	optional sfixed32 contract_settl_month = 38		[(fix.tag)=667, (fix.type)=MONTH_YEAR];
	optional sfixed32 dated_date = 39			[(fix.tag)=873, (fix.type)=LOCAL_MKT_DATE];
	repeated EvntGrp evnt_grp = 40				[(fix.tag)=864];
	optional string instrmt_assignment_method = 41		[(fix.tag)=1049, (fix.type)=CHAR];
	repeated InstrumentParties instrument_parties = 42	[(fix.tag)=1018];
	optional sfixed32 interest_accrual_date = 43		[(fix.tag)=874, (fix.type)=LOCAL_MKT_DATE];
	optional string maturity_time = 44			[(fix.tag)=1079, (fix.type)=TZ_TIME_ONLY];
	optional double min_price_increment = 45		[(fix.tag)=969, (fix.type)=FLOAT];
	optional sfixed64 nt_position_limit = 46		[(fix.tag)=971, (fix.type)=INT];
	optional string pool = 47				[(fix.tag)=691, (fix.type)=STRING];
	optional sfixed64 position_limit = 48			[(fix.tag)=970, (fix.type)=INT];
	optional PutOrCallEnum put_or_call = 49			[(fix.tag)=201, (fix.type)=INT];
	repeated SecAltIdGrp sec_alt_id_grp = 50		[(fix.tag)=454];
	optional SecurityStatusEnum security_status = 51	[(fix.tag)=965, (fix.type)=STRING];
	optional string security_sub_type = 52			[(fix.tag)=762, (fix.type)=STRING];
	optional string settle_on_open_flag = 53		[(fix.tag)=966, (fix.type)=STRING];
	optional string strike_currency = 54			[(fix.tag)=947, (fix.type)=CURRENCY];
	optional double strike_multiplier = 55			[(fix.tag)=967, (fix.type)=FLOAT];
	optional double strike_value = 56			[(fix.tag)=968, (fix.type)=FLOAT];
	optional TimeUnitEnum time_unit = 57			[(fix.tag)=997, (fix.type)=STRING];
	optional UnitOfMeasureEnum unit_of_measure = 58		[(fix.tag)=996, (fix.type)=STRING];
	optional sfixed64 cap_price = 59			[(fix.tag)=1199, (fix.type)=PRICE];
	optional sfixed32 cap_price_exponent = 60;
	optional ExerciseStyleEnum exercise_style = 61		[(fix.tag)=1194, (fix.type)=INT];
	optional bool flex_product_eligibility_indicator = 62	[(fix.tag)=1242, (fix.type)=BOOLEAN];
	optional bool flexible_indicator = 63			[(fix.tag)=1244, (fix.type)=BOOLEAN];
	optional sfixed64 floor_price = 64			[(fix.tag)=1200, (fix.type)=PRICE];
	optional sfixed32 floor_price_exponent = 65;
	optional ListMethodEnum list_method = 66		[(fix.tag)=1198, (fix.type)=INT];
	optional sfixed64 min_price_increment_amount = 67	[(fix.tag)=1146, (fix.type)=AMT];
	optional sfixed32 min_price_increment_amount_exponent = 68;
	optional sfixed64 opt_payout_amount = 69		[(fix.tag)=1195, (fix.type)=AMT];
	optional sfixed32 opt_payout_amount_exponent = 70;
	optional PriceQuoteMethodEnum price_quote_method = 71	[(fix.tag)=1196, (fix.type)=STRING];
	optional string price_unit_of_measure = 72		[(fix.tag)=1191, (fix.type)=STRING];
	optional sfixed64 price_unit_of_measure_qty = 73	[(fix.tag)=1192, (fix.type)=QTY];
	optional sfixed32 price_unit_of_measure_qty_exponent = 74;
	optional string product_complex = 75			[(fix.tag)=1227, (fix.type)=STRING];
	optional string security_group = 76			[(fix.tag)=1151, (fix.type)=STRING];
	optional SecurityXml security_xml = 77			[(fix.field_added)=FIX_5_0];
	optional SettlMethodEnum settl_method = 78		[(fix.tag)=1193, (fix.type)=CHAR];
	optional sfixed64 unit_of_measure_qty = 79		[(fix.tag)=1147, (fix.type)=QTY];
	optional sfixed32 unit_of_measure_qty_exponent = 80;
	optional ValuationMethodEnum valuation_method = 81	[(fix.tag)=1197, (fix.type)=STRING];
	optional ContractMultiplierUnitEnum contract_multiplier_unit = 82	[(fix.tag)=1435, (fix.type)=INT];
	optional FlowScheduleTypeEnum flow_schedule_type = 83	[(fix.tag)=1439, (fix.type)=INT];
	optional sfixed64 attachment_point = 84			[(fix.tag)=1457, (fix.type)=PERCENTAGE];
	optional sfixed32 attachment_point_exponent = 85;
	optional sfixed64 detachment_point = 86			[(fix.tag)=1458, (fix.type)=PERCENTAGE];
	optional sfixed32 detachment_point_exponent = 87;
	optional sfixed64 notional_percentage_outstanding = 88	[(fix.tag)=1451, (fix.type)=PERCENTAGE];
	optional sfixed32 notional_percentage_outstanding_exponent = 89;
	optional sfixed64 original_notional_percentage_outstanding = 90	[(fix.tag)=1452, (fix.type)=PERCENTAGE];
	optional sfixed32 original_notional_percentage_outstanding_exponent = 91;
	optional RestructuringTypeEnum restructuring_type = 92	[(fix.tag)=1449, (fix.type)=STRING];
	optional SeniorityEnum seniority = 93			[(fix.tag)=1450, (fix.type)=STRING];
	repeated ComplexEvents complex_events = 94		[(fix.tag)=1483];
	optional OptPayoutTypeEnum opt_payout_type = 95		[(fix.tag)=1482, (fix.type)=INT];
	optional StrikePriceBoundaryMethodEnum strike_price_boundary_method = 96	[(fix.tag)=1479, (fix.type)=INT];
	optional sfixed64 strike_price_boundary_precision = 97	[(fix.tag)=1480, (fix.type)=PERCENTAGE];
	optional sfixed32 strike_price_boundary_precision_exponent = 98;
	optional StrikePriceDeterminationMethodEnum strike_price_determination_method = 99	[(fix.tag)=1478, (fix.type)=INT];
	optional UnderlyingPriceDeterminationMethodEnum underlying_price_determination_method = 100	[(fix.tag)=1481, (fix.type)=INT];
}

enum TerminationTypeEnum {
	TERMINATION_TYPE_FLEXIBLE = 0				[(fix.enum_value)="3"];
	TERMINATION_TYPE_OPEN = 1				[(fix.enum_value)="4"];
	TERMINATION_TYPE_OVERNIGHT = 2				[(fix.enum_value)="1"];
	TERMINATION_TYPE_TERM = 3				[(fix.enum_value)="2"];
}

enum DeliveryTypeEnum {
	DELIVERY_TYPE_FREE = 0					[(fix.enum_value)="1"];
	DELIVERY_TYPE_HOLD_IN_CUSTODY = 1			[(fix.enum_value)="3"];
	DELIVERY_TYPE_TRI_PARTY = 2				[(fix.enum_value)="2"];
	DELIVERY_TYPE_VERSUS_PAYMENT = 3			[(fix.enum_value)="0"];
}

message FinancingDetails {
	optional string agreement_currency = 1			[(fix.tag)=918, (fix.type)=CURRENCY];
	optional sfixed32 agreement_date = 2			[(fix.tag)=915, (fix.type)=LOCAL_MKT_DATE];
	optional string agreement_desc = 3			[(fix.tag)=913, (fix.type)=STRING];
	optional string agreement_id = 4			[(fix.tag)=914, (fix.type)=STRING];
	optional DeliveryTypeEnum delivery_type = 5		[(fix.tag)=919, (fix.type)=INT];
	optional sfixed32 end_date = 6				[(fix.tag)=917, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 margin_ratio = 7			[(fix.tag)=898, (fix.type)=PERCENTAGE];
	optional sfixed32 margin_ratio_exponent = 8;
	optional sfixed32 start_date = 9			[(fix.tag)=916, (fix.type)=LOCAL_MKT_DATE];
	optional TerminationTypeEnum termination_type = 10	[(fix.tag)=788, (fix.type)=INT];
}

message UndSecAltIdGrp {
	optional string underlying_security_alt_id = 1		[(fix.tag)=458, (fix.type)=STRING];
	optional string underlying_security_alt_id_source = 2	[(fix.tag)=459, (fix.type)=STRING];
}

message UnderlyingStipulations {
	optional string underlying_stip_type = 1		[(fix.tag)=888, (fix.type)=STRING];
	optional string underlying_stip_value = 2		[(fix.tag)=889, (fix.type)=STRING];
}

message UndlyInstrumentPtysSubGrp {
	optional string underlying_instrument_party_sub_id = 1	[(fix.tag)=1063, (fix.type)=STRING];
	optional sfixed64 underlying_instrument_party_sub_id_type = 2	[(fix.tag)=1064, (fix.type)=INT];
}

message UndlyInstrumentParties {
	optional string underlying_instrument_party_id = 1	[(fix.tag)=1059, (fix.type)=STRING];
	optional string underlying_instrument_party_id_source = 2	[(fix.tag)=1060, (fix.type)=CHAR];
	optional sfixed64 underlying_instrument_party_role = 3	[(fix.tag)=1061, (fix.type)=INT];
	repeated UndlyInstrumentPtysSubGrp undly_instrument_ptys_sub_grp = 4	[(fix.tag)=1062];
}

enum UnderlyingSettlementTypeEnum {
	UNDERLYING_SETTLEMENT_TYPE_TPLUS1 = 0			[(fix.enum_value)="2"];
	UNDERLYING_SETTLEMENT_TYPE_TPLUS3 = 1			[(fix.enum_value)="4"];
	UNDERLYING_SETTLEMENT_TYPE_TPLUS4 = 2			[(fix.enum_value)="5"];
}

enum UnderlyingCashTypeEnum {
	UNDERLYING_CASH_TYPE_DIFF = 0				[(fix.enum_value)="DIFF"];
	UNDERLYING_CASH_TYPE_FIXED = 1				[(fix.enum_value)="FIXED"];
}

enum UnderlyingFxRateCalcEnum {
	UNDERLYING_FX_RATE_CALC_DIVIDE = 0			[(fix.enum_value)="D"];
	UNDERLYING_FX_RATE_CALC_MULTIPLY = 1			[(fix.enum_value)="M"];
}

message UnderlyingFlowScheduleTypeUnion {
	optional sfixed64 underlying_flow_schedule_type = 1; // No enums for this field were found in source repository.
	optional sfixed64 underlying_flow_schedule_type_sfixed64 = 2;
}

message UnderlyingInstrument {
	optional bytes encoded_underlying_issuer = 1		[(fix.tag)=363, (fix.type)=DATA];
	optional fixed32 encoded_underlying_issuer_len = 2	[(fix.tag)=362, (fix.type)=LENGTH];
	optional bytes encoded_underlying_security_desc = 3	[(fix.tag)=365, (fix.type)=DATA];
	optional fixed32 encoded_underlying_security_desc_len = 4	[(fix.tag)=364, (fix.type)=LENGTH];
	optional string underlying_cfi_code = 5			[(fix.tag)=463, (fix.type)=STRING];
	optional double underlying_contract_multiplier = 6	[(fix.tag)=436, (fix.type)=FLOAT];
	optional string underlying_country_of_issue = 7		[(fix.tag)=592, (fix.type)=COUNTRY];
	optional sfixed32 underlying_coupon_payment_date = 8	[(fix.tag)=241, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 underlying_coupon_rate = 9		[(fix.tag)=435, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_coupon_rate_exponent = 10;
	optional string underlying_credit_rating = 11		[(fix.tag)=256, (fix.type)=STRING];
	optional double underlying_factor = 12			[(fix.tag)=246, (fix.type)=FLOAT];
	optional string underlying_instr_registry = 13		[(fix.tag)=595, (fix.type)=STRING];
	optional sfixed32 underlying_issue_date = 14		[(fix.tag)=242, (fix.type)=LOCAL_MKT_DATE];
	optional string underlying_issuer = 15			[(fix.tag)=306, (fix.type)=STRING];
	optional string underlying_locale_of_issue = 16		[(fix.tag)=594, (fix.type)=STRING];
	optional sfixed32 underlying_maturity_date = 17		[(fix.tag)=542, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed32 underlying_maturity_month_year = 18	[(fix.tag)=313, (fix.type)=MONTH_YEAR];
	optional string underlying_opt_attribute = 19		[(fix.tag)=317, (fix.type)=CHAR];
	optional sfixed64 underlying_product = 20		[(fix.tag)=462, (fix.type)=INT];
	optional sfixed64 underlying_put_or_call = 21		[(fix.tag)=315, (fix.type)=INT];
	optional sfixed32 underlying_redemption_date = 22	[(fix.tag)=247, (fix.type)=LOCAL_MKT_DATE, (fix.field_deprecated)=FIX_4_4];
	optional string underlying_repo_collateral_security_type = 23	[(fix.tag)=243, (fix.type)=STRING, (fix.field_deprecated)=FIX_4_4];
	optional sfixed64 underlying_repurchase_rate = 24	[(fix.tag)=245, (fix.type)=PERCENTAGE, (fix.field_deprecated)=FIX_4_4];
	optional sfixed32 underlying_repurchase_rate_exponent = 25;
	optional sfixed64 underlying_repurchase_term = 26	[(fix.tag)=244, (fix.type)=INT, (fix.field_deprecated)=FIX_4_4];
	optional string underlying_security_desc = 27		[(fix.tag)=307, (fix.type)=STRING];
	optional string underlying_security_exchange = 28	[(fix.tag)=308, (fix.type)=EXCHANGE];
	optional string underlying_security_id = 29		[(fix.tag)=309, (fix.type)=STRING];
	optional string underlying_security_id_source = 30	[(fix.tag)=305, (fix.type)=STRING];
	optional string underlying_security_type = 31		[(fix.tag)=310, (fix.type)=STRING];
	optional string underlying_state_or_province_of_issue = 32	[(fix.tag)=593, (fix.type)=STRING];
	optional sfixed64 underlying_strike_price = 33		[(fix.tag)=316, (fix.type)=PRICE];
	optional sfixed32 underlying_strike_price_exponent = 34;
	optional string underlying_symbol = 35			[(fix.tag)=311, (fix.type)=STRING];
	optional string underlying_symbol_sfx = 36		[(fix.tag)=312, (fix.type)=STRING];
	repeated UndSecAltIdGrp und_sec_alt_id_grp = 37		[(fix.tag)=457];
	optional sfixed64 underlying_adjusted_quantity = 38	[(fix.tag)=1044, (fix.type)=QTY];
	optional sfixed32 underlying_adjusted_quantity_exponent = 39;
	optional sfixed64 underlying_allocation_percent = 40	[(fix.tag)=972, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_allocation_percent_exponent = 41;
	optional string underlying_cp_program = 42		[(fix.tag)=877, (fix.type)=STRING];
	optional string underlying_cp_reg_type = 43		[(fix.tag)=878, (fix.type)=STRING];
	optional sfixed64 underlying_cap_value = 44		[(fix.tag)=1038, (fix.type)=AMT];
	optional sfixed32 underlying_cap_value_exponent = 45;
	optional sfixed64 underlying_cash_amount = 46		[(fix.tag)=973, (fix.type)=AMT];
	optional sfixed32 underlying_cash_amount_exponent = 47;
	optional UnderlyingCashTypeEnum underlying_cash_type = 48	[(fix.tag)=974, (fix.type)=STRING];
	optional string underlying_currency = 49		[(fix.tag)=318, (fix.type)=CURRENCY];
	optional sfixed64 underlying_current_value = 50		[(fix.tag)=885, (fix.type)=AMT];
	optional sfixed32 underlying_current_value_exponent = 51;
	optional sfixed64 underlying_dirty_price = 52		[(fix.tag)=882, (fix.type)=PRICE];
	optional sfixed32 underlying_dirty_price_exponent = 53;
	optional sfixed64 underlying_end_price = 54		[(fix.tag)=883, (fix.type)=PRICE];
	optional sfixed32 underlying_end_price_exponent = 55;
	optional sfixed64 underlying_end_value = 56		[(fix.tag)=886, (fix.type)=AMT];
	optional sfixed32 underlying_end_value_exponent = 57;
	optional double underlying_fx_rate = 58			[(fix.tag)=1045, (fix.type)=FLOAT];
	optional UnderlyingFxRateCalcEnum underlying_fx_rate_calc = 59	[(fix.tag)=1046, (fix.type)=CHAR];
	optional sfixed64 underlying_px = 60			[(fix.tag)=810, (fix.type)=PRICE];
	optional sfixed32 underlying_px_exponent = 61;
	optional sfixed64 underlying_qty = 62			[(fix.tag)=879, (fix.type)=QTY];
	optional sfixed32 underlying_qty_exponent = 63;
	optional string underlying_security_sub_type = 64	[(fix.tag)=763, (fix.type)=STRING];
	optional string underlying_settl_method = 65		[(fix.tag)=1039, (fix.type)=STRING];
	optional UnderlyingSettlementTypeEnum underlying_settlement_type = 66	[(fix.tag)=975, (fix.type)=INT];
	optional sfixed64 underlying_start_value = 67		[(fix.tag)=884, (fix.type)=AMT];
	optional sfixed32 underlying_start_value_exponent = 68;
	repeated UnderlyingStipulations underlying_stipulations = 69	[(fix.tag)=887];
	optional string underlying_strike_currency = 70		[(fix.tag)=941, (fix.type)=CURRENCY];
	optional string underlying_time_unit = 71		[(fix.tag)=1000, (fix.type)=STRING];
	optional string underlying_unit_of_measure = 72		[(fix.tag)=998, (fix.type)=STRING];
	repeated UndlyInstrumentParties undly_instrument_parties = 73	[(fix.tag)=1058];
	optional sfixed64 underlying_exercise_style = 74	[(fix.tag)=1419, (fix.type)=INT];
	optional string underlying_maturity_time = 75		[(fix.tag)=1213, (fix.type)=TZ_TIME_ONLY];
	optional string underlying_price_unit_of_measure = 76	[(fix.tag)=1424, (fix.type)=STRING];
	optional sfixed64 underlying_price_unit_of_measure_qty = 77	[(fix.tag)=1425, (fix.type)=QTY];
	optional sfixed32 underlying_price_unit_of_measure_qty_exponent = 78;
	optional sfixed64 underlying_unit_of_measure_qty = 79	[(fix.tag)=1423, (fix.type)=QTY];
	optional sfixed32 underlying_unit_of_measure_qty_exponent = 80;
	optional sfixed64 underlying_contract_multiplier_unit = 81	[(fix.tag)=1437, (fix.type)=INT];
	optional sfixed64 underlying_flow_schedule_type = 82	[(fix.tag)=1441, (fix.type)=INT];
	optional sfixed64 underlying_attachment_point = 83	[(fix.tag)=1459, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_attachment_point_exponent = 84;
	optional sfixed64 underlying_detachment_point = 85	[(fix.tag)=1460, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_detachment_point_exponent = 86;
	optional sfixed64 underlying_notional_percentage_outstanding = 87	[(fix.tag)=1455, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_notional_percentage_outstanding_exponent = 88;
	optional sfixed64 underlying_original_notional_percentage_outstanding = 89	[(fix.tag)=1456, (fix.type)=PERCENTAGE];
	optional sfixed32 underlying_original_notional_percentage_outstanding_exponent = 90;
	optional string underlying_restructuring_type = 91	[(fix.tag)=1453, (fix.type)=STRING];
	optional string underlying_seniority = 92		[(fix.tag)=1454, (fix.type)=STRING];
}

message UndInstrmtGrp {
	optional UnderlyingInstrument underlying_instrument = 1	[(fix.field_added)=FIX_4_4];
}

enum StipulationTypeEnum {
	STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPEED = 0		[(fix.enum_value)="ABS"];
	STIPULATION_TYPE_CONSTANT_PREPAYMENT_PENALTY = 1	[(fix.enum_value)="CPP"];
	STIPULATION_TYPE_CONSTANT_PREPAYMENT_RATE = 2		[(fix.enum_value)="CPR"];
	STIPULATION_TYPE_CONSTANT_PREPAYMENT_YIELD = 3		[(fix.enum_value)="CPY"];
	STIPULATION_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMENT_CURVE = 4	[(fix.enum_value)="HEP"];
	STIPULATION_TYPE_GEOGRAPHICS = 5			[(fix.enum_value)="GEOG"];
	STIPULATION_TYPE_ISSUE_DATE = 6				[(fix.enum_value)="ISSUE"];
	STIPULATION_TYPE_LOT_VARIANCE = 7			[(fix.enum_value)="LOTVAR"];
	STIPULATION_TYPE_MATURITY_YEAR_AND_MONTH = 8		[(fix.enum_value)="MAT"];
	STIPULATION_TYPE_MONTHLY_PREPAYMENT_RATE = 9		[(fix.enum_value)="MPR"];
	STIPULATION_TYPE_NUMBER_OF_PIECES = 10			[(fix.enum_value)="PIECES"];
	STIPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_CURVE = 11	[(fix.enum_value)="PSA"];
	STIPULATION_TYPE_PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = 12	[(fix.enum_value)="MHP"];
	STIPULATION_TYPE_PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = 13	[(fix.enum_value)="PPC"];
	STIPULATION_TYPE_POOLS_MAXIMUM = 14			[(fix.enum_value)="PMAX"];
	STIPULATION_TYPE_POOLS_PER_LOT = 15			[(fix.enum_value)="PPL"];
	STIPULATION_TYPE_POOLS_PER_MILLION = 16			[(fix.enum_value)="PPM"];
	STIPULATION_TYPE_POOLS_PER_TRADE = 17			[(fix.enum_value)="PPT"];
	STIPULATION_TYPE_PRODUCTION_YEAR = 18			[(fix.enum_value)="PROD"];
	STIPULATION_TYPE_SINGLE_MONTHLY_MORTALITY = 19		[(fix.enum_value)="SMM"];
	STIPULATION_TYPE_TRADE_VARIANCE = 20			[(fix.enum_value)="TRDVAR"];
	STIPULATION_TYPE_WEIGHTED_AVERAGE_COUPON = 21		[(fix.enum_value)="WAC"];
	STIPULATION_TYPE_WEIGHTED_AVERAGE_LIFE_COUPON = 22	[(fix.enum_value)="WAL"];
	STIPULATION_TYPE_WEIGHTED_AVERAGE_LOAN_AGE = 23		[(fix.enum_value)="WALA"];
	STIPULATION_TYPE_WEIGHTED_AVERAGE_MATURITY = 24		[(fix.enum_value)="WAM"];
	STIPULATION_TYPE_ALTERNATIVE_MINIMUM_TAX = 25		[(fix.enum_value)="AMT"];
	STIPULATION_TYPE_AUTO_REINVESTMENT = 26			[(fix.enum_value)="AUTOREINV"];
	STIPULATION_TYPE_BANK_QUALIFIED = 27			[(fix.enum_value)="BANKQUAL"];
	STIPULATION_TYPE_BARGAIN_CONDITIONS = 28		[(fix.enum_value)="BGNCON"];
	STIPULATION_TYPE_BENCHMARK_PRICE_SOURCE = 29		[(fix.enum_value)="PXSOURCE"];
	STIPULATION_TYPE_CALL_PROTECTION = 30			[(fix.enum_value)="PROTECT"];
	STIPULATION_TYPE_COUPON_RANGE = 31			[(fix.enum_value)="COUPON"];
	STIPULATION_TYPE_CUSTOM_START = 32			[(fix.enum_value)="CUSTOMDATE"];
	STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFIER = 33		[(fix.enum_value)="LOT"];
	STIPULATION_TYPE_FREEFORM_TEXT = 34			[(fix.enum_value)="TEXT"];
	STIPULATION_TYPE_ISO_CURRENCY_CODE = 35			[(fix.enum_value)="CURRENCY"];
	STIPULATION_TYPE_INSURED = 36				[(fix.enum_value)="INSURED"];
	STIPULATION_TYPE_ISSUE_SIZE_RANGE = 37			[(fix.enum_value)="ISSUESIZE"];
	STIPULATION_TYPE_ISSUER = 38				[(fix.enum_value)="ISSUER"];
	STIPULATION_TYPE_LOOKBACK_DAYS = 39			[(fix.enum_value)="LOOKBACK"];
	STIPULATION_TYPE_MARKET_SECTOR = 40			[(fix.enum_value)="SECTOR"];
	STIPULATION_TYPE_MATURITY_RANGE = 41			[(fix.enum_value)="MATURITY"];
	STIPULATION_TYPE_MAXIMUM_SUBSTITUTIONS = 42		[(fix.enum_value)="MAXSUBS"];
	STIPULATION_TYPE_MINIMUM_DENOMINATION = 43		[(fix.enum_value)="MINDNOM"];
	STIPULATION_TYPE_MINIMUM_INCREMENT = 44			[(fix.enum_value)="MININCR"];
	STIPULATION_TYPE_MINIMUM_QUANTITY = 45			[(fix.enum_value)="MINQTY"];
	STIPULATION_TYPE_PAYMENT_FREQUENCY = 46			[(fix.enum_value)="PAYFREQ"];
	STIPULATION_TYPE_PRICE_RANGE = 47			[(fix.enum_value)="PRICE"];
	STIPULATION_TYPE_PRICING_FREQUENCY = 48			[(fix.enum_value)="PRICEFREQ"];
	STIPULATION_TYPE_PURPOSE = 49				[(fix.enum_value)="PURPOSE"];
	STIPULATION_TYPE_RATING_SOURCE_AND_RANGE = 50		[(fix.enum_value)="RATING"];
	STIPULATION_TYPE_RESTRICTED = 51			[(fix.enum_value)="RESTRICTED"];
	STIPULATION_TYPE_SECURITY_TYPE_INCLUDED_OR_EXCLUDED = 52	[(fix.enum_value)="SECTYPE"];
	STIPULATION_TYPE_STRUCTURE = 53				[(fix.enum_value)="STRUCT"];
	STIPULATION_TYPE_SUBSTITUTIONS_FREQUENCY = 54		[(fix.enum_value)="SUBSFREQ"];
	STIPULATION_TYPE_SUBSTITUTIONS_LEFT = 55		[(fix.enum_value)="SUBSLEFT"];
	STIPULATION_TYPE_TYPE_OF_REDEMPTION = 56		[(fix.enum_value)="REDEMPTION"];
	STIPULATION_TYPE_VALUATION_DISCOUNT = 57		[(fix.enum_value)="HAIRCUT"];
	STIPULATION_TYPE_WHOLE_POOL = 58			[(fix.enum_value)="WHOLE"];
	STIPULATION_TYPE_YIELD_RANGE = 59			[(fix.enum_value)="YIELD"];
	STIPULATION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE_SHOWN_TO_THE_STREET = 60	[(fix.enum_value)="AVAILQTY"];
	STIPULATION_TYPE_AVERAGE_FICOSCORE = 61			[(fix.enum_value)="AVFICO"];
	STIPULATION_TYPE_AVERAGE_LOAN_SIZE = 62			[(fix.enum_value)="AVSIZE"];
	STIPULATION_TYPE_BROKER_CREDIT = 63			[(fix.enum_value)="BROKERCREDIT"];
	STIPULATION_TYPE_BROKER_SALES_CREDIT_OVERRIDE = 64	[(fix.enum_value)="SALESCREDITOVR"];
	STIPULATION_TYPE_DISCOUNT_RATE = 65			[(fix.enum_value)="DISCOUNT"];
	STIPULATION_TYPE_INTEREST_OF_ROLLING_OR_CLOSING_TRADE = 66	[(fix.enum_value)="REFINT"];
	STIPULATION_TYPE_MAXIMUM_LOAN_BALANCE = 67		[(fix.enum_value)="MAXBAL"];
	STIPULATION_TYPE_MAXIMUM_ORDER_SIZE = 68		[(fix.enum_value)="MAXORDQTY"];
	STIPULATION_TYPE_OFFER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKERS = 69	[(fix.enum_value)="INTERNALPX"];
	STIPULATION_TYPE_OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_BROKERS = 70	[(fix.enum_value)="INTERNALQTY"];
	STIPULATION_TYPE_ORDER_QUANTITY_INCREMENT = 71		[(fix.enum_value)="ORDRINCR"];
	STIPULATION_TYPE_POOL_IDENTIFIER = 72			[(fix.enum_value)="POOL"];
	STIPULATION_TYPE_PRIMARY_OR_SECONDARY_MARKET_INDICATOR = 73	[(fix.enum_value)="PRIMARY"];
	STIPULATION_TYPE_PRINCIPAL_OF_ROLLING_OR_CLOSING_TRADE = 74	[(fix.enum_value)="REFPRIN"];
	STIPULATION_TYPE_REFERENCE_TO_ROLLING_OR_CLOSING_TRADE = 75	[(fix.enum_value)="REFTRADE"];
	STIPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFER_QUANTITY = 76	[(fix.enum_value)="LEAVEQTY"];
	STIPULATION_TYPE_TRADER_CREDIT = 77			[(fix.enum_value)="TRADERCREDIT"];
	STIPULATION_TYPE_TYPE_OF_ROLL_TRADE = 78		[(fix.enum_value)="ROLLTYPE"];
	STIPULATION_TYPE_YIELD_TO_MATURITY = 79			[(fix.enum_value)="YTM"];
}

message Stipulations {
	optional StipulationTypeEnum stipulation_type = 1	[(fix.tag)=233, (fix.type)=STRING];
	optional string stipulation_value = 2			[(fix.tag)=234, (fix.type)=STRING];
}

enum RoundingDirectionEnum {
	ROUNDING_DIRECTION_ROUND_DOWN = 0			[(fix.enum_value)="1"];
	ROUNDING_DIRECTION_ROUND_TO_NEAREST = 1			[(fix.enum_value)="0"];
	ROUNDING_DIRECTION_ROUND_UP = 2				[(fix.enum_value)="2"];
}

message OrderQtyData {
	optional sfixed64 cash_order_qty = 1			[(fix.tag)=152, (fix.type)=QTY];
	optional sfixed32 cash_order_qty_exponent = 2;
	optional sfixed64 order_percent = 3			[(fix.tag)=516, (fix.type)=PERCENTAGE];
	optional sfixed32 order_percent_exponent = 4;
	optional sfixed64 order_qty = 5				[(fix.tag)=38, (fix.type)=QTY];
	optional sfixed32 order_qty_exponent = 6;
	optional RoundingDirectionEnum rounding_direction = 7	[(fix.tag)=468, (fix.type)=CHAR];
	optional double rounding_modulus = 8			[(fix.tag)=469, (fix.type)=FLOAT];
}

enum TriggerTypeEnum {
	TRIGGER_TYPE_NEXT_AUCTION = 0				[(fix.enum_value)="3"];
	TRIGGER_TYPE_PARTIAL_EXECUTION = 1			[(fix.enum_value)="1"];
	TRIGGER_TYPE_PRICE_MOVEMENT = 2				[(fix.enum_value)="4"];
	TRIGGER_TYPE_SPECIFIED_TRADING_SESSION = 3		[(fix.enum_value)="2"];
}

enum TriggerActionEnum {
	TRIGGER_ACTION_ACTIVATE = 0				[(fix.enum_value)="1"];
	TRIGGER_ACTION_CANCEL = 1				[(fix.enum_value)="3"];
	TRIGGER_ACTION_MODIFY = 2				[(fix.enum_value)="2"];
}

enum TriggerPriceTypeEnum {
	TRIGGER_PRICE_TYPE_BEST_BID = 0				[(fix.enum_value)="3"];
	TRIGGER_PRICE_TYPE_BEST_BID_OR_LAST_TRADE = 1		[(fix.enum_value)="4"];
	TRIGGER_PRICE_TYPE_BEST_MID = 2				[(fix.enum_value)="6"];
	TRIGGER_PRICE_TYPE_BEST_OFFER = 3			[(fix.enum_value)="1"];
	TRIGGER_PRICE_TYPE_BEST_OFFER_OR_LAST_TRADE = 4		[(fix.enum_value)="5"];
	TRIGGER_PRICE_TYPE_LAST_TRADE = 5			[(fix.enum_value)="2"];
}

enum TriggerPriceTypeScopeEnum {
	TRIGGER_PRICE_TYPE_SCOPE_GLOBAL = 0			[(fix.enum_value)="3"];
	TRIGGER_PRICE_TYPE_SCOPE_LOCAL = 1			[(fix.enum_value)="1"];
	TRIGGER_PRICE_TYPE_SCOPE_NATIONAL = 2			[(fix.enum_value)="2"];
	TRIGGER_PRICE_TYPE_SCOPE_NONE = 3			[(fix.enum_value)="0"];
}

enum TriggerPriceDirectionEnum {
	TRIGGER_PRICE_DIRECTION_DOWN = 0			[(fix.enum_value)="D"];
	TRIGGER_PRICE_DIRECTION_UP = 1				[(fix.enum_value)="U"];
}

enum TriggerOrderTypeEnum {
	TRIGGER_ORDER_TYPE_LIMIT = 0				[(fix.enum_value)="2"];
	TRIGGER_ORDER_TYPE_MARKET = 1				[(fix.enum_value)="1"];
}

message TriggeringInstruction {
	optional TriggerActionEnum trigger_action = 1		[(fix.tag)=1101, (fix.type)=CHAR];
	optional sfixed64 trigger_new_price = 2			[(fix.tag)=1110, (fix.type)=PRICE];
	optional sfixed32 trigger_new_price_exponent = 3;
	optional sfixed64 trigger_new_qty = 4			[(fix.tag)=1112, (fix.type)=QTY];
	optional sfixed32 trigger_new_qty_exponent = 5;
	optional TriggerOrderTypeEnum trigger_order_type = 6	[(fix.tag)=1111, (fix.type)=CHAR];
	optional sfixed64 trigger_price = 7			[(fix.tag)=1102, (fix.type)=PRICE];
	optional sfixed32 trigger_price_exponent = 8;
	optional TriggerPriceDirectionEnum trigger_price_direction = 9	[(fix.tag)=1109, (fix.type)=CHAR];
	optional TriggerPriceTypeEnum trigger_price_type = 10	[(fix.tag)=1107, (fix.type)=CHAR];
	optional TriggerPriceTypeScopeEnum trigger_price_type_scope = 11	[(fix.tag)=1108, (fix.type)=CHAR];
	optional string trigger_security_desc = 12		[(fix.tag)=1106, (fix.type)=STRING];
	optional string trigger_security_id = 13		[(fix.tag)=1104, (fix.type)=STRING];
	optional string trigger_security_id_source = 14		[(fix.tag)=1105, (fix.type)=STRING];
	optional string trigger_symbol = 15			[(fix.tag)=1103, (fix.type)=STRING];
	optional string trigger_trading_session_id = 16		[(fix.tag)=1113, (fix.type)=STRING];
	optional string trigger_trading_session_sub_id = 17	[(fix.tag)=1114, (fix.type)=STRING];
	optional TriggerTypeEnum trigger_type = 18		[(fix.tag)=1100, (fix.type)=CHAR];
}

enum BenchmarkCurveNameEnum {
	BENCHMARK_CURVE_NAME_EURIBOR = 0			[(fix.enum_value)="Euribor"];
	BENCHMARK_CURVE_NAME_FUTURE_SWAP = 1			[(fix.enum_value)="FutureSWAP"];
	BENCHMARK_CURVE_NAME_LIBID = 2				[(fix.enum_value)="LIBID"];
	BENCHMARK_CURVE_NAME_LIBOR = 3				[(fix.enum_value)="LIBOR"];
	BENCHMARK_CURVE_NAME_MUNI_AAA = 4			[(fix.enum_value)="MuniAAA"];
	BENCHMARK_CURVE_NAME_OTHER = 5				[(fix.enum_value)="OTHER"];
	BENCHMARK_CURVE_NAME_PFANDBRIEFE = 6			[(fix.enum_value)="Pfandbriefe"];
	BENCHMARK_CURVE_NAME_SWAP = 7				[(fix.enum_value)="SWAP"];
	BENCHMARK_CURVE_NAME_TREASURY = 8			[(fix.enum_value)="Treasury"];
	BENCHMARK_CURVE_NAME_EONIA = 9				[(fix.enum_value)="EONIA"];
	BENCHMARK_CURVE_NAME_EUREPO = 10			[(fix.enum_value)="EUREPO"];
	BENCHMARK_CURVE_NAME_SONIA = 11				[(fix.enum_value)="SONIA"];
}

message SpreadOrBenchmarkCurveData {
	optional string benchmark_curve_currency = 1		[(fix.tag)=220, (fix.type)=CURRENCY];
	optional BenchmarkCurveNameEnum benchmark_curve_name = 2	[(fix.tag)=221, (fix.type)=STRING];
	optional string benchmark_curve_point = 3		[(fix.tag)=222, (fix.type)=STRING];
	optional sfixed64 spread = 4				[(fix.tag)=218, (fix.type)=PRICE_OFFSET];
	optional sfixed32 spread_exponent = 5;
	optional sfixed64 benchmark_price = 6			[(fix.tag)=662, (fix.type)=PRICE];
	optional sfixed32 benchmark_price_exponent = 7;
	optional sfixed64 benchmark_price_type = 8		[(fix.tag)=663, (fix.type)=INT];
	optional string benchmark_security_id = 9		[(fix.tag)=699, (fix.type)=STRING];
	optional string benchmark_security_id_source = 10	[(fix.tag)=761, (fix.type)=STRING];
}

enum YieldTypeEnum {
	YIELD_TYPE_AFTER_TAX_YIELD = 0				[(fix.enum_value)="AFTERTAX"];
	YIELD_TYPE_ANNUAL_YIELD = 1				[(fix.enum_value)="ANNUAL"];
	YIELD_TYPE_BOOK_YIELD = 2				[(fix.enum_value)="BOOK"];
	YIELD_TYPE_CLOSING_YIELD = 3				[(fix.enum_value)="CLOSE"];
	YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_MONTH = 4		[(fix.enum_value)="LASTMONTH"];
	YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_QUARTER = 5	[(fix.enum_value)="LASTQUARTER"];
	YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_YEAR = 6		[(fix.enum_value)="LASTYEAR"];
	YIELD_TYPE_COMPOUND_YIELD = 7				[(fix.enum_value)="COMPOUND"];
	YIELD_TYPE_CURRENT_YIELD = 8				[(fix.enum_value)="CURRENT"];
	YIELD_TYPE_GVNT_EQUIVALENT_YIELD = 9			[(fix.enum_value)="GOVTEQUIV"];
	YIELD_TYPE_INVERSE_FLOATER_BOND_YIELD = 10		[(fix.enum_value)="INVERSEFLOATER"];
	YIELD_TYPE_MARK_TO_MARKET_YIELD = 11			[(fix.enum_value)="MARK"];
	YIELD_TYPE_MOST_RECENT_CLOSING_YIELD = 12		[(fix.enum_value)="LASTCLOSE"];
	YIELD_TYPE_OPEN_AVERAGE_YIELD = 13			[(fix.enum_value)="OPENAVG"];
	YIELD_TYPE_PREVIOUS_CLOSE_YIELD = 14			[(fix.enum_value)="PREVCLOSE"];
	YIELD_TYPE_PROCEEDS_YIELD = 15				[(fix.enum_value)="PROCEEDS"];
	YIELD_TYPE_SEMI_ANNUAL_YIELD = 16			[(fix.enum_value)="SEMIANNUAL"];
	YIELD_TYPE_SIMPLE_YIELD = 17				[(fix.enum_value)="SIMPLE"];
	YIELD_TYPE_TAX_EQUIVALENT_YIELD = 18			[(fix.enum_value)="TAXEQUIV"];
	YIELD_TYPE_TRUE_GROSS_YIELD = 19			[(fix.enum_value)="GROSS"];
	YIELD_TYPE_TRUE_YIELD = 20				[(fix.enum_value)="TRUE"];
	YIELD_TYPE_YIELD_AT_ISSUE = 21				[(fix.enum_value)="ATISSUE"];
	YIELD_TYPE_YIELD_CHANGE_SINCE_CLOSE = 22		[(fix.enum_value)="CHANGE"];
	YIELD_TYPE_YIELD_TO_AVERAGE_MATURITY = 23		[(fix.enum_value)="AVGMATURITY"];
	YIELD_TYPE_YIELD_TO_LONGEST_AVERAGE_LIFE = 24		[(fix.enum_value)="LONGAVGLIFE"];
	YIELD_TYPE_YIELD_TO_MATURITY = 25			[(fix.enum_value)="MATURITY"];
	YIELD_TYPE_YIELD_TO_NEXT_CALL = 26			[(fix.enum_value)="CALL"];
	YIELD_TYPE_YIELD_TO_NEXT_PUT = 27			[(fix.enum_value)="PUT"];
	YIELD_TYPE_YIELD_TO_NEXT_REFUND = 28			[(fix.enum_value)="NEXTREFUND"];
	YIELD_TYPE_YIELD_TO_SHORTEST_AVERAGE_LIFE = 29		[(fix.enum_value)="SHORTAVGLIFE"];
	YIELD_TYPE_YIELD_TO_TENDER_DATE = 30			[(fix.enum_value)="TENDER"];
	YIELD_TYPE_YIELD_TO_WORST = 31				[(fix.enum_value)="WORST"];
	YIELD_TYPE_YIELD_WITH_INFLATION_ASSUMPTION = 32		[(fix.enum_value)="INFLATION"];
	YIELD_TYPE_YIELD_VALUE_OF32NDS = 33			[(fix.enum_value)="VALUE1_32"];
}

message YieldData {
	optional sfixed64 yield = 1				[(fix.tag)=236, (fix.type)=PERCENTAGE];
	optional sfixed32 yield_exponent = 2;
	optional YieldTypeEnum yield_type = 3			[(fix.tag)=235, (fix.type)=STRING];
	optional sfixed32 yield_calc_date = 4			[(fix.tag)=701, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed32 yield_redemption_date = 5		[(fix.tag)=696, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 yield_redemption_price = 6		[(fix.tag)=697, (fix.type)=PRICE];
	optional sfixed32 yield_redemption_price_exponent = 7;
	optional sfixed64 yield_redemption_price_type = 8	[(fix.tag)=698, (fix.type)=INT];
}

enum CommTypeEnum {
	COMM_TYPE_ABSOLUTE = 0					[(fix.enum_value)="3"];
	COMM_TYPE_PER_UNIT = 1					[(fix.enum_value)="1"];
	COMM_TYPE_PERCENT = 2					[(fix.enum_value)="2"];
	COMM_TYPE_PERCENTAGE_WAIVED_CASH_DISCOUNT = 3		[(fix.enum_value)="4"];
	COMM_TYPE_PERCENTAGE_WAIVED_ENHANCED_UNITS = 4		[(fix.enum_value)="5"];
	COMM_TYPE_POINTS_PER_BOND_OR_CONTRACT = 5		[(fix.enum_value)="6"];
}

enum FundRenewWaivEnum {
	FUND_RENEW_WAIV_NO = 0					[(fix.enum_value)="N"];
	FUND_RENEW_WAIV_YES = 1					[(fix.enum_value)="Y"];
}

message CommissionData {
	optional string comm_currency = 1			[(fix.tag)=479, (fix.type)=CURRENCY];
	optional CommTypeEnum comm_type = 2			[(fix.tag)=13, (fix.type)=CHAR];
	optional sfixed64 commission = 3			[(fix.tag)=12, (fix.type)=AMT];
	optional sfixed32 commission_exponent = 4;
	optional FundRenewWaivEnum fund_renew_waiv = 5		[(fix.tag)=497, (fix.type)=CHAR];
}

enum PegPriceTypeEnum {
	PEG_PRICE_TYPE_LAST_PEG = 0				[(fix.enum_value)="1"];
	PEG_PRICE_TYPE_MARKET_PEG = 1				[(fix.enum_value)="4"];
	PEG_PRICE_TYPE_MID_PRICE_PEG = 2			[(fix.enum_value)="2"];
	PEG_PRICE_TYPE_OPENING_PEG = 3				[(fix.enum_value)="3"];
	PEG_PRICE_TYPE_PEG_TO_LIMIT_PRICE = 4			[(fix.enum_value)="9"];
	PEG_PRICE_TYPE_PEG_TO_VWAP = 5				[(fix.enum_value)="7"];
	PEG_PRICE_TYPE_PRIMARY_PEG = 6				[(fix.enum_value)="5"];
	PEG_PRICE_TYPE_TRAILING_STOP_PEG = 7			[(fix.enum_value)="8"];
}

enum PegMoveTypeEnum {
	PEG_MOVE_TYPE_FIXED = 0					[(fix.enum_value)="1"];
	PEG_MOVE_TYPE_FLOATING = 1				[(fix.enum_value)="0"];
}

enum PegOffsetTypeEnum {
	PEG_OFFSET_TYPE_BASIS_POINTS = 0			[(fix.enum_value)="1"];
	PEG_OFFSET_TYPE_PRICE = 1				[(fix.enum_value)="0"];
	PEG_OFFSET_TYPE_PRICE_TIER = 2				[(fix.enum_value)="3"];
	PEG_OFFSET_TYPE_TICKS = 3				[(fix.enum_value)="2"];
}

enum PegLimitTypeEnum {
	PEG_LIMIT_TYPE_OR_BETTER = 0				[(fix.enum_value)="0"];
	PEG_LIMIT_TYPE_OR_WORSE = 1				[(fix.enum_value)="2"];
	PEG_LIMIT_TYPE_STRICT = 2				[(fix.enum_value)="1"];
}

enum PegRoundDirectionEnum {
	PEG_ROUND_DIRECTION_MORE_AGGRESSIVE = 0			[(fix.enum_value)="1"];
	PEG_ROUND_DIRECTION_MORE_PASSIVE = 1			[(fix.enum_value)="2"];
}

enum PegScopeEnum {
	PEG_SCOPE_GLOBAL = 0					[(fix.enum_value)="3"];
	PEG_SCOPE_LOCAL = 1					[(fix.enum_value)="1"];
	PEG_SCOPE_NATIONAL = 2					[(fix.enum_value)="2"];
	PEG_SCOPE_NATIONAL_EXCLUDING_LOCAL = 3			[(fix.enum_value)="4"];
}

message PegInstructions {
	optional PegLimitTypeEnum peg_limit_type = 1		[(fix.tag)=837, (fix.type)=INT];
	optional PegMoveTypeEnum peg_move_type = 2		[(fix.tag)=835, (fix.type)=INT];
	optional PegOffsetTypeEnum peg_offset_type = 3		[(fix.tag)=836, (fix.type)=INT];
	optional double peg_offset_value = 4			[(fix.tag)=211, (fix.type)=FLOAT];
	optional PegPriceTypeEnum peg_price_type = 5		[(fix.tag)=1094, (fix.type)=INT];
	optional PegRoundDirectionEnum peg_round_direction = 6	[(fix.tag)=838, (fix.type)=INT];
	optional PegScopeEnum peg_scope = 7			[(fix.tag)=840, (fix.type)=INT];
	optional string peg_security_desc = 8			[(fix.tag)=1099, (fix.type)=STRING];
	optional string peg_security_id = 9			[(fix.tag)=1097, (fix.type)=STRING];
	optional string peg_security_id_source = 10		[(fix.tag)=1096, (fix.type)=STRING];
	optional string peg_symbol = 11				[(fix.tag)=1098, (fix.type)=STRING];
}

enum DiscretionInstEnum {
	DISCRETION_INST_RELATED_TO_DISPLAYED_PRICE = 0		[(fix.enum_value)="0"];
	DISCRETION_INST_RELATED_TO_LAST_TRADE_PRICE = 1		[(fix.enum_value)="5"];
	DISCRETION_INST_RELATED_TO_LOCAL_PRIMARY_PRICE = 2	[(fix.enum_value)="3"];
	DISCRETION_INST_RELATED_TO_MARKET_PRICE = 3		[(fix.enum_value)="1"];
	DISCRETION_INST_RELATED_TO_MIDPOINT_PRICE = 4		[(fix.enum_value)="4"];
	DISCRETION_INST_RELATED_TO_PRIMARY_PRICE = 5		[(fix.enum_value)="2"];
	DISCRETION_INST_RELATED_TO_VWAP = 6			[(fix.enum_value)="6"];
	DISCRETION_INST_AVERAGE_PRICE_GUARANTEE = 7		[(fix.enum_value)="7"];
}

enum DiscretionMoveTypeEnum {
	DISCRETION_MOVE_TYPE_FIXED = 0				[(fix.enum_value)="1"];
	DISCRETION_MOVE_TYPE_FLOATING = 1			[(fix.enum_value)="0"];
}

enum DiscretionOffsetTypeEnum {
	DISCRETION_OFFSET_TYPE_BASIS_POINTS = 0			[(fix.enum_value)="1"];
	DISCRETION_OFFSET_TYPE_PRICE = 1			[(fix.enum_value)="0"];
	DISCRETION_OFFSET_TYPE_PRICE_TIER = 2			[(fix.enum_value)="3"];
	DISCRETION_OFFSET_TYPE_TICKS = 3			[(fix.enum_value)="2"];
}

enum DiscretionLimitTypeEnum {
	DISCRETION_LIMIT_TYPE_OR_BETTER = 0			[(fix.enum_value)="0"];
	DISCRETION_LIMIT_TYPE_OR_WORSE = 1			[(fix.enum_value)="2"];
	DISCRETION_LIMIT_TYPE_STRICT = 2			[(fix.enum_value)="1"];
}

enum DiscretionRoundDirectionEnum {
	DISCRETION_ROUND_DIRECTION_MORE_AGGRESSIVE = 0		[(fix.enum_value)="1"];
	DISCRETION_ROUND_DIRECTION_MORE_PASSIVE = 1		[(fix.enum_value)="2"];
}

enum DiscretionScopeEnum {
	DISCRETION_SCOPE_GLOBAL = 0				[(fix.enum_value)="3"];
	DISCRETION_SCOPE_LOCAL = 1				[(fix.enum_value)="1"];
	DISCRETION_SCOPE_NATIONAL = 2				[(fix.enum_value)="2"];
	DISCRETION_SCOPE_NATIONAL_EXCLUDING_LOCAL = 3		[(fix.enum_value)="4"];
}

message DiscretionInstructions {
	optional DiscretionInstEnum discretion_inst = 1		[(fix.tag)=388, (fix.type)=CHAR];
	optional DiscretionLimitTypeEnum discretion_limit_type = 2	[(fix.tag)=843, (fix.type)=INT];
	optional DiscretionMoveTypeEnum discretion_move_type = 3	[(fix.tag)=841, (fix.type)=INT];
	optional DiscretionOffsetTypeEnum discretion_offset_type = 4	[(fix.tag)=842, (fix.type)=INT];
	optional double discretion_offset_value = 5		[(fix.tag)=389, (fix.type)=FLOAT];
	optional DiscretionRoundDirectionEnum discretion_round_direction = 6	[(fix.tag)=844, (fix.type)=INT];
	optional DiscretionScopeEnum discretion_scope = 7	[(fix.tag)=846, (fix.type)=INT];
}

enum StrategyParameterTypeEnum {
	STRATEGY_PARAMETER_TYPE_AMT = 0				[(fix.enum_value)="10"];
	STRATEGY_PARAMETER_TYPE_BOOLEAN = 1			[(fix.enum_value)="13"];
	STRATEGY_PARAMETER_TYPE_CHAR = 2			[(fix.enum_value)="12"];
	STRATEGY_PARAMETER_TYPE_CURRENCY = 3			[(fix.enum_value)="16"];
	STRATEGY_PARAMETER_TYPE_DATA = 4			[(fix.enum_value)="23"];
	STRATEGY_PARAMETER_TYPE_EXCHANGE = 5			[(fix.enum_value)="17"];
	STRATEGY_PARAMETER_TYPE_FLOAT = 6			[(fix.enum_value)="6"];
	STRATEGY_PARAMETER_TYPE_INT = 7				[(fix.enum_value)="1"];
	STRATEGY_PARAMETER_TYPE_LENGTH = 8			[(fix.enum_value)="2"];
	STRATEGY_PARAMETER_TYPE_LOCAL_MKT_DATE = 9		[(fix.enum_value)="21"];
	STRATEGY_PARAMETER_TYPE_MONTH_YEAR = 10			[(fix.enum_value)="18"];
	STRATEGY_PARAMETER_TYPE_MULTIPLE_CHAR_VALUE = 11	[(fix.enum_value)="15"];
	STRATEGY_PARAMETER_TYPE_NUM_IN_GROUP = 12		[(fix.enum_value)="3"];
	STRATEGY_PARAMETER_TYPE_PERCENTAGE = 13			[(fix.enum_value)="11"];
	STRATEGY_PARAMETER_TYPE_PRICE = 14			[(fix.enum_value)="8"];
	STRATEGY_PARAMETER_TYPE_PRICE_OFFSET = 15		[(fix.enum_value)="9"];
	STRATEGY_PARAMETER_TYPE_QTY = 16			[(fix.enum_value)="7"];
	STRATEGY_PARAMETER_TYPE_SEQ_NUM = 17			[(fix.enum_value)="4"];
	STRATEGY_PARAMETER_TYPE_STRING = 18			[(fix.enum_value)="14"];
	STRATEGY_PARAMETER_TYPE_TAG_NUM = 19			[(fix.enum_value)="5"];
	STRATEGY_PARAMETER_TYPE_UTC_DATE_ONLY = 20		[(fix.enum_value)="22"];
	STRATEGY_PARAMETER_TYPE_UTC_TIME_ONLY = 21		[(fix.enum_value)="20"];
	STRATEGY_PARAMETER_TYPE_UTC_TIMESTAMP = 22		[(fix.enum_value)="19"];
	STRATEGY_PARAMETER_TYPE_MULTIPLE_STRING_VALUE = 23	[(fix.enum_value)="24"];
	STRATEGY_PARAMETER_TYPE_COUNTRY = 24			[(fix.enum_value)="25"];
	STRATEGY_PARAMETER_TYPE_LANGUAGE = 25			[(fix.enum_value)="26"];
	STRATEGY_PARAMETER_TYPE_TZ_TIME_ONLY = 26		[(fix.enum_value)="27"];
	STRATEGY_PARAMETER_TYPE_TZ_TIMESTAMP = 27		[(fix.enum_value)="28"];
	STRATEGY_PARAMETER_TYPE_TENOR = 28			[(fix.enum_value)="29"];
}

message StrategyParametersGrp {
	optional string strategy_parameter_name = 1		[(fix.tag)=958, (fix.type)=STRING];
	optional StrategyParameterTypeEnum strategy_parameter_type = 2	[(fix.tag)=959, (fix.type)=INT];
	optional string strategy_parameter_value = 3		[(fix.tag)=960, (fix.type)=STRING];
}

enum TrdRegTimestampTypeEnum {
	TRD_REG_TIMESTAMP_TYPE_BROKER_EXECUTION = 0		[(fix.enum_value)="5"];
	TRD_REG_TIMESTAMP_TYPE_BROKER_RECEIPT = 1		[(fix.enum_value)="4"];
	TRD_REG_TIMESTAMP_TYPE_EXECUTION_TIME = 2		[(fix.enum_value)="1"];
	TRD_REG_TIMESTAMP_TYPE_TIME_IN = 3			[(fix.enum_value)="2"];
	TRD_REG_TIMESTAMP_TYPE_TIME_OUT = 4			[(fix.enum_value)="3"];
	TRD_REG_TIMESTAMP_TYPE_DESK_RECEIPT = 5			[(fix.enum_value)="6"];
	TRD_REG_TIMESTAMP_TYPE_SUBMISSION_TO_CLEARING = 6	[(fix.enum_value)="7"];
}

enum DeskTypeEnum {
	DESK_TYPE_AGENCY = 0					[(fix.enum_value)="A"];
	DESK_TYPE_ARBITRAGE = 1					[(fix.enum_value)="AR"];
	DESK_TYPE_DERIVATIVES = 2				[(fix.enum_value)="D"];
	DESK_TYPE_INSTITUTIONAL = 3				[(fix.enum_value)="IS"];
	DESK_TYPE_INTERNATIONAL = 4				[(fix.enum_value)="IN"];
	DESK_TYPE_OTHER = 5					[(fix.enum_value)="O"];
	DESK_TYPE_PREFERRED_TRADING = 6				[(fix.enum_value)="PF"];
	DESK_TYPE_PROGRAM_TRADING = 7				[(fix.enum_value)="PT"];
	DESK_TYPE_PROPRIETARY = 8				[(fix.enum_value)="PR"];
	DESK_TYPE_SALES = 9					[(fix.enum_value)="S"];
	DESK_TYPE_TRADING = 10					[(fix.enum_value)="T"];
}

enum DeskTypeSourceEnum {
	DESK_TYPE_SOURCE_NASDOATS = 0				[(fix.enum_value)="1"];
}

enum DeskOrderHandlingInstEnum {
	DESK_ORDER_HANDLING_INST_ADD_ON_ORDER = 0		[(fix.enum_value)="ADD"];
	DESK_ORDER_HANDLING_INST_ALL_OR_NONE = 1		[(fix.enum_value)="AON"];
	DESK_ORDER_HANDLING_INST_CASH_NOT_HELD = 2		[(fix.enum_value)="CNH"];
	DESK_ORDER_HANDLING_INST_DIRECTED_ORDER = 3		[(fix.enum_value)="DIR"];
	DESK_ORDER_HANDLING_INST_EXCHANGE_FOR_PHYSICAL_TRANSACTION = 4	[(fix.enum_value)="E.W"];
	DESK_ORDER_HANDLING_INST_FILL_OR_KILL = 5		[(fix.enum_value)="FOK"];
	DESK_ORDER_HANDLING_INST_IMBALANCE_ONLY = 6		[(fix.enum_value)="IO"];
	DESK_ORDER_HANDLING_INST_IMMEDIATE_OR_CANCEL = 7	[(fix.enum_value)="IOC"];
	DESK_ORDER_HANDLING_INST_LIMIT_ON_CLOSE = 8		[(fix.enum_value)="LOC"];
	DESK_ORDER_HANDLING_INST_LIMIT_ON_OPEN = 9		[(fix.enum_value)="LOO"];
	DESK_ORDER_HANDLING_INST_MARKET_AT_CLOSE = 10		[(fix.enum_value)="MAC"];
	DESK_ORDER_HANDLING_INST_MARKET_AT_OPEN = 11		[(fix.enum_value)="MAO"];
	DESK_ORDER_HANDLING_INST_MARKET_ON_CLOSE = 12		[(fix.enum_value)="MOC"];
	DESK_ORDER_HANDLING_INST_MARKET_ON_OPEN = 13		[(fix.enum_value)="MOO"];
	DESK_ORDER_HANDLING_INST_MINIMUM_QUANTITY = 14		[(fix.enum_value)="MQT"];
	DESK_ORDER_HANDLING_INST_NOT_HELD = 15			[(fix.enum_value)="NH"];
	DESK_ORDER_HANDLING_INST_OVER_THE_DAY = 16		[(fix.enum_value)="OVD"];
	DESK_ORDER_HANDLING_INST_PEGGED = 17			[(fix.enum_value)="PEG"];
	DESK_ORDER_HANDLING_INST_RESERVE_SIZE_ORDER = 18	[(fix.enum_value)="RSV"];
	DESK_ORDER_HANDLING_INST_SCALE = 19			[(fix.enum_value)="SCL"];
	DESK_ORDER_HANDLING_INST_STOP_STOCK_TRANSACTION = 20	[(fix.enum_value)="S.W"];
	DESK_ORDER_HANDLING_INST_TIME_ORDER = 21		[(fix.enum_value)="TMO"];
	DESK_ORDER_HANDLING_INST_TRAILING_STOP = 22		[(fix.enum_value)="TS"];
	DESK_ORDER_HANDLING_INST_WORK = 23			[(fix.enum_value)="WRK"];
}

message TrdRegTimestamps {
	optional DeskOrderHandlingInstEnum desk_order_handling_inst = 1	[(fix.tag)=1035, (fix.type)=MULTIPLE_STRING_VALUE];
	optional DeskTypeEnum desk_type = 2			[(fix.tag)=1033, (fix.type)=STRING];
	optional DeskTypeSourceEnum desk_type_source = 3	[(fix.tag)=1034, (fix.type)=INT];
	optional sfixed64 trd_reg_timestamp = 4			[(fix.tag)=769, (fix.type)=UTC_TIMESTAMP];
	optional string trd_reg_timestamp_origin = 5		[(fix.tag)=771, (fix.type)=STRING];
	optional TrdRegTimestampTypeEnum trd_reg_timestamp_type = 6	[(fix.tag)=770, (fix.type)=INT];
}

message ApplicationSequenceControl {
	optional string appl_id = 1				[(fix.tag)=1180, (fix.type)=STRING];
	optional fixed32 appl_last_seq_num = 2			[(fix.tag)=1350, (fix.type)=SEQ_NUM];
	optional bool appl_resend_flag = 3			[(fix.tag)=1352, (fix.type)=BOOLEAN];
	optional fixed32 appl_seq_num = 4			[(fix.tag)=1181, (fix.type)=SEQ_NUM];
}

message ContraGrp {
	optional string contra_broker = 1			[(fix.tag)=375, (fix.type)=STRING];
	optional string contra_leg_ref_id = 2			[(fix.tag)=655, (fix.type)=STRING];
	optional sfixed64 contra_trade_qty = 3			[(fix.tag)=437, (fix.type)=QTY];
	optional sfixed32 contra_trade_qty_exponent = 4;
	optional sfixed64 contra_trade_time = 5			[(fix.tag)=438, (fix.type)=UTC_TIMESTAMP];
	optional string contra_trader = 6			[(fix.tag)=337, (fix.type)=STRING];
}

message NstdPtys4SubGrp {
	optional string nested4party_sub_id = 1			[(fix.tag)=1412, (fix.type)=STRING];
	optional sfixed64 nested4party_sub_id_type = 2		[(fix.tag)=1411, (fix.type)=INT];
}

message NestedParties4 {
	optional string nested4party_id = 1			[(fix.tag)=1415, (fix.type)=STRING];
	optional string nested4party_id_source = 2		[(fix.tag)=1416, (fix.type)=CHAR];
	optional sfixed64 nested4party_role = 3			[(fix.tag)=1417, (fix.type)=INT];
	repeated NstdPtys4SubGrp nstd_ptys4sub_grp = 4		[(fix.tag)=1413];
}

enum RateSourceEnum {
	RATE_SOURCE_BLOOMBERG = 0				[(fix.enum_value)="0"];
	RATE_SOURCE_OTHER = 1					[(fix.enum_value)="99"];
	RATE_SOURCE_REUTERS = 2					[(fix.enum_value)="1"];
	RATE_SOURCE_TELERATE = 3				[(fix.enum_value)="2"];
}

enum RateSourceTypeEnum {
	RATE_SOURCE_TYPE_PRIMARY = 0				[(fix.enum_value)="0"];
	RATE_SOURCE_TYPE_SECONDARY = 1				[(fix.enum_value)="1"];
}

message RateSource {
	optional RateSourceEnum rate_source = 1			[(fix.tag)=1446, (fix.type)=INT];
	optional RateSourceTypeEnum rate_source_type = 2	[(fix.tag)=1447, (fix.type)=INT];
	optional string reference_page = 3			[(fix.tag)=1448, (fix.type)=STRING];
}

enum ContAmtTypeEnum {
	CONT_AMT_TYPE_COMMISSION_AMOUNT = 0			[(fix.enum_value)="1"];
	CONT_AMT_TYPE_COMMISSION_PERCENT = 1			[(fix.enum_value)="2"];
	CONT_AMT_TYPE_DILUTION_LEVY_AMOUNT = 2			[(fix.enum_value)="7"];
	CONT_AMT_TYPE_DILUTION_LEVY_PERCENT = 3			[(fix.enum_value)="8"];
	CONT_AMT_TYPE_DISCOUNT_AMOUNT = 4			[(fix.enum_value)="5"];
	CONT_AMT_TYPE_DISCOUNT_PERCENT = 5			[(fix.enum_value)="6"];
	CONT_AMT_TYPE_EXIT_CHARGE_AMOUNT = 6			[(fix.enum_value)="9"];
	CONT_AMT_TYPE_EXIT_CHARGE_PERCENT = 7			[(fix.enum_value)="10"];
	CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_FUND = 8	[(fix.enum_value)="14"];
	CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_ON_ORDER = 9	[(fix.enum_value)="13"];
	CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMISSION_PERCENT = 10	[(fix.enum_value)="11"];
	CONT_AMT_TYPE_INITIAL_CHARGE_AMOUNT = 11		[(fix.enum_value)="3"];
	CONT_AMT_TYPE_INITIAL_CHARGE_PERCENT = 12		[(fix.enum_value)="4"];
	CONT_AMT_TYPE_NET_SETTLEMENT_AMOUNT = 13		[(fix.enum_value)="15"];
	CONT_AMT_TYPE_PROJECTED_FUND_VALUE = 14			[(fix.enum_value)="12"];
}

message ContAmtGrp {
	optional string cont_amt_curr = 1			[(fix.tag)=521, (fix.type)=CURRENCY];
	optional ContAmtTypeEnum cont_amt_type = 2		[(fix.tag)=519, (fix.type)=INT];
	optional double cont_amt_value = 3			[(fix.tag)=520, (fix.type)=FLOAT];
}

message LegSecAltIdGrp {
	optional string leg_security_alt_id = 1			[(fix.tag)=605, (fix.type)=STRING];
	optional string leg_security_alt_id_source = 2		[(fix.tag)=606, (fix.type)=STRING];
}

message LegFlowScheduleTypeUnion {
	optional sfixed64 leg_flow_schedule_type = 1; // No enums for this field were found in source repository.
	optional sfixed64 leg_flow_schedule_type_sfixed64 = 2;
}

message InstrumentLeg {
	optional bytes encoded_leg_issuer = 1			[(fix.tag)=619, (fix.type)=DATA];
	optional fixed32 encoded_leg_issuer_len = 2		[(fix.tag)=618, (fix.type)=LENGTH];
	optional bytes encoded_leg_security_desc = 3		[(fix.tag)=622, (fix.type)=DATA];
	optional fixed32 encoded_leg_security_desc_len = 4	[(fix.tag)=621, (fix.type)=LENGTH];
	optional string leg_cfi_code = 5			[(fix.tag)=608, (fix.type)=STRING];
	optional double leg_contract_multiplier = 6		[(fix.tag)=614, (fix.type)=FLOAT];
	optional string leg_country_of_issue = 7		[(fix.tag)=596, (fix.type)=COUNTRY];
	optional sfixed32 leg_coupon_payment_date = 8		[(fix.tag)=248, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed64 leg_coupon_rate = 9			[(fix.tag)=615, (fix.type)=PERCENTAGE];
	optional sfixed32 leg_coupon_rate_exponent = 10;
	optional string leg_credit_rating = 11			[(fix.tag)=257, (fix.type)=STRING];
	optional double leg_factor = 12				[(fix.tag)=253, (fix.type)=FLOAT];
	optional string leg_instr_registry = 13			[(fix.tag)=599, (fix.type)=STRING];
	optional sfixed32 leg_issue_date = 14			[(fix.tag)=249, (fix.type)=LOCAL_MKT_DATE];
	optional string leg_issuer = 15				[(fix.tag)=617, (fix.type)=STRING];
	optional string leg_locale_of_issue = 16		[(fix.tag)=598, (fix.type)=STRING];
	optional sfixed32 leg_maturity_date = 17		[(fix.tag)=611, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed32 leg_maturity_month_year = 18		[(fix.tag)=610, (fix.type)=MONTH_YEAR];
	optional string leg_opt_attribute = 19			[(fix.tag)=613, (fix.type)=CHAR];
	optional sfixed64 leg_product = 20			[(fix.tag)=607, (fix.type)=INT];
	optional double leg_ratio_qty = 21			[(fix.tag)=623, (fix.type)=FLOAT];
	optional sfixed32 leg_redemption_date = 22		[(fix.tag)=254, (fix.type)=LOCAL_MKT_DATE, (fix.field_deprecated)=FIX_4_4];
	optional string leg_repo_collateral_security_type = 23	[(fix.tag)=250, (fix.type)=STRING, (fix.field_deprecated)=FIX_4_4];
	optional sfixed64 leg_repurchase_rate = 24		[(fix.tag)=252, (fix.type)=PERCENTAGE, (fix.field_deprecated)=FIX_4_4];
	optional sfixed32 leg_repurchase_rate_exponent = 25;
	optional sfixed64 leg_repurchase_term = 26		[(fix.tag)=251, (fix.type)=INT, (fix.field_deprecated)=FIX_4_4];
	optional string leg_security_desc = 27			[(fix.tag)=620, (fix.type)=STRING];
	optional string leg_security_exchange = 28		[(fix.tag)=616, (fix.type)=EXCHANGE];
	optional string leg_security_id = 29			[(fix.tag)=602, (fix.type)=STRING];
	optional string leg_security_id_source = 30		[(fix.tag)=603, (fix.type)=STRING];
	optional string leg_security_type = 31			[(fix.tag)=609, (fix.type)=STRING];
	optional string leg_side = 32				[(fix.tag)=624, (fix.type)=CHAR];
	optional string leg_state_or_province_of_issue = 33	[(fix.tag)=597, (fix.type)=STRING];
	optional sfixed64 leg_strike_price = 34			[(fix.tag)=612, (fix.type)=PRICE];
	optional sfixed32 leg_strike_price_exponent = 35;
	optional string leg_symbol = 36				[(fix.tag)=600, (fix.type)=STRING];
	optional string leg_symbol_sfx = 37			[(fix.tag)=601, (fix.type)=STRING];
	optional sfixed32 leg_contract_settl_month = 38		[(fix.tag)=955, (fix.type)=MONTH_YEAR];
	optional string leg_currency = 39			[(fix.tag)=556, (fix.type)=CURRENCY];
	optional sfixed32 leg_dated_date = 40			[(fix.tag)=739, (fix.type)=LOCAL_MKT_DATE];
	optional sfixed32 leg_interest_accrual_date = 41	[(fix.tag)=956, (fix.type)=LOCAL_MKT_DATE];
	optional double leg_option_ratio = 42			[(fix.tag)=1017, (fix.type)=FLOAT];
	optional string leg_pool = 43				[(fix.tag)=740, (fix.type)=STRING];
	optional sfixed64 leg_price = 44			[(fix.tag)=566, (fix.type)=PRICE];
	optional sfixed32 leg_price_exponent = 45;
	repeated LegSecAltIdGrp leg_sec_alt_id_grp = 46		[(fix.tag)=604];
	optional string leg_security_sub_type = 47		[(fix.tag)=764, (fix.type)=STRING];
	optional string leg_strike_currency = 48		[(fix.tag)=942, (fix.type)=CURRENCY];
	optional string leg_time_unit = 49			[(fix.tag)=1001, (fix.type)=STRING];
	optional string leg_unit_of_measure = 50		[(fix.tag)=999, (fix.type)=STRING];
	optional sfixed64 leg_exercise_style = 51		[(fix.tag)=1420, (fix.type)=INT];
	optional string leg_maturity_time = 52			[(fix.tag)=1212, (fix.type)=TZ_TIME_ONLY];
	optional string leg_price_unit_of_measure = 53		[(fix.tag)=1421, (fix.type)=STRING];
	optional sfixed64 leg_price_unit_of_measure_qty = 54	[(fix.tag)=1422, (fix.type)=QTY];
	optional sfixed32 leg_price_unit_of_measure_qty_exponent = 55;
	optional sfixed64 leg_put_or_call = 56			[(fix.tag)=1358, (fix.type)=INT];
	optional sfixed64 leg_unit_of_measure_qty = 57		[(fix.tag)=1224, (fix.type)=QTY];
	optional sfixed32 leg_unit_of_measure_qty_exponent = 58;
	optional sfixed64 leg_contract_multiplier_unit = 59	[(fix.tag)=1436, (fix.type)=INT];
	optional sfixed64 leg_flow_schedule_type = 60		[(fix.tag)=1440, (fix.type)=INT];
}

message LegStipulations {
	optional string leg_stipulation_type = 1		[(fix.tag)=688, (fix.type)=STRING];
	optional string leg_stipulation_value = 2		[(fix.tag)=689, (fix.type)=STRING];
}

message NstdPtys2SubGrp {
	optional string nested2party_sub_id = 1			[(fix.tag)=760, (fix.type)=STRING];
	optional sfixed64 nested2party_sub_id_type = 2		[(fix.tag)=807, (fix.type)=INT];
}

message NestedParties2 {
	optional string nested2party_id = 1			[(fix.tag)=757, (fix.type)=STRING];
	optional string nested2party_id_source = 2		[(fix.tag)=758, (fix.type)=CHAR];
	optional sfixed64 nested2party_role = 3			[(fix.tag)=759, (fix.type)=INT];
	repeated NstdPtys2SubGrp nstd_ptys2sub_grp = 4		[(fix.tag)=806];
}

message LegPreAllocGrp {
	optional string leg_alloc_account = 1			[(fix.tag)=671, (fix.type)=STRING];
	optional string leg_alloc_acct_id_source = 2		[(fix.tag)=674, (fix.type)=STRING];
	optional sfixed64 leg_alloc_qty = 3			[(fix.tag)=673, (fix.type)=QTY];
	optional sfixed32 leg_alloc_qty_exponent = 4;
	optional string leg_individual_alloc_id = 5		[(fix.tag)=672, (fix.type)=STRING];
	repeated NestedParties2 nested_parties2 = 6		[(fix.tag)=756];
	optional string leg_alloc_settl_currency = 7		[(fix.tag)=1367, (fix.type)=CURRENCY];
}

message NstdPtys3SubGrp {
	optional string nested3party_sub_id = 1			[(fix.tag)=953, (fix.type)=STRING];
	optional sfixed64 nested3party_sub_id_type = 2		[(fix.tag)=954, (fix.type)=INT];
}

message NestedParties3 {
	optional string nested3party_id = 1			[(fix.tag)=949, (fix.type)=STRING];
	optional string nested3party_id_source = 2		[(fix.tag)=950, (fix.type)=CHAR];
	optional sfixed64 nested3party_role = 3			[(fix.tag)=951, (fix.type)=INT];
	repeated NstdPtys3SubGrp nstd_ptys3sub_grp = 4		[(fix.tag)=952];
}

enum LegSwapTypeEnum {
	LEG_SWAP_TYPE_MODIFIED_DURATION = 0			[(fix.enum_value)="2"];
	LEG_SWAP_TYPE_PAR_FOR_PAR = 1				[(fix.enum_value)="1"];
	LEG_SWAP_TYPE_PROCEEDS = 2				[(fix.enum_value)="5"];
	LEG_SWAP_TYPE_RISK = 3					[(fix.enum_value)="4"];
}

message InstrmtLegExecGrp {
	optional InstrumentLeg instrument_leg = 1		[(fix.field_added)=FIX_4_4];
	optional sfixed64 leg_calculated_ccy_last_qty = 2	[(fix.tag)=1074, (fix.type)=QTY];
	optional sfixed32 leg_calculated_ccy_last_qty_exponent = 3;
	optional sfixed64 leg_covered_or_uncovered = 4		[(fix.tag)=565, (fix.type)=INT];
	optional sfixed64 leg_gross_trade_amt = 5		[(fix.tag)=1075, (fix.type)=AMT];
	optional sfixed32 leg_gross_trade_amt_exponent = 6;
	optional sfixed64 leg_last_forward_points = 7		[(fix.tag)=1073, (fix.type)=PRICE_OFFSET];
	optional sfixed32 leg_last_forward_points_exponent = 8;
	optional sfixed64 leg_last_px = 9			[(fix.tag)=637, (fix.type)=PRICE];
	optional sfixed32 leg_last_px_exponent = 10;
	optional sfixed64 leg_order_qty = 11			[(fix.tag)=685, (fix.type)=QTY];
	optional sfixed32 leg_order_qty_exponent = 12;
	optional string leg_position_effect = 13		[(fix.tag)=564, (fix.type)=CHAR];
	optional sfixed64 leg_qty = 14				[(fix.tag)=687, (fix.type)=QTY, (fix.field_deprecated)=FIX_5_0_SP_1];
	optional sfixed32 leg_qty_exponent = 15;
	optional string leg_ref_id = 16				[(fix.tag)=654, (fix.type)=STRING];
	optional string leg_settl_currency = 17			[(fix.tag)=675, (fix.type)=CURRENCY];
	optional sfixed32 leg_settl_date = 18			[(fix.tag)=588, (fix.type)=LOCAL_MKT_DATE];
	optional string leg_settl_type = 19			[(fix.tag)=587, (fix.type)=CHAR];
	repeated LegStipulations leg_stipulations = 20		[(fix.tag)=683];
	optional LegSwapTypeEnum leg_swap_type = 21		[(fix.tag)=690, (fix.type)=INT];
	optional string leg_alloc_id = 22			[(fix.tag)=1366, (fix.type)=STRING];
	optional double leg_currency_ratio = 23			[(fix.tag)=1383, (fix.type)=FLOAT];
	optional sfixed64 leg_dividend_yield = 24		[(fix.tag)=1381, (fix.type)=PERCENTAGE];
	optional sfixed32 leg_dividend_yield_exponent = 25;
	optional sfixed64 leg_last_qty = 26			[(fix.tag)=1418, (fix.type)=QTY];
	optional sfixed32 leg_last_qty_exponent = 27;
	repeated LegPreAllocGrp leg_pre_alloc_grp = 28		[(fix.tag)=670];
	optional double leg_volatility = 29			[(fix.tag)=1379, (fix.type)=FLOAT];
	repeated NestedParties3 nested_parties3 = 30		[(fix.tag)=948];
}

enum MiscFeeTypeEnum {
	MISC_FEE_TYPE_EXCHANGE_FEES = 0				[(fix.enum_value)="4"];
	MISC_FEE_TYPE_LEVY = 1					[(fix.enum_value)="6"];
	MISC_FEE_TYPE_LOCAL_COMMISSION = 2			[(fix.enum_value)="3"];
	MISC_FEE_TYPE_OTHER = 3					[(fix.enum_value)="7"];
	MISC_FEE_TYPE_REGULATORY = 4				[(fix.enum_value)="1"];
	MISC_FEE_TYPE_STAMP = 5					[(fix.enum_value)="5"];
	MISC_FEE_TYPE_TAX = 6					[(fix.enum_value)="2"];
	MISC_FEE_TYPE_MARKUP = 7				[(fix.enum_value)="8"];
	MISC_FEE_TYPE_CONSUMPTION_TAX = 8			[(fix.enum_value)="9"];
	MISC_FEE_TYPE_AGENT = 9					[(fix.enum_value)="12"];
	MISC_FEE_TYPE_CONVERSION = 10				[(fix.enum_value)="11"];
	MISC_FEE_TYPE_PER_TRANSACTION = 11			[(fix.enum_value)="10"];
	MISC_FEE_TYPE_SECURITY_LENDING = 12			[(fix.enum_value)="14"];
	MISC_FEE_TYPE_TRANSFER_FEE = 13				[(fix.enum_value)="13"];
}

enum MiscFeeBasisEnum {
	MISC_FEE_BASIS_ABSOLUTE = 0				[(fix.enum_value)="0"];
	MISC_FEE_BASIS_PER_UNIT = 1				[(fix.enum_value)="1"];
	MISC_FEE_BASIS_PERCENTAGE = 2				[(fix.enum_value)="2"];
}

message MiscFeesGrp {
	optional sfixed64 misc_fee_amt = 1			[(fix.tag)=137, (fix.type)=AMT];
	optional sfixed32 misc_fee_amt_exponent = 2;
	optional MiscFeeBasisEnum misc_fee_basis = 3		[(fix.tag)=891, (fix.type)=INT];
	optional string misc_fee_curr = 4			[(fix.tag)=138, (fix.type)=CURRENCY];
	optional MiscFeeTypeEnum misc_fee_type = 5		[(fix.tag)=139, (fix.type)=STRING];
}

message InstrmtLegGrp {
	optional InstrumentLeg instrument_leg = 1		[(fix.field_added)=FIX_4_4];
}

message InstrmtLegIoiGrp {
	optional InstrumentLeg instrument_leg = 1		[(fix.field_added)=FIX_4_4];
	optional string leg_ioi_qty = 2				[(fix.tag)=682, (fix.type)=STRING];
	repeated LegStipulations leg_stipulations = 3		[(fix.tag)=683];
}

enum RoutingTypeEnum {
	ROUTING_TYPE_BLOCK_FIRM = 0				[(fix.enum_value)="3"];
	ROUTING_TYPE_BLOCK_LIST = 1				[(fix.enum_value)="4"];
	ROUTING_TYPE_TARGET_FIRM = 2				[(fix.enum_value)="1"];
	ROUTING_TYPE_TARGET_LIST = 3				[(fix.enum_value)="2"];
}

message RoutingGrp {
	optional string routing_id = 1				[(fix.tag)=217, (fix.type)=STRING];
	optional RoutingTypeEnum routing_type = 2		[(fix.tag)=216, (fix.type)=INT];
}

enum InstrAttribTypeEnum {
	INSTR_ATTRIB_TYPE_CALLABLE = 0				[(fix.enum_value)="11"];
	INSTR_ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALUE = 1	[(fix.enum_value)="21"];
	INSTR_ATTRIB_TYPE_CALLABLE_WITHOUT_NOTICE = 2		[(fix.enum_value)="22"];
	INSTR_ATTRIB_TYPE_COUPON_PERIOD = 3			[(fix.enum_value)="8"];
	INSTR_ATTRIB_TYPE_ESCROWED_TO_MATURITY = 4		[(fix.enum_value)="12"];
	INSTR_ATTRIB_TYPE_ESCROWED_TO_REDEMPTION_DATE = 5	[(fix.enum_value)="13"];
	INSTR_ATTRIB_TYPE_FLAT = 6				[(fix.enum_value)="1"];
	INSTR_ATTRIB_TYPE_IN_DEFAULT = 7			[(fix.enum_value)="15"];
	INSTR_ATTRIB_TYPE_INDEXED = 8				[(fix.enum_value)="18"];
	INSTR_ATTRIB_TYPE_INTEREST_BEARING = 9			[(fix.enum_value)="3"];
	INSTR_ATTRIB_TYPE_LESS_FEE_FOR_PUT = 10			[(fix.enum_value)="6"];
	INSTR_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS = 11		[(fix.enum_value)="4"];
	INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT = 12		[(fix.enum_value)="10"];
	INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_DISCOUNT_PRICE = 13	[(fix.enum_value)="20"];
	INSTR_ATTRIB_TYPE_PRE_REFUNDED = 14			[(fix.enum_value)="14"];
	INSTR_ATTRIB_TYPE_STEPPED_COUPON = 15			[(fix.enum_value)="7"];
	INSTR_ATTRIB_TYPE_SUBJECT_TO_ALTERNATIVE_MINIMUM_TAX = 16	[(fix.enum_value)="19"];
	INSTR_ATTRIB_TYPE_TAXABLE = 17				[(fix.enum_value)="17"];
	INSTR_ATTRIB_TYPE_TEXT = 18				[(fix.enum_value)="99"];
	INSTR_ATTRIB_TYPE_UNRATED = 19				[(fix.enum_value)="16"];
	INSTR_ATTRIB_TYPE_VARIABLE_RATE = 20			[(fix.enum_value)="5"];
	INSTR_ATTRIB_TYPE_WHEN = 21				[(fix.enum_value)="9"];
	INSTR_ATTRIB_TYPE_ZERO_COUPON = 22			[(fix.enum_value)="2"];
	INSTR_ATTRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY = 23	[(fix.enum_value)="23"];
	INSTR_ATTRIB_TYPE_TRADE_TYPE_ELIGIBILITY_DETAILS_FOR_SECURITY = 24	[(fix.enum_value)="24"];
	INSTR_ATTRIB_TYPE_INSTRUMENT_DENOMINATOR = 25		[(fix.enum_value)="25"];
	INSTR_ATTRIB_TYPE_INSTRUMENT_NUMERATOR = 26		[(fix.enum_value)="26"];
	INSTR_ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION = 27	[(fix.enum_value)="27"];
	INSTR_ATTRIB_TYPE_INSTRUMENT_STRIKE_PRICE = 28		[(fix.enum_value)="28"];
	INSTR_ATTRIB_TYPE_TRADEABLE_INDICATOR = 29		[(fix.enum_value)="29"];
}

message InstrAttribTypeUnion {
	optional InstrAttribTypeEnum instr_attrib_type = 1;
	optional sfixed64 instr_attrib_type_sfixed64 = 2;
}

message AttrbGrp {
	optional InstrAttribTypeEnum instr_attrib_type = 1	[(fix.tag)=871, (fix.type)=INT];
	optional string instr_attrib_value = 2			[(fix.tag)=872, (fix.type)=STRING];
}

enum DeliveryFormEnum {
	DELIVERY_FORM_BEARER = 0				[(fix.enum_value)="2"];
	DELIVERY_FORM_BOOK_ENTRY = 1				[(fix.enum_value)="1"];
}

message InstrumentExtension {
	repeated AttrbGrp attrb_grp = 1				[(fix.tag)=870];
	optional DeliveryFormEnum delivery_form = 2		[(fix.tag)=668, (fix.type)=INT];
	optional sfixed64 pct_at_risk = 3			[(fix.tag)=869, (fix.type)=PERCENTAGE];
	optional sfixed32 pct_at_risk_exponent = 4;
}

enum TickRuleTypeEnum {
	TICK_RULE_TYPE_FIXED = 0				[(fix.enum_value)="2"];
	TICK_RULE_TYPE_REGULAR = 1				[(fix.enum_value)="0"];
	TICK_RULE_TYPE_SETTLED_AS_ASPREAD_LEG = 2		[(fix.enum_value)="4"];
	TICK_RULE_TYPE_TRADED_AS_ASPREAD_LEG = 3		[(fix.enum_value)="3"];
	TICK_RULE_TYPE_VARIABLE = 4				[(fix.enum_value)="1"];
}

message TickRules {
	optional sfixed64 end_tick_price_range = 1		[(fix.tag)=1207, (fix.type)=PRICE];
	optional sfixed32 end_tick_price_range_exponent = 2;
	optional sfixed64 start_tick_price_range = 3		[(fix.tag)=1206, (fix.type)=PRICE];
	optional sfixed32 start_tick_price_range_exponent = 4;
	optional sfixed64 tick_increment = 5			[(fix.tag)=1208, (fix.type)=PRICE];
	optional sfixed32 tick_increment_exponent = 6;
	optional TickRuleTypeEnum tick_rule_type = 7		[(fix.tag)=1209, (fix.type)=INT];
}

enum LotTypeEnum {
	LOT_TYPE_BLOCK_LOT = 0					[(fix.enum_value)="3"];
	LOT_TYPE_ODD_LOT = 1					[(fix.enum_value)="1"];
	LOT_TYPE_ROUND_LOT = 2					[(fix.enum_value)="2"];
	LOT_TYPE_ROUND_LOT_BASED_UPON = 3			[(fix.enum_value)="4"];
}

message LotTypeRules {
	optional LotTypeEnum lot_type = 1			[(fix.tag)=1093, (fix.type)=CHAR];
	optional sfixed64 min_lot_size = 2			[(fix.tag)=1231, (fix.type)=QTY];
	optional sfixed32 min_lot_size_exponent = 3;
}

enum PriceLimitTypeEnum {
	PRICE_LIMIT_TYPE_PERCENTAGE = 0				[(fix.enum_value)="2"];
	PRICE_LIMIT_TYPE_PRICE = 1				[(fix.enum_value)="0"];
	PRICE_LIMIT_TYPE_TICKS = 2				[(fix.enum_value)="1"];
}

message PriceLimits {
	optional sfixed64 high_limit_price = 1			[(fix.tag)=1149, (fix.type)=PRICE];
	optional sfixed32 high_limit_price_exponent = 2;
	optional sfixed64 low_limit_price = 3			[(fix.tag)=1148, (fix.type)=PRICE];
	optional sfixed32 low_limit_price_exponent = 4;
	optional PriceLimitTypeEnum price_limit_type = 5	[(fix.tag)=1306, (fix.type)=INT];
	optional sfixed64 trading_reference_price = 6		[(fix.tag)=1150, (fix.type)=PRICE];
	optional sfixed32 trading_reference_price_exponent = 7;
}

enum ExpirationCycleEnum {
	EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_CLOSE = 0	[(fix.enum_value)="0"];
	EXPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSION_OPEN = 1	[(fix.enum_value)="1"];
	EXPIRATION_CYCLE_SPECIFIED_EXPIRATION = 2		[(fix.enum_value)="2"];
}

enum ImpliedMarketIndicatorEnum {
	IMPLIED_MARKET_INDICATOR_BOTH_IMPLIED_IN_AND_IMPLIED_OUT = 0	[(fix.enum_value)="3"];
	IMPLIED_MARKET_INDICATOR_IMPLIED_IN = 1			[(fix.enum_value)="1"];
	IMPLIED_MARKET_INDICATOR_IMPLIED_OUT = 2		[(fix.enum_value)="2"];
	IMPLIED_MARKET_INDICATOR_NOT_IMPLIED = 3		[(fix.enum_value)="0"];
}

enum MultilegModelEnum {
	MULTILEG_MODEL_PREDEFINED_MULTILEG_SECURITY = 0		[(fix.enum_value)="0"];
	MULTILEG_MODEL_USER_DEFINED = 1				[(fix.enum_value)="2"];
	MULTILEG_MODEL_USER_DEFINED_MULTILEG_SECURITY = 2	[(fix.enum_value)="1"];
}

enum MultilegPriceMethodEnum {
	MULTILEG_PRICE_METHOD_CONTRACT_WEIGHTED_AVERAGE_PRICE = 0	[(fix.enum_value)="4"];
	MULTILEG_PRICE_METHOD_INDIVIDUAL = 1			[(fix.enum_value)="3"];
	MULTILEG_PRICE_METHOD_MULTIPLIED_PRICE = 2		[(fix.enum_value)="5"];
	MULTILEG_PRICE_METHOD_NET_PRICE = 3			[(fix.enum_value)="0"];
	MULTILEG_PRICE_METHOD_REVERSED_NET_PRICE = 4		[(fix.enum_value)="1"];
	MULTILEG_PRICE_METHOD_YIELD_DIFFERENCE = 5		[(fix.enum_value)="2"];
}

enum PriceTypeEnum {
	PRICE_TYPE_FIXED_AMOUNT = 0				[(fix.enum_value)="3"];
	PRICE_TYPE_PER_UNIT = 1					[(fix.enum_value)="2"];
	PRICE_TYPE_PERCENTAGE = 2				[(fix.enum_value)="1"];
	PRICE_TYPE_DISCOUNT = 3					[(fix.enum_value)="4"];
	PRICE_TYPE_PREMIUM = 4					[(fix.enum_value)="5"];
	PRICE_TYPE_SPREAD = 5					[(fix.enum_value)="6"];
	PRICE_TYPE_TEDPRICE = 6					[(fix.enum_value)="7"];
	PRICE_TYPE_TEDYIELD = 7					[(fix.enum_value)="8"];
	PRICE_TYPE_FIXED_CABINET_TRADE_PRICE = 8		[(fix.enum_value)="10"];
	PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE = 9		[(fix.enum_value)="11"];
	PRICE_TYPE_YIELD = 10					[(fix.enum_value)="9"];
	PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS = 11			[(fix.enum_value)="15"];
	PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS = 12		[(fix.enum_value)="14"];
	PRICE_TYPE_PRODUCT_TICKS_IN_HALFS = 13			[(fix.enum_value)="13"];
	PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS = 14	[(fix.enum_value)="19"];
	PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS = 15		[(fix.enum_value)="16"];
	PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS = 16		[(fix.enum_value)="18"];
	PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS = 17		[(fix.enum_value)="17"];
}

message BaseTradingRules {
	optional ExpirationCycleEnum expiration_cycle = 1	[(fix.tag)=827, (fix.type)=INT];
	optional ImpliedMarketIndicatorEnum implied_market_indicator = 2	[(fix.tag)=1144, (fix.type)=INT];
	repeated LotTypeRules lot_type_rules = 3		[(fix.tag)=1234];
	optional double max_price_variation = 4			[(fix.tag)=1143, (fix.type)=FLOAT];
	optional sfixed64 max_trade_vol = 5			[(fix.tag)=1140, (fix.type)=QTY];
	optional sfixed32 max_trade_vol_exponent = 6;
	optional sfixed64 min_trade_vol = 7			[(fix.tag)=562, (fix.type)=QTY];
	optional sfixed32 min_trade_vol_exponent = 8;
	optional MultilegModelEnum multileg_model = 9		[(fix.tag)=1377, (fix.type)=INT];
	optional MultilegPriceMethodEnum multileg_price_method = 10	[(fix.tag)=1378, (fix.type)=INT];
	optional PriceLimits price_limits = 11			[(fix.field_added)=FIX_5_0];
	optional PriceTypeEnum price_type = 12			[(fix.tag)=423, (fix.type)=INT];
	optional sfixed64 round_lot = 13			[(fix.tag)=561, (fix.type)=QTY];
	optional sfixed32 round_lot_exponent = 14;
	repeated TickRules tick_rules = 15			[(fix.tag)=1205];
	optional string trading_currency = 16			[(fix.tag)=1245, (fix.type)=CURRENCY];
}

enum OrdTypeEnum {
	ORD_TYPE_LIMIT = 0					[(fix.enum_value)="2"];
	ORD_TYPE_LIMIT_ON_CLOSE = 1				[(fix.enum_value)="B", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_LIMIT_OR_BETTER = 2				[(fix.enum_value)="7", (fix.enum_deprecated)=FIX_4_4];
	ORD_TYPE_LIMIT_WITH_OR_WITHOUT = 3			[(fix.enum_value)="8"];
	ORD_TYPE_MARKET = 4					[(fix.enum_value)="1"];
	ORD_TYPE_MARKET_ON_CLOSE = 5				[(fix.enum_value)="5", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_ON_BASIS = 6					[(fix.enum_value)="9"];
	ORD_TYPE_ON_CLOSE = 7					[(fix.enum_value)="A", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_STOP = 8					[(fix.enum_value)="3"];
	ORD_TYPE_STOP_LIMIT = 9					[(fix.enum_value)="4"];
	ORD_TYPE_WITH_OR_WITHOUT = 10				[(fix.enum_value)="6"];
	ORD_TYPE_PEGGED = 11					[(fix.enum_value)="P"];
	ORD_TYPE_FOREX_MARKET = 12				[(fix.enum_value)="C", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_PREVIOUSLY_INDICATED = 13			[(fix.enum_value)="E"];
	ORD_TYPE_PREVIOUSLY_QUOTED = 14				[(fix.enum_value)="D"];
	ORD_TYPE_FOREX_LIMIT = 15				[(fix.enum_value)="F", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_FOREX_PREVIOUSLY_QUOTED = 16			[(fix.enum_value)="H", (fix.enum_deprecated)=FIX_4_3];
	ORD_TYPE_FOREX_SWAP = 17				[(fix.enum_value)="G"];
	ORD_TYPE_FUNARI = 18					[(fix.enum_value)="I"];
	ORD_TYPE_MARKET_IF_TOUCHED = 19				[(fix.enum_value)="J"];
	ORD_TYPE_MARKET_WITH_LEFT_OVER_AS_LIMIT = 20		[(fix.enum_value)="K"];
	ORD_TYPE_NEXT_FUND_VALUATION_POINT = 21			[(fix.enum_value)="M"];
	ORD_TYPE_PREVIOUS_FUND_VALUATION_POINT = 22		[(fix.enum_value)="L"];
	ORD_TYPE_COUNTER_ORDER_SELECTION = 23			[(fix.enum_value)="Q"];
}

message OrdTypeRules {
	optional OrdTypeEnum ord_type = 1			[(fix.tag)=40, (fix.type)=CHAR];
}

enum TimeInForceEnum {
	TIME_IN_FORCE_AT_THE_OPENING = 0			[(fix.enum_value)="2"];
	TIME_IN_FORCE_DAY = 1					[(fix.enum_value)="0"];
	TIME_IN_FORCE_FILL_OR_KILL = 2				[(fix.enum_value)="4"];
	TIME_IN_FORCE_GOOD_TILL_CANCEL = 3			[(fix.enum_value)="1"];
	TIME_IN_FORCE_GOOD_TILL_CROSSING = 4			[(fix.enum_value)="5"];
	TIME_IN_FORCE_IMMEDIATE_OR_CANCEL = 5			[(fix.enum_value)="3"];
	TIME_IN_FORCE_GOOD_TILL_DATE = 6			[(fix.enum_value)="6"];
	TIME_IN_FORCE_AT_THE_CLOSE = 7				[(fix.enum_value)="7"];
	TIME_IN_FORCE_AT_CROSSING = 8				[(fix.enum_value)="9"];
	TIME_IN_FORCE_GOOD_THROUGH_CROSSING = 9			[(fix.enum_value)="8"];
}

message TimeInForceRules {
	optional TimeInForceEnum time_in_force = 1		[(fix.tag)=59, (fix.type)=CHAR];
}

message ExecInstRules {
	optional string exec_inst_value = 1			[(fix.tag)=1308, (fix.type)=CHAR];
}

enum MatchTypeEnum {
	MATCH_TYPE_A1EXACT_MATCH_SUMMARIZED_QUANTITY = 0	[(fix.enum_value)="S1"];
	MATCH_TYPE_A2EXACT_MATCH_SUMMARIZED_QUANTITY = 1	[(fix.enum_value)="S2"];
	MATCH_TYPE_A3EXACT_MATCH_SUMMARIZED_QUANTITY = 2	[(fix.enum_value)="S3"];
	MATCH_TYPE_A4EXACT_MATCH_SUMMARIZED_QUANTITY = 3	[(fix.enum_value)="S4"];
	MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_QUANTITY = 4	[(fix.enum_value)="S5"];
	MATCH_TYPE_ACTACCEPTED_TRADE = 5			[(fix.enum_value)="M3"];
	MATCH_TYPE_ACTDEFAULT_AFTER_M2 = 6			[(fix.enum_value)="M5"];
	MATCH_TYPE_ACTDEFAULT_TRADE = 7				[(fix.enum_value)="M4"];
	MATCH_TYPE_ACTM6MATCH = 8				[(fix.enum_value)="M6"];
	MATCH_TYPE_EXACT_MATCH_MINUS_BADGES_TIMES = 9		[(fix.enum_value)="M1"];
	MATCH_TYPE_EXACT_MATCH_PLUS2BADGES = 10			[(fix.enum_value)="A4"];
	MATCH_TYPE_EXACT_MATCH_PLUS2BADGES_EXEC_TIME = 11	[(fix.enum_value)="A3"];
	MATCH_TYPE_EXACT_MATCH_PLUS4BADGES = 12			[(fix.enum_value)="A2"];
	MATCH_TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME = 13	[(fix.enum_value)="A1"];
	MATCH_TYPE_EXACT_MATCH_PLUS_EXEC_TIME = 14		[(fix.enum_value)="A5"];
	MATCH_TYPE_OCSLOCKED_IN = 15				[(fix.enum_value)="MT"];
	MATCH_TYPE_STAMPED_ADVISORIES_OR_SPECIALIST_ACCEPTS = 16	[(fix.enum_value)="AQ"];
	MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BADGES_TIMES = 17	[(fix.enum_value)="M2"];
	MATCH_TYPE_AUTO_MATCH = 18				[(fix.enum_value)="4"];
	MATCH_TYPE_CALL_AUCTION = 19				[(fix.enum_value)="7"];
	MATCH_TYPE_CONFIRMED_TRADE_REPORT = 20			[(fix.enum_value)="3"];
	MATCH_TYPE_COUNTER_ORDER_SELECTION = 21			[(fix.enum_value)="6"];
	MATCH_TYPE_CROSS_AUCTION = 22				[(fix.enum_value)="5"];
	MATCH_TYPE_ONE_PARTY_TRADE_REPORT = 23			[(fix.enum_value)="1"];
	MATCH_TYPE_TWO_PARTY_TRADE_REPORT = 24			[(fix.enum_value)="2"];
	MATCH_TYPE_ISSUING = 25					[(fix.enum_value)="8"];
}

message MatchRules {
	optional string match_algorithm = 1			[(fix.tag)=1142, (fix.type)=STRING];
	optional MatchTypeEnum match_type = 2			[(fix.tag)=574, (fix.type)=STRING];
}

enum MdBookTypeEnum {
	MD_BOOK_TYPE_ORDER_DEPTH = 0				[(fix.enum_value)="3"];
	MD_BOOK_TYPE_PRICE_DEPTH = 1				[(fix.enum_value)="2"];
	MD_BOOK_TYPE_TOP_OF_BOOK = 2				[(fix.enum_value)="1"];
}

message MarketDataFeedTypes {
	optional MdBookTypeEnum md_book_type = 1		[(fix.tag)=1021, (fix.type)=INT];
	optional string md_feed_type = 2			[(fix.tag)=1022, (fix.type)=STRING];
	optional sfixed64 market_depth = 3			[(fix.tag)=264, (fix.type)=INT];
}

message TradingSessionRules {
	repeated ExecInstRules exec_inst_rules = 1		[(fix.tag)=1232];
	repeated MarketDataFeedTypes market_data_feed_types = 2	[(fix.tag)=1141];
	repeated MatchRules match_rules = 3			[(fix.tag)=1235];
	repeated OrdTypeRules ord_type_rules = 4		[(fix.tag)=1237];
	repeated TimeInForceRules time_in_force_rules = 5	[(fix.tag)=1239];
}

message TradingSessionRulesGrp {
	optional TradingSessionIdEnum trading_session_id = 1	[(fix.tag)=336, (fix.type)=STRING];
	optional TradingSessionRules trading_session_rules = 2	[(fix.field_added)=FIX_5_0];
	optional TradingSessionSubIdEnum trading_session_sub_id = 3	[(fix.tag)=625, (fix.type)=STRING];
}

message NestedInstrumentAttribute {
	optional sfixed64 nested_instr_attrib_type = 1		[(fix.tag)=1210, (fix.type)=INT];
	optional string nested_instr_attrib_value = 2		[(fix.tag)=1211, (fix.type)=STRING];
}

message SecurityTradingRules {
	optional BaseTradingRules base_trading_rules = 1	[(fix.field_added)=FIX_5_0];
	repeated NestedInstrumentAttribute nested_instrument_attribute = 2	[(fix.tag)=1312];
	repeated TradingSessionRulesGrp trading_session_rules_grp = 3	[(fix.tag)=1309];
}

enum MaturityMonthYearFormatEnum {
	MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_DAY = 0		[(fix.enum_value)="1"];
	MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_ONLY = 1		[(fix.enum_value)="0"];
	MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH_WEEK = 2		[(fix.enum_value)="2"];
}

enum MaturityMonthYearIncrementUnitsEnum {
	MATURITY_MONTH_YEAR_INCREMENT_UNITS_DAYS = 0		[(fix.enum_value)="1"];
	MATURITY_MONTH_YEAR_INCREMENT_UNITS_MONTHS = 1		[(fix.enum_value)="0"];
	MATURITY_MONTH_YEAR_INCREMENT_UNITS_WEEKS = 2		[(fix.enum_value)="2"];
	MATURITY_MONTH_YEAR_INCREMENT_UNITS_YEARS = 3		[(fix.enum_value)="3"];
}

message MaturityRules {
	optional sfixed32 end_maturity_month_year = 1		[(fix.tag)=1226, (fix.type)=MONTH_YEAR];
	optional MaturityMonthYearFormatEnum maturity_month_year_format = 2	[(fix.tag)=1303, (fix.type)=INT];
	optional sfixed64 maturity_month_year_increment = 3	[(fix.tag)=1229, (fix.type)=INT];
	optional MaturityMonthYearIncrementUnitsEnum maturity_month_year_increment_units = 4	[(fix.tag)=1302, (fix.type)=INT];
	optional string maturity_rule_id = 5			[(fix.tag)=1222, (fix.type)=STRING];
	optional sfixed32 start_maturity_month_year = 6		[(fix.tag)=1241, (fix.type)=MONTH_YEAR];
}

message StrikeRules {
	optional sfixed64 end_strike_px_range = 1		[(fix.tag)=1203, (fix.type)=PRICE];
	optional sfixed32 end_strike_px_range_exponent = 2;
	repeated MaturityRules maturity_rules = 3		[(fix.tag)=1236];
	optional sfixed64 start_strike_px_range = 4		[(fix.tag)=1202, (fix.type)=PRICE];
	optional sfixed32 start_strike_px_range_exponent = 5;
	optional sfixed64 strike_exercise_style = 6		[(fix.tag)=1304, (fix.type)=INT];
	optional double strike_increment = 7			[(fix.tag)=1204, (fix.type)=FLOAT];
	optional string strike_rule_id = 8			[(fix.tag)=1223, (fix.type)=STRING];
}

message MarketSegmentGrp {
	optional string market_id = 1				[(fix.tag)=1301, (fix.type)=EXCHANGE];
	optional string market_segment_id = 2			[(fix.tag)=1300, (fix.type)=STRING];
	optional SecurityTradingRules security_trading_rules = 3	[(fix.field_added)=FIX_5_0];
	repeated StrikeRules strike_rules = 4			[(fix.tag)=1201];
}

message LegBenchmarkCurveData {
	optional string leg_benchmark_curve_currency = 1	[(fix.tag)=676, (fix.type)=CURRENCY];
	optional string leg_benchmark_curve_name = 2		[(fix.tag)=677, (fix.type)=STRING];
	optional string leg_benchmark_curve_point = 3		[(fix.tag)=678, (fix.type)=STRING];
	optional sfixed64 leg_benchmark_price = 4		[(fix.tag)=679, (fix.type)=PRICE];
	optional sfixed32 leg_benchmark_price_exponent = 5;
	optional sfixed64 leg_benchmark_price_type = 6		[(fix.tag)=680, (fix.type)=INT];
}

message InstrmtLegSecListGrp {
	optional InstrumentLeg instrument_leg = 1		[(fix.field_added)=FIX_4_4];
	optional LegBenchmarkCurveData leg_benchmark_curve_data = 2	[(fix.field_added)=FIX_4_4];
	optional string leg_settl_type = 3			[(fix.tag)=587, (fix.type)=CHAR];
	repeated LegStipulations leg_stipulations = 4		[(fix.tag)=683];
	optional LegSwapTypeEnum leg_swap_type = 5		[(fix.tag)=690, (fix.type)=INT];
}

