// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indication.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "indication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Indication {

namespace {

const ::google::protobuf::Descriptor* Advertisement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Advertisement_reflection_ = NULL;
const ::google::protobuf::Descriptor* IoiQualGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IoiQualGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ioi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ioi_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdvTransTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AdvSideEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QtyTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoiQualifierEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoiTransTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SideEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoiQtyEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoiQltyIndEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* IoiNaturalFlagEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_indication_2eproto() {
  protobuf_AddDesc_indication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "indication.proto");
  GOOGLE_CHECK(file != NULL);
  Advertisement_descriptor_ = file->message_type(0);
  static const int Advertisement_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, adv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, adv_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, adv_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, adv_trans_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, quantity_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, last_mkt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, urllink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, qty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, und_instrmt_grp_),
  };
  Advertisement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Advertisement_descriptor_,
      Advertisement::default_instance_,
      Advertisement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Advertisement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Advertisement));
  IoiQualGrp_descriptor_ = file->message_type(1);
  static const int IoiQualGrp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoiQualGrp, ioi_qualifier_),
  };
  IoiQualGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IoiQualGrp_descriptor_,
      IoiQualGrp::default_instance_,
      IoiQualGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoiQualGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IoiQualGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IoiQualGrp));
  Ioi_descriptor_ = file->message_type(2);
  static const int Ioi_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_qlty_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_trans_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, valid_until_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_natural_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, urllink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, ioi_qual_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, instrmt_leg_ioi_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, qty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, routing_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, application_sequence_control_),
  };
  Ioi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ioi_descriptor_,
      Ioi::default_instance_,
      Ioi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ioi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ioi));
  AdvTransTypeEnum_descriptor_ = file->enum_type(0);
  AdvSideEnum_descriptor_ = file->enum_type(1);
  QtyTypeEnum_descriptor_ = file->enum_type(2);
  TradingSessionIdEnum_descriptor_ = file->enum_type(3);
  TradingSessionSubIdEnum_descriptor_ = file->enum_type(4);
  IoiQualifierEnum_descriptor_ = file->enum_type(5);
  IoiTransTypeEnum_descriptor_ = file->enum_type(6);
  SideEnum_descriptor_ = file->enum_type(7);
  IoiQtyEnum_descriptor_ = file->enum_type(8);
  PriceTypeEnum_descriptor_ = file->enum_type(9);
  IoiQltyIndEnum_descriptor_ = file->enum_type(10);
  IoiNaturalFlagEnum_descriptor_ = file->enum_type(11);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_indication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Advertisement_descriptor_, &Advertisement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IoiQualGrp_descriptor_, &IoiQualGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ioi_descriptor_, &Ioi::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_indication_2eproto() {
  delete Advertisement::default_instance_;
  delete Advertisement_reflection_;
  delete IoiQualGrp::default_instance_;
  delete IoiQualGrp_reflection_;
  delete Ioi::default_instance_;
  delete Ioi_reflection_;
}

void protobuf_AddDesc_indication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meta::protobuf_AddDesc_meta_2eproto();
  ::fix::protobuf_AddDesc_fix_2eproto();
  ::Session::protobuf_AddDesc_session_2eproto();
  ::Common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020indication.proto\022\nIndication\032\nmeta.pro"
    "to\032\tfix.proto\032\rsession.proto\032\014common.pro"
    "to\"\252\010\n\rAdvertisement\022\033\n\006adv_id\030\001 \001(\tB\013\235\254"
    "\033\002\000\000\000\240\254\033\017\022\037\n\nadv_ref_id\030\002 \001(\tB\013\235\254\033\003\000\000\000\240\254"
    "\033\017\0226\n\010adv_side\030\003 \001(\0162\027.Indication.AdvSid"
    "eEnumB\013\235\254\033\004\000\000\000\240\254\033\000\022A\n\016adv_trans_type\030\004 \001"
    "(\0162\034.Indication.AdvTransTypeEnumB\013\235\254\033\005\000\000"
    "\000\240\254\033\017\022\035\n\010currency\030\005 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022\032\n\005"
    "price\030\006 \001(\020B\013\235\254\033,\000\000\000\240\254\033\014\022\026\n\016price_expone"
    "nt\030\007 \001(\017\022\035\n\010quantity\030\010 \001(\020B\013\235\254\0335\000\000\000\240\254\033\016\022"
    "\031\n\021quantity_exponent\030\t \001(\017\0226\n\017standard_h"
    "eader\030\n \001(\0132\027.Session.StandardHeaderB\004\250\254"
    "\033\000\0228\n\020standard_trailer\030\013 \001(\0132\030.Session.S"
    "tandardTrailerB\004\250\254\033\000\022\031\n\004text\030\014 \001(\tB\013\235\254\033:"
    "\000\000\000\240\254\033\017\022\"\n\rtransact_time\030\r \001(\020B\013\235\254\033<\000\000\000\240"
    "\254\033\021\022\035\n\010last_mkt\030\016 \001(\tB\013\235\254\033\036\000\000\000\240\254\033\t\022\037\n\ntr"
    "ade_date\030\017 \001(\017B\013\235\254\033K\000\000\000\240\254\033\n\022\034\n\007urllink\030\020"
    " \001(\tB\013\235\254\033\225\000\000\000\240\254\033\017\022!\n\014encoded_text\030\021 \001(\014B"
    "\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_len\030\022 \001(\007B\013"
    "\235\254\033b\001\000\000\240\254\033\022\022I\n\022trading_session_id\030\023 \001(\0162"
    " .Indication.TradingSessionIdEnumB\013\235\254\033P\001"
    "\000\000\240\254\033\017\022,\n\ninstrument\030\024 \001(\0132\022.Common.Inst"
    "rumentB\004\250\254\033\005\022P\n\026trading_session_sub_id\030\025"
    " \001(\0162#.Indication.TradingSessionSubIdEnu"
    "mB\013\235\254\033q\002\000\000\240\254\033\017\0227\n\017instrmt_leg_grp\030\026 \003(\0132"
    "\025.Common.InstrmtLegGrpB\007\235\254\033+\002\000\000\0226\n\010qty_t"
    "ype\030\027 \001(\0162\027.Indication.QtyTypeEnumB\013\235\254\033V"
    "\003\000\000\240\254\033\003\0227\n\017und_instrmt_grp\030\030 \003(\0132\025.Commo"
    "n.UndInstrmtGrpB\007\235\254\033\307\002\000\000:\005\312\355\032\0017\"N\n\nIoiQu"
    "alGrp\022@\n\rioi_qualifier\030\001 \001(\0162\034.Indicatio"
    "n.IoiQualifierEnumB\013\235\254\033h\000\000\000\240\254\033\000\"\217\014\n\003Ioi\022"
    "\035\n\010currency\030\001 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022\033\n\006ioi_id"
    "\030\002 \001(\tB\013\235\254\033\027\000\000\000\240\254\033\017\022=\n\014ioi_qlty_ind\030\003 \001("
    "\0162\032.Indication.IoiQltyIndEnumB\013\235\254\033\031\000\000\000\240\254"
    "\033\000\0224\n\007ioi_qty\030\004 \001(\0162\026.Indication.IoiQtyE"
    "numB\013\235\254\033\033\000\000\000\240\254\033\017\022\037\n\nioi_ref_id\030\005 \001(\tB\013\235\254"
    "\033\032\000\000\000\240\254\033\017\022A\n\016ioi_trans_type\030\006 \001(\0162\034.Indi"
    "cation.IoiTransTypeEnumB\013\235\254\033\034\000\000\000\240\254\033\000\022\032\n\005"
    "price\030\007 \001(\020B\013\235\254\033,\000\000\000\240\254\033\014\022\026\n\016price_expone"
    "nt\030\010 \001(\017\022/\n\004side\030\t \001(\0162\024.Indication.Side"
    "EnumB\013\235\254\0336\000\000\000\240\254\033\000\0226\n\017standard_header\030\n \001"
    "(\0132\027.Session.StandardHeaderB\004\250\254\033\000\0228\n\020sta"
    "ndard_trailer\030\013 \001(\0132\030.Session.StandardTr"
    "ailerB\004\250\254\033\000\022\031\n\004text\030\014 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022%"
    "\n\020valid_until_time\030\r \001(\020B\013\235\254\033>\000\000\000\240\254\033\021\022%\n"
    "\020ioi_natural_flag\030\016 \001(\010B\013\235\254\033\202\000\000\000\240\254\033\007\022\"\n\r"
    "transact_time\030\017 \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022\034\n\007urll"
    "ink\030\020 \001(\tB\013\235\254\033\225\000\000\000\240\254\033\017\022!\n\014encoded_text\030\021"
    " \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_len\030\022 "
    "\001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022,\n\ninstrument\030\023 \001(\0132\022.C"
    "ommon.InstrumentB\004\250\254\033\005\022:\n\nprice_type\030\024 \001"
    "(\0162\031.Indication.PriceTypeEnumB\013\235\254\033\247\001\000\000\240\254"
    "\033\003\022P\n\036spread_or_benchmark_curve_data\030\025 \001"
    "(\0132\".Common.SpreadOrBenchmarkCurveDataB\004"
    "\250\254\033\005\0229\n\021financing_details\030\026 \001(\0132\030.Common"
    ".FinancingDetailsB\004\250\254\033\006\0225\n\014ioi_qual_grp\030"
    "\027 \003(\0132\026.Indication.IoiQualGrpB\007\235\254\033\307\000\000\000\022>"
    "\n\023instrmt_leg_ioi_grp\030\030 \003(\0132\030.Common.Ins"
    "trmtLegIoiGrpB\007\235\254\033+\002\000\000\0222\n\016order_qty_data"
    "\030\031 \001(\0132\024.Common.OrderQtyDataB\004\250\254\033\006\022)\n\007pa"
    "rties\030\032 \003(\0132\017.Common.PartiesB\007\235\254\033\305\001\000\000\0226\n"
    "\010qty_type\030\033 \001(\0162\027.Indication.QtyTypeEnum"
    "B\013\235\254\033V\003\000\000\240\254\033\003\0220\n\013routing_grp\030\034 \003(\0132\022.Com"
    "mon.RoutingGrpB\007\235\254\033\327\000\000\000\0223\n\014stipulations\030"
    "\035 \003(\0132\024.Common.StipulationsB\007\235\254\033\350\000\000\000\0227\n\017"
    "und_instrmt_grp\030\036 \003(\0132\025.Common.UndInstrm"
    "tGrpB\007\235\254\033\307\002\000\000\022+\n\nyield_data\030\037 \001(\0132\021.Comm"
    "on.YieldDataB\004\250\254\033\006\022N\n\034application_sequen"
    "ce_control\030  \001(\0132\".Common.ApplicationSeq"
    "uenceControlB\004\250\254\033\007:\005\312\355\032\0016*v\n\020AdvTransTyp"
    "eEnum\022 \n\025ADV_TRANS_TYPE_CANCEL\020\000\032\005\242\224#\001C\022"
    "\035\n\022ADV_TRANS_TYPE_NEW\020\001\032\005\242\224#\001N\022!\n\026ADV_TR"
    "ANS_TYPE_REPLACE\020\002\032\005\242\224#\001R*v\n\013AdvSideEnum"
    "\022\027\n\014ADV_SIDE_BUY\020\000\032\005\242\224#\001B\022\031\n\016ADV_SIDE_CR"
    "OSS\020\001\032\005\242\224#\001X\022\030\n\rADV_SIDE_SELL\020\002\032\005\242\224#\001S\022\031"
    "\n\016ADV_SIDE_TRADE\020\003\032\005\242\224#\001T*{\n\013QtyTypeEnum"
    "\022\035\n\022QTY_TYPE_CONTRACTS\020\000\032\005\242\224#\0011\022\031\n\016QTY_T"
    "YPE_UNITS\020\001\032\005\242\224#\0010\0222\n\'QTY_TYPE_UNITS_OF_"
    "MEASURE_PER_TIME_UNIT\020\002\032\005\242\224#\0012*\203\002\n\024Tradi"
    "ngSessionIdEnum\022)\n\036TRADING_SESSION_ID_AF"
    "TER_HOURS\020\000\032\005\242\224#\0016\022\'\n\034TRADING_SESSION_ID"
    "_AFTERNOON\020\001\032\005\242\224#\0014\022!\n\026TRADING_SESSION_I"
    "D_DAY\020\002\032\005\242\224#\0011\022%\n\032TRADING_SESSION_ID_EVE"
    "NING\020\003\032\005\242\224#\0015\022&\n\033TRADING_SESSION_ID_HALF"
    "_DAY\020\004\032\005\242\224#\0012\022%\n\032TRADING_SESSION_ID_MORN"
    "ING\020\005\032\005\242\224#\0013*\203\003\n\027TradingSessionSubIdEnum"
    "\022<\n1TRADING_SESSION_SUB_ID_CLOSING_OR_CL"
    "OSING_AUCTION\020\000\032\005\242\224#\0014\022,\n!TRADING_SESSIO"
    "N_SUB_ID_CONTINUOUS\020\001\032\005\242\224#\0013\0222\n\'TRADING_"
    "SESSION_SUB_ID_INTRADAY_AUCTION\020\002\032\005\242\224#\0016"
    "\022<\n1TRADING_SESSION_SUB_ID_OPENING_OR_OP"
    "ENING_AUCTION\020\003\032\005\242\224#\0012\022.\n#TRADING_SESSIO"
    "N_SUB_ID_POST_TRADING\020\004\032\005\242\224#\0015\022-\n\"TRADIN"
    "G_SESSION_SUB_ID_PRE_TRADING\020\005\032\005\242\224#\0011\022+\n"
    " TRADING_SESSION_SUB_ID_QUIESCENT\020\006\032\005\242\224#"
    "\0017*\316\005\n\020IoiQualifierEnum\022$\n\031IOI_QUALIFIER"
    "_ALL_OR_NONE\020\000\032\005\242\224#\001A\022%\n\032IOI_QUALIFIER_A"
    "T_THE_CLOSE\020\001\032\005\242\224#\001C\022&\n\033IOI_QUALIFIER_AT"
    "_THE_MARKET\020\002\032\005\242\224#\001Q\022$\n\031IOI_QUALIFIER_AT"
    "_THE_OPEN\020\003\032\005\242\224#\001O\022-\n\"IOI_QUALIFIER_CROS"
    "SING_OPPORTUNITY\020\004\032\005\242\224#\001X\022&\n\033IOI_QUALIFI"
    "ER_IN_TOUCH_WITH\020\005\032\005\242\224#\001I\022#\n\030IOI_QUALIFI"
    "ER_INDICATION\020\006\032\005\242\224#\001W\022\036\n\023IOI_QUALIFIER_"
    "LIMIT\020\007\032\005\242\224#\001L\022$\n\031IOI_QUALIFIER_MORE_BEH"
    "IND\020\010\032\005\242\224#\001M\022(\n\035IOI_QUALIFIER_PORTFOLIO_"
    "SHOWN\020\t\032\005\242\224#\001S\022)\n\036IOI_QUALIFIER_TAKING_A"
    "POSITION\020\n\032\005\242\224#\001P\022(\n\035IOI_QUALIFIER_THROU"
    "GH_THE_DAY\020\013\032\005\242\224#\001T\022\037\n\024IOI_QUALIFIER_VER"
    "SUS\020\014\032\005\242\224#\001V\022(\n\035IOI_QUALIFIER_AT_THE_MID"
    "POINT\020\r\032\005\242\224#\001Y\022!\n\026IOI_QUALIFIER_PRE_OPEN"
    "\020\016\032\005\242\224#\001Z\022\'\n\034IOI_QUALIFIER_READY_TO_TRAD"
    "E\020\017\032\005\242\224#\001R\022(\n\035IOI_QUALIFIER_MARKET_ON_CL"
    "OSE\020\020\032\005\242\224#\001B\022\035\n\022IOI_QUALIFIER_VWAP\020\021\032\005\242\224"
    "#\001D*v\n\020IoiTransTypeEnum\022 \n\025IOI_TRANS_TYP"
    "E_CANCEL\020\000\032\005\242\224#\001C\022\035\n\022IOI_TRANS_TYPE_NEW\020"
    "\001\032\005\242\224#\001N\022!\n\026IOI_TRANS_TYPE_REPLACE\020\002\032\005\242\224"
    "#\001R*\266\003\n\010SideEnum\022\023\n\010SIDE_BUY\020\000\032\005\242\224#\0011\022\031\n"
    "\016SIDE_BUY_MINUS\020\001\032\005\242\224#\0013\022\024\n\tSIDE_SELL\020\002\032"
    "\005\242\224#\0012\022\031\n\016SIDE_SELL_PLUS\020\003\032\005\242\224#\0014\022\032\n\017SID"
    "E_SELL_SHORT\020\004\032\005\242\224#\0015\022!\n\026SIDE_SELL_SHORT"
    "_EXEMPT\020\005\032\005\242\224#\0016\022\025\n\nSIDE_CROSS\020\006\032\005\242\224#\0018\022"
    "\033\n\020SIDE_UNDISCLOSED\020\007\032\005\242\224#\0017\022\033\n\020SIDE_CRO"
    "SS_SHORT\020\010\032\005\242\224#\0019\022\032\n\017SIDE_AS_DEFINED\020\t\032\005"
    "\242\224#\001B\022\"\n\027SIDE_CROSS_SHORT_EXEMPT\020\n\032\005\242\224#\001"
    "A\022\030\n\rSIDE_OPPOSITE\020\013\032\005\242\224#\001C\022\026\n\013SIDE_BORR"
    "OW\020\014\032\005\242\224#\001G\022\024\n\tSIDE_LEND\020\r\032\005\242\224#\001F\022\026\n\013SID"
    "E_REDEEM\020\016\032\005\242\224#\001E\022\031\n\016SIDE_SUBSCRIBE\020\017\032\005\242"
    "\224#\001D*\204\001\n\nIoiQtyEnum\022\030\n\rIOI_QTY_LARGE\020\000\032\005"
    "\242\224#\001L\022\031\n\016IOI_QTY_MEDIUM\020\001\032\005\242\224#\001M\022\030\n\rIOI_"
    "QTY_SMALL\020\002\032\005\242\224#\001S\022\'\n\034IOI_QTY_UNDISCLOSE"
    "D_QUANTITY\020\003\032\005\242\224#\001U*\203\006\n\rPriceTypeEnum\022\"\n"
    "\027PRICE_TYPE_FIXED_AMOUNT\020\000\032\005\242\224#\0013\022\036\n\023PRI"
    "CE_TYPE_PER_UNIT\020\001\032\005\242\224#\0012\022 \n\025PRICE_TYPE_"
    "PERCENTAGE\020\002\032\005\242\224#\0011\022\036\n\023PRICE_TYPE_DISCOU"
    "NT\020\003\032\005\242\224#\0014\022\035\n\022PRICE_TYPE_PREMIUM\020\004\032\005\242\224#"
    "\0015\022\034\n\021PRICE_TYPE_SPREAD\020\005\032\005\242\224#\0016\022\036\n\023PRIC"
    "E_TYPE_TEDPRICE\020\006\032\005\242\224#\0017\022\036\n\023PRICE_TYPE_T"
    "EDYIELD\020\007\032\005\242\224#\0018\0220\n$PRICE_TYPE_FIXED_CAB"
    "INET_TRADE_PRICE\020\010\032\006\242\224#\00210\0223\n\'PRICE_TYPE"
    "_VARIABLE_CABINET_TRADE_PRICE\020\t\032\006\242\224#\00211\022"
    "\033\n\020PRICE_TYPE_YIELD\020\n\032\005\242\224#\0019\022.\n\"PRICE_TY"
    "PE_PRODUCT_TICKS_IN_EIGHTS\020\013\032\006\242\224#\00215\022/\n#"
    "PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS\020\014\032\006\242"
    "\224#\00214\022-\n!PRICE_TYPE_PRODUCT_TICKS_IN_HAL"
    "FS\020\r\032\006\242\224#\00213\0229\n-PRICE_TYPE_PRODUCT_TICKS"
    "_IN_ONE_TWENTY_EIGHTS\020\016\032\006\242\224#\00219\0222\n&PRICE"
    "_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS\020\017\032\006\242\224#"
    "\00216\0224\n(PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY"
    "_FORTHS\020\020\032\006\242\224#\00218\0226\n*PRICE_TYPE_PRODUCT_"
    "TICKS_IN_THIRTY_SECONDS\020\021\032\006\242\224#\00217*k\n\016Ioi"
    "QltyIndEnum\022\034\n\021IOI_QLTY_IND_HIGH\020\000\032\005\242\224#\001"
    "H\022\033\n\020IOI_QLTY_IND_LOW\020\001\032\005\242\224#\001L\022\036\n\023IOI_QL"
    "TY_IND_MEDIUM\020\002\032\005\242\224#\001M*b\n\022IoiNaturalFlag"
    "Enum\022#\n\030IOI_NATURAL_FLAG_NATURAL\020\000\032\005\242\224#\001"
    "Y\022\'\n\034IOI_NATURAL_FLAG_NOT_NATURAL\020\001\032\005\242\224#"
    "\001NB(\n\032org.fixprotocol.componentsB\nIndica"
    "tion", 6244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "indication.proto", &protobuf_RegisterTypes);
  Advertisement::default_instance_ = new Advertisement();
  IoiQualGrp::default_instance_ = new IoiQualGrp();
  Ioi::default_instance_ = new Ioi();
  Advertisement::default_instance_->InitAsDefaultInstance();
  IoiQualGrp::default_instance_->InitAsDefaultInstance();
  Ioi::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_indication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_indication_2eproto {
  StaticDescriptorInitializer_indication_2eproto() {
    protobuf_AddDesc_indication_2eproto();
  }
} static_descriptor_initializer_indication_2eproto_;
const ::google::protobuf::EnumDescriptor* AdvTransTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvTransTypeEnum_descriptor_;
}
bool AdvTransTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AdvSideEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvSideEnum_descriptor_;
}
bool AdvSideEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QtyTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QtyTypeEnum_descriptor_;
}
bool QtyTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionIdEnum_descriptor_;
}
bool TradingSessionIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionSubIdEnum_descriptor_;
}
bool TradingSessionSubIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoiQualifierEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiQualifierEnum_descriptor_;
}
bool IoiQualifierEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoiTransTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiTransTypeEnum_descriptor_;
}
bool IoiTransTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SideEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SideEnum_descriptor_;
}
bool SideEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoiQtyEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiQtyEnum_descriptor_;
}
bool IoiQtyEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceTypeEnum_descriptor_;
}
bool PriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoiQltyIndEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiQltyIndEnum_descriptor_;
}
bool IoiQltyIndEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IoiNaturalFlagEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiNaturalFlagEnum_descriptor_;
}
bool IoiNaturalFlagEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Advertisement::kAdvIdFieldNumber;
const int Advertisement::kAdvRefIdFieldNumber;
const int Advertisement::kAdvSideFieldNumber;
const int Advertisement::kAdvTransTypeFieldNumber;
const int Advertisement::kCurrencyFieldNumber;
const int Advertisement::kPriceFieldNumber;
const int Advertisement::kPriceExponentFieldNumber;
const int Advertisement::kQuantityFieldNumber;
const int Advertisement::kQuantityExponentFieldNumber;
const int Advertisement::kStandardHeaderFieldNumber;
const int Advertisement::kStandardTrailerFieldNumber;
const int Advertisement::kTextFieldNumber;
const int Advertisement::kTransactTimeFieldNumber;
const int Advertisement::kLastMktFieldNumber;
const int Advertisement::kTradeDateFieldNumber;
const int Advertisement::kUrllinkFieldNumber;
const int Advertisement::kEncodedTextFieldNumber;
const int Advertisement::kEncodedTextLenFieldNumber;
const int Advertisement::kTradingSessionIdFieldNumber;
const int Advertisement::kInstrumentFieldNumber;
const int Advertisement::kTradingSessionSubIdFieldNumber;
const int Advertisement::kInstrmtLegGrpFieldNumber;
const int Advertisement::kQtyTypeFieldNumber;
const int Advertisement::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

Advertisement::Advertisement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Advertisement::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
}

Advertisement::Advertisement(const Advertisement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Advertisement::SharedCtor() {
  _cached_size_ = 0;
  adv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adv_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adv_side_ = 0;
  adv_trans_type_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_ = GOOGLE_LONGLONG(0);
  price_exponent_ = 0;
  quantity_ = GOOGLE_LONGLONG(0);
  quantity_exponent_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transact_time_ = GOOGLE_LONGLONG(0);
  last_mkt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trade_date_ = 0;
  urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  trading_session_id_ = 0;
  instrument_ = NULL;
  trading_session_sub_id_ = 0;
  qty_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Advertisement::~Advertisement() {
  SharedDtor();
}

void Advertisement::SharedDtor() {
  if (adv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete adv_id_;
  }
  if (adv_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete adv_ref_id_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (last_mkt_ != &::google::protobuf::internal::kEmptyString) {
    delete last_mkt_;
  }
  if (urllink_ != &::google::protobuf::internal::kEmptyString) {
    delete urllink_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
  }
}

void Advertisement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Advertisement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Advertisement_descriptor_;
}

const Advertisement& Advertisement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indication_2eproto();
  return *default_instance_;
}

Advertisement* Advertisement::default_instance_ = NULL;

Advertisement* Advertisement::New() const {
  return new Advertisement;
}

void Advertisement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_adv_id()) {
      if (adv_id_ != &::google::protobuf::internal::kEmptyString) {
        adv_id_->clear();
      }
    }
    if (has_adv_ref_id()) {
      if (adv_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        adv_ref_id_->clear();
      }
    }
    adv_side_ = 0;
    adv_trans_type_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    price_ = GOOGLE_LONGLONG(0);
    price_exponent_ = 0;
    quantity_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    quantity_exponent_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    transact_time_ = GOOGLE_LONGLONG(0);
    if (has_last_mkt()) {
      if (last_mkt_ != &::google::protobuf::internal::kEmptyString) {
        last_mkt_->clear();
      }
    }
    trade_date_ = 0;
    if (has_urllink()) {
      if (urllink_ != &::google::protobuf::internal::kEmptyString) {
        urllink_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    trading_session_id_ = 0;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    trading_session_sub_id_ = 0;
    qty_type_ = 0;
  }
  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Advertisement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string adv_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adv_id().data(), this->adv_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adv_ref_id;
        break;
      }

      // optional string adv_ref_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adv_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->adv_ref_id().data(), this->adv_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_adv_side;
        break;
      }

      // optional .Indication.AdvSideEnum adv_side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::AdvSideEnum_IsValid(value)) {
            set_adv_side(static_cast< ::Indication::AdvSideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_adv_trans_type;
        break;
      }

      // optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_trans_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::AdvTransTypeEnum_IsValid(value)) {
            set_adv_trans_type(static_cast< ::Indication::AdvTransTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_currency;
        break;
      }

      // optional string currency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_price;
        break;
      }

      // optional sfixed64 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_price_exponent;
        break;
      }

      // optional sfixed32 price_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_exponent_)));
          set_has_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_quantity;
        break;
      }

      // optional sfixed64 quantity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_quantity_exponent;
        break;
      }

      // optional sfixed32 quantity_exponent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_quantity_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &quantity_exponent_)));
          set_has_quantity_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_text;
        break;
      }

      // optional string text = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_last_mkt;
        break;
      }

      // optional string last_mkt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_mkt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_mkt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_mkt().data(), this->last_mkt().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_trade_date;
        break;
      }

      // optional sfixed32 trade_date = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trade_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_date_)));
          set_has_trade_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_urllink;
        break;
      }

      // optional string urllink = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urllink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urllink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->urllink().data(), this->urllink().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_trading_session_id;
        break;
      }

      // optional .Indication.TradingSessionIdEnum trading_session_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::Indication::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::Indication::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(184)) goto parse_qty_type;
        break;
      }

      // optional .Indication.QtyTypeEnum qty_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::QtyTypeEnum_IsValid(value)) {
            set_qty_type(static_cast< ::Indication::QtyTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Advertisement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string adv_id = 1;
  if (has_adv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adv_id().data(), this->adv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->adv_id(), output);
  }

  // optional string adv_ref_id = 2;
  if (has_adv_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adv_ref_id().data(), this->adv_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->adv_ref_id(), output);
  }

  // optional .Indication.AdvSideEnum adv_side = 3;
  if (has_adv_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->adv_side(), output);
  }

  // optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
  if (has_adv_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->adv_trans_type(), output);
  }

  // optional string currency = 5;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->currency(), output);
  }

  // optional sfixed64 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->price(), output);
  }

  // optional sfixed32 price_exponent = 7;
  if (has_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->price_exponent(), output);
  }

  // optional sfixed64 quantity = 8;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->quantity(), output);
  }

  // optional sfixed32 quantity_exponent = 9;
  if (has_quantity_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->quantity_exponent(), output);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->standard_trailer(), output);
  }

  // optional string text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->text(), output);
  }

  // optional sfixed64 transact_time = 13;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->transact_time(), output);
  }

  // optional string last_mkt = 14;
  if (has_last_mkt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_mkt().data(), this->last_mkt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->last_mkt(), output);
  }

  // optional sfixed32 trade_date = 15;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->trade_date(), output);
  }

  // optional string urllink = 16;
  if (has_urllink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllink().data(), this->urllink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->urllink(), output);
  }

  // optional bytes encoded_text = 17;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 18;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(18, this->encoded_text_len(), output);
  }

  // optional .Indication.TradingSessionIdEnum trading_session_id = 19;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->trading_session_id(), output);
  }

  // optional .Common.Instrument instrument = 20;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->instrument(), output);
  }

  // optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->trading_session_sub_id(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->instrmt_leg_grp(i), output);
  }

  // optional .Indication.QtyTypeEnum qty_type = 23;
  if (has_qty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->qty_type(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Advertisement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string adv_id = 1;
  if (has_adv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adv_id().data(), this->adv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->adv_id(), target);
  }

  // optional string adv_ref_id = 2;
  if (has_adv_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->adv_ref_id().data(), this->adv_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->adv_ref_id(), target);
  }

  // optional .Indication.AdvSideEnum adv_side = 3;
  if (has_adv_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->adv_side(), target);
  }

  // optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
  if (has_adv_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->adv_trans_type(), target);
  }

  // optional string currency = 5;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->currency(), target);
  }

  // optional sfixed64 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->price(), target);
  }

  // optional sfixed32 price_exponent = 7;
  if (has_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->price_exponent(), target);
  }

  // optional sfixed64 quantity = 8;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->quantity(), target);
  }

  // optional sfixed32 quantity_exponent = 9;
  if (has_quantity_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->quantity_exponent(), target);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->standard_trailer(), target);
  }

  // optional string text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->text(), target);
  }

  // optional sfixed64 transact_time = 13;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->transact_time(), target);
  }

  // optional string last_mkt = 14;
  if (has_last_mkt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_mkt().data(), this->last_mkt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->last_mkt(), target);
  }

  // optional sfixed32 trade_date = 15;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->trade_date(), target);
  }

  // optional string urllink = 16;
  if (has_urllink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllink().data(), this->urllink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->urllink(), target);
  }

  // optional bytes encoded_text = 17;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 18;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(18, this->encoded_text_len(), target);
  }

  // optional .Indication.TradingSessionIdEnum trading_session_id = 19;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->trading_session_id(), target);
  }

  // optional .Common.Instrument instrument = 20;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->instrument(), target);
  }

  // optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->trading_session_sub_id(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->instrmt_leg_grp(i), target);
  }

  // optional .Indication.QtyTypeEnum qty_type = 23;
  if (has_qty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->qty_type(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Advertisement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string adv_id = 1;
    if (has_adv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adv_id());
    }

    // optional string adv_ref_id = 2;
    if (has_adv_ref_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adv_ref_id());
    }

    // optional .Indication.AdvSideEnum adv_side = 3;
    if (has_adv_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adv_side());
    }

    // optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
    if (has_adv_trans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adv_trans_type());
    }

    // optional string currency = 5;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional sfixed64 price = 6;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 price_exponent = 7;
    if (has_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 quantity = 8;
    if (has_quantity()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 quantity_exponent = 9;
    if (has_quantity_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Session.StandardHeader standard_header = 10;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 11;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 12;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional sfixed64 transact_time = 13;
    if (has_transact_time()) {
      total_size += 1 + 8;
    }

    // optional string last_mkt = 14;
    if (has_last_mkt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_mkt());
    }

    // optional sfixed32 trade_date = 15;
    if (has_trade_date()) {
      total_size += 1 + 4;
    }

    // optional string urllink = 16;
    if (has_urllink()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urllink());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes encoded_text = 17;
    if (has_encoded_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 18;
    if (has_encoded_text_len()) {
      total_size += 2 + 4;
    }

    // optional .Indication.TradingSessionIdEnum trading_session_id = 19;
    if (has_trading_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .Common.Instrument instrument = 20;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
    if (has_trading_session_sub_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

    // optional .Indication.QtyTypeEnum qty_type = 23;
    if (has_qty_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qty_type());
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
  total_size += 2 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Advertisement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Advertisement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Advertisement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Advertisement::MergeFrom(const Advertisement& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adv_id()) {
      set_adv_id(from.adv_id());
    }
    if (from.has_adv_ref_id()) {
      set_adv_ref_id(from.adv_ref_id());
    }
    if (from.has_adv_side()) {
      set_adv_side(from.adv_side());
    }
    if (from.has_adv_trans_type()) {
      set_adv_trans_type(from.adv_trans_type());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_exponent()) {
      set_price_exponent(from.price_exponent());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quantity_exponent()) {
      set_quantity_exponent(from.quantity_exponent());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_last_mkt()) {
      set_last_mkt(from.last_mkt());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_urllink()) {
      set_urllink(from.urllink());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
    if (from.has_qty_type()) {
      set_qty_type(from.qty_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Advertisement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Advertisement::CopyFrom(const Advertisement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Advertisement::IsInitialized() const {

  return true;
}

void Advertisement::Swap(Advertisement* other) {
  if (other != this) {
    std::swap(adv_id_, other->adv_id_);
    std::swap(adv_ref_id_, other->adv_ref_id_);
    std::swap(adv_side_, other->adv_side_);
    std::swap(adv_trans_type_, other->adv_trans_type_);
    std::swap(currency_, other->currency_);
    std::swap(price_, other->price_);
    std::swap(price_exponent_, other->price_exponent_);
    std::swap(quantity_, other->quantity_);
    std::swap(quantity_exponent_, other->quantity_exponent_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(last_mkt_, other->last_mkt_);
    std::swap(trade_date_, other->trade_date_);
    std::swap(urllink_, other->urllink_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(instrument_, other->instrument_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(qty_type_, other->qty_type_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Advertisement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Advertisement_descriptor_;
  metadata.reflection = Advertisement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IoiQualGrp::kIoiQualifierFieldNumber;
#endif  // !_MSC_VER

IoiQualGrp::IoiQualGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IoiQualGrp::InitAsDefaultInstance() {
}

IoiQualGrp::IoiQualGrp(const IoiQualGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IoiQualGrp::SharedCtor() {
  _cached_size_ = 0;
  ioi_qualifier_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IoiQualGrp::~IoiQualGrp() {
  SharedDtor();
}

void IoiQualGrp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IoiQualGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IoiQualGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IoiQualGrp_descriptor_;
}

const IoiQualGrp& IoiQualGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indication_2eproto();
  return *default_instance_;
}

IoiQualGrp* IoiQualGrp::default_instance_ = NULL;

IoiQualGrp* IoiQualGrp::New() const {
  return new IoiQualGrp;
}

void IoiQualGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ioi_qualifier_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IoiQualGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::IoiQualifierEnum_IsValid(value)) {
            set_ioi_qualifier(static_cast< ::Indication::IoiQualifierEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IoiQualGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
  if (has_ioi_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ioi_qualifier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IoiQualGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
  if (has_ioi_qualifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ioi_qualifier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IoiQualGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
    if (has_ioi_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ioi_qualifier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IoiQualGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IoiQualGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IoiQualGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IoiQualGrp::MergeFrom(const IoiQualGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ioi_qualifier()) {
      set_ioi_qualifier(from.ioi_qualifier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IoiQualGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IoiQualGrp::CopyFrom(const IoiQualGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IoiQualGrp::IsInitialized() const {

  return true;
}

void IoiQualGrp::Swap(IoiQualGrp* other) {
  if (other != this) {
    std::swap(ioi_qualifier_, other->ioi_qualifier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IoiQualGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IoiQualGrp_descriptor_;
  metadata.reflection = IoiQualGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ioi::kCurrencyFieldNumber;
const int Ioi::kIoiIdFieldNumber;
const int Ioi::kIoiQltyIndFieldNumber;
const int Ioi::kIoiQtyFieldNumber;
const int Ioi::kIoiRefIdFieldNumber;
const int Ioi::kIoiTransTypeFieldNumber;
const int Ioi::kPriceFieldNumber;
const int Ioi::kPriceExponentFieldNumber;
const int Ioi::kSideFieldNumber;
const int Ioi::kStandardHeaderFieldNumber;
const int Ioi::kStandardTrailerFieldNumber;
const int Ioi::kTextFieldNumber;
const int Ioi::kValidUntilTimeFieldNumber;
const int Ioi::kIoiNaturalFlagFieldNumber;
const int Ioi::kTransactTimeFieldNumber;
const int Ioi::kUrllinkFieldNumber;
const int Ioi::kEncodedTextFieldNumber;
const int Ioi::kEncodedTextLenFieldNumber;
const int Ioi::kInstrumentFieldNumber;
const int Ioi::kPriceTypeFieldNumber;
const int Ioi::kSpreadOrBenchmarkCurveDataFieldNumber;
const int Ioi::kFinancingDetailsFieldNumber;
const int Ioi::kIoiQualGrpFieldNumber;
const int Ioi::kInstrmtLegIoiGrpFieldNumber;
const int Ioi::kOrderQtyDataFieldNumber;
const int Ioi::kPartiesFieldNumber;
const int Ioi::kQtyTypeFieldNumber;
const int Ioi::kRoutingGrpFieldNumber;
const int Ioi::kStipulationsFieldNumber;
const int Ioi::kUndInstrmtGrpFieldNumber;
const int Ioi::kYieldDataFieldNumber;
const int Ioi::kApplicationSequenceControlFieldNumber;
#endif  // !_MSC_VER

Ioi::Ioi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ioi::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
}

Ioi::Ioi(const Ioi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ioi::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ioi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ioi_qlty_ind_ = 0;
  ioi_qty_ = 0;
  ioi_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ioi_trans_type_ = 0;
  price_ = GOOGLE_LONGLONG(0);
  price_exponent_ = 0;
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valid_until_time_ = GOOGLE_LONGLONG(0);
  ioi_natural_flag_ = false;
  transact_time_ = GOOGLE_LONGLONG(0);
  urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  instrument_ = NULL;
  price_type_ = 0;
  spread_or_benchmark_curve_data_ = NULL;
  financing_details_ = NULL;
  order_qty_data_ = NULL;
  qty_type_ = 0;
  yield_data_ = NULL;
  application_sequence_control_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ioi::~Ioi() {
  SharedDtor();
}

void Ioi::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (ioi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ioi_id_;
  }
  if (ioi_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ioi_ref_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (urllink_ != &::google::protobuf::internal::kEmptyString) {
    delete urllink_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete spread_or_benchmark_curve_data_;
    delete financing_details_;
    delete order_qty_data_;
    delete yield_data_;
    delete application_sequence_control_;
  }
}

void Ioi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ioi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ioi_descriptor_;
}

const Ioi& Ioi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_indication_2eproto();
  return *default_instance_;
}

Ioi* Ioi::default_instance_ = NULL;

Ioi* Ioi::New() const {
  return new Ioi;
}

void Ioi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_ioi_id()) {
      if (ioi_id_ != &::google::protobuf::internal::kEmptyString) {
        ioi_id_->clear();
      }
    }
    ioi_qlty_ind_ = 0;
    ioi_qty_ = 0;
    if (has_ioi_ref_id()) {
      if (ioi_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        ioi_ref_id_->clear();
      }
    }
    ioi_trans_type_ = 0;
    price_ = GOOGLE_LONGLONG(0);
    price_exponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    side_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    valid_until_time_ = GOOGLE_LONGLONG(0);
    ioi_natural_flag_ = false;
    transact_time_ = GOOGLE_LONGLONG(0);
    if (has_urllink()) {
      if (urllink_ != &::google::protobuf::internal::kEmptyString) {
        urllink_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    price_type_ = 0;
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
    qty_type_ = 0;
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
  }
  ioi_qual_grp_.Clear();
  instrmt_leg_ioi_grp_.Clear();
  parties_.Clear();
  routing_grp_.Clear();
  stipulations_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ioi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ioi_id;
        break;
      }

      // optional string ioi_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioi_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ioi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ioi_id().data(), this->ioi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ioi_qlty_ind;
        break;
      }

      // optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioi_qlty_ind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::IoiQltyIndEnum_IsValid(value)) {
            set_ioi_qlty_ind(static_cast< ::Indication::IoiQltyIndEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ioi_qty;
        break;
      }

      // optional .Indication.IoiQtyEnum ioi_qty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioi_qty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::IoiQtyEnum_IsValid(value)) {
            set_ioi_qty(static_cast< ::Indication::IoiQtyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ioi_ref_id;
        break;
      }

      // optional string ioi_ref_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioi_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ioi_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ioi_ref_id().data(), this->ioi_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ioi_trans_type;
        break;
      }

      // optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioi_trans_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::IoiTransTypeEnum_IsValid(value)) {
            set_ioi_trans_type(static_cast< ::Indication::IoiTransTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_price;
        break;
      }

      // optional sfixed64 price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_price_exponent;
        break;
      }

      // optional sfixed32 price_exponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_exponent_)));
          set_has_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_side;
        break;
      }

      // optional .Indication.SideEnum side = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::SideEnum_IsValid(value)) {
            set_side(static_cast< ::Indication::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_text;
        break;
      }

      // optional string text = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_valid_until_time;
        break;
      }

      // optional sfixed64 valid_until_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_valid_until_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &valid_until_time_)));
          set_has_valid_until_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ioi_natural_flag;
        break;
      }

      // optional bool ioi_natural_flag = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ioi_natural_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ioi_natural_flag_)));
          set_has_ioi_natural_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_urllink;
        break;
      }

      // optional string urllink = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urllink:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_urllink()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->urllink().data(), this->urllink().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_price_type;
        break;
      }

      // optional .Indication.PriceTypeEnum price_type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::Indication::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ioi_qual_grp;
        break;
      }

      // repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ioi_qual_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ioi_qual_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_ioi_qual_grp;
        if (input->ExpectTag(194)) goto parse_instrmt_leg_ioi_grp;
        break;
      }

      // repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_ioi_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_ioi_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_instrmt_leg_ioi_grp;
        if (input->ExpectTag(202)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_parties;
        if (input->ExpectTag(216)) goto parse_qty_type;
        break;
      }

      // optional .Indication.QtyTypeEnum qty_type = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qty_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Indication::QtyTypeEnum_IsValid(value)) {
            set_qty_type(static_cast< ::Indication::QtyTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(27, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_routing_grp;
        break;
      }

      // repeated .Common.RoutingGrp routing_grp = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_routing_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_routing_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_routing_grp;
        if (input->ExpectTag(234)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_stipulations;
        if (input->ExpectTag(242)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(250)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ioi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional string ioi_id = 2;
  if (has_ioi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ioi_id().data(), this->ioi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ioi_id(), output);
  }

  // optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
  if (has_ioi_qlty_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ioi_qlty_ind(), output);
  }

  // optional .Indication.IoiQtyEnum ioi_qty = 4;
  if (has_ioi_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ioi_qty(), output);
  }

  // optional string ioi_ref_id = 5;
  if (has_ioi_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ioi_ref_id().data(), this->ioi_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ioi_ref_id(), output);
  }

  // optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
  if (has_ioi_trans_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ioi_trans_type(), output);
  }

  // optional sfixed64 price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->price(), output);
  }

  // optional sfixed32 price_exponent = 8;
  if (has_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->price_exponent(), output);
  }

  // optional .Indication.SideEnum side = 9;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->standard_trailer(), output);
  }

  // optional string text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->text(), output);
  }

  // optional sfixed64 valid_until_time = 13;
  if (has_valid_until_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->valid_until_time(), output);
  }

  // optional bool ioi_natural_flag = 14;
  if (has_ioi_natural_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->ioi_natural_flag(), output);
  }

  // optional sfixed64 transact_time = 15;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(15, this->transact_time(), output);
  }

  // optional string urllink = 16;
  if (has_urllink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllink().data(), this->urllink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->urllink(), output);
  }

  // optional bytes encoded_text = 17;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 18;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(18, this->encoded_text_len(), output);
  }

  // optional .Common.Instrument instrument = 19;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->instrument(), output);
  }

  // optional .Indication.PriceTypeEnum price_type = 20;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->price_type(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->spread_or_benchmark_curve_data(), output);
  }

  // optional .Common.FinancingDetails financing_details = 22;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->financing_details(), output);
  }

  // repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
  for (int i = 0; i < this->ioi_qual_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->ioi_qual_grp(i), output);
  }

  // repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
  for (int i = 0; i < this->instrmt_leg_ioi_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->instrmt_leg_ioi_grp(i), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 25;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->order_qty_data(), output);
  }

  // repeated .Common.Parties parties = 26;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->parties(i), output);
  }

  // optional .Indication.QtyTypeEnum qty_type = 27;
  if (has_qty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      27, this->qty_type(), output);
  }

  // repeated .Common.RoutingGrp routing_grp = 28;
  for (int i = 0; i < this->routing_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->routing_grp(i), output);
  }

  // repeated .Common.Stipulations stipulations = 29;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->stipulations(i), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->und_instrmt_grp(i), output);
  }

  // optional .Common.YieldData yield_data = 31;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->yield_data(), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 32;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->application_sequence_control(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ioi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional string ioi_id = 2;
  if (has_ioi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ioi_id().data(), this->ioi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ioi_id(), target);
  }

  // optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
  if (has_ioi_qlty_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ioi_qlty_ind(), target);
  }

  // optional .Indication.IoiQtyEnum ioi_qty = 4;
  if (has_ioi_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ioi_qty(), target);
  }

  // optional string ioi_ref_id = 5;
  if (has_ioi_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ioi_ref_id().data(), this->ioi_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ioi_ref_id(), target);
  }

  // optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
  if (has_ioi_trans_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ioi_trans_type(), target);
  }

  // optional sfixed64 price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->price(), target);
  }

  // optional sfixed32 price_exponent = 8;
  if (has_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->price_exponent(), target);
  }

  // optional .Indication.SideEnum side = 9;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->standard_trailer(), target);
  }

  // optional string text = 12;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->text(), target);
  }

  // optional sfixed64 valid_until_time = 13;
  if (has_valid_until_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->valid_until_time(), target);
  }

  // optional bool ioi_natural_flag = 14;
  if (has_ioi_natural_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->ioi_natural_flag(), target);
  }

  // optional sfixed64 transact_time = 15;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(15, this->transact_time(), target);
  }

  // optional string urllink = 16;
  if (has_urllink()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->urllink().data(), this->urllink().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->urllink(), target);
  }

  // optional bytes encoded_text = 17;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 18;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(18, this->encoded_text_len(), target);
  }

  // optional .Common.Instrument instrument = 19;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->instrument(), target);
  }

  // optional .Indication.PriceTypeEnum price_type = 20;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->price_type(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->spread_or_benchmark_curve_data(), target);
  }

  // optional .Common.FinancingDetails financing_details = 22;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->financing_details(), target);
  }

  // repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
  for (int i = 0; i < this->ioi_qual_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->ioi_qual_grp(i), target);
  }

  // repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
  for (int i = 0; i < this->instrmt_leg_ioi_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->instrmt_leg_ioi_grp(i), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 25;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->order_qty_data(), target);
  }

  // repeated .Common.Parties parties = 26;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->parties(i), target);
  }

  // optional .Indication.QtyTypeEnum qty_type = 27;
  if (has_qty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      27, this->qty_type(), target);
  }

  // repeated .Common.RoutingGrp routing_grp = 28;
  for (int i = 0; i < this->routing_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->routing_grp(i), target);
  }

  // repeated .Common.Stipulations stipulations = 29;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->stipulations(i), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->und_instrmt_grp(i), target);
  }

  // optional .Common.YieldData yield_data = 31;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->yield_data(), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 32;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->application_sequence_control(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ioi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string ioi_id = 2;
    if (has_ioi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ioi_id());
    }

    // optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
    if (has_ioi_qlty_ind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ioi_qlty_ind());
    }

    // optional .Indication.IoiQtyEnum ioi_qty = 4;
    if (has_ioi_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ioi_qty());
    }

    // optional string ioi_ref_id = 5;
    if (has_ioi_ref_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ioi_ref_id());
    }

    // optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
    if (has_ioi_trans_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ioi_trans_type());
    }

    // optional sfixed64 price = 7;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 price_exponent = 8;
    if (has_price_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Indication.SideEnum side = 9;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 10;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 11;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 12;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional sfixed64 valid_until_time = 13;
    if (has_valid_until_time()) {
      total_size += 1 + 8;
    }

    // optional bool ioi_natural_flag = 14;
    if (has_ioi_natural_flag()) {
      total_size += 1 + 1;
    }

    // optional sfixed64 transact_time = 15;
    if (has_transact_time()) {
      total_size += 1 + 8;
    }

    // optional string urllink = 16;
    if (has_urllink()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->urllink());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes encoded_text = 17;
    if (has_encoded_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 18;
    if (has_encoded_text_len()) {
      total_size += 2 + 4;
    }

    // optional .Common.Instrument instrument = 19;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .Indication.PriceTypeEnum price_type = 20;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional .Common.FinancingDetails financing_details = 22;
    if (has_financing_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Common.OrderQtyData order_qty_data = 25;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional .Indication.QtyTypeEnum qty_type = 27;
    if (has_qty_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qty_type());
    }

    // optional .Common.YieldData yield_data = 31;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional .Common.ApplicationSequenceControl application_sequence_control = 32;
    if (has_application_sequence_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

  }
  // repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
  total_size += 2 * this->ioi_qual_grp_size();
  for (int i = 0; i < this->ioi_qual_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ioi_qual_grp(i));
  }

  // repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
  total_size += 2 * this->instrmt_leg_ioi_grp_size();
  for (int i = 0; i < this->instrmt_leg_ioi_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_ioi_grp(i));
  }

  // repeated .Common.Parties parties = 26;
  total_size += 2 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.RoutingGrp routing_grp = 28;
  total_size += 2 * this->routing_grp_size();
  for (int i = 0; i < this->routing_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routing_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 29;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ioi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ioi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ioi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ioi::MergeFrom(const Ioi& from) {
  GOOGLE_CHECK_NE(&from, this);
  ioi_qual_grp_.MergeFrom(from.ioi_qual_grp_);
  instrmt_leg_ioi_grp_.MergeFrom(from.instrmt_leg_ioi_grp_);
  parties_.MergeFrom(from.parties_);
  routing_grp_.MergeFrom(from.routing_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_ioi_id()) {
      set_ioi_id(from.ioi_id());
    }
    if (from.has_ioi_qlty_ind()) {
      set_ioi_qlty_ind(from.ioi_qlty_ind());
    }
    if (from.has_ioi_qty()) {
      set_ioi_qty(from.ioi_qty());
    }
    if (from.has_ioi_ref_id()) {
      set_ioi_ref_id(from.ioi_ref_id());
    }
    if (from.has_ioi_trans_type()) {
      set_ioi_trans_type(from.ioi_trans_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_exponent()) {
      set_price_exponent(from.price_exponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_valid_until_time()) {
      set_valid_until_time(from.valid_until_time());
    }
    if (from.has_ioi_natural_flag()) {
      set_ioi_natural_flag(from.ioi_natural_flag());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_urllink()) {
      set_urllink(from.urllink());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_qty_type()) {
      set_qty_type(from.qty_type());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ioi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ioi::CopyFrom(const Ioi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ioi::IsInitialized() const {

  return true;
}

void Ioi::Swap(Ioi* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(ioi_id_, other->ioi_id_);
    std::swap(ioi_qlty_ind_, other->ioi_qlty_ind_);
    std::swap(ioi_qty_, other->ioi_qty_);
    std::swap(ioi_ref_id_, other->ioi_ref_id_);
    std::swap(ioi_trans_type_, other->ioi_trans_type_);
    std::swap(price_, other->price_);
    std::swap(price_exponent_, other->price_exponent_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(valid_until_time_, other->valid_until_time_);
    std::swap(ioi_natural_flag_, other->ioi_natural_flag_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(urllink_, other->urllink_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(instrument_, other->instrument_);
    std::swap(price_type_, other->price_type_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    std::swap(financing_details_, other->financing_details_);
    ioi_qual_grp_.Swap(&other->ioi_qual_grp_);
    instrmt_leg_ioi_grp_.Swap(&other->instrmt_leg_ioi_grp_);
    std::swap(order_qty_data_, other->order_qty_data_);
    parties_.Swap(&other->parties_);
    std::swap(qty_type_, other->qty_type_);
    routing_grp_.Swap(&other->routing_grp_);
    stipulations_.Swap(&other->stipulations_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ioi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ioi_descriptor_;
  metadata.reflection = Ioi_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Indication

// @@protoc_insertion_point(global_scope)
