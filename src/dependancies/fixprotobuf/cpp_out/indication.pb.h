// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: indication.proto

#ifndef PROTOBUF_indication_2eproto__INCLUDED
#define PROTOBUF_indication_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "meta.pb.h"
#include "fix.pb.h"
#include "session.pb.h"
#include "common.pb.h"
// @@protoc_insertion_point(includes)

namespace Indication {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_indication_2eproto();
void protobuf_AssignDesc_indication_2eproto();
void protobuf_ShutdownFile_indication_2eproto();

class Advertisement;
class IoiQualGrp;
class Ioi;

enum AdvTransTypeEnum {
  ADV_TRANS_TYPE_CANCEL = 0,
  ADV_TRANS_TYPE_NEW = 1,
  ADV_TRANS_TYPE_REPLACE = 2
};
bool AdvTransTypeEnum_IsValid(int value);
const AdvTransTypeEnum AdvTransTypeEnum_MIN = ADV_TRANS_TYPE_CANCEL;
const AdvTransTypeEnum AdvTransTypeEnum_MAX = ADV_TRANS_TYPE_REPLACE;
const int AdvTransTypeEnum_ARRAYSIZE = AdvTransTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdvTransTypeEnum_descriptor();
inline const ::std::string& AdvTransTypeEnum_Name(AdvTransTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdvTransTypeEnum_descriptor(), value);
}
inline bool AdvTransTypeEnum_Parse(
    const ::std::string& name, AdvTransTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdvTransTypeEnum>(
    AdvTransTypeEnum_descriptor(), name, value);
}
enum AdvSideEnum {
  ADV_SIDE_BUY = 0,
  ADV_SIDE_CROSS = 1,
  ADV_SIDE_SELL = 2,
  ADV_SIDE_TRADE = 3
};
bool AdvSideEnum_IsValid(int value);
const AdvSideEnum AdvSideEnum_MIN = ADV_SIDE_BUY;
const AdvSideEnum AdvSideEnum_MAX = ADV_SIDE_TRADE;
const int AdvSideEnum_ARRAYSIZE = AdvSideEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdvSideEnum_descriptor();
inline const ::std::string& AdvSideEnum_Name(AdvSideEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdvSideEnum_descriptor(), value);
}
inline bool AdvSideEnum_Parse(
    const ::std::string& name, AdvSideEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdvSideEnum>(
    AdvSideEnum_descriptor(), name, value);
}
enum QtyTypeEnum {
  QTY_TYPE_CONTRACTS = 0,
  QTY_TYPE_UNITS = 1,
  QTY_TYPE_UNITS_OF_MEASURE_PER_TIME_UNIT = 2
};
bool QtyTypeEnum_IsValid(int value);
const QtyTypeEnum QtyTypeEnum_MIN = QTY_TYPE_CONTRACTS;
const QtyTypeEnum QtyTypeEnum_MAX = QTY_TYPE_UNITS_OF_MEASURE_PER_TIME_UNIT;
const int QtyTypeEnum_ARRAYSIZE = QtyTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* QtyTypeEnum_descriptor();
inline const ::std::string& QtyTypeEnum_Name(QtyTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    QtyTypeEnum_descriptor(), value);
}
inline bool QtyTypeEnum_Parse(
    const ::std::string& name, QtyTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QtyTypeEnum>(
    QtyTypeEnum_descriptor(), name, value);
}
enum TradingSessionIdEnum {
  TRADING_SESSION_ID_AFTER_HOURS = 0,
  TRADING_SESSION_ID_AFTERNOON = 1,
  TRADING_SESSION_ID_DAY = 2,
  TRADING_SESSION_ID_EVENING = 3,
  TRADING_SESSION_ID_HALF_DAY = 4,
  TRADING_SESSION_ID_MORNING = 5
};
bool TradingSessionIdEnum_IsValid(int value);
const TradingSessionIdEnum TradingSessionIdEnum_MIN = TRADING_SESSION_ID_AFTER_HOURS;
const TradingSessionIdEnum TradingSessionIdEnum_MAX = TRADING_SESSION_ID_MORNING;
const int TradingSessionIdEnum_ARRAYSIZE = TradingSessionIdEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor();
inline const ::std::string& TradingSessionIdEnum_Name(TradingSessionIdEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradingSessionIdEnum_descriptor(), value);
}
inline bool TradingSessionIdEnum_Parse(
    const ::std::string& name, TradingSessionIdEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradingSessionIdEnum>(
    TradingSessionIdEnum_descriptor(), name, value);
}
enum TradingSessionSubIdEnum {
  TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION = 0,
  TRADING_SESSION_SUB_ID_CONTINUOUS = 1,
  TRADING_SESSION_SUB_ID_INTRADAY_AUCTION = 2,
  TRADING_SESSION_SUB_ID_OPENING_OR_OPENING_AUCTION = 3,
  TRADING_SESSION_SUB_ID_POST_TRADING = 4,
  TRADING_SESSION_SUB_ID_PRE_TRADING = 5,
  TRADING_SESSION_SUB_ID_QUIESCENT = 6
};
bool TradingSessionSubIdEnum_IsValid(int value);
const TradingSessionSubIdEnum TradingSessionSubIdEnum_MIN = TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSING_AUCTION;
const TradingSessionSubIdEnum TradingSessionSubIdEnum_MAX = TRADING_SESSION_SUB_ID_QUIESCENT;
const int TradingSessionSubIdEnum_ARRAYSIZE = TradingSessionSubIdEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor();
inline const ::std::string& TradingSessionSubIdEnum_Name(TradingSessionSubIdEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    TradingSessionSubIdEnum_descriptor(), value);
}
inline bool TradingSessionSubIdEnum_Parse(
    const ::std::string& name, TradingSessionSubIdEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradingSessionSubIdEnum>(
    TradingSessionSubIdEnum_descriptor(), name, value);
}
enum IoiQualifierEnum {
  IOI_QUALIFIER_ALL_OR_NONE = 0,
  IOI_QUALIFIER_AT_THE_CLOSE = 1,
  IOI_QUALIFIER_AT_THE_MARKET = 2,
  IOI_QUALIFIER_AT_THE_OPEN = 3,
  IOI_QUALIFIER_CROSSING_OPPORTUNITY = 4,
  IOI_QUALIFIER_IN_TOUCH_WITH = 5,
  IOI_QUALIFIER_INDICATION = 6,
  IOI_QUALIFIER_LIMIT = 7,
  IOI_QUALIFIER_MORE_BEHIND = 8,
  IOI_QUALIFIER_PORTFOLIO_SHOWN = 9,
  IOI_QUALIFIER_TAKING_APOSITION = 10,
  IOI_QUALIFIER_THROUGH_THE_DAY = 11,
  IOI_QUALIFIER_VERSUS = 12,
  IOI_QUALIFIER_AT_THE_MIDPOINT = 13,
  IOI_QUALIFIER_PRE_OPEN = 14,
  IOI_QUALIFIER_READY_TO_TRADE = 15,
  IOI_QUALIFIER_MARKET_ON_CLOSE = 16,
  IOI_QUALIFIER_VWAP = 17
};
bool IoiQualifierEnum_IsValid(int value);
const IoiQualifierEnum IoiQualifierEnum_MIN = IOI_QUALIFIER_ALL_OR_NONE;
const IoiQualifierEnum IoiQualifierEnum_MAX = IOI_QUALIFIER_VWAP;
const int IoiQualifierEnum_ARRAYSIZE = IoiQualifierEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoiQualifierEnum_descriptor();
inline const ::std::string& IoiQualifierEnum_Name(IoiQualifierEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoiQualifierEnum_descriptor(), value);
}
inline bool IoiQualifierEnum_Parse(
    const ::std::string& name, IoiQualifierEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoiQualifierEnum>(
    IoiQualifierEnum_descriptor(), name, value);
}
enum IoiTransTypeEnum {
  IOI_TRANS_TYPE_CANCEL = 0,
  IOI_TRANS_TYPE_NEW = 1,
  IOI_TRANS_TYPE_REPLACE = 2
};
bool IoiTransTypeEnum_IsValid(int value);
const IoiTransTypeEnum IoiTransTypeEnum_MIN = IOI_TRANS_TYPE_CANCEL;
const IoiTransTypeEnum IoiTransTypeEnum_MAX = IOI_TRANS_TYPE_REPLACE;
const int IoiTransTypeEnum_ARRAYSIZE = IoiTransTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoiTransTypeEnum_descriptor();
inline const ::std::string& IoiTransTypeEnum_Name(IoiTransTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoiTransTypeEnum_descriptor(), value);
}
inline bool IoiTransTypeEnum_Parse(
    const ::std::string& name, IoiTransTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoiTransTypeEnum>(
    IoiTransTypeEnum_descriptor(), name, value);
}
enum SideEnum {
  SIDE_BUY = 0,
  SIDE_BUY_MINUS = 1,
  SIDE_SELL = 2,
  SIDE_SELL_PLUS = 3,
  SIDE_SELL_SHORT = 4,
  SIDE_SELL_SHORT_EXEMPT = 5,
  SIDE_CROSS = 6,
  SIDE_UNDISCLOSED = 7,
  SIDE_CROSS_SHORT = 8,
  SIDE_AS_DEFINED = 9,
  SIDE_CROSS_SHORT_EXEMPT = 10,
  SIDE_OPPOSITE = 11,
  SIDE_BORROW = 12,
  SIDE_LEND = 13,
  SIDE_REDEEM = 14,
  SIDE_SUBSCRIBE = 15
};
bool SideEnum_IsValid(int value);
const SideEnum SideEnum_MIN = SIDE_BUY;
const SideEnum SideEnum_MAX = SIDE_SUBSCRIBE;
const int SideEnum_ARRAYSIZE = SideEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* SideEnum_descriptor();
inline const ::std::string& SideEnum_Name(SideEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    SideEnum_descriptor(), value);
}
inline bool SideEnum_Parse(
    const ::std::string& name, SideEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SideEnum>(
    SideEnum_descriptor(), name, value);
}
enum IoiQtyEnum {
  IOI_QTY_LARGE = 0,
  IOI_QTY_MEDIUM = 1,
  IOI_QTY_SMALL = 2,
  IOI_QTY_UNDISCLOSED_QUANTITY = 3
};
bool IoiQtyEnum_IsValid(int value);
const IoiQtyEnum IoiQtyEnum_MIN = IOI_QTY_LARGE;
const IoiQtyEnum IoiQtyEnum_MAX = IOI_QTY_UNDISCLOSED_QUANTITY;
const int IoiQtyEnum_ARRAYSIZE = IoiQtyEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoiQtyEnum_descriptor();
inline const ::std::string& IoiQtyEnum_Name(IoiQtyEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoiQtyEnum_descriptor(), value);
}
inline bool IoiQtyEnum_Parse(
    const ::std::string& name, IoiQtyEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoiQtyEnum>(
    IoiQtyEnum_descriptor(), name, value);
}
enum PriceTypeEnum {
  PRICE_TYPE_FIXED_AMOUNT = 0,
  PRICE_TYPE_PER_UNIT = 1,
  PRICE_TYPE_PERCENTAGE = 2,
  PRICE_TYPE_DISCOUNT = 3,
  PRICE_TYPE_PREMIUM = 4,
  PRICE_TYPE_SPREAD = 5,
  PRICE_TYPE_TEDPRICE = 6,
  PRICE_TYPE_TEDYIELD = 7,
  PRICE_TYPE_FIXED_CABINET_TRADE_PRICE = 8,
  PRICE_TYPE_VARIABLE_CABINET_TRADE_PRICE = 9,
  PRICE_TYPE_YIELD = 10,
  PRICE_TYPE_PRODUCT_TICKS_IN_EIGHTS = 11,
  PRICE_TYPE_PRODUCT_TICKS_IN_FOURTHS = 12,
  PRICE_TYPE_PRODUCT_TICKS_IN_HALFS = 13,
  PRICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIGHTS = 14,
  PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS = 15,
  PRICE_TYPE_PRODUCT_TICKS_IN_SIXTY_FORTHS = 16,
  PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS = 17
};
bool PriceTypeEnum_IsValid(int value);
const PriceTypeEnum PriceTypeEnum_MIN = PRICE_TYPE_FIXED_AMOUNT;
const PriceTypeEnum PriceTypeEnum_MAX = PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SECONDS;
const int PriceTypeEnum_ARRAYSIZE = PriceTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor();
inline const ::std::string& PriceTypeEnum_Name(PriceTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    PriceTypeEnum_descriptor(), value);
}
inline bool PriceTypeEnum_Parse(
    const ::std::string& name, PriceTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PriceTypeEnum>(
    PriceTypeEnum_descriptor(), name, value);
}
enum IoiQltyIndEnum {
  IOI_QLTY_IND_HIGH = 0,
  IOI_QLTY_IND_LOW = 1,
  IOI_QLTY_IND_MEDIUM = 2
};
bool IoiQltyIndEnum_IsValid(int value);
const IoiQltyIndEnum IoiQltyIndEnum_MIN = IOI_QLTY_IND_HIGH;
const IoiQltyIndEnum IoiQltyIndEnum_MAX = IOI_QLTY_IND_MEDIUM;
const int IoiQltyIndEnum_ARRAYSIZE = IoiQltyIndEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoiQltyIndEnum_descriptor();
inline const ::std::string& IoiQltyIndEnum_Name(IoiQltyIndEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoiQltyIndEnum_descriptor(), value);
}
inline bool IoiQltyIndEnum_Parse(
    const ::std::string& name, IoiQltyIndEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoiQltyIndEnum>(
    IoiQltyIndEnum_descriptor(), name, value);
}
enum IoiNaturalFlagEnum {
  IOI_NATURAL_FLAG_NATURAL = 0,
  IOI_NATURAL_FLAG_NOT_NATURAL = 1
};
bool IoiNaturalFlagEnum_IsValid(int value);
const IoiNaturalFlagEnum IoiNaturalFlagEnum_MIN = IOI_NATURAL_FLAG_NATURAL;
const IoiNaturalFlagEnum IoiNaturalFlagEnum_MAX = IOI_NATURAL_FLAG_NOT_NATURAL;
const int IoiNaturalFlagEnum_ARRAYSIZE = IoiNaturalFlagEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* IoiNaturalFlagEnum_descriptor();
inline const ::std::string& IoiNaturalFlagEnum_Name(IoiNaturalFlagEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    IoiNaturalFlagEnum_descriptor(), value);
}
inline bool IoiNaturalFlagEnum_Parse(
    const ::std::string& name, IoiNaturalFlagEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IoiNaturalFlagEnum>(
    IoiNaturalFlagEnum_descriptor(), name, value);
}
// ===================================================================

class Advertisement : public ::google::protobuf::Message {
 public:
  Advertisement();
  virtual ~Advertisement();

  Advertisement(const Advertisement& from);

  inline Advertisement& operator=(const Advertisement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Advertisement& default_instance();

  void Swap(Advertisement* other);

  // implements Message ----------------------------------------------

  Advertisement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Advertisement& from);
  void MergeFrom(const Advertisement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string adv_id = 1;
  inline bool has_adv_id() const;
  inline void clear_adv_id();
  static const int kAdvIdFieldNumber = 1;
  inline const ::std::string& adv_id() const;
  inline void set_adv_id(const ::std::string& value);
  inline void set_adv_id(const char* value);
  inline void set_adv_id(const char* value, size_t size);
  inline ::std::string* mutable_adv_id();
  inline ::std::string* release_adv_id();
  inline void set_allocated_adv_id(::std::string* adv_id);

  // optional string adv_ref_id = 2;
  inline bool has_adv_ref_id() const;
  inline void clear_adv_ref_id();
  static const int kAdvRefIdFieldNumber = 2;
  inline const ::std::string& adv_ref_id() const;
  inline void set_adv_ref_id(const ::std::string& value);
  inline void set_adv_ref_id(const char* value);
  inline void set_adv_ref_id(const char* value, size_t size);
  inline ::std::string* mutable_adv_ref_id();
  inline ::std::string* release_adv_ref_id();
  inline void set_allocated_adv_ref_id(::std::string* adv_ref_id);

  // optional .Indication.AdvSideEnum adv_side = 3;
  inline bool has_adv_side() const;
  inline void clear_adv_side();
  static const int kAdvSideFieldNumber = 3;
  inline ::Indication::AdvSideEnum adv_side() const;
  inline void set_adv_side(::Indication::AdvSideEnum value);

  // optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
  inline bool has_adv_trans_type() const;
  inline void clear_adv_trans_type();
  static const int kAdvTransTypeFieldNumber = 4;
  inline ::Indication::AdvTransTypeEnum adv_trans_type() const;
  inline void set_adv_trans_type(::Indication::AdvTransTypeEnum value);

  // optional string currency = 5;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 5;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional sfixed64 price = 6;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 6;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);

  // optional sfixed32 price_exponent = 7;
  inline bool has_price_exponent() const;
  inline void clear_price_exponent();
  static const int kPriceExponentFieldNumber = 7;
  inline ::google::protobuf::int32 price_exponent() const;
  inline void set_price_exponent(::google::protobuf::int32 value);

  // optional sfixed64 quantity = 8;
  inline bool has_quantity() const;
  inline void clear_quantity();
  static const int kQuantityFieldNumber = 8;
  inline ::google::protobuf::int64 quantity() const;
  inline void set_quantity(::google::protobuf::int64 value);

  // optional sfixed32 quantity_exponent = 9;
  inline bool has_quantity_exponent() const;
  inline void clear_quantity_exponent();
  static const int kQuantityExponentFieldNumber = 9;
  inline ::google::protobuf::int32 quantity_exponent() const;
  inline void set_quantity_exponent(::google::protobuf::int32 value);

  // optional .Session.StandardHeader standard_header = 10;
  inline bool has_standard_header() const;
  inline void clear_standard_header();
  static const int kStandardHeaderFieldNumber = 10;
  inline const ::Session::StandardHeader& standard_header() const;
  inline ::Session::StandardHeader* mutable_standard_header();
  inline ::Session::StandardHeader* release_standard_header();
  inline void set_allocated_standard_header(::Session::StandardHeader* standard_header);

  // optional .Session.StandardTrailer standard_trailer = 11;
  inline bool has_standard_trailer() const;
  inline void clear_standard_trailer();
  static const int kStandardTrailerFieldNumber = 11;
  inline const ::Session::StandardTrailer& standard_trailer() const;
  inline ::Session::StandardTrailer* mutable_standard_trailer();
  inline ::Session::StandardTrailer* release_standard_trailer();
  inline void set_allocated_standard_trailer(::Session::StandardTrailer* standard_trailer);

  // optional string text = 12;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 12;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional sfixed64 transact_time = 13;
  inline bool has_transact_time() const;
  inline void clear_transact_time();
  static const int kTransactTimeFieldNumber = 13;
  inline ::google::protobuf::int64 transact_time() const;
  inline void set_transact_time(::google::protobuf::int64 value);

  // optional string last_mkt = 14;
  inline bool has_last_mkt() const;
  inline void clear_last_mkt();
  static const int kLastMktFieldNumber = 14;
  inline const ::std::string& last_mkt() const;
  inline void set_last_mkt(const ::std::string& value);
  inline void set_last_mkt(const char* value);
  inline void set_last_mkt(const char* value, size_t size);
  inline ::std::string* mutable_last_mkt();
  inline ::std::string* release_last_mkt();
  inline void set_allocated_last_mkt(::std::string* last_mkt);

  // optional sfixed32 trade_date = 15;
  inline bool has_trade_date() const;
  inline void clear_trade_date();
  static const int kTradeDateFieldNumber = 15;
  inline ::google::protobuf::int32 trade_date() const;
  inline void set_trade_date(::google::protobuf::int32 value);

  // optional string urllink = 16;
  inline bool has_urllink() const;
  inline void clear_urllink();
  static const int kUrllinkFieldNumber = 16;
  inline const ::std::string& urllink() const;
  inline void set_urllink(const ::std::string& value);
  inline void set_urllink(const char* value);
  inline void set_urllink(const char* value, size_t size);
  inline ::std::string* mutable_urllink();
  inline ::std::string* release_urllink();
  inline void set_allocated_urllink(::std::string* urllink);

  // optional bytes encoded_text = 17;
  inline bool has_encoded_text() const;
  inline void clear_encoded_text();
  static const int kEncodedTextFieldNumber = 17;
  inline const ::std::string& encoded_text() const;
  inline void set_encoded_text(const ::std::string& value);
  inline void set_encoded_text(const char* value);
  inline void set_encoded_text(const void* value, size_t size);
  inline ::std::string* mutable_encoded_text();
  inline ::std::string* release_encoded_text();
  inline void set_allocated_encoded_text(::std::string* encoded_text);

  // optional fixed32 encoded_text_len = 18;
  inline bool has_encoded_text_len() const;
  inline void clear_encoded_text_len();
  static const int kEncodedTextLenFieldNumber = 18;
  inline ::google::protobuf::uint32 encoded_text_len() const;
  inline void set_encoded_text_len(::google::protobuf::uint32 value);

  // optional .Indication.TradingSessionIdEnum trading_session_id = 19;
  inline bool has_trading_session_id() const;
  inline void clear_trading_session_id();
  static const int kTradingSessionIdFieldNumber = 19;
  inline ::Indication::TradingSessionIdEnum trading_session_id() const;
  inline void set_trading_session_id(::Indication::TradingSessionIdEnum value);

  // optional .Common.Instrument instrument = 20;
  inline bool has_instrument() const;
  inline void clear_instrument();
  static const int kInstrumentFieldNumber = 20;
  inline const ::Common::Instrument& instrument() const;
  inline ::Common::Instrument* mutable_instrument();
  inline ::Common::Instrument* release_instrument();
  inline void set_allocated_instrument(::Common::Instrument* instrument);

  // optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
  inline bool has_trading_session_sub_id() const;
  inline void clear_trading_session_sub_id();
  static const int kTradingSessionSubIdFieldNumber = 21;
  inline ::Indication::TradingSessionSubIdEnum trading_session_sub_id() const;
  inline void set_trading_session_sub_id(::Indication::TradingSessionSubIdEnum value);

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
  inline int instrmt_leg_grp_size() const;
  inline void clear_instrmt_leg_grp();
  static const int kInstrmtLegGrpFieldNumber = 22;
  inline const ::Common::InstrmtLegGrp& instrmt_leg_grp(int index) const;
  inline ::Common::InstrmtLegGrp* mutable_instrmt_leg_grp(int index);
  inline ::Common::InstrmtLegGrp* add_instrmt_leg_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegGrp >&
      instrmt_leg_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegGrp >*
      mutable_instrmt_leg_grp();

  // optional .Indication.QtyTypeEnum qty_type = 23;
  inline bool has_qty_type() const;
  inline void clear_qty_type();
  static const int kQtyTypeFieldNumber = 23;
  inline ::Indication::QtyTypeEnum qty_type() const;
  inline void set_qty_type(::Indication::QtyTypeEnum value);

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
  inline int und_instrmt_grp_size() const;
  inline void clear_und_instrmt_grp();
  static const int kUndInstrmtGrpFieldNumber = 24;
  inline const ::Common::UndInstrmtGrp& und_instrmt_grp(int index) const;
  inline ::Common::UndInstrmtGrp* mutable_und_instrmt_grp(int index);
  inline ::Common::UndInstrmtGrp* add_und_instrmt_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >&
      und_instrmt_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >*
      mutable_und_instrmt_grp();

  // @@protoc_insertion_point(class_scope:Indication.Advertisement)
 private:
  inline void set_has_adv_id();
  inline void clear_has_adv_id();
  inline void set_has_adv_ref_id();
  inline void clear_has_adv_ref_id();
  inline void set_has_adv_side();
  inline void clear_has_adv_side();
  inline void set_has_adv_trans_type();
  inline void clear_has_adv_trans_type();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_price_exponent();
  inline void clear_has_price_exponent();
  inline void set_has_quantity();
  inline void clear_has_quantity();
  inline void set_has_quantity_exponent();
  inline void clear_has_quantity_exponent();
  inline void set_has_standard_header();
  inline void clear_has_standard_header();
  inline void set_has_standard_trailer();
  inline void clear_has_standard_trailer();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_transact_time();
  inline void clear_has_transact_time();
  inline void set_has_last_mkt();
  inline void clear_has_last_mkt();
  inline void set_has_trade_date();
  inline void clear_has_trade_date();
  inline void set_has_urllink();
  inline void clear_has_urllink();
  inline void set_has_encoded_text();
  inline void clear_has_encoded_text();
  inline void set_has_encoded_text_len();
  inline void clear_has_encoded_text_len();
  inline void set_has_trading_session_id();
  inline void clear_has_trading_session_id();
  inline void set_has_instrument();
  inline void clear_has_instrument();
  inline void set_has_trading_session_sub_id();
  inline void clear_has_trading_session_sub_id();
  inline void set_has_qty_type();
  inline void clear_has_qty_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* adv_id_;
  ::std::string* adv_ref_id_;
  int adv_side_;
  int adv_trans_type_;
  ::std::string* currency_;
  ::google::protobuf::int64 price_;
  ::google::protobuf::int64 quantity_;
  ::google::protobuf::int32 price_exponent_;
  ::google::protobuf::int32 quantity_exponent_;
  ::Session::StandardHeader* standard_header_;
  ::Session::StandardTrailer* standard_trailer_;
  ::std::string* text_;
  ::google::protobuf::int64 transact_time_;
  ::std::string* last_mkt_;
  ::std::string* urllink_;
  ::google::protobuf::int32 trade_date_;
  ::google::protobuf::uint32 encoded_text_len_;
  ::std::string* encoded_text_;
  ::Common::Instrument* instrument_;
  int trading_session_id_;
  int trading_session_sub_id_;
  ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegGrp > instrmt_leg_grp_;
  ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp > und_instrmt_grp_;
  int qty_type_;
  friend void  protobuf_AddDesc_indication_2eproto();
  friend void protobuf_AssignDesc_indication_2eproto();
  friend void protobuf_ShutdownFile_indication_2eproto();

  void InitAsDefaultInstance();
  static Advertisement* default_instance_;
};
// -------------------------------------------------------------------

class IoiQualGrp : public ::google::protobuf::Message {
 public:
  IoiQualGrp();
  virtual ~IoiQualGrp();

  IoiQualGrp(const IoiQualGrp& from);

  inline IoiQualGrp& operator=(const IoiQualGrp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IoiQualGrp& default_instance();

  void Swap(IoiQualGrp* other);

  // implements Message ----------------------------------------------

  IoiQualGrp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IoiQualGrp& from);
  void MergeFrom(const IoiQualGrp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
  inline bool has_ioi_qualifier() const;
  inline void clear_ioi_qualifier();
  static const int kIoiQualifierFieldNumber = 1;
  inline ::Indication::IoiQualifierEnum ioi_qualifier() const;
  inline void set_ioi_qualifier(::Indication::IoiQualifierEnum value);

  // @@protoc_insertion_point(class_scope:Indication.IoiQualGrp)
 private:
  inline void set_has_ioi_qualifier();
  inline void clear_has_ioi_qualifier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int ioi_qualifier_;
  friend void  protobuf_AddDesc_indication_2eproto();
  friend void protobuf_AssignDesc_indication_2eproto();
  friend void protobuf_ShutdownFile_indication_2eproto();

  void InitAsDefaultInstance();
  static IoiQualGrp* default_instance_;
};
// -------------------------------------------------------------------

class Ioi : public ::google::protobuf::Message {
 public:
  Ioi();
  virtual ~Ioi();

  Ioi(const Ioi& from);

  inline Ioi& operator=(const Ioi& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ioi& default_instance();

  void Swap(Ioi* other);

  // implements Message ----------------------------------------------

  Ioi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ioi& from);
  void MergeFrom(const Ioi& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string currency = 1;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 1;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // optional string ioi_id = 2;
  inline bool has_ioi_id() const;
  inline void clear_ioi_id();
  static const int kIoiIdFieldNumber = 2;
  inline const ::std::string& ioi_id() const;
  inline void set_ioi_id(const ::std::string& value);
  inline void set_ioi_id(const char* value);
  inline void set_ioi_id(const char* value, size_t size);
  inline ::std::string* mutable_ioi_id();
  inline ::std::string* release_ioi_id();
  inline void set_allocated_ioi_id(::std::string* ioi_id);

  // optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
  inline bool has_ioi_qlty_ind() const;
  inline void clear_ioi_qlty_ind();
  static const int kIoiQltyIndFieldNumber = 3;
  inline ::Indication::IoiQltyIndEnum ioi_qlty_ind() const;
  inline void set_ioi_qlty_ind(::Indication::IoiQltyIndEnum value);

  // optional .Indication.IoiQtyEnum ioi_qty = 4;
  inline bool has_ioi_qty() const;
  inline void clear_ioi_qty();
  static const int kIoiQtyFieldNumber = 4;
  inline ::Indication::IoiQtyEnum ioi_qty() const;
  inline void set_ioi_qty(::Indication::IoiQtyEnum value);

  // optional string ioi_ref_id = 5;
  inline bool has_ioi_ref_id() const;
  inline void clear_ioi_ref_id();
  static const int kIoiRefIdFieldNumber = 5;
  inline const ::std::string& ioi_ref_id() const;
  inline void set_ioi_ref_id(const ::std::string& value);
  inline void set_ioi_ref_id(const char* value);
  inline void set_ioi_ref_id(const char* value, size_t size);
  inline ::std::string* mutable_ioi_ref_id();
  inline ::std::string* release_ioi_ref_id();
  inline void set_allocated_ioi_ref_id(::std::string* ioi_ref_id);

  // optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
  inline bool has_ioi_trans_type() const;
  inline void clear_ioi_trans_type();
  static const int kIoiTransTypeFieldNumber = 6;
  inline ::Indication::IoiTransTypeEnum ioi_trans_type() const;
  inline void set_ioi_trans_type(::Indication::IoiTransTypeEnum value);

  // optional sfixed64 price = 7;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 7;
  inline ::google::protobuf::int64 price() const;
  inline void set_price(::google::protobuf::int64 value);

  // optional sfixed32 price_exponent = 8;
  inline bool has_price_exponent() const;
  inline void clear_price_exponent();
  static const int kPriceExponentFieldNumber = 8;
  inline ::google::protobuf::int32 price_exponent() const;
  inline void set_price_exponent(::google::protobuf::int32 value);

  // optional .Indication.SideEnum side = 9;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 9;
  inline ::Indication::SideEnum side() const;
  inline void set_side(::Indication::SideEnum value);

  // optional .Session.StandardHeader standard_header = 10;
  inline bool has_standard_header() const;
  inline void clear_standard_header();
  static const int kStandardHeaderFieldNumber = 10;
  inline const ::Session::StandardHeader& standard_header() const;
  inline ::Session::StandardHeader* mutable_standard_header();
  inline ::Session::StandardHeader* release_standard_header();
  inline void set_allocated_standard_header(::Session::StandardHeader* standard_header);

  // optional .Session.StandardTrailer standard_trailer = 11;
  inline bool has_standard_trailer() const;
  inline void clear_standard_trailer();
  static const int kStandardTrailerFieldNumber = 11;
  inline const ::Session::StandardTrailer& standard_trailer() const;
  inline ::Session::StandardTrailer* mutable_standard_trailer();
  inline ::Session::StandardTrailer* release_standard_trailer();
  inline void set_allocated_standard_trailer(::Session::StandardTrailer* standard_trailer);

  // optional string text = 12;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 12;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional sfixed64 valid_until_time = 13;
  inline bool has_valid_until_time() const;
  inline void clear_valid_until_time();
  static const int kValidUntilTimeFieldNumber = 13;
  inline ::google::protobuf::int64 valid_until_time() const;
  inline void set_valid_until_time(::google::protobuf::int64 value);

  // optional bool ioi_natural_flag = 14;
  inline bool has_ioi_natural_flag() const;
  inline void clear_ioi_natural_flag();
  static const int kIoiNaturalFlagFieldNumber = 14;
  inline bool ioi_natural_flag() const;
  inline void set_ioi_natural_flag(bool value);

  // optional sfixed64 transact_time = 15;
  inline bool has_transact_time() const;
  inline void clear_transact_time();
  static const int kTransactTimeFieldNumber = 15;
  inline ::google::protobuf::int64 transact_time() const;
  inline void set_transact_time(::google::protobuf::int64 value);

  // optional string urllink = 16;
  inline bool has_urllink() const;
  inline void clear_urllink();
  static const int kUrllinkFieldNumber = 16;
  inline const ::std::string& urllink() const;
  inline void set_urllink(const ::std::string& value);
  inline void set_urllink(const char* value);
  inline void set_urllink(const char* value, size_t size);
  inline ::std::string* mutable_urllink();
  inline ::std::string* release_urllink();
  inline void set_allocated_urllink(::std::string* urllink);

  // optional bytes encoded_text = 17;
  inline bool has_encoded_text() const;
  inline void clear_encoded_text();
  static const int kEncodedTextFieldNumber = 17;
  inline const ::std::string& encoded_text() const;
  inline void set_encoded_text(const ::std::string& value);
  inline void set_encoded_text(const char* value);
  inline void set_encoded_text(const void* value, size_t size);
  inline ::std::string* mutable_encoded_text();
  inline ::std::string* release_encoded_text();
  inline void set_allocated_encoded_text(::std::string* encoded_text);

  // optional fixed32 encoded_text_len = 18;
  inline bool has_encoded_text_len() const;
  inline void clear_encoded_text_len();
  static const int kEncodedTextLenFieldNumber = 18;
  inline ::google::protobuf::uint32 encoded_text_len() const;
  inline void set_encoded_text_len(::google::protobuf::uint32 value);

  // optional .Common.Instrument instrument = 19;
  inline bool has_instrument() const;
  inline void clear_instrument();
  static const int kInstrumentFieldNumber = 19;
  inline const ::Common::Instrument& instrument() const;
  inline ::Common::Instrument* mutable_instrument();
  inline ::Common::Instrument* release_instrument();
  inline void set_allocated_instrument(::Common::Instrument* instrument);

  // optional .Indication.PriceTypeEnum price_type = 20;
  inline bool has_price_type() const;
  inline void clear_price_type();
  static const int kPriceTypeFieldNumber = 20;
  inline ::Indication::PriceTypeEnum price_type() const;
  inline void set_price_type(::Indication::PriceTypeEnum value);

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
  inline bool has_spread_or_benchmark_curve_data() const;
  inline void clear_spread_or_benchmark_curve_data();
  static const int kSpreadOrBenchmarkCurveDataFieldNumber = 21;
  inline const ::Common::SpreadOrBenchmarkCurveData& spread_or_benchmark_curve_data() const;
  inline ::Common::SpreadOrBenchmarkCurveData* mutable_spread_or_benchmark_curve_data();
  inline ::Common::SpreadOrBenchmarkCurveData* release_spread_or_benchmark_curve_data();
  inline void set_allocated_spread_or_benchmark_curve_data(::Common::SpreadOrBenchmarkCurveData* spread_or_benchmark_curve_data);

  // optional .Common.FinancingDetails financing_details = 22;
  inline bool has_financing_details() const;
  inline void clear_financing_details();
  static const int kFinancingDetailsFieldNumber = 22;
  inline const ::Common::FinancingDetails& financing_details() const;
  inline ::Common::FinancingDetails* mutable_financing_details();
  inline ::Common::FinancingDetails* release_financing_details();
  inline void set_allocated_financing_details(::Common::FinancingDetails* financing_details);

  // repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
  inline int ioi_qual_grp_size() const;
  inline void clear_ioi_qual_grp();
  static const int kIoiQualGrpFieldNumber = 23;
  inline const ::Indication::IoiQualGrp& ioi_qual_grp(int index) const;
  inline ::Indication::IoiQualGrp* mutable_ioi_qual_grp(int index);
  inline ::Indication::IoiQualGrp* add_ioi_qual_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Indication::IoiQualGrp >&
      ioi_qual_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Indication::IoiQualGrp >*
      mutable_ioi_qual_grp();

  // repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
  inline int instrmt_leg_ioi_grp_size() const;
  inline void clear_instrmt_leg_ioi_grp();
  static const int kInstrmtLegIoiGrpFieldNumber = 24;
  inline const ::Common::InstrmtLegIoiGrp& instrmt_leg_ioi_grp(int index) const;
  inline ::Common::InstrmtLegIoiGrp* mutable_instrmt_leg_ioi_grp(int index);
  inline ::Common::InstrmtLegIoiGrp* add_instrmt_leg_ioi_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegIoiGrp >&
      instrmt_leg_ioi_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegIoiGrp >*
      mutable_instrmt_leg_ioi_grp();

  // optional .Common.OrderQtyData order_qty_data = 25;
  inline bool has_order_qty_data() const;
  inline void clear_order_qty_data();
  static const int kOrderQtyDataFieldNumber = 25;
  inline const ::Common::OrderQtyData& order_qty_data() const;
  inline ::Common::OrderQtyData* mutable_order_qty_data();
  inline ::Common::OrderQtyData* release_order_qty_data();
  inline void set_allocated_order_qty_data(::Common::OrderQtyData* order_qty_data);

  // repeated .Common.Parties parties = 26;
  inline int parties_size() const;
  inline void clear_parties();
  static const int kPartiesFieldNumber = 26;
  inline const ::Common::Parties& parties(int index) const;
  inline ::Common::Parties* mutable_parties(int index);
  inline ::Common::Parties* add_parties();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::Parties >&
      parties() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::Parties >*
      mutable_parties();

  // optional .Indication.QtyTypeEnum qty_type = 27;
  inline bool has_qty_type() const;
  inline void clear_qty_type();
  static const int kQtyTypeFieldNumber = 27;
  inline ::Indication::QtyTypeEnum qty_type() const;
  inline void set_qty_type(::Indication::QtyTypeEnum value);

  // repeated .Common.RoutingGrp routing_grp = 28;
  inline int routing_grp_size() const;
  inline void clear_routing_grp();
  static const int kRoutingGrpFieldNumber = 28;
  inline const ::Common::RoutingGrp& routing_grp(int index) const;
  inline ::Common::RoutingGrp* mutable_routing_grp(int index);
  inline ::Common::RoutingGrp* add_routing_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::RoutingGrp >&
      routing_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::RoutingGrp >*
      mutable_routing_grp();

  // repeated .Common.Stipulations stipulations = 29;
  inline int stipulations_size() const;
  inline void clear_stipulations();
  static const int kStipulationsFieldNumber = 29;
  inline const ::Common::Stipulations& stipulations(int index) const;
  inline ::Common::Stipulations* mutable_stipulations(int index);
  inline ::Common::Stipulations* add_stipulations();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::Stipulations >&
      stipulations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::Stipulations >*
      mutable_stipulations();

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
  inline int und_instrmt_grp_size() const;
  inline void clear_und_instrmt_grp();
  static const int kUndInstrmtGrpFieldNumber = 30;
  inline const ::Common::UndInstrmtGrp& und_instrmt_grp(int index) const;
  inline ::Common::UndInstrmtGrp* mutable_und_instrmt_grp(int index);
  inline ::Common::UndInstrmtGrp* add_und_instrmt_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >&
      und_instrmt_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >*
      mutable_und_instrmt_grp();

  // optional .Common.YieldData yield_data = 31;
  inline bool has_yield_data() const;
  inline void clear_yield_data();
  static const int kYieldDataFieldNumber = 31;
  inline const ::Common::YieldData& yield_data() const;
  inline ::Common::YieldData* mutable_yield_data();
  inline ::Common::YieldData* release_yield_data();
  inline void set_allocated_yield_data(::Common::YieldData* yield_data);

  // optional .Common.ApplicationSequenceControl application_sequence_control = 32;
  inline bool has_application_sequence_control() const;
  inline void clear_application_sequence_control();
  static const int kApplicationSequenceControlFieldNumber = 32;
  inline const ::Common::ApplicationSequenceControl& application_sequence_control() const;
  inline ::Common::ApplicationSequenceControl* mutable_application_sequence_control();
  inline ::Common::ApplicationSequenceControl* release_application_sequence_control();
  inline void set_allocated_application_sequence_control(::Common::ApplicationSequenceControl* application_sequence_control);

  // @@protoc_insertion_point(class_scope:Indication.Ioi)
 private:
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_ioi_id();
  inline void clear_has_ioi_id();
  inline void set_has_ioi_qlty_ind();
  inline void clear_has_ioi_qlty_ind();
  inline void set_has_ioi_qty();
  inline void clear_has_ioi_qty();
  inline void set_has_ioi_ref_id();
  inline void clear_has_ioi_ref_id();
  inline void set_has_ioi_trans_type();
  inline void clear_has_ioi_trans_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_price_exponent();
  inline void clear_has_price_exponent();
  inline void set_has_side();
  inline void clear_has_side();
  inline void set_has_standard_header();
  inline void clear_has_standard_header();
  inline void set_has_standard_trailer();
  inline void clear_has_standard_trailer();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_valid_until_time();
  inline void clear_has_valid_until_time();
  inline void set_has_ioi_natural_flag();
  inline void clear_has_ioi_natural_flag();
  inline void set_has_transact_time();
  inline void clear_has_transact_time();
  inline void set_has_urllink();
  inline void clear_has_urllink();
  inline void set_has_encoded_text();
  inline void clear_has_encoded_text();
  inline void set_has_encoded_text_len();
  inline void clear_has_encoded_text_len();
  inline void set_has_instrument();
  inline void clear_has_instrument();
  inline void set_has_price_type();
  inline void clear_has_price_type();
  inline void set_has_spread_or_benchmark_curve_data();
  inline void clear_has_spread_or_benchmark_curve_data();
  inline void set_has_financing_details();
  inline void clear_has_financing_details();
  inline void set_has_order_qty_data();
  inline void clear_has_order_qty_data();
  inline void set_has_qty_type();
  inline void clear_has_qty_type();
  inline void set_has_yield_data();
  inline void clear_has_yield_data();
  inline void set_has_application_sequence_control();
  inline void clear_has_application_sequence_control();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* currency_;
  ::std::string* ioi_id_;
  int ioi_qlty_ind_;
  int ioi_qty_;
  ::std::string* ioi_ref_id_;
  ::google::protobuf::int64 price_;
  int ioi_trans_type_;
  ::google::protobuf::int32 price_exponent_;
  ::Session::StandardHeader* standard_header_;
  ::Session::StandardTrailer* standard_trailer_;
  int side_;
  bool ioi_natural_flag_;
  ::std::string* text_;
  ::google::protobuf::int64 valid_until_time_;
  ::google::protobuf::int64 transact_time_;
  ::std::string* urllink_;
  ::std::string* encoded_text_;
  ::Common::Instrument* instrument_;
  ::google::protobuf::uint32 encoded_text_len_;
  int price_type_;
  ::Common::SpreadOrBenchmarkCurveData* spread_or_benchmark_curve_data_;
  ::Common::FinancingDetails* financing_details_;
  ::google::protobuf::RepeatedPtrField< ::Indication::IoiQualGrp > ioi_qual_grp_;
  ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegIoiGrp > instrmt_leg_ioi_grp_;
  ::Common::OrderQtyData* order_qty_data_;
  ::google::protobuf::RepeatedPtrField< ::Common::Parties > parties_;
  ::google::protobuf::RepeatedPtrField< ::Common::RoutingGrp > routing_grp_;
  ::google::protobuf::RepeatedPtrField< ::Common::Stipulations > stipulations_;
  ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp > und_instrmt_grp_;
  ::Common::YieldData* yield_data_;
  ::Common::ApplicationSequenceControl* application_sequence_control_;
  int qty_type_;
  friend void  protobuf_AddDesc_indication_2eproto();
  friend void protobuf_AssignDesc_indication_2eproto();
  friend void protobuf_ShutdownFile_indication_2eproto();

  void InitAsDefaultInstance();
  static Ioi* default_instance_;
};
// ===================================================================


// ===================================================================

// Advertisement

// optional string adv_id = 1;
inline bool Advertisement::has_adv_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Advertisement::set_has_adv_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Advertisement::clear_has_adv_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Advertisement::clear_adv_id() {
  if (adv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_id_->clear();
  }
  clear_has_adv_id();
}
inline const ::std::string& Advertisement::adv_id() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.adv_id)
  return *adv_id_;
}
inline void Advertisement::set_adv_id(const ::std::string& value) {
  set_has_adv_id();
  if (adv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_id_ = new ::std::string;
  }
  adv_id_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.adv_id)
}
inline void Advertisement::set_adv_id(const char* value) {
  set_has_adv_id();
  if (adv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_id_ = new ::std::string;
  }
  adv_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.adv_id)
}
inline void Advertisement::set_adv_id(const char* value, size_t size) {
  set_has_adv_id();
  if (adv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_id_ = new ::std::string;
  }
  adv_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.adv_id)
}
inline ::std::string* Advertisement::mutable_adv_id() {
  set_has_adv_id();
  if (adv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.adv_id)
  return adv_id_;
}
inline ::std::string* Advertisement::release_adv_id() {
  clear_has_adv_id();
  if (adv_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adv_id_;
    adv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_adv_id(::std::string* adv_id) {
  if (adv_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adv_id_;
  }
  if (adv_id) {
    set_has_adv_id();
    adv_id_ = adv_id;
  } else {
    clear_has_adv_id();
    adv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.adv_id)
}

// optional string adv_ref_id = 2;
inline bool Advertisement::has_adv_ref_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Advertisement::set_has_adv_ref_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Advertisement::clear_has_adv_ref_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Advertisement::clear_adv_ref_id() {
  if (adv_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_ref_id_->clear();
  }
  clear_has_adv_ref_id();
}
inline const ::std::string& Advertisement::adv_ref_id() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.adv_ref_id)
  return *adv_ref_id_;
}
inline void Advertisement::set_adv_ref_id(const ::std::string& value) {
  set_has_adv_ref_id();
  if (adv_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_ref_id_ = new ::std::string;
  }
  adv_ref_id_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.adv_ref_id)
}
inline void Advertisement::set_adv_ref_id(const char* value) {
  set_has_adv_ref_id();
  if (adv_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_ref_id_ = new ::std::string;
  }
  adv_ref_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.adv_ref_id)
}
inline void Advertisement::set_adv_ref_id(const char* value, size_t size) {
  set_has_adv_ref_id();
  if (adv_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_ref_id_ = new ::std::string;
  }
  adv_ref_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.adv_ref_id)
}
inline ::std::string* Advertisement::mutable_adv_ref_id() {
  set_has_adv_ref_id();
  if (adv_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    adv_ref_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.adv_ref_id)
  return adv_ref_id_;
}
inline ::std::string* Advertisement::release_adv_ref_id() {
  clear_has_adv_ref_id();
  if (adv_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = adv_ref_id_;
    adv_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_adv_ref_id(::std::string* adv_ref_id) {
  if (adv_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete adv_ref_id_;
  }
  if (adv_ref_id) {
    set_has_adv_ref_id();
    adv_ref_id_ = adv_ref_id;
  } else {
    clear_has_adv_ref_id();
    adv_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.adv_ref_id)
}

// optional .Indication.AdvSideEnum adv_side = 3;
inline bool Advertisement::has_adv_side() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Advertisement::set_has_adv_side() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Advertisement::clear_has_adv_side() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Advertisement::clear_adv_side() {
  adv_side_ = 0;
  clear_has_adv_side();
}
inline ::Indication::AdvSideEnum Advertisement::adv_side() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.adv_side)
  return static_cast< ::Indication::AdvSideEnum >(adv_side_);
}
inline void Advertisement::set_adv_side(::Indication::AdvSideEnum value) {
  assert(::Indication::AdvSideEnum_IsValid(value));
  set_has_adv_side();
  adv_side_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.adv_side)
}

// optional .Indication.AdvTransTypeEnum adv_trans_type = 4;
inline bool Advertisement::has_adv_trans_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Advertisement::set_has_adv_trans_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Advertisement::clear_has_adv_trans_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Advertisement::clear_adv_trans_type() {
  adv_trans_type_ = 0;
  clear_has_adv_trans_type();
}
inline ::Indication::AdvTransTypeEnum Advertisement::adv_trans_type() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.adv_trans_type)
  return static_cast< ::Indication::AdvTransTypeEnum >(adv_trans_type_);
}
inline void Advertisement::set_adv_trans_type(::Indication::AdvTransTypeEnum value) {
  assert(::Indication::AdvTransTypeEnum_IsValid(value));
  set_has_adv_trans_type();
  adv_trans_type_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.adv_trans_type)
}

// optional string currency = 5;
inline bool Advertisement::has_currency() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Advertisement::set_has_currency() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Advertisement::clear_has_currency() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Advertisement::clear_currency() {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& Advertisement::currency() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.currency)
  return *currency_;
}
inline void Advertisement::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.currency)
}
inline void Advertisement::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.currency)
}
inline void Advertisement::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.currency)
}
inline ::std::string* Advertisement::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.currency)
  return currency_;
}
inline ::std::string* Advertisement::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.currency)
}

// optional sfixed64 price = 6;
inline bool Advertisement::has_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Advertisement::set_has_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Advertisement::clear_has_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Advertisement::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 Advertisement::price() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.price)
  return price_;
}
inline void Advertisement::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.price)
}

// optional sfixed32 price_exponent = 7;
inline bool Advertisement::has_price_exponent() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Advertisement::set_has_price_exponent() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Advertisement::clear_has_price_exponent() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Advertisement::clear_price_exponent() {
  price_exponent_ = 0;
  clear_has_price_exponent();
}
inline ::google::protobuf::int32 Advertisement::price_exponent() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.price_exponent)
  return price_exponent_;
}
inline void Advertisement::set_price_exponent(::google::protobuf::int32 value) {
  set_has_price_exponent();
  price_exponent_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.price_exponent)
}

// optional sfixed64 quantity = 8;
inline bool Advertisement::has_quantity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Advertisement::set_has_quantity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Advertisement::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Advertisement::clear_quantity() {
  quantity_ = GOOGLE_LONGLONG(0);
  clear_has_quantity();
}
inline ::google::protobuf::int64 Advertisement::quantity() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.quantity)
  return quantity_;
}
inline void Advertisement::set_quantity(::google::protobuf::int64 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.quantity)
}

// optional sfixed32 quantity_exponent = 9;
inline bool Advertisement::has_quantity_exponent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Advertisement::set_has_quantity_exponent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Advertisement::clear_has_quantity_exponent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Advertisement::clear_quantity_exponent() {
  quantity_exponent_ = 0;
  clear_has_quantity_exponent();
}
inline ::google::protobuf::int32 Advertisement::quantity_exponent() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.quantity_exponent)
  return quantity_exponent_;
}
inline void Advertisement::set_quantity_exponent(::google::protobuf::int32 value) {
  set_has_quantity_exponent();
  quantity_exponent_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.quantity_exponent)
}

// optional .Session.StandardHeader standard_header = 10;
inline bool Advertisement::has_standard_header() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Advertisement::set_has_standard_header() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Advertisement::clear_has_standard_header() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Advertisement::clear_standard_header() {
  if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
  clear_has_standard_header();
}
inline const ::Session::StandardHeader& Advertisement::standard_header() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.standard_header)
  return standard_header_ != NULL ? *standard_header_ : *default_instance_->standard_header_;
}
inline ::Session::StandardHeader* Advertisement::mutable_standard_header() {
  set_has_standard_header();
  if (standard_header_ == NULL) standard_header_ = new ::Session::StandardHeader;
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.standard_header)
  return standard_header_;
}
inline ::Session::StandardHeader* Advertisement::release_standard_header() {
  clear_has_standard_header();
  ::Session::StandardHeader* temp = standard_header_;
  standard_header_ = NULL;
  return temp;
}
inline void Advertisement::set_allocated_standard_header(::Session::StandardHeader* standard_header) {
  delete standard_header_;
  standard_header_ = standard_header;
  if (standard_header) {
    set_has_standard_header();
  } else {
    clear_has_standard_header();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.standard_header)
}

// optional .Session.StandardTrailer standard_trailer = 11;
inline bool Advertisement::has_standard_trailer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Advertisement::set_has_standard_trailer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Advertisement::clear_has_standard_trailer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Advertisement::clear_standard_trailer() {
  if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
  clear_has_standard_trailer();
}
inline const ::Session::StandardTrailer& Advertisement::standard_trailer() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.standard_trailer)
  return standard_trailer_ != NULL ? *standard_trailer_ : *default_instance_->standard_trailer_;
}
inline ::Session::StandardTrailer* Advertisement::mutable_standard_trailer() {
  set_has_standard_trailer();
  if (standard_trailer_ == NULL) standard_trailer_ = new ::Session::StandardTrailer;
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.standard_trailer)
  return standard_trailer_;
}
inline ::Session::StandardTrailer* Advertisement::release_standard_trailer() {
  clear_has_standard_trailer();
  ::Session::StandardTrailer* temp = standard_trailer_;
  standard_trailer_ = NULL;
  return temp;
}
inline void Advertisement::set_allocated_standard_trailer(::Session::StandardTrailer* standard_trailer) {
  delete standard_trailer_;
  standard_trailer_ = standard_trailer;
  if (standard_trailer) {
    set_has_standard_trailer();
  } else {
    clear_has_standard_trailer();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.standard_trailer)
}

// optional string text = 12;
inline bool Advertisement::has_text() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Advertisement::set_has_text() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Advertisement::clear_has_text() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Advertisement::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Advertisement::text() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.text)
  return *text_;
}
inline void Advertisement::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.text)
}
inline void Advertisement::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.text)
}
inline void Advertisement::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.text)
}
inline ::std::string* Advertisement::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.text)
  return text_;
}
inline ::std::string* Advertisement::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.text)
}

// optional sfixed64 transact_time = 13;
inline bool Advertisement::has_transact_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Advertisement::set_has_transact_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Advertisement::clear_has_transact_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Advertisement::clear_transact_time() {
  transact_time_ = GOOGLE_LONGLONG(0);
  clear_has_transact_time();
}
inline ::google::protobuf::int64 Advertisement::transact_time() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.transact_time)
  return transact_time_;
}
inline void Advertisement::set_transact_time(::google::protobuf::int64 value) {
  set_has_transact_time();
  transact_time_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.transact_time)
}

// optional string last_mkt = 14;
inline bool Advertisement::has_last_mkt() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Advertisement::set_has_last_mkt() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Advertisement::clear_has_last_mkt() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Advertisement::clear_last_mkt() {
  if (last_mkt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_mkt_->clear();
  }
  clear_has_last_mkt();
}
inline const ::std::string& Advertisement::last_mkt() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.last_mkt)
  return *last_mkt_;
}
inline void Advertisement::set_last_mkt(const ::std::string& value) {
  set_has_last_mkt();
  if (last_mkt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_mkt_ = new ::std::string;
  }
  last_mkt_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.last_mkt)
}
inline void Advertisement::set_last_mkt(const char* value) {
  set_has_last_mkt();
  if (last_mkt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_mkt_ = new ::std::string;
  }
  last_mkt_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.last_mkt)
}
inline void Advertisement::set_last_mkt(const char* value, size_t size) {
  set_has_last_mkt();
  if (last_mkt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_mkt_ = new ::std::string;
  }
  last_mkt_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.last_mkt)
}
inline ::std::string* Advertisement::mutable_last_mkt() {
  set_has_last_mkt();
  if (last_mkt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    last_mkt_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.last_mkt)
  return last_mkt_;
}
inline ::std::string* Advertisement::release_last_mkt() {
  clear_has_last_mkt();
  if (last_mkt_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = last_mkt_;
    last_mkt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_last_mkt(::std::string* last_mkt) {
  if (last_mkt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_mkt_;
  }
  if (last_mkt) {
    set_has_last_mkt();
    last_mkt_ = last_mkt;
  } else {
    clear_has_last_mkt();
    last_mkt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.last_mkt)
}

// optional sfixed32 trade_date = 15;
inline bool Advertisement::has_trade_date() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Advertisement::set_has_trade_date() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Advertisement::clear_has_trade_date() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Advertisement::clear_trade_date() {
  trade_date_ = 0;
  clear_has_trade_date();
}
inline ::google::protobuf::int32 Advertisement::trade_date() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.trade_date)
  return trade_date_;
}
inline void Advertisement::set_trade_date(::google::protobuf::int32 value) {
  set_has_trade_date();
  trade_date_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.trade_date)
}

// optional string urllink = 16;
inline bool Advertisement::has_urllink() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Advertisement::set_has_urllink() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Advertisement::clear_has_urllink() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Advertisement::clear_urllink() {
  if (urllink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_->clear();
  }
  clear_has_urllink();
}
inline const ::std::string& Advertisement::urllink() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.urllink)
  return *urllink_;
}
inline void Advertisement::set_urllink(const ::std::string& value) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.urllink)
}
inline void Advertisement::set_urllink(const char* value) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.urllink)
}
inline void Advertisement::set_urllink(const char* value, size_t size) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.urllink)
}
inline ::std::string* Advertisement::mutable_urllink() {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.urllink)
  return urllink_;
}
inline ::std::string* Advertisement::release_urllink() {
  clear_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = urllink_;
    urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_urllink(::std::string* urllink) {
  if (urllink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete urllink_;
  }
  if (urllink) {
    set_has_urllink();
    urllink_ = urllink;
  } else {
    clear_has_urllink();
    urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.urllink)
}

// optional bytes encoded_text = 17;
inline bool Advertisement::has_encoded_text() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Advertisement::set_has_encoded_text() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Advertisement::clear_has_encoded_text() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Advertisement::clear_encoded_text() {
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_->clear();
  }
  clear_has_encoded_text();
}
inline const ::std::string& Advertisement::encoded_text() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.encoded_text)
  return *encoded_text_;
}
inline void Advertisement::set_encoded_text(const ::std::string& value) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Advertisement.encoded_text)
}
inline void Advertisement::set_encoded_text(const char* value) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Advertisement.encoded_text)
}
inline void Advertisement::set_encoded_text(const void* value, size_t size) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Advertisement.encoded_text)
}
inline ::std::string* Advertisement::mutable_encoded_text() {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.encoded_text)
  return encoded_text_;
}
inline ::std::string* Advertisement::release_encoded_text() {
  clear_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encoded_text_;
    encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Advertisement::set_allocated_encoded_text(::std::string* encoded_text) {
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (encoded_text) {
    set_has_encoded_text();
    encoded_text_ = encoded_text;
  } else {
    clear_has_encoded_text();
    encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.encoded_text)
}

// optional fixed32 encoded_text_len = 18;
inline bool Advertisement::has_encoded_text_len() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Advertisement::set_has_encoded_text_len() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Advertisement::clear_has_encoded_text_len() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Advertisement::clear_encoded_text_len() {
  encoded_text_len_ = 0u;
  clear_has_encoded_text_len();
}
inline ::google::protobuf::uint32 Advertisement::encoded_text_len() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.encoded_text_len)
  return encoded_text_len_;
}
inline void Advertisement::set_encoded_text_len(::google::protobuf::uint32 value) {
  set_has_encoded_text_len();
  encoded_text_len_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.encoded_text_len)
}

// optional .Indication.TradingSessionIdEnum trading_session_id = 19;
inline bool Advertisement::has_trading_session_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Advertisement::set_has_trading_session_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Advertisement::clear_has_trading_session_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Advertisement::clear_trading_session_id() {
  trading_session_id_ = 0;
  clear_has_trading_session_id();
}
inline ::Indication::TradingSessionIdEnum Advertisement::trading_session_id() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.trading_session_id)
  return static_cast< ::Indication::TradingSessionIdEnum >(trading_session_id_);
}
inline void Advertisement::set_trading_session_id(::Indication::TradingSessionIdEnum value) {
  assert(::Indication::TradingSessionIdEnum_IsValid(value));
  set_has_trading_session_id();
  trading_session_id_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.trading_session_id)
}

// optional .Common.Instrument instrument = 20;
inline bool Advertisement::has_instrument() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Advertisement::set_has_instrument() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Advertisement::clear_has_instrument() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Advertisement::clear_instrument() {
  if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
  clear_has_instrument();
}
inline const ::Common::Instrument& Advertisement::instrument() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.instrument)
  return instrument_ != NULL ? *instrument_ : *default_instance_->instrument_;
}
inline ::Common::Instrument* Advertisement::mutable_instrument() {
  set_has_instrument();
  if (instrument_ == NULL) instrument_ = new ::Common::Instrument;
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.instrument)
  return instrument_;
}
inline ::Common::Instrument* Advertisement::release_instrument() {
  clear_has_instrument();
  ::Common::Instrument* temp = instrument_;
  instrument_ = NULL;
  return temp;
}
inline void Advertisement::set_allocated_instrument(::Common::Instrument* instrument) {
  delete instrument_;
  instrument_ = instrument;
  if (instrument) {
    set_has_instrument();
  } else {
    clear_has_instrument();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Advertisement.instrument)
}

// optional .Indication.TradingSessionSubIdEnum trading_session_sub_id = 21;
inline bool Advertisement::has_trading_session_sub_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Advertisement::set_has_trading_session_sub_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Advertisement::clear_has_trading_session_sub_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Advertisement::clear_trading_session_sub_id() {
  trading_session_sub_id_ = 0;
  clear_has_trading_session_sub_id();
}
inline ::Indication::TradingSessionSubIdEnum Advertisement::trading_session_sub_id() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.trading_session_sub_id)
  return static_cast< ::Indication::TradingSessionSubIdEnum >(trading_session_sub_id_);
}
inline void Advertisement::set_trading_session_sub_id(::Indication::TradingSessionSubIdEnum value) {
  assert(::Indication::TradingSessionSubIdEnum_IsValid(value));
  set_has_trading_session_sub_id();
  trading_session_sub_id_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.trading_session_sub_id)
}

// repeated .Common.InstrmtLegGrp instrmt_leg_grp = 22;
inline int Advertisement::instrmt_leg_grp_size() const {
  return instrmt_leg_grp_.size();
}
inline void Advertisement::clear_instrmt_leg_grp() {
  instrmt_leg_grp_.Clear();
}
inline const ::Common::InstrmtLegGrp& Advertisement::instrmt_leg_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.instrmt_leg_grp)
  return instrmt_leg_grp_.Get(index);
}
inline ::Common::InstrmtLegGrp* Advertisement::mutable_instrmt_leg_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.instrmt_leg_grp)
  return instrmt_leg_grp_.Mutable(index);
}
inline ::Common::InstrmtLegGrp* Advertisement::add_instrmt_leg_grp() {
  // @@protoc_insertion_point(field_add:Indication.Advertisement.instrmt_leg_grp)
  return instrmt_leg_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegGrp >&
Advertisement::instrmt_leg_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Advertisement.instrmt_leg_grp)
  return instrmt_leg_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegGrp >*
Advertisement::mutable_instrmt_leg_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Advertisement.instrmt_leg_grp)
  return &instrmt_leg_grp_;
}

// optional .Indication.QtyTypeEnum qty_type = 23;
inline bool Advertisement::has_qty_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Advertisement::set_has_qty_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Advertisement::clear_has_qty_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Advertisement::clear_qty_type() {
  qty_type_ = 0;
  clear_has_qty_type();
}
inline ::Indication::QtyTypeEnum Advertisement::qty_type() const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.qty_type)
  return static_cast< ::Indication::QtyTypeEnum >(qty_type_);
}
inline void Advertisement::set_qty_type(::Indication::QtyTypeEnum value) {
  assert(::Indication::QtyTypeEnum_IsValid(value));
  set_has_qty_type();
  qty_type_ = value;
  // @@protoc_insertion_point(field_set:Indication.Advertisement.qty_type)
}

// repeated .Common.UndInstrmtGrp und_instrmt_grp = 24;
inline int Advertisement::und_instrmt_grp_size() const {
  return und_instrmt_grp_.size();
}
inline void Advertisement::clear_und_instrmt_grp() {
  und_instrmt_grp_.Clear();
}
inline const ::Common::UndInstrmtGrp& Advertisement::und_instrmt_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Advertisement.und_instrmt_grp)
  return und_instrmt_grp_.Get(index);
}
inline ::Common::UndInstrmtGrp* Advertisement::mutable_und_instrmt_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Advertisement.und_instrmt_grp)
  return und_instrmt_grp_.Mutable(index);
}
inline ::Common::UndInstrmtGrp* Advertisement::add_und_instrmt_grp() {
  // @@protoc_insertion_point(field_add:Indication.Advertisement.und_instrmt_grp)
  return und_instrmt_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >&
Advertisement::und_instrmt_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Advertisement.und_instrmt_grp)
  return und_instrmt_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >*
Advertisement::mutable_und_instrmt_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Advertisement.und_instrmt_grp)
  return &und_instrmt_grp_;
}

// -------------------------------------------------------------------

// IoiQualGrp

// optional .Indication.IoiQualifierEnum ioi_qualifier = 1;
inline bool IoiQualGrp::has_ioi_qualifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IoiQualGrp::set_has_ioi_qualifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IoiQualGrp::clear_has_ioi_qualifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IoiQualGrp::clear_ioi_qualifier() {
  ioi_qualifier_ = 0;
  clear_has_ioi_qualifier();
}
inline ::Indication::IoiQualifierEnum IoiQualGrp::ioi_qualifier() const {
  // @@protoc_insertion_point(field_get:Indication.IoiQualGrp.ioi_qualifier)
  return static_cast< ::Indication::IoiQualifierEnum >(ioi_qualifier_);
}
inline void IoiQualGrp::set_ioi_qualifier(::Indication::IoiQualifierEnum value) {
  assert(::Indication::IoiQualifierEnum_IsValid(value));
  set_has_ioi_qualifier();
  ioi_qualifier_ = value;
  // @@protoc_insertion_point(field_set:Indication.IoiQualGrp.ioi_qualifier)
}

// -------------------------------------------------------------------

// Ioi

// optional string currency = 1;
inline bool Ioi::has_currency() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ioi::set_has_currency() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ioi::clear_has_currency() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ioi::clear_currency() {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& Ioi::currency() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.currency)
  return *currency_;
}
inline void Ioi::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.currency)
}
inline void Ioi::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.currency)
}
inline void Ioi::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.currency)
}
inline ::std::string* Ioi::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    currency_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.currency)
  return currency_;
}
inline ::std::string* Ioi::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.currency)
}

// optional string ioi_id = 2;
inline bool Ioi::has_ioi_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ioi::set_has_ioi_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ioi::clear_has_ioi_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ioi::clear_ioi_id() {
  if (ioi_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_id_->clear();
  }
  clear_has_ioi_id();
}
inline const ::std::string& Ioi::ioi_id() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_id)
  return *ioi_id_;
}
inline void Ioi::set_ioi_id(const ::std::string& value) {
  set_has_ioi_id();
  if (ioi_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_id_ = new ::std::string;
  }
  ioi_id_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_id)
}
inline void Ioi::set_ioi_id(const char* value) {
  set_has_ioi_id();
  if (ioi_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_id_ = new ::std::string;
  }
  ioi_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.ioi_id)
}
inline void Ioi::set_ioi_id(const char* value, size_t size) {
  set_has_ioi_id();
  if (ioi_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_id_ = new ::std::string;
  }
  ioi_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.ioi_id)
}
inline ::std::string* Ioi::mutable_ioi_id() {
  set_has_ioi_id();
  if (ioi_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.ioi_id)
  return ioi_id_;
}
inline ::std::string* Ioi::release_ioi_id() {
  clear_has_ioi_id();
  if (ioi_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ioi_id_;
    ioi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_ioi_id(::std::string* ioi_id) {
  if (ioi_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ioi_id_;
  }
  if (ioi_id) {
    set_has_ioi_id();
    ioi_id_ = ioi_id;
  } else {
    clear_has_ioi_id();
    ioi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.ioi_id)
}

// optional .Indication.IoiQltyIndEnum ioi_qlty_ind = 3;
inline bool Ioi::has_ioi_qlty_ind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ioi::set_has_ioi_qlty_ind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ioi::clear_has_ioi_qlty_ind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ioi::clear_ioi_qlty_ind() {
  ioi_qlty_ind_ = 0;
  clear_has_ioi_qlty_ind();
}
inline ::Indication::IoiQltyIndEnum Ioi::ioi_qlty_ind() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_qlty_ind)
  return static_cast< ::Indication::IoiQltyIndEnum >(ioi_qlty_ind_);
}
inline void Ioi::set_ioi_qlty_ind(::Indication::IoiQltyIndEnum value) {
  assert(::Indication::IoiQltyIndEnum_IsValid(value));
  set_has_ioi_qlty_ind();
  ioi_qlty_ind_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_qlty_ind)
}

// optional .Indication.IoiQtyEnum ioi_qty = 4;
inline bool Ioi::has_ioi_qty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ioi::set_has_ioi_qty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ioi::clear_has_ioi_qty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ioi::clear_ioi_qty() {
  ioi_qty_ = 0;
  clear_has_ioi_qty();
}
inline ::Indication::IoiQtyEnum Ioi::ioi_qty() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_qty)
  return static_cast< ::Indication::IoiQtyEnum >(ioi_qty_);
}
inline void Ioi::set_ioi_qty(::Indication::IoiQtyEnum value) {
  assert(::Indication::IoiQtyEnum_IsValid(value));
  set_has_ioi_qty();
  ioi_qty_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_qty)
}

// optional string ioi_ref_id = 5;
inline bool Ioi::has_ioi_ref_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ioi::set_has_ioi_ref_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ioi::clear_has_ioi_ref_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ioi::clear_ioi_ref_id() {
  if (ioi_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_ref_id_->clear();
  }
  clear_has_ioi_ref_id();
}
inline const ::std::string& Ioi::ioi_ref_id() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_ref_id)
  return *ioi_ref_id_;
}
inline void Ioi::set_ioi_ref_id(const ::std::string& value) {
  set_has_ioi_ref_id();
  if (ioi_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_ref_id_ = new ::std::string;
  }
  ioi_ref_id_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_ref_id)
}
inline void Ioi::set_ioi_ref_id(const char* value) {
  set_has_ioi_ref_id();
  if (ioi_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_ref_id_ = new ::std::string;
  }
  ioi_ref_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.ioi_ref_id)
}
inline void Ioi::set_ioi_ref_id(const char* value, size_t size) {
  set_has_ioi_ref_id();
  if (ioi_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_ref_id_ = new ::std::string;
  }
  ioi_ref_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.ioi_ref_id)
}
inline ::std::string* Ioi::mutable_ioi_ref_id() {
  set_has_ioi_ref_id();
  if (ioi_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ioi_ref_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.ioi_ref_id)
  return ioi_ref_id_;
}
inline ::std::string* Ioi::release_ioi_ref_id() {
  clear_has_ioi_ref_id();
  if (ioi_ref_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ioi_ref_id_;
    ioi_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_ioi_ref_id(::std::string* ioi_ref_id) {
  if (ioi_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ioi_ref_id_;
  }
  if (ioi_ref_id) {
    set_has_ioi_ref_id();
    ioi_ref_id_ = ioi_ref_id;
  } else {
    clear_has_ioi_ref_id();
    ioi_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.ioi_ref_id)
}

// optional .Indication.IoiTransTypeEnum ioi_trans_type = 6;
inline bool Ioi::has_ioi_trans_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ioi::set_has_ioi_trans_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ioi::clear_has_ioi_trans_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ioi::clear_ioi_trans_type() {
  ioi_trans_type_ = 0;
  clear_has_ioi_trans_type();
}
inline ::Indication::IoiTransTypeEnum Ioi::ioi_trans_type() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_trans_type)
  return static_cast< ::Indication::IoiTransTypeEnum >(ioi_trans_type_);
}
inline void Ioi::set_ioi_trans_type(::Indication::IoiTransTypeEnum value) {
  assert(::Indication::IoiTransTypeEnum_IsValid(value));
  set_has_ioi_trans_type();
  ioi_trans_type_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_trans_type)
}

// optional sfixed64 price = 7;
inline bool Ioi::has_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ioi::set_has_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ioi::clear_has_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ioi::clear_price() {
  price_ = GOOGLE_LONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::int64 Ioi::price() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.price)
  return price_;
}
inline void Ioi::set_price(::google::protobuf::int64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.price)
}

// optional sfixed32 price_exponent = 8;
inline bool Ioi::has_price_exponent() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ioi::set_has_price_exponent() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ioi::clear_has_price_exponent() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ioi::clear_price_exponent() {
  price_exponent_ = 0;
  clear_has_price_exponent();
}
inline ::google::protobuf::int32 Ioi::price_exponent() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.price_exponent)
  return price_exponent_;
}
inline void Ioi::set_price_exponent(::google::protobuf::int32 value) {
  set_has_price_exponent();
  price_exponent_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.price_exponent)
}

// optional .Indication.SideEnum side = 9;
inline bool Ioi::has_side() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ioi::set_has_side() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ioi::clear_has_side() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ioi::clear_side() {
  side_ = 0;
  clear_has_side();
}
inline ::Indication::SideEnum Ioi::side() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.side)
  return static_cast< ::Indication::SideEnum >(side_);
}
inline void Ioi::set_side(::Indication::SideEnum value) {
  assert(::Indication::SideEnum_IsValid(value));
  set_has_side();
  side_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.side)
}

// optional .Session.StandardHeader standard_header = 10;
inline bool Ioi::has_standard_header() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ioi::set_has_standard_header() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ioi::clear_has_standard_header() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ioi::clear_standard_header() {
  if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
  clear_has_standard_header();
}
inline const ::Session::StandardHeader& Ioi::standard_header() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.standard_header)
  return standard_header_ != NULL ? *standard_header_ : *default_instance_->standard_header_;
}
inline ::Session::StandardHeader* Ioi::mutable_standard_header() {
  set_has_standard_header();
  if (standard_header_ == NULL) standard_header_ = new ::Session::StandardHeader;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.standard_header)
  return standard_header_;
}
inline ::Session::StandardHeader* Ioi::release_standard_header() {
  clear_has_standard_header();
  ::Session::StandardHeader* temp = standard_header_;
  standard_header_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_standard_header(::Session::StandardHeader* standard_header) {
  delete standard_header_;
  standard_header_ = standard_header;
  if (standard_header) {
    set_has_standard_header();
  } else {
    clear_has_standard_header();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.standard_header)
}

// optional .Session.StandardTrailer standard_trailer = 11;
inline bool Ioi::has_standard_trailer() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ioi::set_has_standard_trailer() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ioi::clear_has_standard_trailer() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ioi::clear_standard_trailer() {
  if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
  clear_has_standard_trailer();
}
inline const ::Session::StandardTrailer& Ioi::standard_trailer() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.standard_trailer)
  return standard_trailer_ != NULL ? *standard_trailer_ : *default_instance_->standard_trailer_;
}
inline ::Session::StandardTrailer* Ioi::mutable_standard_trailer() {
  set_has_standard_trailer();
  if (standard_trailer_ == NULL) standard_trailer_ = new ::Session::StandardTrailer;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.standard_trailer)
  return standard_trailer_;
}
inline ::Session::StandardTrailer* Ioi::release_standard_trailer() {
  clear_has_standard_trailer();
  ::Session::StandardTrailer* temp = standard_trailer_;
  standard_trailer_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_standard_trailer(::Session::StandardTrailer* standard_trailer) {
  delete standard_trailer_;
  standard_trailer_ = standard_trailer;
  if (standard_trailer) {
    set_has_standard_trailer();
  } else {
    clear_has_standard_trailer();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.standard_trailer)
}

// optional string text = 12;
inline bool Ioi::has_text() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ioi::set_has_text() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ioi::clear_has_text() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ioi::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Ioi::text() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.text)
  return *text_;
}
inline void Ioi::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.text)
}
inline void Ioi::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.text)
}
inline void Ioi::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.text)
}
inline ::std::string* Ioi::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.text)
  return text_;
}
inline ::std::string* Ioi::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.text)
}

// optional sfixed64 valid_until_time = 13;
inline bool Ioi::has_valid_until_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ioi::set_has_valid_until_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ioi::clear_has_valid_until_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ioi::clear_valid_until_time() {
  valid_until_time_ = GOOGLE_LONGLONG(0);
  clear_has_valid_until_time();
}
inline ::google::protobuf::int64 Ioi::valid_until_time() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.valid_until_time)
  return valid_until_time_;
}
inline void Ioi::set_valid_until_time(::google::protobuf::int64 value) {
  set_has_valid_until_time();
  valid_until_time_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.valid_until_time)
}

// optional bool ioi_natural_flag = 14;
inline bool Ioi::has_ioi_natural_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ioi::set_has_ioi_natural_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ioi::clear_has_ioi_natural_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ioi::clear_ioi_natural_flag() {
  ioi_natural_flag_ = false;
  clear_has_ioi_natural_flag();
}
inline bool Ioi::ioi_natural_flag() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_natural_flag)
  return ioi_natural_flag_;
}
inline void Ioi::set_ioi_natural_flag(bool value) {
  set_has_ioi_natural_flag();
  ioi_natural_flag_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.ioi_natural_flag)
}

// optional sfixed64 transact_time = 15;
inline bool Ioi::has_transact_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ioi::set_has_transact_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ioi::clear_has_transact_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ioi::clear_transact_time() {
  transact_time_ = GOOGLE_LONGLONG(0);
  clear_has_transact_time();
}
inline ::google::protobuf::int64 Ioi::transact_time() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.transact_time)
  return transact_time_;
}
inline void Ioi::set_transact_time(::google::protobuf::int64 value) {
  set_has_transact_time();
  transact_time_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.transact_time)
}

// optional string urllink = 16;
inline bool Ioi::has_urllink() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Ioi::set_has_urllink() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Ioi::clear_has_urllink() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Ioi::clear_urllink() {
  if (urllink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_->clear();
  }
  clear_has_urllink();
}
inline const ::std::string& Ioi::urllink() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.urllink)
  return *urllink_;
}
inline void Ioi::set_urllink(const ::std::string& value) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.urllink)
}
inline void Ioi::set_urllink(const char* value) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.urllink)
}
inline void Ioi::set_urllink(const char* value, size_t size) {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  urllink_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.urllink)
}
inline ::std::string* Ioi::mutable_urllink() {
  set_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    urllink_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.urllink)
  return urllink_;
}
inline ::std::string* Ioi::release_urllink() {
  clear_has_urllink();
  if (urllink_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = urllink_;
    urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_urllink(::std::string* urllink) {
  if (urllink_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete urllink_;
  }
  if (urllink) {
    set_has_urllink();
    urllink_ = urllink;
  } else {
    clear_has_urllink();
    urllink_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.urllink)
}

// optional bytes encoded_text = 17;
inline bool Ioi::has_encoded_text() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Ioi::set_has_encoded_text() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Ioi::clear_has_encoded_text() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Ioi::clear_encoded_text() {
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_->clear();
  }
  clear_has_encoded_text();
}
inline const ::std::string& Ioi::encoded_text() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.encoded_text)
  return *encoded_text_;
}
inline void Ioi::set_encoded_text(const ::std::string& value) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(value);
  // @@protoc_insertion_point(field_set:Indication.Ioi.encoded_text)
}
inline void Ioi::set_encoded_text(const char* value) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(value);
  // @@protoc_insertion_point(field_set_char:Indication.Ioi.encoded_text)
}
inline void Ioi::set_encoded_text(const void* value, size_t size) {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  encoded_text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Indication.Ioi.encoded_text)
}
inline ::std::string* Ioi::mutable_encoded_text() {
  set_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    encoded_text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.encoded_text)
  return encoded_text_;
}
inline ::std::string* Ioi::release_encoded_text() {
  clear_has_encoded_text();
  if (encoded_text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = encoded_text_;
    encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ioi::set_allocated_encoded_text(::std::string* encoded_text) {
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (encoded_text) {
    set_has_encoded_text();
    encoded_text_ = encoded_text;
  } else {
    clear_has_encoded_text();
    encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.encoded_text)
}

// optional fixed32 encoded_text_len = 18;
inline bool Ioi::has_encoded_text_len() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Ioi::set_has_encoded_text_len() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Ioi::clear_has_encoded_text_len() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Ioi::clear_encoded_text_len() {
  encoded_text_len_ = 0u;
  clear_has_encoded_text_len();
}
inline ::google::protobuf::uint32 Ioi::encoded_text_len() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.encoded_text_len)
  return encoded_text_len_;
}
inline void Ioi::set_encoded_text_len(::google::protobuf::uint32 value) {
  set_has_encoded_text_len();
  encoded_text_len_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.encoded_text_len)
}

// optional .Common.Instrument instrument = 19;
inline bool Ioi::has_instrument() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Ioi::set_has_instrument() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Ioi::clear_has_instrument() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Ioi::clear_instrument() {
  if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
  clear_has_instrument();
}
inline const ::Common::Instrument& Ioi::instrument() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.instrument)
  return instrument_ != NULL ? *instrument_ : *default_instance_->instrument_;
}
inline ::Common::Instrument* Ioi::mutable_instrument() {
  set_has_instrument();
  if (instrument_ == NULL) instrument_ = new ::Common::Instrument;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.instrument)
  return instrument_;
}
inline ::Common::Instrument* Ioi::release_instrument() {
  clear_has_instrument();
  ::Common::Instrument* temp = instrument_;
  instrument_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_instrument(::Common::Instrument* instrument) {
  delete instrument_;
  instrument_ = instrument;
  if (instrument) {
    set_has_instrument();
  } else {
    clear_has_instrument();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.instrument)
}

// optional .Indication.PriceTypeEnum price_type = 20;
inline bool Ioi::has_price_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Ioi::set_has_price_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Ioi::clear_has_price_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Ioi::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline ::Indication::PriceTypeEnum Ioi::price_type() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.price_type)
  return static_cast< ::Indication::PriceTypeEnum >(price_type_);
}
inline void Ioi::set_price_type(::Indication::PriceTypeEnum value) {
  assert(::Indication::PriceTypeEnum_IsValid(value));
  set_has_price_type();
  price_type_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.price_type)
}

// optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 21;
inline bool Ioi::has_spread_or_benchmark_curve_data() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Ioi::set_has_spread_or_benchmark_curve_data() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Ioi::clear_has_spread_or_benchmark_curve_data() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Ioi::clear_spread_or_benchmark_curve_data() {
  if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
  clear_has_spread_or_benchmark_curve_data();
}
inline const ::Common::SpreadOrBenchmarkCurveData& Ioi::spread_or_benchmark_curve_data() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.spread_or_benchmark_curve_data)
  return spread_or_benchmark_curve_data_ != NULL ? *spread_or_benchmark_curve_data_ : *default_instance_->spread_or_benchmark_curve_data_;
}
inline ::Common::SpreadOrBenchmarkCurveData* Ioi::mutable_spread_or_benchmark_curve_data() {
  set_has_spread_or_benchmark_curve_data();
  if (spread_or_benchmark_curve_data_ == NULL) spread_or_benchmark_curve_data_ = new ::Common::SpreadOrBenchmarkCurveData;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.spread_or_benchmark_curve_data)
  return spread_or_benchmark_curve_data_;
}
inline ::Common::SpreadOrBenchmarkCurveData* Ioi::release_spread_or_benchmark_curve_data() {
  clear_has_spread_or_benchmark_curve_data();
  ::Common::SpreadOrBenchmarkCurveData* temp = spread_or_benchmark_curve_data_;
  spread_or_benchmark_curve_data_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_spread_or_benchmark_curve_data(::Common::SpreadOrBenchmarkCurveData* spread_or_benchmark_curve_data) {
  delete spread_or_benchmark_curve_data_;
  spread_or_benchmark_curve_data_ = spread_or_benchmark_curve_data;
  if (spread_or_benchmark_curve_data) {
    set_has_spread_or_benchmark_curve_data();
  } else {
    clear_has_spread_or_benchmark_curve_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.spread_or_benchmark_curve_data)
}

// optional .Common.FinancingDetails financing_details = 22;
inline bool Ioi::has_financing_details() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Ioi::set_has_financing_details() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Ioi::clear_has_financing_details() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Ioi::clear_financing_details() {
  if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
  clear_has_financing_details();
}
inline const ::Common::FinancingDetails& Ioi::financing_details() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.financing_details)
  return financing_details_ != NULL ? *financing_details_ : *default_instance_->financing_details_;
}
inline ::Common::FinancingDetails* Ioi::mutable_financing_details() {
  set_has_financing_details();
  if (financing_details_ == NULL) financing_details_ = new ::Common::FinancingDetails;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.financing_details)
  return financing_details_;
}
inline ::Common::FinancingDetails* Ioi::release_financing_details() {
  clear_has_financing_details();
  ::Common::FinancingDetails* temp = financing_details_;
  financing_details_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_financing_details(::Common::FinancingDetails* financing_details) {
  delete financing_details_;
  financing_details_ = financing_details;
  if (financing_details) {
    set_has_financing_details();
  } else {
    clear_has_financing_details();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.financing_details)
}

// repeated .Indication.IoiQualGrp ioi_qual_grp = 23;
inline int Ioi::ioi_qual_grp_size() const {
  return ioi_qual_grp_.size();
}
inline void Ioi::clear_ioi_qual_grp() {
  ioi_qual_grp_.Clear();
}
inline const ::Indication::IoiQualGrp& Ioi::ioi_qual_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.ioi_qual_grp)
  return ioi_qual_grp_.Get(index);
}
inline ::Indication::IoiQualGrp* Ioi::mutable_ioi_qual_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.ioi_qual_grp)
  return ioi_qual_grp_.Mutable(index);
}
inline ::Indication::IoiQualGrp* Ioi::add_ioi_qual_grp() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.ioi_qual_grp)
  return ioi_qual_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Indication::IoiQualGrp >&
Ioi::ioi_qual_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.ioi_qual_grp)
  return ioi_qual_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Indication::IoiQualGrp >*
Ioi::mutable_ioi_qual_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.ioi_qual_grp)
  return &ioi_qual_grp_;
}

// repeated .Common.InstrmtLegIoiGrp instrmt_leg_ioi_grp = 24;
inline int Ioi::instrmt_leg_ioi_grp_size() const {
  return instrmt_leg_ioi_grp_.size();
}
inline void Ioi::clear_instrmt_leg_ioi_grp() {
  instrmt_leg_ioi_grp_.Clear();
}
inline const ::Common::InstrmtLegIoiGrp& Ioi::instrmt_leg_ioi_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.instrmt_leg_ioi_grp)
  return instrmt_leg_ioi_grp_.Get(index);
}
inline ::Common::InstrmtLegIoiGrp* Ioi::mutable_instrmt_leg_ioi_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.instrmt_leg_ioi_grp)
  return instrmt_leg_ioi_grp_.Mutable(index);
}
inline ::Common::InstrmtLegIoiGrp* Ioi::add_instrmt_leg_ioi_grp() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.instrmt_leg_ioi_grp)
  return instrmt_leg_ioi_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegIoiGrp >&
Ioi::instrmt_leg_ioi_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.instrmt_leg_ioi_grp)
  return instrmt_leg_ioi_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::InstrmtLegIoiGrp >*
Ioi::mutable_instrmt_leg_ioi_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.instrmt_leg_ioi_grp)
  return &instrmt_leg_ioi_grp_;
}

// optional .Common.OrderQtyData order_qty_data = 25;
inline bool Ioi::has_order_qty_data() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Ioi::set_has_order_qty_data() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Ioi::clear_has_order_qty_data() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Ioi::clear_order_qty_data() {
  if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
  clear_has_order_qty_data();
}
inline const ::Common::OrderQtyData& Ioi::order_qty_data() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.order_qty_data)
  return order_qty_data_ != NULL ? *order_qty_data_ : *default_instance_->order_qty_data_;
}
inline ::Common::OrderQtyData* Ioi::mutable_order_qty_data() {
  set_has_order_qty_data();
  if (order_qty_data_ == NULL) order_qty_data_ = new ::Common::OrderQtyData;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.order_qty_data)
  return order_qty_data_;
}
inline ::Common::OrderQtyData* Ioi::release_order_qty_data() {
  clear_has_order_qty_data();
  ::Common::OrderQtyData* temp = order_qty_data_;
  order_qty_data_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_order_qty_data(::Common::OrderQtyData* order_qty_data) {
  delete order_qty_data_;
  order_qty_data_ = order_qty_data;
  if (order_qty_data) {
    set_has_order_qty_data();
  } else {
    clear_has_order_qty_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.order_qty_data)
}

// repeated .Common.Parties parties = 26;
inline int Ioi::parties_size() const {
  return parties_.size();
}
inline void Ioi::clear_parties() {
  parties_.Clear();
}
inline const ::Common::Parties& Ioi::parties(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.parties)
  return parties_.Get(index);
}
inline ::Common::Parties* Ioi::mutable_parties(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.parties)
  return parties_.Mutable(index);
}
inline ::Common::Parties* Ioi::add_parties() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.parties)
  return parties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::Parties >&
Ioi::parties() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.parties)
  return parties_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::Parties >*
Ioi::mutable_parties() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.parties)
  return &parties_;
}

// optional .Indication.QtyTypeEnum qty_type = 27;
inline bool Ioi::has_qty_type() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Ioi::set_has_qty_type() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Ioi::clear_has_qty_type() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Ioi::clear_qty_type() {
  qty_type_ = 0;
  clear_has_qty_type();
}
inline ::Indication::QtyTypeEnum Ioi::qty_type() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.qty_type)
  return static_cast< ::Indication::QtyTypeEnum >(qty_type_);
}
inline void Ioi::set_qty_type(::Indication::QtyTypeEnum value) {
  assert(::Indication::QtyTypeEnum_IsValid(value));
  set_has_qty_type();
  qty_type_ = value;
  // @@protoc_insertion_point(field_set:Indication.Ioi.qty_type)
}

// repeated .Common.RoutingGrp routing_grp = 28;
inline int Ioi::routing_grp_size() const {
  return routing_grp_.size();
}
inline void Ioi::clear_routing_grp() {
  routing_grp_.Clear();
}
inline const ::Common::RoutingGrp& Ioi::routing_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.routing_grp)
  return routing_grp_.Get(index);
}
inline ::Common::RoutingGrp* Ioi::mutable_routing_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.routing_grp)
  return routing_grp_.Mutable(index);
}
inline ::Common::RoutingGrp* Ioi::add_routing_grp() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.routing_grp)
  return routing_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::RoutingGrp >&
Ioi::routing_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.routing_grp)
  return routing_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::RoutingGrp >*
Ioi::mutable_routing_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.routing_grp)
  return &routing_grp_;
}

// repeated .Common.Stipulations stipulations = 29;
inline int Ioi::stipulations_size() const {
  return stipulations_.size();
}
inline void Ioi::clear_stipulations() {
  stipulations_.Clear();
}
inline const ::Common::Stipulations& Ioi::stipulations(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.stipulations)
  return stipulations_.Get(index);
}
inline ::Common::Stipulations* Ioi::mutable_stipulations(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.stipulations)
  return stipulations_.Mutable(index);
}
inline ::Common::Stipulations* Ioi::add_stipulations() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.stipulations)
  return stipulations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::Stipulations >&
Ioi::stipulations() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.stipulations)
  return stipulations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::Stipulations >*
Ioi::mutable_stipulations() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.stipulations)
  return &stipulations_;
}

// repeated .Common.UndInstrmtGrp und_instrmt_grp = 30;
inline int Ioi::und_instrmt_grp_size() const {
  return und_instrmt_grp_.size();
}
inline void Ioi::clear_und_instrmt_grp() {
  und_instrmt_grp_.Clear();
}
inline const ::Common::UndInstrmtGrp& Ioi::und_instrmt_grp(int index) const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.und_instrmt_grp)
  return und_instrmt_grp_.Get(index);
}
inline ::Common::UndInstrmtGrp* Ioi::mutable_und_instrmt_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.und_instrmt_grp)
  return und_instrmt_grp_.Mutable(index);
}
inline ::Common::UndInstrmtGrp* Ioi::add_und_instrmt_grp() {
  // @@protoc_insertion_point(field_add:Indication.Ioi.und_instrmt_grp)
  return und_instrmt_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >&
Ioi::und_instrmt_grp() const {
  // @@protoc_insertion_point(field_list:Indication.Ioi.und_instrmt_grp)
  return und_instrmt_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Common::UndInstrmtGrp >*
Ioi::mutable_und_instrmt_grp() {
  // @@protoc_insertion_point(field_mutable_list:Indication.Ioi.und_instrmt_grp)
  return &und_instrmt_grp_;
}

// optional .Common.YieldData yield_data = 31;
inline bool Ioi::has_yield_data() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Ioi::set_has_yield_data() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Ioi::clear_has_yield_data() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Ioi::clear_yield_data() {
  if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
  clear_has_yield_data();
}
inline const ::Common::YieldData& Ioi::yield_data() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.yield_data)
  return yield_data_ != NULL ? *yield_data_ : *default_instance_->yield_data_;
}
inline ::Common::YieldData* Ioi::mutable_yield_data() {
  set_has_yield_data();
  if (yield_data_ == NULL) yield_data_ = new ::Common::YieldData;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.yield_data)
  return yield_data_;
}
inline ::Common::YieldData* Ioi::release_yield_data() {
  clear_has_yield_data();
  ::Common::YieldData* temp = yield_data_;
  yield_data_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_yield_data(::Common::YieldData* yield_data) {
  delete yield_data_;
  yield_data_ = yield_data;
  if (yield_data) {
    set_has_yield_data();
  } else {
    clear_has_yield_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.yield_data)
}

// optional .Common.ApplicationSequenceControl application_sequence_control = 32;
inline bool Ioi::has_application_sequence_control() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Ioi::set_has_application_sequence_control() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Ioi::clear_has_application_sequence_control() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Ioi::clear_application_sequence_control() {
  if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
  clear_has_application_sequence_control();
}
inline const ::Common::ApplicationSequenceControl& Ioi::application_sequence_control() const {
  // @@protoc_insertion_point(field_get:Indication.Ioi.application_sequence_control)
  return application_sequence_control_ != NULL ? *application_sequence_control_ : *default_instance_->application_sequence_control_;
}
inline ::Common::ApplicationSequenceControl* Ioi::mutable_application_sequence_control() {
  set_has_application_sequence_control();
  if (application_sequence_control_ == NULL) application_sequence_control_ = new ::Common::ApplicationSequenceControl;
  // @@protoc_insertion_point(field_mutable:Indication.Ioi.application_sequence_control)
  return application_sequence_control_;
}
inline ::Common::ApplicationSequenceControl* Ioi::release_application_sequence_control() {
  clear_has_application_sequence_control();
  ::Common::ApplicationSequenceControl* temp = application_sequence_control_;
  application_sequence_control_ = NULL;
  return temp;
}
inline void Ioi::set_allocated_application_sequence_control(::Common::ApplicationSequenceControl* application_sequence_control) {
  delete application_sequence_control_;
  application_sequence_control_ = application_sequence_control;
  if (application_sequence_control) {
    set_has_application_sequence_control();
  } else {
    clear_has_application_sequence_control();
  }
  // @@protoc_insertion_point(field_set_allocated:Indication.Ioi.application_sequence_control)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Indication

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Indication::AdvTransTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::AdvTransTypeEnum>() {
  return ::Indication::AdvTransTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::AdvSideEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::AdvSideEnum>() {
  return ::Indication::AdvSideEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::QtyTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::QtyTypeEnum>() {
  return ::Indication::QtyTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::TradingSessionIdEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::TradingSessionIdEnum>() {
  return ::Indication::TradingSessionIdEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::TradingSessionSubIdEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::TradingSessionSubIdEnum>() {
  return ::Indication::TradingSessionSubIdEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::IoiQualifierEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::IoiQualifierEnum>() {
  return ::Indication::IoiQualifierEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::IoiTransTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::IoiTransTypeEnum>() {
  return ::Indication::IoiTransTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::SideEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::SideEnum>() {
  return ::Indication::SideEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::IoiQtyEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::IoiQtyEnum>() {
  return ::Indication::IoiQtyEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::PriceTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::PriceTypeEnum>() {
  return ::Indication::PriceTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::IoiQltyIndEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::IoiQltyIndEnum>() {
  return ::Indication::IoiQltyIndEnum_descriptor();
}
template <> struct is_proto_enum< ::Indication::IoiNaturalFlagEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Indication::IoiNaturalFlagEnum>() {
  return ::Indication::IoiNaturalFlagEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_indication_2eproto__INCLUDED
