// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#ifndef PROTOBUF_session_2eproto__INCLUDED
#define PROTOBUF_session_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "meta.pb.h"
#include "fix.pb.h"
// @@protoc_insertion_point(includes)

namespace Session {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_session_2eproto();
void protobuf_AssignDesc_session_2eproto();
void protobuf_ShutdownFile_session_2eproto();

class HopGrp;
class StandardHeader;
class StandardTrailer;

enum MsgTypeEnum {
  MSG_TYPE_ADJUSTED_POSITION_REPORT = 0,
  MSG_TYPE_ADVERTISEMENT = 1,
  MSG_TYPE_ALLOCATION_INSTRUCTION = 2,
  MSG_TYPE_ALLOCATION_INSTRUCTION_ACK = 3,
  MSG_TYPE_ALLOCATION_INSTRUCTION_ALERT = 4,
  MSG_TYPE_ALLOCATION_REPORT = 5,
  MSG_TYPE_ALLOCATION_REPORT_ACK = 6,
  MSG_TYPE_APPLICATION_MESSAGE_REPORT = 7,
  MSG_TYPE_APPLICATION_MESSAGE_REQUEST = 8,
  MSG_TYPE_APPLICATION_MESSAGE_REQUEST_ACK = 9,
  MSG_TYPE_ASSIGNMENT_REPORT = 10,
  MSG_TYPE_BID_REQUEST = 11,
  MSG_TYPE_BID_RESPONSE = 12,
  MSG_TYPE_BUSINESS_MESSAGE_REJECT = 13,
  MSG_TYPE_COLLATERAL_ASSIGNMENT = 14,
  MSG_TYPE_COLLATERAL_INQUIRY = 15,
  MSG_TYPE_COLLATERAL_INQUIRY_ACK = 16,
  MSG_TYPE_COLLATERAL_REPORT = 17,
  MSG_TYPE_COLLATERAL_REQUEST = 18,
  MSG_TYPE_COLLATERAL_RESPONSE = 19,
  MSG_TYPE_CONFIRMATION = 20,
  MSG_TYPE_CONFIRMATION_ACK = 21,
  MSG_TYPE_CONFIRMATION_REQUEST = 22,
  MSG_TYPE_CONTRARY_INTENTION_REPORT = 23,
  MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE_REQUEST = 24,
  MSG_TYPE_CROSS_ORDER_CANCEL_REQUEST = 25,
  MSG_TYPE_DERIVATIVE_SECURITY_LIST = 26,
  MSG_TYPE_DERIVATIVE_SECURITY_LIST_REQUEST = 27,
  MSG_TYPE_DERIVATIVE_SECURITY_LIST_UPDATE_REPORT = 28,
  MSG_TYPE_DONT_KNOW_TRADE = 29,
  MSG_TYPE_EMAIL = 30,
  MSG_TYPE_EXECUTION_ACKNOWLEDGEMENT = 31,
  MSG_TYPE_EXECUTION_REPORT = 32,
  MSG_TYPE_HEARTBEAT = 33,
  MSG_TYPE_IOI = 34,
  MSG_TYPE_LIST_CANCEL_REQUEST = 35,
  MSG_TYPE_LIST_EXECUTE = 36,
  MSG_TYPE_LIST_STATUS = 37,
  MSG_TYPE_LIST_STATUS_REQUEST = 38,
  MSG_TYPE_LIST_STRIKE_PRICE = 39,
  MSG_TYPE_LOGON = 40,
  MSG_TYPE_LOGOUT = 41,
  MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH = 42,
  MSG_TYPE_MARKET_DATA_REQUEST = 43,
  MSG_TYPE_MARKET_DATA_REQUEST_REJECT = 44,
  MSG_TYPE_MARKET_DATA_SNAPSHOT_FULL_REFRESH = 45,
  MSG_TYPE_MARKET_DEFINITION = 46,
  MSG_TYPE_MARKET_DEFINITION_REQUEST = 47,
  MSG_TYPE_MARKET_DEFINITION_UPDATE_REPORT = 48,
  MSG_TYPE_MASS_QUOTE = 49,
  MSG_TYPE_MASS_QUOTE_ACKNOWLEDGEMENT = 50,
  MSG_TYPE_MULTILEG_ORDER_CANCEL_REPLACE = 51,
  MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUEST = 52,
  MSG_TYPE_NETWORK_COUNTERPARTY_SYSTEM_STATUS_RESPONSE = 53,
  MSG_TYPE_NEW_ORDER_CROSS = 54,
  MSG_TYPE_NEW_ORDER_LIST = 55,
  MSG_TYPE_NEW_ORDER_MULTILEG = 56,
  MSG_TYPE_NEW_ORDER_SINGLE = 57,
  MSG_TYPE_NEWS = 58,
  MSG_TYPE_ORDER_CANCEL_REJECT = 59,
  MSG_TYPE_ORDER_CANCEL_REPLACE_REQUEST = 60,
  MSG_TYPE_ORDER_CANCEL_REQUEST = 61,
  MSG_TYPE_ORDER_MASS_ACTION_REPORT = 62,
  MSG_TYPE_ORDER_MASS_ACTION_REQUEST = 63,
  MSG_TYPE_ORDER_MASS_CANCEL_REPORT = 64,
  MSG_TYPE_ORDER_MASS_CANCEL_REQUEST = 65,
  MSG_TYPE_ORDER_MASS_STATUS_REQUEST = 66,
  MSG_TYPE_ORDER_STATUS_REQUEST = 67,
  MSG_TYPE_POSITION_MAINTENANCE_REPORT = 68,
  MSG_TYPE_POSITION_MAINTENANCE_REQUEST = 69,
  MSG_TYPE_POSITION_REPORT = 70,
  MSG_TYPE_QUOTE = 71,
  MSG_TYPE_QUOTE_CANCEL = 72,
  MSG_TYPE_QUOTE_REQUEST = 73,
  MSG_TYPE_QUOTE_REQUEST_REJECT = 74,
  MSG_TYPE_QUOTE_RESPONSE = 75,
  MSG_TYPE_QUOTE_STATUS_REPORT = 76,
  MSG_TYPE_QUOTE_STATUS_REQUEST = 77,
  MSG_TYPE_RFQ_REQUEST = 78,
  MSG_TYPE_REGISTRATION_INSTRUCTIONS = 79,
  MSG_TYPE_REGISTRATION_INSTRUCTIONS_RESPONSE = 80,
  MSG_TYPE_REJECT = 81,
  MSG_TYPE_REQUEST_FOR_POSITIONS = 82,
  MSG_TYPE_REQUEST_FOR_POSITIONS_ACK = 83,
  MSG_TYPE_RESEND_REQUEST = 84,
  MSG_TYPE_SECURITY_DEFINITION = 85,
  MSG_TYPE_SECURITY_DEFINITION_REQUEST = 86,
  MSG_TYPE_SECURITY_DEFINITION_UPDATE_REPORT = 87,
  MSG_TYPE_SECURITY_LIST = 88,
  MSG_TYPE_SECURITY_LIST_REQUEST = 89,
  MSG_TYPE_SECURITY_LIST_UPDATE_REPORT = 90,
  MSG_TYPE_SECURITY_STATUS = 91,
  MSG_TYPE_SECURITY_STATUS_REQUEST = 92,
  MSG_TYPE_SECURITY_TYPE_REQUEST = 93,
  MSG_TYPE_SECURITY_TYPES = 94,
  MSG_TYPE_SEQUENCE_RESET = 95,
  MSG_TYPE_SETTLEMENT_INSTRUCTION_REQUEST = 96,
  MSG_TYPE_SETTLEMENT_INSTRUCTIONS = 97,
  MSG_TYPE_SETTLEMENT_OBLIGATION_REPORT = 98,
  MSG_TYPE_STREAM_ASSIGNMENT_REPORT = 99,
  MSG_TYPE_STREAM_ASSIGNMENT_REPORT_ACK = 100,
  MSG_TYPE_STREAM_ASSIGNMENT_REQUEST = 101,
  MSG_TYPE_TEST_REQUEST = 102,
  MSG_TYPE_TRADE_CAPTURE_REPORT = 103,
  MSG_TYPE_TRADE_CAPTURE_REPORT_ACK = 104,
  MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST = 105,
  MSG_TYPE_TRADE_CAPTURE_REPORT_REQUEST_ACK = 106,
  MSG_TYPE_TRADING_SESSION_LIST = 107,
  MSG_TYPE_TRADING_SESSION_LIST_REQUEST = 108,
  MSG_TYPE_TRADING_SESSION_LIST_UPDATE_REPORT = 109,
  MSG_TYPE_TRADING_SESSION_STATUS = 110,
  MSG_TYPE_TRADING_SESSION_STATUS_REQUEST = 111,
  MSG_TYPE_USER_NOTIFICATION = 112,
  MSG_TYPE_USER_REQUEST = 113,
  MSG_TYPE_USER_RESPONSE = 114,
  MSG_TYPE_XMLNON_FIX = 115
};
bool MsgTypeEnum_IsValid(int value);
const MsgTypeEnum MsgTypeEnum_MIN = MSG_TYPE_ADJUSTED_POSITION_REPORT;
const MsgTypeEnum MsgTypeEnum_MAX = MSG_TYPE_XMLNON_FIX;
const int MsgTypeEnum_ARRAYSIZE = MsgTypeEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgTypeEnum_descriptor();
inline const ::std::string& MsgTypeEnum_Name(MsgTypeEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgTypeEnum_descriptor(), value);
}
inline bool MsgTypeEnum_Parse(
    const ::std::string& name, MsgTypeEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgTypeEnum>(
    MsgTypeEnum_descriptor(), name, value);
}
enum ApplVerIdEnum {
  APPL_VER_ID_FIX27 = 0,
  APPL_VER_ID_FIX30 = 1,
  APPL_VER_ID_FIX40 = 2,
  APPL_VER_ID_FIX41 = 3,
  APPL_VER_ID_FIX42 = 4,
  APPL_VER_ID_FIX43 = 5,
  APPL_VER_ID_FIX44 = 6,
  APPL_VER_ID_FIX50 = 7,
  APPL_VER_ID_FIX50SP1 = 8,
  APPL_VER_ID_FIX50SP2 = 9
};
bool ApplVerIdEnum_IsValid(int value);
const ApplVerIdEnum ApplVerIdEnum_MIN = APPL_VER_ID_FIX27;
const ApplVerIdEnum ApplVerIdEnum_MAX = APPL_VER_ID_FIX50SP2;
const int ApplVerIdEnum_ARRAYSIZE = ApplVerIdEnum_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplVerIdEnum_descriptor();
inline const ::std::string& ApplVerIdEnum_Name(ApplVerIdEnum value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplVerIdEnum_descriptor(), value);
}
inline bool ApplVerIdEnum_Parse(
    const ::std::string& name, ApplVerIdEnum* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplVerIdEnum>(
    ApplVerIdEnum_descriptor(), name, value);
}
// ===================================================================

class HopGrp : public ::google::protobuf::Message {
 public:
  HopGrp();
  virtual ~HopGrp();

  HopGrp(const HopGrp& from);

  inline HopGrp& operator=(const HopGrp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HopGrp& default_instance();

  void Swap(HopGrp* other);

  // implements Message ----------------------------------------------

  HopGrp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HopGrp& from);
  void MergeFrom(const HopGrp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hop_comp_id = 1;
  inline bool has_hop_comp_id() const;
  inline void clear_hop_comp_id();
  static const int kHopCompIdFieldNumber = 1;
  inline const ::std::string& hop_comp_id() const;
  inline void set_hop_comp_id(const ::std::string& value);
  inline void set_hop_comp_id(const char* value);
  inline void set_hop_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_hop_comp_id();
  inline ::std::string* release_hop_comp_id();
  inline void set_allocated_hop_comp_id(::std::string* hop_comp_id);

  // optional fixed32 hop_ref_id = 2;
  inline bool has_hop_ref_id() const;
  inline void clear_hop_ref_id();
  static const int kHopRefIdFieldNumber = 2;
  inline ::google::protobuf::uint32 hop_ref_id() const;
  inline void set_hop_ref_id(::google::protobuf::uint32 value);

  // optional sfixed64 hop_sending_time = 3;
  inline bool has_hop_sending_time() const;
  inline void clear_hop_sending_time();
  static const int kHopSendingTimeFieldNumber = 3;
  inline ::google::protobuf::int64 hop_sending_time() const;
  inline void set_hop_sending_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Session.HopGrp)
 private:
  inline void set_has_hop_comp_id();
  inline void clear_has_hop_comp_id();
  inline void set_has_hop_ref_id();
  inline void clear_has_hop_ref_id();
  inline void set_has_hop_sending_time();
  inline void clear_has_hop_sending_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* hop_comp_id_;
  ::google::protobuf::int64 hop_sending_time_;
  ::google::protobuf::uint32 hop_ref_id_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static HopGrp* default_instance_;
};
// -------------------------------------------------------------------

class StandardHeader : public ::google::protobuf::Message {
 public:
  StandardHeader();
  virtual ~StandardHeader();

  StandardHeader(const StandardHeader& from);

  inline StandardHeader& operator=(const StandardHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardHeader& default_instance();

  void Swap(StandardHeader* other);

  // implements Message ----------------------------------------------

  StandardHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StandardHeader& from);
  void MergeFrom(const StandardHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string deliver_to_comp_id = 1;
  inline bool has_deliver_to_comp_id() const;
  inline void clear_deliver_to_comp_id();
  static const int kDeliverToCompIdFieldNumber = 1;
  inline const ::std::string& deliver_to_comp_id() const;
  inline void set_deliver_to_comp_id(const ::std::string& value);
  inline void set_deliver_to_comp_id(const char* value);
  inline void set_deliver_to_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_deliver_to_comp_id();
  inline ::std::string* release_deliver_to_comp_id();
  inline void set_allocated_deliver_to_comp_id(::std::string* deliver_to_comp_id);

  // optional string deliver_to_sub_id = 2;
  inline bool has_deliver_to_sub_id() const;
  inline void clear_deliver_to_sub_id();
  static const int kDeliverToSubIdFieldNumber = 2;
  inline const ::std::string& deliver_to_sub_id() const;
  inline void set_deliver_to_sub_id(const ::std::string& value);
  inline void set_deliver_to_sub_id(const char* value);
  inline void set_deliver_to_sub_id(const char* value, size_t size);
  inline ::std::string* mutable_deliver_to_sub_id();
  inline ::std::string* release_deliver_to_sub_id();
  inline void set_allocated_deliver_to_sub_id(::std::string* deliver_to_sub_id);

  // optional fixed32 msg_seq_num = 3;
  inline bool has_msg_seq_num() const;
  inline void clear_msg_seq_num();
  static const int kMsgSeqNumFieldNumber = 3;
  inline ::google::protobuf::uint32 msg_seq_num() const;
  inline void set_msg_seq_num(::google::protobuf::uint32 value);

  // optional string on_behalf_of_comp_id = 4;
  inline bool has_on_behalf_of_comp_id() const;
  inline void clear_on_behalf_of_comp_id();
  static const int kOnBehalfOfCompIdFieldNumber = 4;
  inline const ::std::string& on_behalf_of_comp_id() const;
  inline void set_on_behalf_of_comp_id(const ::std::string& value);
  inline void set_on_behalf_of_comp_id(const char* value);
  inline void set_on_behalf_of_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_on_behalf_of_comp_id();
  inline ::std::string* release_on_behalf_of_comp_id();
  inline void set_allocated_on_behalf_of_comp_id(::std::string* on_behalf_of_comp_id);

  // optional string on_behalf_of_sub_id = 5;
  inline bool has_on_behalf_of_sub_id() const;
  inline void clear_on_behalf_of_sub_id();
  static const int kOnBehalfOfSubIdFieldNumber = 5;
  inline const ::std::string& on_behalf_of_sub_id() const;
  inline void set_on_behalf_of_sub_id(const ::std::string& value);
  inline void set_on_behalf_of_sub_id(const char* value);
  inline void set_on_behalf_of_sub_id(const char* value, size_t size);
  inline ::std::string* mutable_on_behalf_of_sub_id();
  inline ::std::string* release_on_behalf_of_sub_id();
  inline void set_allocated_on_behalf_of_sub_id(::std::string* on_behalf_of_sub_id);

  // optional sfixed64 orig_sending_time = 6;
  inline bool has_orig_sending_time() const;
  inline void clear_orig_sending_time();
  static const int kOrigSendingTimeFieldNumber = 6;
  inline ::google::protobuf::int64 orig_sending_time() const;
  inline void set_orig_sending_time(::google::protobuf::int64 value);

  // optional bool poss_dup_flag = 7;
  inline bool has_poss_dup_flag() const;
  inline void clear_poss_dup_flag();
  static const int kPossDupFlagFieldNumber = 7;
  inline bool poss_dup_flag() const;
  inline void set_poss_dup_flag(bool value);

  // optional bool poss_resend = 8;
  inline bool has_poss_resend() const;
  inline void clear_poss_resend();
  static const int kPossResendFieldNumber = 8;
  inline bool poss_resend() const;
  inline void set_poss_resend(bool value);

  // optional bytes secure_data = 9;
  inline bool has_secure_data() const;
  inline void clear_secure_data();
  static const int kSecureDataFieldNumber = 9;
  inline const ::std::string& secure_data() const;
  inline void set_secure_data(const ::std::string& value);
  inline void set_secure_data(const char* value);
  inline void set_secure_data(const void* value, size_t size);
  inline ::std::string* mutable_secure_data();
  inline ::std::string* release_secure_data();
  inline void set_allocated_secure_data(::std::string* secure_data);

  // optional fixed32 secure_data_len = 10;
  inline bool has_secure_data_len() const;
  inline void clear_secure_data_len();
  static const int kSecureDataLenFieldNumber = 10;
  inline ::google::protobuf::uint32 secure_data_len() const;
  inline void set_secure_data_len(::google::protobuf::uint32 value);

  // optional string sender_comp_id = 11;
  inline bool has_sender_comp_id() const;
  inline void clear_sender_comp_id();
  static const int kSenderCompIdFieldNumber = 11;
  inline const ::std::string& sender_comp_id() const;
  inline void set_sender_comp_id(const ::std::string& value);
  inline void set_sender_comp_id(const char* value);
  inline void set_sender_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_comp_id();
  inline ::std::string* release_sender_comp_id();
  inline void set_allocated_sender_comp_id(::std::string* sender_comp_id);

  // optional string sender_sub_id = 12;
  inline bool has_sender_sub_id() const;
  inline void clear_sender_sub_id();
  static const int kSenderSubIdFieldNumber = 12;
  inline const ::std::string& sender_sub_id() const;
  inline void set_sender_sub_id(const ::std::string& value);
  inline void set_sender_sub_id(const char* value);
  inline void set_sender_sub_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_sub_id();
  inline ::std::string* release_sender_sub_id();
  inline void set_allocated_sender_sub_id(::std::string* sender_sub_id);

  // optional sfixed64 sending_time = 13;
  inline bool has_sending_time() const;
  inline void clear_sending_time();
  static const int kSendingTimeFieldNumber = 13;
  inline ::google::protobuf::int64 sending_time() const;
  inline void set_sending_time(::google::protobuf::int64 value);

  // optional string target_comp_id = 14;
  inline bool has_target_comp_id() const;
  inline void clear_target_comp_id();
  static const int kTargetCompIdFieldNumber = 14;
  inline const ::std::string& target_comp_id() const;
  inline void set_target_comp_id(const ::std::string& value);
  inline void set_target_comp_id(const char* value);
  inline void set_target_comp_id(const char* value, size_t size);
  inline ::std::string* mutable_target_comp_id();
  inline ::std::string* release_target_comp_id();
  inline void set_allocated_target_comp_id(::std::string* target_comp_id);

  // optional string target_sub_id = 15;
  inline bool has_target_sub_id() const;
  inline void clear_target_sub_id();
  static const int kTargetSubIdFieldNumber = 15;
  inline const ::std::string& target_sub_id() const;
  inline void set_target_sub_id(const ::std::string& value);
  inline void set_target_sub_id(const char* value);
  inline void set_target_sub_id(const char* value, size_t size);
  inline ::std::string* mutable_target_sub_id();
  inline ::std::string* release_target_sub_id();
  inline void set_allocated_target_sub_id(::std::string* target_sub_id);

  // optional string deliver_to_location_id = 16;
  inline bool has_deliver_to_location_id() const;
  inline void clear_deliver_to_location_id();
  static const int kDeliverToLocationIdFieldNumber = 16;
  inline const ::std::string& deliver_to_location_id() const;
  inline void set_deliver_to_location_id(const ::std::string& value);
  inline void set_deliver_to_location_id(const char* value);
  inline void set_deliver_to_location_id(const char* value, size_t size);
  inline ::std::string* mutable_deliver_to_location_id();
  inline ::std::string* release_deliver_to_location_id();
  inline void set_allocated_deliver_to_location_id(::std::string* deliver_to_location_id);

  // optional string on_behalf_of_location_id = 17;
  inline bool has_on_behalf_of_location_id() const;
  inline void clear_on_behalf_of_location_id();
  static const int kOnBehalfOfLocationIdFieldNumber = 17;
  inline const ::std::string& on_behalf_of_location_id() const;
  inline void set_on_behalf_of_location_id(const ::std::string& value);
  inline void set_on_behalf_of_location_id(const char* value);
  inline void set_on_behalf_of_location_id(const char* value, size_t size);
  inline ::std::string* mutable_on_behalf_of_location_id();
  inline ::std::string* release_on_behalf_of_location_id();
  inline void set_allocated_on_behalf_of_location_id(::std::string* on_behalf_of_location_id);

  // optional string sender_location_id = 18;
  inline bool has_sender_location_id() const;
  inline void clear_sender_location_id();
  static const int kSenderLocationIdFieldNumber = 18;
  inline const ::std::string& sender_location_id() const;
  inline void set_sender_location_id(const ::std::string& value);
  inline void set_sender_location_id(const char* value);
  inline void set_sender_location_id(const char* value, size_t size);
  inline ::std::string* mutable_sender_location_id();
  inline ::std::string* release_sender_location_id();
  inline void set_allocated_sender_location_id(::std::string* sender_location_id);

  // optional string target_location_id = 19;
  inline bool has_target_location_id() const;
  inline void clear_target_location_id();
  static const int kTargetLocationIdFieldNumber = 19;
  inline const ::std::string& target_location_id() const;
  inline void set_target_location_id(const ::std::string& value);
  inline void set_target_location_id(const char* value);
  inline void set_target_location_id(const char* value, size_t size);
  inline ::std::string* mutable_target_location_id();
  inline ::std::string* release_target_location_id();
  inline void set_allocated_target_location_id(::std::string* target_location_id);

  // optional fixed32 last_msg_seq_num_processed = 20;
  inline bool has_last_msg_seq_num_processed() const;
  inline void clear_last_msg_seq_num_processed();
  static const int kLastMsgSeqNumProcessedFieldNumber = 20;
  inline ::google::protobuf::uint32 last_msg_seq_num_processed() const;
  inline void set_last_msg_seq_num_processed(::google::protobuf::uint32 value);

  // optional string message_encoding = 21;
  inline bool has_message_encoding() const;
  inline void clear_message_encoding();
  static const int kMessageEncodingFieldNumber = 21;
  inline const ::std::string& message_encoding() const;
  inline void set_message_encoding(const ::std::string& value);
  inline void set_message_encoding(const char* value);
  inline void set_message_encoding(const char* value, size_t size);
  inline ::std::string* mutable_message_encoding();
  inline ::std::string* release_message_encoding();
  inline void set_allocated_message_encoding(::std::string* message_encoding);

  // optional bytes xml_data = 22;
  inline bool has_xml_data() const;
  inline void clear_xml_data();
  static const int kXmlDataFieldNumber = 22;
  inline const ::std::string& xml_data() const;
  inline void set_xml_data(const ::std::string& value);
  inline void set_xml_data(const char* value);
  inline void set_xml_data(const void* value, size_t size);
  inline ::std::string* mutable_xml_data();
  inline ::std::string* release_xml_data();
  inline void set_allocated_xml_data(::std::string* xml_data);

  // optional fixed32 xml_data_len = 23;
  inline bool has_xml_data_len() const;
  inline void clear_xml_data_len();
  static const int kXmlDataLenFieldNumber = 23;
  inline ::google::protobuf::uint32 xml_data_len() const;
  inline void set_xml_data_len(::google::protobuf::uint32 value);

  // optional .Session.ApplVerIdEnum appl_ver_id = 24;
  inline bool has_appl_ver_id() const;
  inline void clear_appl_ver_id();
  static const int kApplVerIdFieldNumber = 24;
  inline ::Session::ApplVerIdEnum appl_ver_id() const;
  inline void set_appl_ver_id(::Session::ApplVerIdEnum value);

  // optional string cstm_appl_ver_id = 25;
  inline bool has_cstm_appl_ver_id() const;
  inline void clear_cstm_appl_ver_id();
  static const int kCstmApplVerIdFieldNumber = 25;
  inline const ::std::string& cstm_appl_ver_id() const;
  inline void set_cstm_appl_ver_id(const ::std::string& value);
  inline void set_cstm_appl_ver_id(const char* value);
  inline void set_cstm_appl_ver_id(const char* value, size_t size);
  inline ::std::string* mutable_cstm_appl_ver_id();
  inline ::std::string* release_cstm_appl_ver_id();
  inline void set_allocated_cstm_appl_ver_id(::std::string* cstm_appl_ver_id);

  // repeated .Session.HopGrp hop_grp = 26;
  inline int hop_grp_size() const;
  inline void clear_hop_grp();
  static const int kHopGrpFieldNumber = 26;
  inline const ::Session::HopGrp& hop_grp(int index) const;
  inline ::Session::HopGrp* mutable_hop_grp(int index);
  inline ::Session::HopGrp* add_hop_grp();
  inline const ::google::protobuf::RepeatedPtrField< ::Session::HopGrp >&
      hop_grp() const;
  inline ::google::protobuf::RepeatedPtrField< ::Session::HopGrp >*
      mutable_hop_grp();

  // optional sfixed64 appl_ext_id = 27;
  inline bool has_appl_ext_id() const;
  inline void clear_appl_ext_id();
  static const int kApplExtIdFieldNumber = 27;
  inline ::google::protobuf::int64 appl_ext_id() const;
  inline void set_appl_ext_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Session.StandardHeader)
 private:
  inline void set_has_deliver_to_comp_id();
  inline void clear_has_deliver_to_comp_id();
  inline void set_has_deliver_to_sub_id();
  inline void clear_has_deliver_to_sub_id();
  inline void set_has_msg_seq_num();
  inline void clear_has_msg_seq_num();
  inline void set_has_on_behalf_of_comp_id();
  inline void clear_has_on_behalf_of_comp_id();
  inline void set_has_on_behalf_of_sub_id();
  inline void clear_has_on_behalf_of_sub_id();
  inline void set_has_orig_sending_time();
  inline void clear_has_orig_sending_time();
  inline void set_has_poss_dup_flag();
  inline void clear_has_poss_dup_flag();
  inline void set_has_poss_resend();
  inline void clear_has_poss_resend();
  inline void set_has_secure_data();
  inline void clear_has_secure_data();
  inline void set_has_secure_data_len();
  inline void clear_has_secure_data_len();
  inline void set_has_sender_comp_id();
  inline void clear_has_sender_comp_id();
  inline void set_has_sender_sub_id();
  inline void clear_has_sender_sub_id();
  inline void set_has_sending_time();
  inline void clear_has_sending_time();
  inline void set_has_target_comp_id();
  inline void clear_has_target_comp_id();
  inline void set_has_target_sub_id();
  inline void clear_has_target_sub_id();
  inline void set_has_deliver_to_location_id();
  inline void clear_has_deliver_to_location_id();
  inline void set_has_on_behalf_of_location_id();
  inline void clear_has_on_behalf_of_location_id();
  inline void set_has_sender_location_id();
  inline void clear_has_sender_location_id();
  inline void set_has_target_location_id();
  inline void clear_has_target_location_id();
  inline void set_has_last_msg_seq_num_processed();
  inline void clear_has_last_msg_seq_num_processed();
  inline void set_has_message_encoding();
  inline void clear_has_message_encoding();
  inline void set_has_xml_data();
  inline void clear_has_xml_data();
  inline void set_has_xml_data_len();
  inline void clear_has_xml_data_len();
  inline void set_has_appl_ver_id();
  inline void clear_has_appl_ver_id();
  inline void set_has_cstm_appl_ver_id();
  inline void clear_has_cstm_appl_ver_id();
  inline void set_has_appl_ext_id();
  inline void clear_has_appl_ext_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* deliver_to_comp_id_;
  ::std::string* deliver_to_sub_id_;
  ::std::string* on_behalf_of_comp_id_;
  ::std::string* on_behalf_of_sub_id_;
  ::google::protobuf::int64 orig_sending_time_;
  ::google::protobuf::uint32 msg_seq_num_;
  bool poss_dup_flag_;
  bool poss_resend_;
  ::std::string* secure_data_;
  ::std::string* sender_comp_id_;
  ::std::string* sender_sub_id_;
  ::google::protobuf::int64 sending_time_;
  ::std::string* target_comp_id_;
  ::std::string* target_sub_id_;
  ::google::protobuf::uint32 secure_data_len_;
  ::google::protobuf::uint32 last_msg_seq_num_processed_;
  ::std::string* deliver_to_location_id_;
  ::std::string* on_behalf_of_location_id_;
  ::std::string* sender_location_id_;
  ::std::string* target_location_id_;
  ::std::string* message_encoding_;
  ::std::string* xml_data_;
  ::google::protobuf::uint32 xml_data_len_;
  int appl_ver_id_;
  ::std::string* cstm_appl_ver_id_;
  ::google::protobuf::RepeatedPtrField< ::Session::HopGrp > hop_grp_;
  ::google::protobuf::int64 appl_ext_id_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static StandardHeader* default_instance_;
};
// -------------------------------------------------------------------

class StandardTrailer : public ::google::protobuf::Message {
 public:
  StandardTrailer();
  virtual ~StandardTrailer();

  StandardTrailer(const StandardTrailer& from);

  inline StandardTrailer& operator=(const StandardTrailer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StandardTrailer& default_instance();

  void Swap(StandardTrailer* other);

  // implements Message ----------------------------------------------

  StandardTrailer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StandardTrailer& from);
  void MergeFrom(const StandardTrailer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes signature = 1;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 1;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional fixed32 signature_length = 2;
  inline bool has_signature_length() const;
  inline void clear_signature_length();
  static const int kSignatureLengthFieldNumber = 2;
  inline ::google::protobuf::uint32 signature_length() const;
  inline void set_signature_length(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Session.StandardTrailer)
 private:
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_signature_length();
  inline void clear_has_signature_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* signature_;
  ::google::protobuf::uint32 signature_length_;
  friend void  protobuf_AddDesc_session_2eproto();
  friend void protobuf_AssignDesc_session_2eproto();
  friend void protobuf_ShutdownFile_session_2eproto();

  void InitAsDefaultInstance();
  static StandardTrailer* default_instance_;
};
// ===================================================================


// ===================================================================

// HopGrp

// optional string hop_comp_id = 1;
inline bool HopGrp::has_hop_comp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HopGrp::set_has_hop_comp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HopGrp::clear_has_hop_comp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HopGrp::clear_hop_comp_id() {
  if (hop_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hop_comp_id_->clear();
  }
  clear_has_hop_comp_id();
}
inline const ::std::string& HopGrp::hop_comp_id() const {
  // @@protoc_insertion_point(field_get:Session.HopGrp.hop_comp_id)
  return *hop_comp_id_;
}
inline void HopGrp::set_hop_comp_id(const ::std::string& value) {
  set_has_hop_comp_id();
  if (hop_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hop_comp_id_ = new ::std::string;
  }
  hop_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.HopGrp.hop_comp_id)
}
inline void HopGrp::set_hop_comp_id(const char* value) {
  set_has_hop_comp_id();
  if (hop_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hop_comp_id_ = new ::std::string;
  }
  hop_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.HopGrp.hop_comp_id)
}
inline void HopGrp::set_hop_comp_id(const char* value, size_t size) {
  set_has_hop_comp_id();
  if (hop_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hop_comp_id_ = new ::std::string;
  }
  hop_comp_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.HopGrp.hop_comp_id)
}
inline ::std::string* HopGrp::mutable_hop_comp_id() {
  set_has_hop_comp_id();
  if (hop_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    hop_comp_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.HopGrp.hop_comp_id)
  return hop_comp_id_;
}
inline ::std::string* HopGrp::release_hop_comp_id() {
  clear_has_hop_comp_id();
  if (hop_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = hop_comp_id_;
    hop_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HopGrp::set_allocated_hop_comp_id(::std::string* hop_comp_id) {
  if (hop_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hop_comp_id_;
  }
  if (hop_comp_id) {
    set_has_hop_comp_id();
    hop_comp_id_ = hop_comp_id;
  } else {
    clear_has_hop_comp_id();
    hop_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.HopGrp.hop_comp_id)
}

// optional fixed32 hop_ref_id = 2;
inline bool HopGrp::has_hop_ref_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HopGrp::set_has_hop_ref_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HopGrp::clear_has_hop_ref_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HopGrp::clear_hop_ref_id() {
  hop_ref_id_ = 0u;
  clear_has_hop_ref_id();
}
inline ::google::protobuf::uint32 HopGrp::hop_ref_id() const {
  // @@protoc_insertion_point(field_get:Session.HopGrp.hop_ref_id)
  return hop_ref_id_;
}
inline void HopGrp::set_hop_ref_id(::google::protobuf::uint32 value) {
  set_has_hop_ref_id();
  hop_ref_id_ = value;
  // @@protoc_insertion_point(field_set:Session.HopGrp.hop_ref_id)
}

// optional sfixed64 hop_sending_time = 3;
inline bool HopGrp::has_hop_sending_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HopGrp::set_has_hop_sending_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HopGrp::clear_has_hop_sending_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HopGrp::clear_hop_sending_time() {
  hop_sending_time_ = GOOGLE_LONGLONG(0);
  clear_has_hop_sending_time();
}
inline ::google::protobuf::int64 HopGrp::hop_sending_time() const {
  // @@protoc_insertion_point(field_get:Session.HopGrp.hop_sending_time)
  return hop_sending_time_;
}
inline void HopGrp::set_hop_sending_time(::google::protobuf::int64 value) {
  set_has_hop_sending_time();
  hop_sending_time_ = value;
  // @@protoc_insertion_point(field_set:Session.HopGrp.hop_sending_time)
}

// -------------------------------------------------------------------

// StandardHeader

// optional string deliver_to_comp_id = 1;
inline bool StandardHeader::has_deliver_to_comp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StandardHeader::set_has_deliver_to_comp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StandardHeader::clear_has_deliver_to_comp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StandardHeader::clear_deliver_to_comp_id() {
  if (deliver_to_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_comp_id_->clear();
  }
  clear_has_deliver_to_comp_id();
}
inline const ::std::string& StandardHeader::deliver_to_comp_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.deliver_to_comp_id)
  return *deliver_to_comp_id_;
}
inline void StandardHeader::set_deliver_to_comp_id(const ::std::string& value) {
  set_has_deliver_to_comp_id();
  if (deliver_to_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_comp_id_ = new ::std::string;
  }
  deliver_to_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.deliver_to_comp_id)
}
inline void StandardHeader::set_deliver_to_comp_id(const char* value) {
  set_has_deliver_to_comp_id();
  if (deliver_to_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_comp_id_ = new ::std::string;
  }
  deliver_to_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.deliver_to_comp_id)
}
inline void StandardHeader::set_deliver_to_comp_id(const char* value, size_t size) {
  set_has_deliver_to_comp_id();
  if (deliver_to_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_comp_id_ = new ::std::string;
  }
  deliver_to_comp_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.deliver_to_comp_id)
}
inline ::std::string* StandardHeader::mutable_deliver_to_comp_id() {
  set_has_deliver_to_comp_id();
  if (deliver_to_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_comp_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.deliver_to_comp_id)
  return deliver_to_comp_id_;
}
inline ::std::string* StandardHeader::release_deliver_to_comp_id() {
  clear_has_deliver_to_comp_id();
  if (deliver_to_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deliver_to_comp_id_;
    deliver_to_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_deliver_to_comp_id(::std::string* deliver_to_comp_id) {
  if (deliver_to_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_comp_id_;
  }
  if (deliver_to_comp_id) {
    set_has_deliver_to_comp_id();
    deliver_to_comp_id_ = deliver_to_comp_id;
  } else {
    clear_has_deliver_to_comp_id();
    deliver_to_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.deliver_to_comp_id)
}

// optional string deliver_to_sub_id = 2;
inline bool StandardHeader::has_deliver_to_sub_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StandardHeader::set_has_deliver_to_sub_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StandardHeader::clear_has_deliver_to_sub_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StandardHeader::clear_deliver_to_sub_id() {
  if (deliver_to_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_sub_id_->clear();
  }
  clear_has_deliver_to_sub_id();
}
inline const ::std::string& StandardHeader::deliver_to_sub_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.deliver_to_sub_id)
  return *deliver_to_sub_id_;
}
inline void StandardHeader::set_deliver_to_sub_id(const ::std::string& value) {
  set_has_deliver_to_sub_id();
  if (deliver_to_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_sub_id_ = new ::std::string;
  }
  deliver_to_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.deliver_to_sub_id)
}
inline void StandardHeader::set_deliver_to_sub_id(const char* value) {
  set_has_deliver_to_sub_id();
  if (deliver_to_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_sub_id_ = new ::std::string;
  }
  deliver_to_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.deliver_to_sub_id)
}
inline void StandardHeader::set_deliver_to_sub_id(const char* value, size_t size) {
  set_has_deliver_to_sub_id();
  if (deliver_to_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_sub_id_ = new ::std::string;
  }
  deliver_to_sub_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.deliver_to_sub_id)
}
inline ::std::string* StandardHeader::mutable_deliver_to_sub_id() {
  set_has_deliver_to_sub_id();
  if (deliver_to_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_sub_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.deliver_to_sub_id)
  return deliver_to_sub_id_;
}
inline ::std::string* StandardHeader::release_deliver_to_sub_id() {
  clear_has_deliver_to_sub_id();
  if (deliver_to_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deliver_to_sub_id_;
    deliver_to_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_deliver_to_sub_id(::std::string* deliver_to_sub_id) {
  if (deliver_to_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_sub_id_;
  }
  if (deliver_to_sub_id) {
    set_has_deliver_to_sub_id();
    deliver_to_sub_id_ = deliver_to_sub_id;
  } else {
    clear_has_deliver_to_sub_id();
    deliver_to_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.deliver_to_sub_id)
}

// optional fixed32 msg_seq_num = 3;
inline bool StandardHeader::has_msg_seq_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StandardHeader::set_has_msg_seq_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StandardHeader::clear_has_msg_seq_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StandardHeader::clear_msg_seq_num() {
  msg_seq_num_ = 0u;
  clear_has_msg_seq_num();
}
inline ::google::protobuf::uint32 StandardHeader::msg_seq_num() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.msg_seq_num)
  return msg_seq_num_;
}
inline void StandardHeader::set_msg_seq_num(::google::protobuf::uint32 value) {
  set_has_msg_seq_num();
  msg_seq_num_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.msg_seq_num)
}

// optional string on_behalf_of_comp_id = 4;
inline bool StandardHeader::has_on_behalf_of_comp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StandardHeader::set_has_on_behalf_of_comp_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StandardHeader::clear_has_on_behalf_of_comp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StandardHeader::clear_on_behalf_of_comp_id() {
  if (on_behalf_of_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_comp_id_->clear();
  }
  clear_has_on_behalf_of_comp_id();
}
inline const ::std::string& StandardHeader::on_behalf_of_comp_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.on_behalf_of_comp_id)
  return *on_behalf_of_comp_id_;
}
inline void StandardHeader::set_on_behalf_of_comp_id(const ::std::string& value) {
  set_has_on_behalf_of_comp_id();
  if (on_behalf_of_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_comp_id_ = new ::std::string;
  }
  on_behalf_of_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.on_behalf_of_comp_id)
}
inline void StandardHeader::set_on_behalf_of_comp_id(const char* value) {
  set_has_on_behalf_of_comp_id();
  if (on_behalf_of_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_comp_id_ = new ::std::string;
  }
  on_behalf_of_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.on_behalf_of_comp_id)
}
inline void StandardHeader::set_on_behalf_of_comp_id(const char* value, size_t size) {
  set_has_on_behalf_of_comp_id();
  if (on_behalf_of_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_comp_id_ = new ::std::string;
  }
  on_behalf_of_comp_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.on_behalf_of_comp_id)
}
inline ::std::string* StandardHeader::mutable_on_behalf_of_comp_id() {
  set_has_on_behalf_of_comp_id();
  if (on_behalf_of_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_comp_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.on_behalf_of_comp_id)
  return on_behalf_of_comp_id_;
}
inline ::std::string* StandardHeader::release_on_behalf_of_comp_id() {
  clear_has_on_behalf_of_comp_id();
  if (on_behalf_of_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = on_behalf_of_comp_id_;
    on_behalf_of_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_on_behalf_of_comp_id(::std::string* on_behalf_of_comp_id) {
  if (on_behalf_of_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_comp_id_;
  }
  if (on_behalf_of_comp_id) {
    set_has_on_behalf_of_comp_id();
    on_behalf_of_comp_id_ = on_behalf_of_comp_id;
  } else {
    clear_has_on_behalf_of_comp_id();
    on_behalf_of_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.on_behalf_of_comp_id)
}

// optional string on_behalf_of_sub_id = 5;
inline bool StandardHeader::has_on_behalf_of_sub_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StandardHeader::set_has_on_behalf_of_sub_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StandardHeader::clear_has_on_behalf_of_sub_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StandardHeader::clear_on_behalf_of_sub_id() {
  if (on_behalf_of_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_sub_id_->clear();
  }
  clear_has_on_behalf_of_sub_id();
}
inline const ::std::string& StandardHeader::on_behalf_of_sub_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.on_behalf_of_sub_id)
  return *on_behalf_of_sub_id_;
}
inline void StandardHeader::set_on_behalf_of_sub_id(const ::std::string& value) {
  set_has_on_behalf_of_sub_id();
  if (on_behalf_of_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_sub_id_ = new ::std::string;
  }
  on_behalf_of_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.on_behalf_of_sub_id)
}
inline void StandardHeader::set_on_behalf_of_sub_id(const char* value) {
  set_has_on_behalf_of_sub_id();
  if (on_behalf_of_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_sub_id_ = new ::std::string;
  }
  on_behalf_of_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.on_behalf_of_sub_id)
}
inline void StandardHeader::set_on_behalf_of_sub_id(const char* value, size_t size) {
  set_has_on_behalf_of_sub_id();
  if (on_behalf_of_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_sub_id_ = new ::std::string;
  }
  on_behalf_of_sub_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.on_behalf_of_sub_id)
}
inline ::std::string* StandardHeader::mutable_on_behalf_of_sub_id() {
  set_has_on_behalf_of_sub_id();
  if (on_behalf_of_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_sub_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.on_behalf_of_sub_id)
  return on_behalf_of_sub_id_;
}
inline ::std::string* StandardHeader::release_on_behalf_of_sub_id() {
  clear_has_on_behalf_of_sub_id();
  if (on_behalf_of_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = on_behalf_of_sub_id_;
    on_behalf_of_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_on_behalf_of_sub_id(::std::string* on_behalf_of_sub_id) {
  if (on_behalf_of_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_sub_id_;
  }
  if (on_behalf_of_sub_id) {
    set_has_on_behalf_of_sub_id();
    on_behalf_of_sub_id_ = on_behalf_of_sub_id;
  } else {
    clear_has_on_behalf_of_sub_id();
    on_behalf_of_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.on_behalf_of_sub_id)
}

// optional sfixed64 orig_sending_time = 6;
inline bool StandardHeader::has_orig_sending_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StandardHeader::set_has_orig_sending_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StandardHeader::clear_has_orig_sending_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StandardHeader::clear_orig_sending_time() {
  orig_sending_time_ = GOOGLE_LONGLONG(0);
  clear_has_orig_sending_time();
}
inline ::google::protobuf::int64 StandardHeader::orig_sending_time() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.orig_sending_time)
  return orig_sending_time_;
}
inline void StandardHeader::set_orig_sending_time(::google::protobuf::int64 value) {
  set_has_orig_sending_time();
  orig_sending_time_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.orig_sending_time)
}

// optional bool poss_dup_flag = 7;
inline bool StandardHeader::has_poss_dup_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StandardHeader::set_has_poss_dup_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StandardHeader::clear_has_poss_dup_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StandardHeader::clear_poss_dup_flag() {
  poss_dup_flag_ = false;
  clear_has_poss_dup_flag();
}
inline bool StandardHeader::poss_dup_flag() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.poss_dup_flag)
  return poss_dup_flag_;
}
inline void StandardHeader::set_poss_dup_flag(bool value) {
  set_has_poss_dup_flag();
  poss_dup_flag_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.poss_dup_flag)
}

// optional bool poss_resend = 8;
inline bool StandardHeader::has_poss_resend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StandardHeader::set_has_poss_resend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StandardHeader::clear_has_poss_resend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StandardHeader::clear_poss_resend() {
  poss_resend_ = false;
  clear_has_poss_resend();
}
inline bool StandardHeader::poss_resend() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.poss_resend)
  return poss_resend_;
}
inline void StandardHeader::set_poss_resend(bool value) {
  set_has_poss_resend();
  poss_resend_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.poss_resend)
}

// optional bytes secure_data = 9;
inline bool StandardHeader::has_secure_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StandardHeader::set_has_secure_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StandardHeader::clear_has_secure_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StandardHeader::clear_secure_data() {
  if (secure_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secure_data_->clear();
  }
  clear_has_secure_data();
}
inline const ::std::string& StandardHeader::secure_data() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.secure_data)
  return *secure_data_;
}
inline void StandardHeader::set_secure_data(const ::std::string& value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.secure_data)
}
inline void StandardHeader::set_secure_data(const char* value) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.secure_data)
}
inline void StandardHeader::set_secure_data(const void* value, size_t size) {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secure_data_ = new ::std::string;
  }
  secure_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.secure_data)
}
inline ::std::string* StandardHeader::mutable_secure_data() {
  set_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    secure_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.secure_data)
  return secure_data_;
}
inline ::std::string* StandardHeader::release_secure_data() {
  clear_has_secure_data();
  if (secure_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = secure_data_;
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_secure_data(::std::string* secure_data) {
  if (secure_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secure_data_;
  }
  if (secure_data) {
    set_has_secure_data();
    secure_data_ = secure_data;
  } else {
    clear_has_secure_data();
    secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.secure_data)
}

// optional fixed32 secure_data_len = 10;
inline bool StandardHeader::has_secure_data_len() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StandardHeader::set_has_secure_data_len() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StandardHeader::clear_has_secure_data_len() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StandardHeader::clear_secure_data_len() {
  secure_data_len_ = 0u;
  clear_has_secure_data_len();
}
inline ::google::protobuf::uint32 StandardHeader::secure_data_len() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.secure_data_len)
  return secure_data_len_;
}
inline void StandardHeader::set_secure_data_len(::google::protobuf::uint32 value) {
  set_has_secure_data_len();
  secure_data_len_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.secure_data_len)
}

// optional string sender_comp_id = 11;
inline bool StandardHeader::has_sender_comp_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StandardHeader::set_has_sender_comp_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StandardHeader::clear_has_sender_comp_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StandardHeader::clear_sender_comp_id() {
  if (sender_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_comp_id_->clear();
  }
  clear_has_sender_comp_id();
}
inline const ::std::string& StandardHeader::sender_comp_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.sender_comp_id)
  return *sender_comp_id_;
}
inline void StandardHeader::set_sender_comp_id(const ::std::string& value) {
  set_has_sender_comp_id();
  if (sender_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_comp_id_ = new ::std::string;
  }
  sender_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.sender_comp_id)
}
inline void StandardHeader::set_sender_comp_id(const char* value) {
  set_has_sender_comp_id();
  if (sender_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_comp_id_ = new ::std::string;
  }
  sender_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.sender_comp_id)
}
inline void StandardHeader::set_sender_comp_id(const char* value, size_t size) {
  set_has_sender_comp_id();
  if (sender_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_comp_id_ = new ::std::string;
  }
  sender_comp_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.sender_comp_id)
}
inline ::std::string* StandardHeader::mutable_sender_comp_id() {
  set_has_sender_comp_id();
  if (sender_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_comp_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.sender_comp_id)
  return sender_comp_id_;
}
inline ::std::string* StandardHeader::release_sender_comp_id() {
  clear_has_sender_comp_id();
  if (sender_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_comp_id_;
    sender_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_sender_comp_id(::std::string* sender_comp_id) {
  if (sender_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_comp_id_;
  }
  if (sender_comp_id) {
    set_has_sender_comp_id();
    sender_comp_id_ = sender_comp_id;
  } else {
    clear_has_sender_comp_id();
    sender_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.sender_comp_id)
}

// optional string sender_sub_id = 12;
inline bool StandardHeader::has_sender_sub_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StandardHeader::set_has_sender_sub_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StandardHeader::clear_has_sender_sub_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StandardHeader::clear_sender_sub_id() {
  if (sender_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_sub_id_->clear();
  }
  clear_has_sender_sub_id();
}
inline const ::std::string& StandardHeader::sender_sub_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.sender_sub_id)
  return *sender_sub_id_;
}
inline void StandardHeader::set_sender_sub_id(const ::std::string& value) {
  set_has_sender_sub_id();
  if (sender_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_sub_id_ = new ::std::string;
  }
  sender_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.sender_sub_id)
}
inline void StandardHeader::set_sender_sub_id(const char* value) {
  set_has_sender_sub_id();
  if (sender_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_sub_id_ = new ::std::string;
  }
  sender_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.sender_sub_id)
}
inline void StandardHeader::set_sender_sub_id(const char* value, size_t size) {
  set_has_sender_sub_id();
  if (sender_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_sub_id_ = new ::std::string;
  }
  sender_sub_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.sender_sub_id)
}
inline ::std::string* StandardHeader::mutable_sender_sub_id() {
  set_has_sender_sub_id();
  if (sender_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_sub_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.sender_sub_id)
  return sender_sub_id_;
}
inline ::std::string* StandardHeader::release_sender_sub_id() {
  clear_has_sender_sub_id();
  if (sender_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_sub_id_;
    sender_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_sender_sub_id(::std::string* sender_sub_id) {
  if (sender_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_sub_id_;
  }
  if (sender_sub_id) {
    set_has_sender_sub_id();
    sender_sub_id_ = sender_sub_id;
  } else {
    clear_has_sender_sub_id();
    sender_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.sender_sub_id)
}

// optional sfixed64 sending_time = 13;
inline bool StandardHeader::has_sending_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StandardHeader::set_has_sending_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StandardHeader::clear_has_sending_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StandardHeader::clear_sending_time() {
  sending_time_ = GOOGLE_LONGLONG(0);
  clear_has_sending_time();
}
inline ::google::protobuf::int64 StandardHeader::sending_time() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.sending_time)
  return sending_time_;
}
inline void StandardHeader::set_sending_time(::google::protobuf::int64 value) {
  set_has_sending_time();
  sending_time_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.sending_time)
}

// optional string target_comp_id = 14;
inline bool StandardHeader::has_target_comp_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StandardHeader::set_has_target_comp_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StandardHeader::clear_has_target_comp_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StandardHeader::clear_target_comp_id() {
  if (target_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_comp_id_->clear();
  }
  clear_has_target_comp_id();
}
inline const ::std::string& StandardHeader::target_comp_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.target_comp_id)
  return *target_comp_id_;
}
inline void StandardHeader::set_target_comp_id(const ::std::string& value) {
  set_has_target_comp_id();
  if (target_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_comp_id_ = new ::std::string;
  }
  target_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.target_comp_id)
}
inline void StandardHeader::set_target_comp_id(const char* value) {
  set_has_target_comp_id();
  if (target_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_comp_id_ = new ::std::string;
  }
  target_comp_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.target_comp_id)
}
inline void StandardHeader::set_target_comp_id(const char* value, size_t size) {
  set_has_target_comp_id();
  if (target_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_comp_id_ = new ::std::string;
  }
  target_comp_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.target_comp_id)
}
inline ::std::string* StandardHeader::mutable_target_comp_id() {
  set_has_target_comp_id();
  if (target_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_comp_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.target_comp_id)
  return target_comp_id_;
}
inline ::std::string* StandardHeader::release_target_comp_id() {
  clear_has_target_comp_id();
  if (target_comp_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_comp_id_;
    target_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_target_comp_id(::std::string* target_comp_id) {
  if (target_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_comp_id_;
  }
  if (target_comp_id) {
    set_has_target_comp_id();
    target_comp_id_ = target_comp_id;
  } else {
    clear_has_target_comp_id();
    target_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.target_comp_id)
}

// optional string target_sub_id = 15;
inline bool StandardHeader::has_target_sub_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StandardHeader::set_has_target_sub_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StandardHeader::clear_has_target_sub_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StandardHeader::clear_target_sub_id() {
  if (target_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_sub_id_->clear();
  }
  clear_has_target_sub_id();
}
inline const ::std::string& StandardHeader::target_sub_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.target_sub_id)
  return *target_sub_id_;
}
inline void StandardHeader::set_target_sub_id(const ::std::string& value) {
  set_has_target_sub_id();
  if (target_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_sub_id_ = new ::std::string;
  }
  target_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.target_sub_id)
}
inline void StandardHeader::set_target_sub_id(const char* value) {
  set_has_target_sub_id();
  if (target_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_sub_id_ = new ::std::string;
  }
  target_sub_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.target_sub_id)
}
inline void StandardHeader::set_target_sub_id(const char* value, size_t size) {
  set_has_target_sub_id();
  if (target_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_sub_id_ = new ::std::string;
  }
  target_sub_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.target_sub_id)
}
inline ::std::string* StandardHeader::mutable_target_sub_id() {
  set_has_target_sub_id();
  if (target_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_sub_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.target_sub_id)
  return target_sub_id_;
}
inline ::std::string* StandardHeader::release_target_sub_id() {
  clear_has_target_sub_id();
  if (target_sub_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_sub_id_;
    target_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_target_sub_id(::std::string* target_sub_id) {
  if (target_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_sub_id_;
  }
  if (target_sub_id) {
    set_has_target_sub_id();
    target_sub_id_ = target_sub_id;
  } else {
    clear_has_target_sub_id();
    target_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.target_sub_id)
}

// optional string deliver_to_location_id = 16;
inline bool StandardHeader::has_deliver_to_location_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StandardHeader::set_has_deliver_to_location_id() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StandardHeader::clear_has_deliver_to_location_id() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StandardHeader::clear_deliver_to_location_id() {
  if (deliver_to_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_location_id_->clear();
  }
  clear_has_deliver_to_location_id();
}
inline const ::std::string& StandardHeader::deliver_to_location_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.deliver_to_location_id)
  return *deliver_to_location_id_;
}
inline void StandardHeader::set_deliver_to_location_id(const ::std::string& value) {
  set_has_deliver_to_location_id();
  if (deliver_to_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_location_id_ = new ::std::string;
  }
  deliver_to_location_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.deliver_to_location_id)
}
inline void StandardHeader::set_deliver_to_location_id(const char* value) {
  set_has_deliver_to_location_id();
  if (deliver_to_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_location_id_ = new ::std::string;
  }
  deliver_to_location_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.deliver_to_location_id)
}
inline void StandardHeader::set_deliver_to_location_id(const char* value, size_t size) {
  set_has_deliver_to_location_id();
  if (deliver_to_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_location_id_ = new ::std::string;
  }
  deliver_to_location_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.deliver_to_location_id)
}
inline ::std::string* StandardHeader::mutable_deliver_to_location_id() {
  set_has_deliver_to_location_id();
  if (deliver_to_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    deliver_to_location_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.deliver_to_location_id)
  return deliver_to_location_id_;
}
inline ::std::string* StandardHeader::release_deliver_to_location_id() {
  clear_has_deliver_to_location_id();
  if (deliver_to_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = deliver_to_location_id_;
    deliver_to_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_deliver_to_location_id(::std::string* deliver_to_location_id) {
  if (deliver_to_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_location_id_;
  }
  if (deliver_to_location_id) {
    set_has_deliver_to_location_id();
    deliver_to_location_id_ = deliver_to_location_id;
  } else {
    clear_has_deliver_to_location_id();
    deliver_to_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.deliver_to_location_id)
}

// optional string on_behalf_of_location_id = 17;
inline bool StandardHeader::has_on_behalf_of_location_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StandardHeader::set_has_on_behalf_of_location_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StandardHeader::clear_has_on_behalf_of_location_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StandardHeader::clear_on_behalf_of_location_id() {
  if (on_behalf_of_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_location_id_->clear();
  }
  clear_has_on_behalf_of_location_id();
}
inline const ::std::string& StandardHeader::on_behalf_of_location_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.on_behalf_of_location_id)
  return *on_behalf_of_location_id_;
}
inline void StandardHeader::set_on_behalf_of_location_id(const ::std::string& value) {
  set_has_on_behalf_of_location_id();
  if (on_behalf_of_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_location_id_ = new ::std::string;
  }
  on_behalf_of_location_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.on_behalf_of_location_id)
}
inline void StandardHeader::set_on_behalf_of_location_id(const char* value) {
  set_has_on_behalf_of_location_id();
  if (on_behalf_of_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_location_id_ = new ::std::string;
  }
  on_behalf_of_location_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.on_behalf_of_location_id)
}
inline void StandardHeader::set_on_behalf_of_location_id(const char* value, size_t size) {
  set_has_on_behalf_of_location_id();
  if (on_behalf_of_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_location_id_ = new ::std::string;
  }
  on_behalf_of_location_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.on_behalf_of_location_id)
}
inline ::std::string* StandardHeader::mutable_on_behalf_of_location_id() {
  set_has_on_behalf_of_location_id();
  if (on_behalf_of_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    on_behalf_of_location_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.on_behalf_of_location_id)
  return on_behalf_of_location_id_;
}
inline ::std::string* StandardHeader::release_on_behalf_of_location_id() {
  clear_has_on_behalf_of_location_id();
  if (on_behalf_of_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = on_behalf_of_location_id_;
    on_behalf_of_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_on_behalf_of_location_id(::std::string* on_behalf_of_location_id) {
  if (on_behalf_of_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_location_id_;
  }
  if (on_behalf_of_location_id) {
    set_has_on_behalf_of_location_id();
    on_behalf_of_location_id_ = on_behalf_of_location_id;
  } else {
    clear_has_on_behalf_of_location_id();
    on_behalf_of_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.on_behalf_of_location_id)
}

// optional string sender_location_id = 18;
inline bool StandardHeader::has_sender_location_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StandardHeader::set_has_sender_location_id() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StandardHeader::clear_has_sender_location_id() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StandardHeader::clear_sender_location_id() {
  if (sender_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_location_id_->clear();
  }
  clear_has_sender_location_id();
}
inline const ::std::string& StandardHeader::sender_location_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.sender_location_id)
  return *sender_location_id_;
}
inline void StandardHeader::set_sender_location_id(const ::std::string& value) {
  set_has_sender_location_id();
  if (sender_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_location_id_ = new ::std::string;
  }
  sender_location_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.sender_location_id)
}
inline void StandardHeader::set_sender_location_id(const char* value) {
  set_has_sender_location_id();
  if (sender_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_location_id_ = new ::std::string;
  }
  sender_location_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.sender_location_id)
}
inline void StandardHeader::set_sender_location_id(const char* value, size_t size) {
  set_has_sender_location_id();
  if (sender_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_location_id_ = new ::std::string;
  }
  sender_location_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.sender_location_id)
}
inline ::std::string* StandardHeader::mutable_sender_location_id() {
  set_has_sender_location_id();
  if (sender_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_location_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.sender_location_id)
  return sender_location_id_;
}
inline ::std::string* StandardHeader::release_sender_location_id() {
  clear_has_sender_location_id();
  if (sender_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_location_id_;
    sender_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_sender_location_id(::std::string* sender_location_id) {
  if (sender_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_location_id_;
  }
  if (sender_location_id) {
    set_has_sender_location_id();
    sender_location_id_ = sender_location_id;
  } else {
    clear_has_sender_location_id();
    sender_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.sender_location_id)
}

// optional string target_location_id = 19;
inline bool StandardHeader::has_target_location_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StandardHeader::set_has_target_location_id() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StandardHeader::clear_has_target_location_id() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StandardHeader::clear_target_location_id() {
  if (target_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_location_id_->clear();
  }
  clear_has_target_location_id();
}
inline const ::std::string& StandardHeader::target_location_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.target_location_id)
  return *target_location_id_;
}
inline void StandardHeader::set_target_location_id(const ::std::string& value) {
  set_has_target_location_id();
  if (target_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_location_id_ = new ::std::string;
  }
  target_location_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.target_location_id)
}
inline void StandardHeader::set_target_location_id(const char* value) {
  set_has_target_location_id();
  if (target_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_location_id_ = new ::std::string;
  }
  target_location_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.target_location_id)
}
inline void StandardHeader::set_target_location_id(const char* value, size_t size) {
  set_has_target_location_id();
  if (target_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_location_id_ = new ::std::string;
  }
  target_location_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.target_location_id)
}
inline ::std::string* StandardHeader::mutable_target_location_id() {
  set_has_target_location_id();
  if (target_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    target_location_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.target_location_id)
  return target_location_id_;
}
inline ::std::string* StandardHeader::release_target_location_id() {
  clear_has_target_location_id();
  if (target_location_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = target_location_id_;
    target_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_target_location_id(::std::string* target_location_id) {
  if (target_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_location_id_;
  }
  if (target_location_id) {
    set_has_target_location_id();
    target_location_id_ = target_location_id;
  } else {
    clear_has_target_location_id();
    target_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.target_location_id)
}

// optional fixed32 last_msg_seq_num_processed = 20;
inline bool StandardHeader::has_last_msg_seq_num_processed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StandardHeader::set_has_last_msg_seq_num_processed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StandardHeader::clear_has_last_msg_seq_num_processed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StandardHeader::clear_last_msg_seq_num_processed() {
  last_msg_seq_num_processed_ = 0u;
  clear_has_last_msg_seq_num_processed();
}
inline ::google::protobuf::uint32 StandardHeader::last_msg_seq_num_processed() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.last_msg_seq_num_processed)
  return last_msg_seq_num_processed_;
}
inline void StandardHeader::set_last_msg_seq_num_processed(::google::protobuf::uint32 value) {
  set_has_last_msg_seq_num_processed();
  last_msg_seq_num_processed_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.last_msg_seq_num_processed)
}

// optional string message_encoding = 21;
inline bool StandardHeader::has_message_encoding() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void StandardHeader::set_has_message_encoding() {
  _has_bits_[0] |= 0x00100000u;
}
inline void StandardHeader::clear_has_message_encoding() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void StandardHeader::clear_message_encoding() {
  if (message_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_encoding_->clear();
  }
  clear_has_message_encoding();
}
inline const ::std::string& StandardHeader::message_encoding() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.message_encoding)
  return *message_encoding_;
}
inline void StandardHeader::set_message_encoding(const ::std::string& value) {
  set_has_message_encoding();
  if (message_encoding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_encoding_ = new ::std::string;
  }
  message_encoding_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.message_encoding)
}
inline void StandardHeader::set_message_encoding(const char* value) {
  set_has_message_encoding();
  if (message_encoding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_encoding_ = new ::std::string;
  }
  message_encoding_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.message_encoding)
}
inline void StandardHeader::set_message_encoding(const char* value, size_t size) {
  set_has_message_encoding();
  if (message_encoding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_encoding_ = new ::std::string;
  }
  message_encoding_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.message_encoding)
}
inline ::std::string* StandardHeader::mutable_message_encoding() {
  set_has_message_encoding();
  if (message_encoding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_encoding_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.message_encoding)
  return message_encoding_;
}
inline ::std::string* StandardHeader::release_message_encoding() {
  clear_has_message_encoding();
  if (message_encoding_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_encoding_;
    message_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_message_encoding(::std::string* message_encoding) {
  if (message_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_encoding_;
  }
  if (message_encoding) {
    set_has_message_encoding();
    message_encoding_ = message_encoding;
  } else {
    clear_has_message_encoding();
    message_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.message_encoding)
}

// optional bytes xml_data = 22;
inline bool StandardHeader::has_xml_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void StandardHeader::set_has_xml_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void StandardHeader::clear_has_xml_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void StandardHeader::clear_xml_data() {
  if (xml_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_data_->clear();
  }
  clear_has_xml_data();
}
inline const ::std::string& StandardHeader::xml_data() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.xml_data)
  return *xml_data_;
}
inline void StandardHeader::set_xml_data(const ::std::string& value) {
  set_has_xml_data();
  if (xml_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_data_ = new ::std::string;
  }
  xml_data_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.xml_data)
}
inline void StandardHeader::set_xml_data(const char* value) {
  set_has_xml_data();
  if (xml_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_data_ = new ::std::string;
  }
  xml_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.xml_data)
}
inline void StandardHeader::set_xml_data(const void* value, size_t size) {
  set_has_xml_data();
  if (xml_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_data_ = new ::std::string;
  }
  xml_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.xml_data)
}
inline ::std::string* StandardHeader::mutable_xml_data() {
  set_has_xml_data();
  if (xml_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xml_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.xml_data)
  return xml_data_;
}
inline ::std::string* StandardHeader::release_xml_data() {
  clear_has_xml_data();
  if (xml_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xml_data_;
    xml_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_xml_data(::std::string* xml_data) {
  if (xml_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xml_data_;
  }
  if (xml_data) {
    set_has_xml_data();
    xml_data_ = xml_data;
  } else {
    clear_has_xml_data();
    xml_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.xml_data)
}

// optional fixed32 xml_data_len = 23;
inline bool StandardHeader::has_xml_data_len() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void StandardHeader::set_has_xml_data_len() {
  _has_bits_[0] |= 0x00400000u;
}
inline void StandardHeader::clear_has_xml_data_len() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void StandardHeader::clear_xml_data_len() {
  xml_data_len_ = 0u;
  clear_has_xml_data_len();
}
inline ::google::protobuf::uint32 StandardHeader::xml_data_len() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.xml_data_len)
  return xml_data_len_;
}
inline void StandardHeader::set_xml_data_len(::google::protobuf::uint32 value) {
  set_has_xml_data_len();
  xml_data_len_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.xml_data_len)
}

// optional .Session.ApplVerIdEnum appl_ver_id = 24;
inline bool StandardHeader::has_appl_ver_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void StandardHeader::set_has_appl_ver_id() {
  _has_bits_[0] |= 0x00800000u;
}
inline void StandardHeader::clear_has_appl_ver_id() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void StandardHeader::clear_appl_ver_id() {
  appl_ver_id_ = 0;
  clear_has_appl_ver_id();
}
inline ::Session::ApplVerIdEnum StandardHeader::appl_ver_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.appl_ver_id)
  return static_cast< ::Session::ApplVerIdEnum >(appl_ver_id_);
}
inline void StandardHeader::set_appl_ver_id(::Session::ApplVerIdEnum value) {
  assert(::Session::ApplVerIdEnum_IsValid(value));
  set_has_appl_ver_id();
  appl_ver_id_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.appl_ver_id)
}

// optional string cstm_appl_ver_id = 25;
inline bool StandardHeader::has_cstm_appl_ver_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void StandardHeader::set_has_cstm_appl_ver_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void StandardHeader::clear_has_cstm_appl_ver_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void StandardHeader::clear_cstm_appl_ver_id() {
  if (cstm_appl_ver_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cstm_appl_ver_id_->clear();
  }
  clear_has_cstm_appl_ver_id();
}
inline const ::std::string& StandardHeader::cstm_appl_ver_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.cstm_appl_ver_id)
  return *cstm_appl_ver_id_;
}
inline void StandardHeader::set_cstm_appl_ver_id(const ::std::string& value) {
  set_has_cstm_appl_ver_id();
  if (cstm_appl_ver_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cstm_appl_ver_id_ = new ::std::string;
  }
  cstm_appl_ver_id_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardHeader.cstm_appl_ver_id)
}
inline void StandardHeader::set_cstm_appl_ver_id(const char* value) {
  set_has_cstm_appl_ver_id();
  if (cstm_appl_ver_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cstm_appl_ver_id_ = new ::std::string;
  }
  cstm_appl_ver_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardHeader.cstm_appl_ver_id)
}
inline void StandardHeader::set_cstm_appl_ver_id(const char* value, size_t size) {
  set_has_cstm_appl_ver_id();
  if (cstm_appl_ver_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cstm_appl_ver_id_ = new ::std::string;
  }
  cstm_appl_ver_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardHeader.cstm_appl_ver_id)
}
inline ::std::string* StandardHeader::mutable_cstm_appl_ver_id() {
  set_has_cstm_appl_ver_id();
  if (cstm_appl_ver_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cstm_appl_ver_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.cstm_appl_ver_id)
  return cstm_appl_ver_id_;
}
inline ::std::string* StandardHeader::release_cstm_appl_ver_id() {
  clear_has_cstm_appl_ver_id();
  if (cstm_appl_ver_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cstm_appl_ver_id_;
    cstm_appl_ver_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardHeader::set_allocated_cstm_appl_ver_id(::std::string* cstm_appl_ver_id) {
  if (cstm_appl_ver_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cstm_appl_ver_id_;
  }
  if (cstm_appl_ver_id) {
    set_has_cstm_appl_ver_id();
    cstm_appl_ver_id_ = cstm_appl_ver_id;
  } else {
    clear_has_cstm_appl_ver_id();
    cstm_appl_ver_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardHeader.cstm_appl_ver_id)
}

// repeated .Session.HopGrp hop_grp = 26;
inline int StandardHeader::hop_grp_size() const {
  return hop_grp_.size();
}
inline void StandardHeader::clear_hop_grp() {
  hop_grp_.Clear();
}
inline const ::Session::HopGrp& StandardHeader::hop_grp(int index) const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.hop_grp)
  return hop_grp_.Get(index);
}
inline ::Session::HopGrp* StandardHeader::mutable_hop_grp(int index) {
  // @@protoc_insertion_point(field_mutable:Session.StandardHeader.hop_grp)
  return hop_grp_.Mutable(index);
}
inline ::Session::HopGrp* StandardHeader::add_hop_grp() {
  // @@protoc_insertion_point(field_add:Session.StandardHeader.hop_grp)
  return hop_grp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Session::HopGrp >&
StandardHeader::hop_grp() const {
  // @@protoc_insertion_point(field_list:Session.StandardHeader.hop_grp)
  return hop_grp_;
}
inline ::google::protobuf::RepeatedPtrField< ::Session::HopGrp >*
StandardHeader::mutable_hop_grp() {
  // @@protoc_insertion_point(field_mutable_list:Session.StandardHeader.hop_grp)
  return &hop_grp_;
}

// optional sfixed64 appl_ext_id = 27;
inline bool StandardHeader::has_appl_ext_id() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void StandardHeader::set_has_appl_ext_id() {
  _has_bits_[0] |= 0x04000000u;
}
inline void StandardHeader::clear_has_appl_ext_id() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void StandardHeader::clear_appl_ext_id() {
  appl_ext_id_ = GOOGLE_LONGLONG(0);
  clear_has_appl_ext_id();
}
inline ::google::protobuf::int64 StandardHeader::appl_ext_id() const {
  // @@protoc_insertion_point(field_get:Session.StandardHeader.appl_ext_id)
  return appl_ext_id_;
}
inline void StandardHeader::set_appl_ext_id(::google::protobuf::int64 value) {
  set_has_appl_ext_id();
  appl_ext_id_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardHeader.appl_ext_id)
}

// -------------------------------------------------------------------

// StandardTrailer

// optional bytes signature = 1;
inline bool StandardTrailer::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StandardTrailer::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StandardTrailer::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StandardTrailer::clear_signature() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& StandardTrailer::signature() const {
  // @@protoc_insertion_point(field_get:Session.StandardTrailer.signature)
  return *signature_;
}
inline void StandardTrailer::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set:Session.StandardTrailer.signature)
}
inline void StandardTrailer::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
  // @@protoc_insertion_point(field_set_char:Session.StandardTrailer.signature)
}
inline void StandardTrailer::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Session.StandardTrailer.signature)
}
inline ::std::string* StandardTrailer::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    signature_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Session.StandardTrailer.signature)
  return signature_;
}
inline ::std::string* StandardTrailer::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StandardTrailer::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Session.StandardTrailer.signature)
}

// optional fixed32 signature_length = 2;
inline bool StandardTrailer::has_signature_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StandardTrailer::set_has_signature_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StandardTrailer::clear_has_signature_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StandardTrailer::clear_signature_length() {
  signature_length_ = 0u;
  clear_has_signature_length();
}
inline ::google::protobuf::uint32 StandardTrailer::signature_length() const {
  // @@protoc_insertion_point(field_get:Session.StandardTrailer.signature_length)
  return signature_length_;
}
inline void StandardTrailer::set_signature_length(::google::protobuf::uint32 value) {
  set_has_signature_length();
  signature_length_ = value;
  // @@protoc_insertion_point(field_set:Session.StandardTrailer.signature_length)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Session::MsgTypeEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Session::MsgTypeEnum>() {
  return ::Session::MsgTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::Session::ApplVerIdEnum> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Session::ApplVerIdEnum>() {
  return ::Session::ApplVerIdEnum_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_session_2eproto__INCLUDED
