// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Common {

namespace {

const ::google::protobuf::Descriptor* PartySubIdTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartySubIdTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PtysSubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PtysSubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Parties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Parties_reflection_ = NULL;
const ::google::protobuf::Descriptor* NstdPtysSubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NstdPtysSubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedParties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedParties_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreAllocGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreAllocGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DisplayInstruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DisplayInstruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradingSessionIdUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradingSessionIdUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradingSessionSubIdUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradingSessionSubIdUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrdgSesGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrdgSesGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecAltIdGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecAltIdGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityXml_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityXml_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvntGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvntGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentPtysSubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentPtysSubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentParties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentParties_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexEventTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexEventTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexEventDates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexEventDates_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComplexEvents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComplexEvents_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrikePriceDeterminationMethodUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrikePriceDeterminationMethodUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlowScheduleTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlowScheduleTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CpProgramUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CpProgramUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instrument_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinancingDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinancingDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndSecAltIdGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndSecAltIdGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnderlyingStipulations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnderlyingStipulations_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndlyInstrumentPtysSubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndlyInstrumentPtysSubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndlyInstrumentParties_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndlyInstrumentParties_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnderlyingFlowScheduleTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnderlyingFlowScheduleTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnderlyingInstrument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnderlyingInstrument_reflection_ = NULL;
const ::google::protobuf::Descriptor* UndInstrmtGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UndInstrmtGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Stipulations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stipulations_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderQtyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderQtyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TriggeringInstruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TriggeringInstruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpreadOrBenchmarkCurveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpreadOrBenchmarkCurveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YieldData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YieldData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommissionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PegInstructions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PegInstructions_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscretionInstructions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscretionInstructions_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrategyParametersGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrategyParametersGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrdRegTimestamps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrdRegTimestamps_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationSequenceControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationSequenceControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContraGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContraGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NstdPtys4SubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NstdPtys4SubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedParties4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedParties4_reflection_ = NULL;
const ::google::protobuf::Descriptor* RateSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RateSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContAmtGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContAmtGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegSecAltIdGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegSecAltIdGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegFlowScheduleTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegFlowScheduleTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentLeg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentLeg_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegStipulations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegStipulations_reflection_ = NULL;
const ::google::protobuf::Descriptor* NstdPtys2SubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NstdPtys2SubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedParties2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedParties2_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegPreAllocGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegPreAllocGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NstdPtys3SubGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NstdPtys3SubGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedParties3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedParties3_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrmtLegExecGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrmtLegExecGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiscFeesGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiscFeesGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrmtLegGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrmtLegGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrmtLegIoiGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrmtLegIoiGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutingGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutingGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrAttribTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrAttribTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrbGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrbGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrumentExtension_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrumentExtension_reflection_ = NULL;
const ::google::protobuf::Descriptor* TickRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TickRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotTypeRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotTypeRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* PriceLimits_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PriceLimits_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseTradingRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseTradingRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdTypeRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdTypeRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeInForceRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeInForceRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecInstRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecInstRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDataFeedTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDataFeedTypes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradingSessionRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradingSessionRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradingSessionRulesGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradingSessionRulesGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NestedInstrumentAttribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NestedInstrumentAttribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityTradingRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityTradingRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaturityRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaturityRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrikeRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrikeRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketSegmentGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketSegmentGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LegBenchmarkCurveData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LegBenchmarkCurveData_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstrmtLegSecListGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstrmtLegSecListGrp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PartySubIdTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartyIdSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PartyRoleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayWhenEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComplexEventTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComplexEventPriceBoundaryMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComplexEventPriceTimeTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ComplexEventConditionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SymbolSfxEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityIdSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProductEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RestructuringTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SeniorityEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StrikePriceDeterminationMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StrikePriceBoundaryMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnderlyingPriceDeterminationMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContractMultiplierUnitEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FlowScheduleTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitOfMeasureEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SettlMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExerciseStyleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OptPayoutTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceQuoteMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ValuationMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ListMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PutOrCallEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeUnitEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CpProgramEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TerminationTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeliveryTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnderlyingSettlementTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnderlyingCashTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnderlyingFxRateCalcEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StipulationTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoundingDirectionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerActionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerPriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerPriceTypeScopeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerPriceDirectionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TriggerOrderTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BenchmarkCurveNameEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* YieldTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CommTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FundRenewWaivEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegPriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegMoveTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegOffsetTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegLimitTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegRoundDirectionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PegScopeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionMoveTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionOffsetTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionLimitTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionRoundDirectionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiscretionScopeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StrategyParameterTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TrdRegTimestampTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeskTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeskTypeSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeskOrderHandlingInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RateSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RateSourceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContAmtTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LegSwapTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MiscFeeTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MiscFeeBasisEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoutingTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InstrAttribTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeliveryFormEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TickRuleTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LotTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceLimitTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExpirationCycleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ImpliedMarketIndicatorEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MultilegModelEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MultilegPriceMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrdTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MdBookTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MaturityMonthYearFormatEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MaturityMonthYearIncrementUnitsEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_2eproto() {
  protobuf_AddDesc_common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common.proto");
  GOOGLE_CHECK(file != NULL);
  PartySubIdTypeUnion_descriptor_ = file->message_type(0);
  static const int PartySubIdTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartySubIdTypeUnion, party_sub_id_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartySubIdTypeUnion, party_sub_id_type_sfixed64_),
  };
  PartySubIdTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartySubIdTypeUnion_descriptor_,
      PartySubIdTypeUnion::default_instance_,
      PartySubIdTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartySubIdTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartySubIdTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartySubIdTypeUnion));
  PtysSubGrp_descriptor_ = file->message_type(1);
  static const int PtysSubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtysSubGrp, party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtysSubGrp, party_sub_id_type_),
  };
  PtysSubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PtysSubGrp_descriptor_,
      PtysSubGrp::default_instance_,
      PtysSubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtysSubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PtysSubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PtysSubGrp));
  Parties_descriptor_ = file->message_type(2);
  static const int Parties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, ptys_sub_grp_),
  };
  Parties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Parties_descriptor_,
      Parties::default_instance_,
      Parties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Parties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Parties));
  NstdPtysSubGrp_descriptor_ = file->message_type(3);
  static const int NstdPtysSubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtysSubGrp, nested_party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtysSubGrp, nested_party_sub_id_type_),
  };
  NstdPtysSubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NstdPtysSubGrp_descriptor_,
      NstdPtysSubGrp::default_instance_,
      NstdPtysSubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtysSubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtysSubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NstdPtysSubGrp));
  NestedParties_descriptor_ = file->message_type(4);
  static const int NestedParties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, nested_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, nested_party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, nested_party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, nstd_ptys_sub_grp_),
  };
  NestedParties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NestedParties_descriptor_,
      NestedParties::default_instance_,
      NestedParties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NestedParties));
  PreAllocGrp_descriptor_ = file->message_type(5);
  static const int PreAllocGrp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, alloc_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, alloc_acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, alloc_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, alloc_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, alloc_settl_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, individual_alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, nested_parties_),
  };
  PreAllocGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreAllocGrp_descriptor_,
      PreAllocGrp::default_instance_,
      PreAllocGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAllocGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreAllocGrp));
  DisplayInstruction_descriptor_ = file->message_type(6);
  static const int DisplayInstruction_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_high_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_high_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_low_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_low_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_min_incr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_min_incr_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, display_when_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, refresh_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, refresh_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, secondary_display_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, secondary_display_qty_exponent_),
  };
  DisplayInstruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DisplayInstruction_descriptor_,
      DisplayInstruction::default_instance_,
      DisplayInstruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisplayInstruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DisplayInstruction));
  TradingSessionIdUnion_descriptor_ = file->message_type(7);
  static const int TradingSessionIdUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionIdUnion, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionIdUnion, trading_session_id_sfixed64_),
  };
  TradingSessionIdUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradingSessionIdUnion_descriptor_,
      TradingSessionIdUnion::default_instance_,
      TradingSessionIdUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionIdUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionIdUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradingSessionIdUnion));
  TradingSessionSubIdUnion_descriptor_ = file->message_type(8);
  static const int TradingSessionSubIdUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionSubIdUnion, trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionSubIdUnion, trading_session_sub_id_sfixed64_),
  };
  TradingSessionSubIdUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradingSessionSubIdUnion_descriptor_,
      TradingSessionSubIdUnion::default_instance_,
      TradingSessionSubIdUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionSubIdUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionSubIdUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradingSessionSubIdUnion));
  TrdgSesGrp_descriptor_ = file->message_type(9);
  static const int TrdgSesGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdgSesGrp, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdgSesGrp, trading_session_sub_id_),
  };
  TrdgSesGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrdgSesGrp_descriptor_,
      TrdgSesGrp::default_instance_,
      TrdgSesGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdgSesGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdgSesGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrdgSesGrp));
  SecAltIdGrp_descriptor_ = file->message_type(10);
  static const int SecAltIdGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAltIdGrp, security_alt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAltIdGrp, security_alt_id_source_),
  };
  SecAltIdGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecAltIdGrp_descriptor_,
      SecAltIdGrp::default_instance_,
      SecAltIdGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAltIdGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecAltIdGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecAltIdGrp));
  SecurityXml_descriptor_ = file->message_type(11);
  static const int SecurityXml_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityXml, security_xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityXml, security_xml_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityXml, security_xml_schema_),
  };
  SecurityXml_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityXml_descriptor_,
      SecurityXml::default_instance_,
      SecurityXml_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityXml, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityXml, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityXml));
  EventTypeUnion_descriptor_ = file->message_type(12);
  static const int EventTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTypeUnion, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTypeUnion, event_type_sfixed64_),
  };
  EventTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventTypeUnion_descriptor_,
      EventTypeUnion::default_instance_,
      EventTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventTypeUnion));
  EvntGrp_descriptor_ = file->message_type(13);
  static const int EvntGrp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, event_time_),
  };
  EvntGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EvntGrp_descriptor_,
      EvntGrp::default_instance_,
      EvntGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvntGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EvntGrp));
  InstrumentPtysSubGrp_descriptor_ = file->message_type(14);
  static const int InstrumentPtysSubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentPtysSubGrp, instrument_party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentPtysSubGrp, instrument_party_sub_id_type_),
  };
  InstrumentPtysSubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentPtysSubGrp_descriptor_,
      InstrumentPtysSubGrp::default_instance_,
      InstrumentPtysSubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentPtysSubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentPtysSubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentPtysSubGrp));
  InstrumentParties_descriptor_ = file->message_type(15);
  static const int InstrumentParties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, instrument_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, instrument_party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, instrument_party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, instrument_ptys_sub_grp_),
  };
  InstrumentParties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentParties_descriptor_,
      InstrumentParties::default_instance_,
      InstrumentParties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentParties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentParties));
  ComplexEventTimes_descriptor_ = file->message_type(16);
  static const int ComplexEventTimes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventTimes, complex_event_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventTimes, complex_event_start_time_),
  };
  ComplexEventTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComplexEventTimes_descriptor_,
      ComplexEventTimes::default_instance_,
      ComplexEventTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComplexEventTimes));
  ComplexEventDates_descriptor_ = file->message_type(17);
  static const int ComplexEventDates_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventDates, complex_event_end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventDates, complex_event_start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventDates, complex_event_times_),
  };
  ComplexEventDates_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComplexEventDates_descriptor_,
      ComplexEventDates::default_instance_,
      ComplexEventDates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventDates, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEventDates, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComplexEventDates));
  ComplexEvents_descriptor_ = file->message_type(18);
  static const int ComplexEvents_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_dates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_boundary_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_boundary_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_boundary_precision_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_price_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_opt_payout_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, complex_opt_payout_amount_exponent_),
  };
  ComplexEvents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComplexEvents_descriptor_,
      ComplexEvents::default_instance_,
      ComplexEvents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComplexEvents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComplexEvents));
  StrikePriceDeterminationMethodUnion_descriptor_ = file->message_type(19);
  static const int StrikePriceDeterminationMethodUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikePriceDeterminationMethodUnion, strike_price_determination_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikePriceDeterminationMethodUnion, strike_price_determination_method_sfixed64_),
  };
  StrikePriceDeterminationMethodUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrikePriceDeterminationMethodUnion_descriptor_,
      StrikePriceDeterminationMethodUnion::default_instance_,
      StrikePriceDeterminationMethodUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikePriceDeterminationMethodUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikePriceDeterminationMethodUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrikePriceDeterminationMethodUnion));
  FlowScheduleTypeUnion_descriptor_ = file->message_type(20);
  static const int FlowScheduleTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowScheduleTypeUnion, flow_schedule_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowScheduleTypeUnion, flow_schedule_type_sfixed64_),
  };
  FlowScheduleTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlowScheduleTypeUnion_descriptor_,
      FlowScheduleTypeUnion::default_instance_,
      FlowScheduleTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowScheduleTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlowScheduleTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlowScheduleTypeUnion));
  CpProgramUnion_descriptor_ = file->message_type(21);
  static const int CpProgramUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpProgramUnion, cp_program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpProgramUnion, cp_program_sfixed64_),
  };
  CpProgramUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CpProgramUnion_descriptor_,
      CpProgramUnion::default_instance_,
      CpProgramUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpProgramUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpProgramUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CpProgramUnion));
  Instrument_descriptor_ = file->message_type(22);
  static const int Instrument_offsets_[100] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, cfi_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, contract_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, country_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, coupon_payment_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, coupon_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, coupon_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, credit_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, encoded_issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, encoded_issuer_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, encoded_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, encoded_security_desc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, instr_registry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, issue_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, locale_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, maturity_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, maturity_month_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, opt_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, redemption_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, repo_collateral_security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, repurchase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, repurchase_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, repurchase_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, state_or_province_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, symbol_sfx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, cp_program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, cp_reg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, contract_settl_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, dated_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, evnt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, instrmt_assignment_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, instrument_parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, interest_accrual_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, maturity_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, min_price_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, nt_position_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, position_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, put_or_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, sec_alt_id_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, settle_on_open_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, cap_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, cap_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, exercise_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, flex_product_eligibility_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, flexible_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, floor_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, floor_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, list_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, min_price_increment_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, min_price_increment_amount_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, opt_payout_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, opt_payout_amount_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, price_quote_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, price_unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, price_unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, price_unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, product_complex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, security_xml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, settl_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, valuation_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, contract_multiplier_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, flow_schedule_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, attachment_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, attachment_point_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, detachment_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, detachment_point_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, notional_percentage_outstanding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, notional_percentage_outstanding_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, original_notional_percentage_outstanding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, original_notional_percentage_outstanding_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, restructuring_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, seniority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, complex_events_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, opt_payout_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_boundary_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_boundary_precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_boundary_precision_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, strike_price_determination_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, underlying_price_determination_method_),
  };
  Instrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instrument_descriptor_,
      Instrument::default_instance_,
      Instrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instrument));
  FinancingDetails_descriptor_ = file->message_type(23);
  static const int FinancingDetails_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, agreement_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, agreement_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, agreement_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, agreement_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, delivery_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, end_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, margin_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, margin_ratio_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, start_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, termination_type_),
  };
  FinancingDetails_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinancingDetails_descriptor_,
      FinancingDetails::default_instance_,
      FinancingDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinancingDetails, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinancingDetails));
  UndSecAltIdGrp_descriptor_ = file->message_type(24);
  static const int UndSecAltIdGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndSecAltIdGrp, underlying_security_alt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndSecAltIdGrp, underlying_security_alt_id_source_),
  };
  UndSecAltIdGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndSecAltIdGrp_descriptor_,
      UndSecAltIdGrp::default_instance_,
      UndSecAltIdGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndSecAltIdGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndSecAltIdGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndSecAltIdGrp));
  UnderlyingStipulations_descriptor_ = file->message_type(25);
  static const int UnderlyingStipulations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingStipulations, underlying_stip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingStipulations, underlying_stip_value_),
  };
  UnderlyingStipulations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnderlyingStipulations_descriptor_,
      UnderlyingStipulations::default_instance_,
      UnderlyingStipulations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingStipulations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingStipulations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnderlyingStipulations));
  UndlyInstrumentPtysSubGrp_descriptor_ = file->message_type(26);
  static const int UndlyInstrumentPtysSubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentPtysSubGrp, underlying_instrument_party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentPtysSubGrp, underlying_instrument_party_sub_id_type_),
  };
  UndlyInstrumentPtysSubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndlyInstrumentPtysSubGrp_descriptor_,
      UndlyInstrumentPtysSubGrp::default_instance_,
      UndlyInstrumentPtysSubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentPtysSubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentPtysSubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndlyInstrumentPtysSubGrp));
  UndlyInstrumentParties_descriptor_ = file->message_type(27);
  static const int UndlyInstrumentParties_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, underlying_instrument_party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, underlying_instrument_party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, underlying_instrument_party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, undly_instrument_ptys_sub_grp_),
  };
  UndlyInstrumentParties_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndlyInstrumentParties_descriptor_,
      UndlyInstrumentParties::default_instance_,
      UndlyInstrumentParties_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndlyInstrumentParties, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndlyInstrumentParties));
  UnderlyingFlowScheduleTypeUnion_descriptor_ = file->message_type(28);
  static const int UnderlyingFlowScheduleTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingFlowScheduleTypeUnion, underlying_flow_schedule_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingFlowScheduleTypeUnion, underlying_flow_schedule_type_sfixed64_),
  };
  UnderlyingFlowScheduleTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnderlyingFlowScheduleTypeUnion_descriptor_,
      UnderlyingFlowScheduleTypeUnion::default_instance_,
      UnderlyingFlowScheduleTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingFlowScheduleTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingFlowScheduleTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnderlyingFlowScheduleTypeUnion));
  UnderlyingInstrument_descriptor_ = file->message_type(29);
  static const int UnderlyingInstrument_offsets_[92] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, encoded_underlying_issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, encoded_underlying_issuer_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, encoded_underlying_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, encoded_underlying_security_desc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cfi_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_contract_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_country_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_coupon_payment_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_coupon_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_coupon_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_credit_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_instr_registry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_issue_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_locale_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_maturity_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_maturity_month_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_opt_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_put_or_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_redemption_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_repo_collateral_security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_repurchase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_repurchase_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_repurchase_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_state_or_province_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_strike_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_strike_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_symbol_sfx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, und_sec_alt_id_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_adjusted_quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_adjusted_quantity_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_allocation_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_allocation_percent_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cp_program_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cp_reg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cap_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cap_value_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cash_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cash_amount_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_cash_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_current_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_current_value_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_dirty_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_dirty_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_end_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_end_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_end_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_end_value_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_fx_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_fx_rate_calc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_security_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_settl_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_settlement_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_start_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_start_value_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_strike_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, undly_instrument_parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_exercise_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_maturity_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_price_unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_price_unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_price_unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_contract_multiplier_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_flow_schedule_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_attachment_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_attachment_point_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_detachment_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_detachment_point_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_notional_percentage_outstanding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_notional_percentage_outstanding_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_original_notional_percentage_outstanding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_original_notional_percentage_outstanding_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_restructuring_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, underlying_seniority_),
  };
  UnderlyingInstrument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnderlyingInstrument_descriptor_,
      UnderlyingInstrument::default_instance_,
      UnderlyingInstrument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderlyingInstrument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnderlyingInstrument));
  UndInstrmtGrp_descriptor_ = file->message_type(30);
  static const int UndInstrmtGrp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndInstrmtGrp, underlying_instrument_),
  };
  UndInstrmtGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UndInstrmtGrp_descriptor_,
      UndInstrmtGrp::default_instance_,
      UndInstrmtGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndInstrmtGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UndInstrmtGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UndInstrmtGrp));
  Stipulations_descriptor_ = file->message_type(31);
  static const int Stipulations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stipulations, stipulation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stipulations, stipulation_value_),
  };
  Stipulations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stipulations_descriptor_,
      Stipulations::default_instance_,
      Stipulations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stipulations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stipulations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stipulations));
  OrderQtyData_descriptor_ = file->message_type(32);
  static const int OrderQtyData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, cash_order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, cash_order_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, order_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, order_percent_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, order_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, rounding_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, rounding_modulus_),
  };
  OrderQtyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderQtyData_descriptor_,
      OrderQtyData::default_instance_,
      OrderQtyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderQtyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderQtyData));
  TriggeringInstruction_descriptor_ = file->message_type(33);
  static const int TriggeringInstruction_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_new_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_new_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_new_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_new_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_price_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_price_type_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_security_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, trigger_type_),
  };
  TriggeringInstruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TriggeringInstruction_descriptor_,
      TriggeringInstruction::default_instance_,
      TriggeringInstruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TriggeringInstruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TriggeringInstruction));
  SpreadOrBenchmarkCurveData_descriptor_ = file->message_type(34);
  static const int SpreadOrBenchmarkCurveData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_curve_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_curve_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_curve_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, spread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, spread_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, benchmark_security_id_source_),
  };
  SpreadOrBenchmarkCurveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpreadOrBenchmarkCurveData_descriptor_,
      SpreadOrBenchmarkCurveData::default_instance_,
      SpreadOrBenchmarkCurveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpreadOrBenchmarkCurveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpreadOrBenchmarkCurveData));
  YieldData_descriptor_ = file->message_type(35);
  static const int YieldData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_calc_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_redemption_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_redemption_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_redemption_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, yield_redemption_price_type_),
  };
  YieldData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YieldData_descriptor_,
      YieldData::default_instance_,
      YieldData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YieldData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YieldData));
  CommissionData_descriptor_ = file->message_type(36);
  static const int CommissionData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, comm_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, comm_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, commission_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, fund_renew_waiv_),
  };
  CommissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommissionData_descriptor_,
      CommissionData::default_instance_,
      CommissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommissionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommissionData));
  PegInstructions_descriptor_ = file->message_type(37);
  static const int PegInstructions_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_offset_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_round_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_security_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, peg_symbol_),
  };
  PegInstructions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PegInstructions_descriptor_,
      PegInstructions::default_instance_,
      PegInstructions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PegInstructions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PegInstructions));
  DiscretionInstructions_descriptor_ = file->message_type(38);
  static const int DiscretionInstructions_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_move_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_offset_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_offset_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_round_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, discretion_scope_),
  };
  DiscretionInstructions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscretionInstructions_descriptor_,
      DiscretionInstructions::default_instance_,
      DiscretionInstructions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscretionInstructions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscretionInstructions));
  StrategyParametersGrp_descriptor_ = file->message_type(39);
  static const int StrategyParametersGrp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyParametersGrp, strategy_parameter_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyParametersGrp, strategy_parameter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyParametersGrp, strategy_parameter_value_),
  };
  StrategyParametersGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrategyParametersGrp_descriptor_,
      StrategyParametersGrp::default_instance_,
      StrategyParametersGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyParametersGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrategyParametersGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrategyParametersGrp));
  TrdRegTimestamps_descriptor_ = file->message_type(40);
  static const int TrdRegTimestamps_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, desk_order_handling_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, desk_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, desk_type_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, trd_reg_timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, trd_reg_timestamp_origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, trd_reg_timestamp_type_),
  };
  TrdRegTimestamps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrdRegTimestamps_descriptor_,
      TrdRegTimestamps::default_instance_,
      TrdRegTimestamps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrdRegTimestamps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrdRegTimestamps));
  ApplicationSequenceControl_descriptor_ = file->message_type(41);
  static const int ApplicationSequenceControl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, appl_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, appl_last_seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, appl_resend_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, appl_seq_num_),
  };
  ApplicationSequenceControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationSequenceControl_descriptor_,
      ApplicationSequenceControl::default_instance_,
      ApplicationSequenceControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationSequenceControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationSequenceControl));
  ContraGrp_descriptor_ = file->message_type(42);
  static const int ContraGrp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_broker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_leg_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_trade_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_trade_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_trade_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, contra_trader_),
  };
  ContraGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContraGrp_descriptor_,
      ContraGrp::default_instance_,
      ContraGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContraGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContraGrp));
  NstdPtys4SubGrp_descriptor_ = file->message_type(43);
  static const int NstdPtys4SubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys4SubGrp, nested4party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys4SubGrp, nested4party_sub_id_type_),
  };
  NstdPtys4SubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NstdPtys4SubGrp_descriptor_,
      NstdPtys4SubGrp::default_instance_,
      NstdPtys4SubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys4SubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys4SubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NstdPtys4SubGrp));
  NestedParties4_descriptor_ = file->message_type(44);
  static const int NestedParties4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, nested4party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, nested4party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, nested4party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, nstd_ptys4sub_grp_),
  };
  NestedParties4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NestedParties4_descriptor_,
      NestedParties4::default_instance_,
      NestedParties4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NestedParties4));
  RateSource_descriptor_ = file->message_type(45);
  static const int RateSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateSource, rate_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateSource, rate_source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateSource, reference_page_),
  };
  RateSource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RateSource_descriptor_,
      RateSource::default_instance_,
      RateSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateSource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateSource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RateSource));
  ContAmtGrp_descriptor_ = file->message_type(46);
  static const int ContAmtGrp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContAmtGrp, cont_amt_curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContAmtGrp, cont_amt_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContAmtGrp, cont_amt_value_),
  };
  ContAmtGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContAmtGrp_descriptor_,
      ContAmtGrp::default_instance_,
      ContAmtGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContAmtGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContAmtGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContAmtGrp));
  LegSecAltIdGrp_descriptor_ = file->message_type(47);
  static const int LegSecAltIdGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegSecAltIdGrp, leg_security_alt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegSecAltIdGrp, leg_security_alt_id_source_),
  };
  LegSecAltIdGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegSecAltIdGrp_descriptor_,
      LegSecAltIdGrp::default_instance_,
      LegSecAltIdGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegSecAltIdGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegSecAltIdGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegSecAltIdGrp));
  LegFlowScheduleTypeUnion_descriptor_ = file->message_type(48);
  static const int LegFlowScheduleTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegFlowScheduleTypeUnion, leg_flow_schedule_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegFlowScheduleTypeUnion, leg_flow_schedule_type_sfixed64_),
  };
  LegFlowScheduleTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegFlowScheduleTypeUnion_descriptor_,
      LegFlowScheduleTypeUnion::default_instance_,
      LegFlowScheduleTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegFlowScheduleTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegFlowScheduleTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegFlowScheduleTypeUnion));
  InstrumentLeg_descriptor_ = file->message_type(49);
  static const int InstrumentLeg_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, encoded_leg_issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, encoded_leg_issuer_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, encoded_leg_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, encoded_leg_security_desc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_cfi_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_contract_multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_country_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_coupon_payment_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_coupon_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_coupon_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_credit_rating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_instr_registry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_issue_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_issuer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_locale_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_maturity_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_maturity_month_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_opt_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_ratio_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_redemption_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_repo_collateral_security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_repurchase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_repurchase_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_repurchase_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_state_or_province_of_issue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_strike_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_strike_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_symbol_sfx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_contract_settl_month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_dated_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_interest_accrual_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_option_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_sec_alt_id_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_security_sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_strike_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_time_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_exercise_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_maturity_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_price_unit_of_measure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_price_unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_price_unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_put_or_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_unit_of_measure_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_unit_of_measure_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_contract_multiplier_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, leg_flow_schedule_type_),
  };
  InstrumentLeg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentLeg_descriptor_,
      InstrumentLeg::default_instance_,
      InstrumentLeg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentLeg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentLeg));
  LegStipulations_descriptor_ = file->message_type(50);
  static const int LegStipulations_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegStipulations, leg_stipulation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegStipulations, leg_stipulation_value_),
  };
  LegStipulations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegStipulations_descriptor_,
      LegStipulations::default_instance_,
      LegStipulations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegStipulations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegStipulations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegStipulations));
  NstdPtys2SubGrp_descriptor_ = file->message_type(51);
  static const int NstdPtys2SubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys2SubGrp, nested2party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys2SubGrp, nested2party_sub_id_type_),
  };
  NstdPtys2SubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NstdPtys2SubGrp_descriptor_,
      NstdPtys2SubGrp::default_instance_,
      NstdPtys2SubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys2SubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys2SubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NstdPtys2SubGrp));
  NestedParties2_descriptor_ = file->message_type(52);
  static const int NestedParties2_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, nested2party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, nested2party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, nested2party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, nstd_ptys2sub_grp_),
  };
  NestedParties2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NestedParties2_descriptor_,
      NestedParties2::default_instance_,
      NestedParties2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NestedParties2));
  LegPreAllocGrp_descriptor_ = file->message_type(53);
  static const int LegPreAllocGrp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_alloc_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_alloc_acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_alloc_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_alloc_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_individual_alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, nested_parties2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, leg_alloc_settl_currency_),
  };
  LegPreAllocGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegPreAllocGrp_descriptor_,
      LegPreAllocGrp::default_instance_,
      LegPreAllocGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegPreAllocGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegPreAllocGrp));
  NstdPtys3SubGrp_descriptor_ = file->message_type(54);
  static const int NstdPtys3SubGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys3SubGrp, nested3party_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys3SubGrp, nested3party_sub_id_type_),
  };
  NstdPtys3SubGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NstdPtys3SubGrp_descriptor_,
      NstdPtys3SubGrp::default_instance_,
      NstdPtys3SubGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys3SubGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NstdPtys3SubGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NstdPtys3SubGrp));
  NestedParties3_descriptor_ = file->message_type(55);
  static const int NestedParties3_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, nested3party_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, nested3party_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, nested3party_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, nstd_ptys3sub_grp_),
  };
  NestedParties3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NestedParties3_descriptor_,
      NestedParties3::default_instance_,
      NestedParties3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedParties3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NestedParties3));
  InstrmtLegExecGrp_descriptor_ = file->message_type(56);
  static const int InstrmtLegExecGrp_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, instrument_leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_calculated_ccy_last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_calculated_ccy_last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_covered_or_uncovered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_gross_trade_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_gross_trade_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_forward_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_forward_points_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_order_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_position_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_settl_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_settl_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_swap_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_currency_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_dividend_yield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_dividend_yield_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_pre_alloc_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, leg_volatility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, nested_parties3_),
  };
  InstrmtLegExecGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrmtLegExecGrp_descriptor_,
      InstrmtLegExecGrp::default_instance_,
      InstrmtLegExecGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegExecGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrmtLegExecGrp));
  MiscFeesGrp_descriptor_ = file->message_type(57);
  static const int MiscFeesGrp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, misc_fee_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, misc_fee_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, misc_fee_basis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, misc_fee_curr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, misc_fee_type_),
  };
  MiscFeesGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiscFeesGrp_descriptor_,
      MiscFeesGrp::default_instance_,
      MiscFeesGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiscFeesGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiscFeesGrp));
  InstrmtLegGrp_descriptor_ = file->message_type(58);
  static const int InstrmtLegGrp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegGrp, instrument_leg_),
  };
  InstrmtLegGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrmtLegGrp_descriptor_,
      InstrmtLegGrp::default_instance_,
      InstrmtLegGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrmtLegGrp));
  InstrmtLegIoiGrp_descriptor_ = file->message_type(59);
  static const int InstrmtLegIoiGrp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegIoiGrp, instrument_leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegIoiGrp, leg_ioi_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegIoiGrp, leg_stipulations_),
  };
  InstrmtLegIoiGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrmtLegIoiGrp_descriptor_,
      InstrmtLegIoiGrp::default_instance_,
      InstrmtLegIoiGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegIoiGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegIoiGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrmtLegIoiGrp));
  RoutingGrp_descriptor_ = file->message_type(60);
  static const int RoutingGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingGrp, routing_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingGrp, routing_type_),
  };
  RoutingGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoutingGrp_descriptor_,
      RoutingGrp::default_instance_,
      RoutingGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutingGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoutingGrp));
  InstrAttribTypeUnion_descriptor_ = file->message_type(61);
  static const int InstrAttribTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrAttribTypeUnion, instr_attrib_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrAttribTypeUnion, instr_attrib_type_sfixed64_),
  };
  InstrAttribTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrAttribTypeUnion_descriptor_,
      InstrAttribTypeUnion::default_instance_,
      InstrAttribTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrAttribTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrAttribTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrAttribTypeUnion));
  AttrbGrp_descriptor_ = file->message_type(62);
  static const int AttrbGrp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrbGrp, instr_attrib_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrbGrp, instr_attrib_value_),
  };
  AttrbGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrbGrp_descriptor_,
      AttrbGrp::default_instance_,
      AttrbGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrbGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrbGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrbGrp));
  InstrumentExtension_descriptor_ = file->message_type(63);
  static const int InstrumentExtension_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, attrb_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, delivery_form_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, pct_at_risk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, pct_at_risk_exponent_),
  };
  InstrumentExtension_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrumentExtension_descriptor_,
      InstrumentExtension::default_instance_,
      InstrumentExtension_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrumentExtension, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrumentExtension));
  TickRules_descriptor_ = file->message_type(64);
  static const int TickRules_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, end_tick_price_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, end_tick_price_range_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, start_tick_price_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, start_tick_price_range_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, tick_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, tick_increment_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, tick_rule_type_),
  };
  TickRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TickRules_descriptor_,
      TickRules::default_instance_,
      TickRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TickRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TickRules));
  LotTypeRules_descriptor_ = file->message_type(65);
  static const int LotTypeRules_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotTypeRules, lot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotTypeRules, min_lot_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotTypeRules, min_lot_size_exponent_),
  };
  LotTypeRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotTypeRules_descriptor_,
      LotTypeRules::default_instance_,
      LotTypeRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotTypeRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotTypeRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotTypeRules));
  PriceLimits_descriptor_ = file->message_type(66);
  static const int PriceLimits_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, high_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, high_limit_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, low_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, low_limit_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, price_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, trading_reference_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, trading_reference_price_exponent_),
  };
  PriceLimits_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PriceLimits_descriptor_,
      PriceLimits::default_instance_,
      PriceLimits_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PriceLimits, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PriceLimits));
  BaseTradingRules_descriptor_ = file->message_type(67);
  static const int BaseTradingRules_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, expiration_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, implied_market_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, lot_type_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, max_price_variation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, max_trade_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, max_trade_vol_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, min_trade_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, min_trade_vol_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, multileg_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, multileg_price_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, price_limits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, round_lot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, round_lot_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, tick_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, trading_currency_),
  };
  BaseTradingRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseTradingRules_descriptor_,
      BaseTradingRules::default_instance_,
      BaseTradingRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseTradingRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseTradingRules));
  OrdTypeRules_descriptor_ = file->message_type(68);
  static const int OrdTypeRules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdTypeRules, ord_type_),
  };
  OrdTypeRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrdTypeRules_descriptor_,
      OrdTypeRules::default_instance_,
      OrdTypeRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdTypeRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdTypeRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrdTypeRules));
  TimeInForceRules_descriptor_ = file->message_type(69);
  static const int TimeInForceRules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInForceRules, time_in_force_),
  };
  TimeInForceRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeInForceRules_descriptor_,
      TimeInForceRules::default_instance_,
      TimeInForceRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInForceRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeInForceRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeInForceRules));
  ExecInstRules_descriptor_ = file->message_type(70);
  static const int ExecInstRules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecInstRules, exec_inst_value_),
  };
  ExecInstRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecInstRules_descriptor_,
      ExecInstRules::default_instance_,
      ExecInstRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecInstRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecInstRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecInstRules));
  MatchRules_descriptor_ = file->message_type(71);
  static const int MatchRules_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRules, match_algorithm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRules, match_type_),
  };
  MatchRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRules_descriptor_,
      MatchRules::default_instance_,
      MatchRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRules));
  MarketDataFeedTypes_descriptor_ = file->message_type(72);
  static const int MarketDataFeedTypes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedTypes, md_book_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedTypes, md_feed_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedTypes, market_depth_),
  };
  MarketDataFeedTypes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDataFeedTypes_descriptor_,
      MarketDataFeedTypes::default_instance_,
      MarketDataFeedTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedTypes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDataFeedTypes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDataFeedTypes));
  TradingSessionRules_descriptor_ = file->message_type(73);
  static const int TradingSessionRules_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, exec_inst_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, market_data_feed_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, match_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, ord_type_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, time_in_force_rules_),
  };
  TradingSessionRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradingSessionRules_descriptor_,
      TradingSessionRules::default_instance_,
      TradingSessionRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradingSessionRules));
  TradingSessionRulesGrp_descriptor_ = file->message_type(74);
  static const int TradingSessionRulesGrp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRulesGrp, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRulesGrp, trading_session_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRulesGrp, trading_session_sub_id_),
  };
  TradingSessionRulesGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradingSessionRulesGrp_descriptor_,
      TradingSessionRulesGrp::default_instance_,
      TradingSessionRulesGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRulesGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradingSessionRulesGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradingSessionRulesGrp));
  NestedInstrumentAttribute_descriptor_ = file->message_type(75);
  static const int NestedInstrumentAttribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedInstrumentAttribute, nested_instr_attrib_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedInstrumentAttribute, nested_instr_attrib_value_),
  };
  NestedInstrumentAttribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NestedInstrumentAttribute_descriptor_,
      NestedInstrumentAttribute::default_instance_,
      NestedInstrumentAttribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedInstrumentAttribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NestedInstrumentAttribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NestedInstrumentAttribute));
  SecurityTradingRules_descriptor_ = file->message_type(76);
  static const int SecurityTradingRules_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityTradingRules, base_trading_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityTradingRules, nested_instrument_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityTradingRules, trading_session_rules_grp_),
  };
  SecurityTradingRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityTradingRules_descriptor_,
      SecurityTradingRules::default_instance_,
      SecurityTradingRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityTradingRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityTradingRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityTradingRules));
  MaturityRules_descriptor_ = file->message_type(77);
  static const int MaturityRules_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, end_maturity_month_year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, maturity_month_year_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, maturity_month_year_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, maturity_month_year_increment_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, maturity_rule_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, start_maturity_month_year_),
  };
  MaturityRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaturityRules_descriptor_,
      MaturityRules::default_instance_,
      MaturityRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaturityRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaturityRules));
  StrikeRules_descriptor_ = file->message_type(78);
  static const int StrikeRules_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, end_strike_px_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, end_strike_px_range_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, maturity_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, start_strike_px_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, start_strike_px_range_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, strike_exercise_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, strike_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, strike_rule_id_),
  };
  StrikeRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrikeRules_descriptor_,
      StrikeRules::default_instance_,
      StrikeRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrikeRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrikeRules));
  MarketSegmentGrp_descriptor_ = file->message_type(79);
  static const int MarketSegmentGrp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, market_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, security_trading_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, strike_rules_),
  };
  MarketSegmentGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketSegmentGrp_descriptor_,
      MarketSegmentGrp::default_instance_,
      MarketSegmentGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSegmentGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketSegmentGrp));
  LegBenchmarkCurveData_descriptor_ = file->message_type(80);
  static const int LegBenchmarkCurveData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_curve_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_curve_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_curve_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, leg_benchmark_price_type_),
  };
  LegBenchmarkCurveData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LegBenchmarkCurveData_descriptor_,
      LegBenchmarkCurveData::default_instance_,
      LegBenchmarkCurveData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LegBenchmarkCurveData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LegBenchmarkCurveData));
  InstrmtLegSecListGrp_descriptor_ = file->message_type(81);
  static const int InstrmtLegSecListGrp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, instrument_leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, leg_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, leg_settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, leg_stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, leg_swap_type_),
  };
  InstrmtLegSecListGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstrmtLegSecListGrp_descriptor_,
      InstrmtLegSecListGrp::default_instance_,
      InstrmtLegSecListGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstrmtLegSecListGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstrmtLegSecListGrp));
  PartySubIdTypeEnum_descriptor_ = file->enum_type(0);
  PartyIdSourceEnum_descriptor_ = file->enum_type(1);
  PartyRoleEnum_descriptor_ = file->enum_type(2);
  DisplayWhenEnum_descriptor_ = file->enum_type(3);
  DisplayMethodEnum_descriptor_ = file->enum_type(4);
  TradingSessionIdEnum_descriptor_ = file->enum_type(5);
  TradingSessionSubIdEnum_descriptor_ = file->enum_type(6);
  EventTypeEnum_descriptor_ = file->enum_type(7);
  ComplexEventTypeEnum_descriptor_ = file->enum_type(8);
  ComplexEventPriceBoundaryMethodEnum_descriptor_ = file->enum_type(9);
  ComplexEventPriceTimeTypeEnum_descriptor_ = file->enum_type(10);
  ComplexEventConditionEnum_descriptor_ = file->enum_type(11);
  SymbolSfxEnum_descriptor_ = file->enum_type(12);
  SecurityIdSourceEnum_descriptor_ = file->enum_type(13);
  ProductEnum_descriptor_ = file->enum_type(14);
  SecurityTypeEnum_descriptor_ = file->enum_type(15);
  SecurityStatusEnum_descriptor_ = file->enum_type(16);
  RestructuringTypeEnum_descriptor_ = file->enum_type(17);
  SeniorityEnum_descriptor_ = file->enum_type(18);
  StrikePriceDeterminationMethodEnum_descriptor_ = file->enum_type(19);
  StrikePriceBoundaryMethodEnum_descriptor_ = file->enum_type(20);
  UnderlyingPriceDeterminationMethodEnum_descriptor_ = file->enum_type(21);
  ContractMultiplierUnitEnum_descriptor_ = file->enum_type(22);
  FlowScheduleTypeEnum_descriptor_ = file->enum_type(23);
  UnitOfMeasureEnum_descriptor_ = file->enum_type(24);
  SettlMethodEnum_descriptor_ = file->enum_type(25);
  ExerciseStyleEnum_descriptor_ = file->enum_type(26);
  OptPayoutTypeEnum_descriptor_ = file->enum_type(27);
  PriceQuoteMethodEnum_descriptor_ = file->enum_type(28);
  ValuationMethodEnum_descriptor_ = file->enum_type(29);
  ListMethodEnum_descriptor_ = file->enum_type(30);
  PutOrCallEnum_descriptor_ = file->enum_type(31);
  TimeUnitEnum_descriptor_ = file->enum_type(32);
  CpProgramEnum_descriptor_ = file->enum_type(33);
  TerminationTypeEnum_descriptor_ = file->enum_type(34);
  DeliveryTypeEnum_descriptor_ = file->enum_type(35);
  UnderlyingSettlementTypeEnum_descriptor_ = file->enum_type(36);
  UnderlyingCashTypeEnum_descriptor_ = file->enum_type(37);
  UnderlyingFxRateCalcEnum_descriptor_ = file->enum_type(38);
  StipulationTypeEnum_descriptor_ = file->enum_type(39);
  RoundingDirectionEnum_descriptor_ = file->enum_type(40);
  TriggerTypeEnum_descriptor_ = file->enum_type(41);
  TriggerActionEnum_descriptor_ = file->enum_type(42);
  TriggerPriceTypeEnum_descriptor_ = file->enum_type(43);
  TriggerPriceTypeScopeEnum_descriptor_ = file->enum_type(44);
  TriggerPriceDirectionEnum_descriptor_ = file->enum_type(45);
  TriggerOrderTypeEnum_descriptor_ = file->enum_type(46);
  BenchmarkCurveNameEnum_descriptor_ = file->enum_type(47);
  YieldTypeEnum_descriptor_ = file->enum_type(48);
  CommTypeEnum_descriptor_ = file->enum_type(49);
  FundRenewWaivEnum_descriptor_ = file->enum_type(50);
  PegPriceTypeEnum_descriptor_ = file->enum_type(51);
  PegMoveTypeEnum_descriptor_ = file->enum_type(52);
  PegOffsetTypeEnum_descriptor_ = file->enum_type(53);
  PegLimitTypeEnum_descriptor_ = file->enum_type(54);
  PegRoundDirectionEnum_descriptor_ = file->enum_type(55);
  PegScopeEnum_descriptor_ = file->enum_type(56);
  DiscretionInstEnum_descriptor_ = file->enum_type(57);
  DiscretionMoveTypeEnum_descriptor_ = file->enum_type(58);
  DiscretionOffsetTypeEnum_descriptor_ = file->enum_type(59);
  DiscretionLimitTypeEnum_descriptor_ = file->enum_type(60);
  DiscretionRoundDirectionEnum_descriptor_ = file->enum_type(61);
  DiscretionScopeEnum_descriptor_ = file->enum_type(62);
  StrategyParameterTypeEnum_descriptor_ = file->enum_type(63);
  TrdRegTimestampTypeEnum_descriptor_ = file->enum_type(64);
  DeskTypeEnum_descriptor_ = file->enum_type(65);
  DeskTypeSourceEnum_descriptor_ = file->enum_type(66);
  DeskOrderHandlingInstEnum_descriptor_ = file->enum_type(67);
  RateSourceEnum_descriptor_ = file->enum_type(68);
  RateSourceTypeEnum_descriptor_ = file->enum_type(69);
  ContAmtTypeEnum_descriptor_ = file->enum_type(70);
  LegSwapTypeEnum_descriptor_ = file->enum_type(71);
  MiscFeeTypeEnum_descriptor_ = file->enum_type(72);
  MiscFeeBasisEnum_descriptor_ = file->enum_type(73);
  RoutingTypeEnum_descriptor_ = file->enum_type(74);
  InstrAttribTypeEnum_descriptor_ = file->enum_type(75);
  DeliveryFormEnum_descriptor_ = file->enum_type(76);
  TickRuleTypeEnum_descriptor_ = file->enum_type(77);
  LotTypeEnum_descriptor_ = file->enum_type(78);
  PriceLimitTypeEnum_descriptor_ = file->enum_type(79);
  ExpirationCycleEnum_descriptor_ = file->enum_type(80);
  ImpliedMarketIndicatorEnum_descriptor_ = file->enum_type(81);
  MultilegModelEnum_descriptor_ = file->enum_type(82);
  MultilegPriceMethodEnum_descriptor_ = file->enum_type(83);
  PriceTypeEnum_descriptor_ = file->enum_type(84);
  OrdTypeEnum_descriptor_ = file->enum_type(85);
  TimeInForceEnum_descriptor_ = file->enum_type(86);
  MatchTypeEnum_descriptor_ = file->enum_type(87);
  MdBookTypeEnum_descriptor_ = file->enum_type(88);
  MaturityMonthYearFormatEnum_descriptor_ = file->enum_type(89);
  MaturityMonthYearIncrementUnitsEnum_descriptor_ = file->enum_type(90);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartySubIdTypeUnion_descriptor_, &PartySubIdTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PtysSubGrp_descriptor_, &PtysSubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Parties_descriptor_, &Parties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NstdPtysSubGrp_descriptor_, &NstdPtysSubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NestedParties_descriptor_, &NestedParties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreAllocGrp_descriptor_, &PreAllocGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DisplayInstruction_descriptor_, &DisplayInstruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradingSessionIdUnion_descriptor_, &TradingSessionIdUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradingSessionSubIdUnion_descriptor_, &TradingSessionSubIdUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrdgSesGrp_descriptor_, &TrdgSesGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecAltIdGrp_descriptor_, &SecAltIdGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityXml_descriptor_, &SecurityXml::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventTypeUnion_descriptor_, &EventTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EvntGrp_descriptor_, &EvntGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentPtysSubGrp_descriptor_, &InstrumentPtysSubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentParties_descriptor_, &InstrumentParties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComplexEventTimes_descriptor_, &ComplexEventTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComplexEventDates_descriptor_, &ComplexEventDates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComplexEvents_descriptor_, &ComplexEvents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrikePriceDeterminationMethodUnion_descriptor_, &StrikePriceDeterminationMethodUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlowScheduleTypeUnion_descriptor_, &FlowScheduleTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CpProgramUnion_descriptor_, &CpProgramUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instrument_descriptor_, &Instrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinancingDetails_descriptor_, &FinancingDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndSecAltIdGrp_descriptor_, &UndSecAltIdGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnderlyingStipulations_descriptor_, &UnderlyingStipulations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndlyInstrumentPtysSubGrp_descriptor_, &UndlyInstrumentPtysSubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndlyInstrumentParties_descriptor_, &UndlyInstrumentParties::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnderlyingFlowScheduleTypeUnion_descriptor_, &UnderlyingFlowScheduleTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnderlyingInstrument_descriptor_, &UnderlyingInstrument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UndInstrmtGrp_descriptor_, &UndInstrmtGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stipulations_descriptor_, &Stipulations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderQtyData_descriptor_, &OrderQtyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TriggeringInstruction_descriptor_, &TriggeringInstruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpreadOrBenchmarkCurveData_descriptor_, &SpreadOrBenchmarkCurveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YieldData_descriptor_, &YieldData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommissionData_descriptor_, &CommissionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PegInstructions_descriptor_, &PegInstructions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscretionInstructions_descriptor_, &DiscretionInstructions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrategyParametersGrp_descriptor_, &StrategyParametersGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrdRegTimestamps_descriptor_, &TrdRegTimestamps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationSequenceControl_descriptor_, &ApplicationSequenceControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContraGrp_descriptor_, &ContraGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NstdPtys4SubGrp_descriptor_, &NstdPtys4SubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NestedParties4_descriptor_, &NestedParties4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RateSource_descriptor_, &RateSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContAmtGrp_descriptor_, &ContAmtGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegSecAltIdGrp_descriptor_, &LegSecAltIdGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegFlowScheduleTypeUnion_descriptor_, &LegFlowScheduleTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentLeg_descriptor_, &InstrumentLeg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegStipulations_descriptor_, &LegStipulations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NstdPtys2SubGrp_descriptor_, &NstdPtys2SubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NestedParties2_descriptor_, &NestedParties2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegPreAllocGrp_descriptor_, &LegPreAllocGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NstdPtys3SubGrp_descriptor_, &NstdPtys3SubGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NestedParties3_descriptor_, &NestedParties3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrmtLegExecGrp_descriptor_, &InstrmtLegExecGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiscFeesGrp_descriptor_, &MiscFeesGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrmtLegGrp_descriptor_, &InstrmtLegGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrmtLegIoiGrp_descriptor_, &InstrmtLegIoiGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoutingGrp_descriptor_, &RoutingGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrAttribTypeUnion_descriptor_, &InstrAttribTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrbGrp_descriptor_, &AttrbGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrumentExtension_descriptor_, &InstrumentExtension::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TickRules_descriptor_, &TickRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotTypeRules_descriptor_, &LotTypeRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PriceLimits_descriptor_, &PriceLimits::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseTradingRules_descriptor_, &BaseTradingRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrdTypeRules_descriptor_, &OrdTypeRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeInForceRules_descriptor_, &TimeInForceRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecInstRules_descriptor_, &ExecInstRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRules_descriptor_, &MatchRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDataFeedTypes_descriptor_, &MarketDataFeedTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradingSessionRules_descriptor_, &TradingSessionRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradingSessionRulesGrp_descriptor_, &TradingSessionRulesGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NestedInstrumentAttribute_descriptor_, &NestedInstrumentAttribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityTradingRules_descriptor_, &SecurityTradingRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaturityRules_descriptor_, &MaturityRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrikeRules_descriptor_, &StrikeRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketSegmentGrp_descriptor_, &MarketSegmentGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LegBenchmarkCurveData_descriptor_, &LegBenchmarkCurveData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstrmtLegSecListGrp_descriptor_, &InstrmtLegSecListGrp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_2eproto() {
  delete PartySubIdTypeUnion::default_instance_;
  delete PartySubIdTypeUnion_reflection_;
  delete PtysSubGrp::default_instance_;
  delete PtysSubGrp_reflection_;
  delete Parties::default_instance_;
  delete Parties_reflection_;
  delete NstdPtysSubGrp::default_instance_;
  delete NstdPtysSubGrp_reflection_;
  delete NestedParties::default_instance_;
  delete NestedParties_reflection_;
  delete PreAllocGrp::default_instance_;
  delete PreAllocGrp_reflection_;
  delete DisplayInstruction::default_instance_;
  delete DisplayInstruction_reflection_;
  delete TradingSessionIdUnion::default_instance_;
  delete TradingSessionIdUnion_reflection_;
  delete TradingSessionSubIdUnion::default_instance_;
  delete TradingSessionSubIdUnion_reflection_;
  delete TrdgSesGrp::default_instance_;
  delete TrdgSesGrp_reflection_;
  delete SecAltIdGrp::default_instance_;
  delete SecAltIdGrp_reflection_;
  delete SecurityXml::default_instance_;
  delete SecurityXml_reflection_;
  delete EventTypeUnion::default_instance_;
  delete EventTypeUnion_reflection_;
  delete EvntGrp::default_instance_;
  delete EvntGrp_reflection_;
  delete InstrumentPtysSubGrp::default_instance_;
  delete InstrumentPtysSubGrp_reflection_;
  delete InstrumentParties::default_instance_;
  delete InstrumentParties_reflection_;
  delete ComplexEventTimes::default_instance_;
  delete ComplexEventTimes_reflection_;
  delete ComplexEventDates::default_instance_;
  delete ComplexEventDates_reflection_;
  delete ComplexEvents::default_instance_;
  delete ComplexEvents_reflection_;
  delete StrikePriceDeterminationMethodUnion::default_instance_;
  delete StrikePriceDeterminationMethodUnion_reflection_;
  delete FlowScheduleTypeUnion::default_instance_;
  delete FlowScheduleTypeUnion_reflection_;
  delete CpProgramUnion::default_instance_;
  delete CpProgramUnion_reflection_;
  delete Instrument::default_instance_;
  delete Instrument_reflection_;
  delete FinancingDetails::default_instance_;
  delete FinancingDetails_reflection_;
  delete UndSecAltIdGrp::default_instance_;
  delete UndSecAltIdGrp_reflection_;
  delete UnderlyingStipulations::default_instance_;
  delete UnderlyingStipulations_reflection_;
  delete UndlyInstrumentPtysSubGrp::default_instance_;
  delete UndlyInstrumentPtysSubGrp_reflection_;
  delete UndlyInstrumentParties::default_instance_;
  delete UndlyInstrumentParties_reflection_;
  delete UnderlyingFlowScheduleTypeUnion::default_instance_;
  delete UnderlyingFlowScheduleTypeUnion_reflection_;
  delete UnderlyingInstrument::default_instance_;
  delete UnderlyingInstrument_reflection_;
  delete UndInstrmtGrp::default_instance_;
  delete UndInstrmtGrp_reflection_;
  delete Stipulations::default_instance_;
  delete Stipulations_reflection_;
  delete OrderQtyData::default_instance_;
  delete OrderQtyData_reflection_;
  delete TriggeringInstruction::default_instance_;
  delete TriggeringInstruction_reflection_;
  delete SpreadOrBenchmarkCurveData::default_instance_;
  delete SpreadOrBenchmarkCurveData_reflection_;
  delete YieldData::default_instance_;
  delete YieldData_reflection_;
  delete CommissionData::default_instance_;
  delete CommissionData_reflection_;
  delete PegInstructions::default_instance_;
  delete PegInstructions_reflection_;
  delete DiscretionInstructions::default_instance_;
  delete DiscretionInstructions_reflection_;
  delete StrategyParametersGrp::default_instance_;
  delete StrategyParametersGrp_reflection_;
  delete TrdRegTimestamps::default_instance_;
  delete TrdRegTimestamps_reflection_;
  delete ApplicationSequenceControl::default_instance_;
  delete ApplicationSequenceControl_reflection_;
  delete ContraGrp::default_instance_;
  delete ContraGrp_reflection_;
  delete NstdPtys4SubGrp::default_instance_;
  delete NstdPtys4SubGrp_reflection_;
  delete NestedParties4::default_instance_;
  delete NestedParties4_reflection_;
  delete RateSource::default_instance_;
  delete RateSource_reflection_;
  delete ContAmtGrp::default_instance_;
  delete ContAmtGrp_reflection_;
  delete LegSecAltIdGrp::default_instance_;
  delete LegSecAltIdGrp_reflection_;
  delete LegFlowScheduleTypeUnion::default_instance_;
  delete LegFlowScheduleTypeUnion_reflection_;
  delete InstrumentLeg::default_instance_;
  delete InstrumentLeg_reflection_;
  delete LegStipulations::default_instance_;
  delete LegStipulations_reflection_;
  delete NstdPtys2SubGrp::default_instance_;
  delete NstdPtys2SubGrp_reflection_;
  delete NestedParties2::default_instance_;
  delete NestedParties2_reflection_;
  delete LegPreAllocGrp::default_instance_;
  delete LegPreAllocGrp_reflection_;
  delete NstdPtys3SubGrp::default_instance_;
  delete NstdPtys3SubGrp_reflection_;
  delete NestedParties3::default_instance_;
  delete NestedParties3_reflection_;
  delete InstrmtLegExecGrp::default_instance_;
  delete InstrmtLegExecGrp_reflection_;
  delete MiscFeesGrp::default_instance_;
  delete MiscFeesGrp_reflection_;
  delete InstrmtLegGrp::default_instance_;
  delete InstrmtLegGrp_reflection_;
  delete InstrmtLegIoiGrp::default_instance_;
  delete InstrmtLegIoiGrp_reflection_;
  delete RoutingGrp::default_instance_;
  delete RoutingGrp_reflection_;
  delete InstrAttribTypeUnion::default_instance_;
  delete InstrAttribTypeUnion_reflection_;
  delete AttrbGrp::default_instance_;
  delete AttrbGrp_reflection_;
  delete InstrumentExtension::default_instance_;
  delete InstrumentExtension_reflection_;
  delete TickRules::default_instance_;
  delete TickRules_reflection_;
  delete LotTypeRules::default_instance_;
  delete LotTypeRules_reflection_;
  delete PriceLimits::default_instance_;
  delete PriceLimits_reflection_;
  delete BaseTradingRules::default_instance_;
  delete BaseTradingRules_reflection_;
  delete OrdTypeRules::default_instance_;
  delete OrdTypeRules_reflection_;
  delete TimeInForceRules::default_instance_;
  delete TimeInForceRules_reflection_;
  delete ExecInstRules::default_instance_;
  delete ExecInstRules_reflection_;
  delete MatchRules::default_instance_;
  delete MatchRules_reflection_;
  delete MarketDataFeedTypes::default_instance_;
  delete MarketDataFeedTypes_reflection_;
  delete TradingSessionRules::default_instance_;
  delete TradingSessionRules_reflection_;
  delete TradingSessionRulesGrp::default_instance_;
  delete TradingSessionRulesGrp_reflection_;
  delete NestedInstrumentAttribute::default_instance_;
  delete NestedInstrumentAttribute_reflection_;
  delete SecurityTradingRules::default_instance_;
  delete SecurityTradingRules_reflection_;
  delete MaturityRules::default_instance_;
  delete MaturityRules_reflection_;
  delete StrikeRules::default_instance_;
  delete StrikeRules_reflection_;
  delete MarketSegmentGrp::default_instance_;
  delete MarketSegmentGrp_reflection_;
  delete LegBenchmarkCurveData::default_instance_;
  delete LegBenchmarkCurveData_reflection_;
  delete InstrmtLegSecListGrp::default_instance_;
  delete InstrmtLegSecListGrp_reflection_;
}

void protobuf_AddDesc_common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meta::protobuf_AddDesc_meta_2eproto();
  ::fix::protobuf_AddDesc_fix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014common.proto\022\006Common\032\nmeta.proto\032\tfix."
    "proto\"p\n\023PartySubIdTypeUnion\0225\n\021party_su"
    "b_id_type\030\001 \001(\0162\032.Common.PartySubIdTypeE"
    "num\022\"\n\032party_sub_id_type_sfixed64\030\002 \001(\020\""
    "s\n\nPtysSubGrp\022!\n\014party_sub_id\030\001 \001(\tB\013\235\254\033"
    "\013\002\000\000\240\254\033\017\022B\n\021party_sub_id_type\030\002 \001(\0162\032.Co"
    "mmon.PartySubIdTypeEnumB\013\235\254\033#\003\000\000\240\254\033\003\"\324\001\n"
    "\007Parties\022\035\n\010party_id\030\001 \001(\tB\013\235\254\033\300\001\000\000\240\254\033\017\022"
    "\?\n\017party_id_source\030\002 \001(\0162\031.Common.PartyI"
    "dSourceEnumB\013\235\254\033\277\001\000\000\240\254\033\000\0226\n\nparty_role\030\003"
    " \001(\0162\025.Common.PartyRoleEnumB\013\235\254\033\304\001\000\000\240\254\033\003"
    "\0221\n\014ptys_sub_grp\030\004 \003(\0132\022.Common.PtysSubG"
    "rpB\007\235\254\033\"\003\000\000\"i\n\016NstdPtysSubGrp\022(\n\023nested_"
    "party_sub_id\030\001 \001(\tB\013\235\254\033!\002\000\000\240\254\033\017\022-\n\030neste"
    "d_party_sub_id_type\030\002 \001(\020B\013\235\254\033%\003\000\000\240\254\033\003\"\306"
    "\001\n\rNestedParties\022$\n\017nested_party_id\030\001 \001("
    "\tB\013\235\254\033\014\002\000\000\240\254\033\017\022+\n\026nested_party_id_source"
    "\030\002 \001(\tB\013\235\254\033\r\002\000\000\240\254\033\000\022&\n\021nested_party_role"
    "\030\003 \001(\020B\013\235\254\033\032\002\000\000\240\254\033\003\022:\n\021nstd_ptys_sub_grp"
    "\030\004 \003(\0132\026.Common.NstdPtysSubGrpB\007\235\254\033$\003\000\000\""
    "\245\002\n\013PreAllocGrp\022\"\n\ralloc_account\030\001 \001(\tB\013"
    "\235\254\033O\000\000\000\240\254\033\017\022)\n\024alloc_acct_id_source\030\002 \001("
    "\020B\013\235\254\033\225\002\000\000\240\254\033\003\022\036\n\talloc_qty\030\003 \001(\020B\013\235\254\033P\000"
    "\000\000\240\254\033\016\022\032\n\022alloc_qty_exponent\030\004 \001(\017\022)\n\024al"
    "loc_settl_currency\030\005 \001(\tB\013\235\254\033\340\002\000\000\240\254\033\010\022(\n"
    "\023individual_alloc_id\030\006 \001(\tB\013\235\254\033\323\001\000\000\240\254\033\017\022"
    "6\n\016nested_parties\030\007 \003(\0132\025.Common.NestedP"
    "artiesB\007\235\254\033\033\002\000\000\"\300\004\n\022DisplayInstruction\022%"
    "\n\020display_high_qty\030\001 \001(\020B\013\235\254\033>\004\000\000\240\254\033\016\022!\n"
    "\031display_high_qty_exponent\030\002 \001(\017\022$\n\017disp"
    "lay_low_qty\030\003 \001(\020B\013\235\254\033=\004\000\000\240\254\033\016\022 \n\030displa"
    "y_low_qty_exponent\030\004 \001(\017\022>\n\016display_meth"
    "od\030\005 \001(\0162\031.Common.DisplayMethodEnumB\013\235\254\033"
    "<\004\000\000\240\254\033\000\022%\n\020display_min_incr\030\006 \001(\020B\013\235\254\033\?"
    "\004\000\000\240\254\033\016\022!\n\031display_min_incr_exponent\030\007 \001"
    "(\017\022 \n\013display_qty\030\010 \001(\020B\013\235\254\033r\004\000\000\240\254\033\016\022\034\n\024"
    "display_qty_exponent\030\t \001(\017\022:\n\014display_wh"
    "en\030\n \001(\0162\027.Common.DisplayWhenEnumB\013\235\254\033;\004"
    "\000\000\240\254\033\000\022 \n\013refresh_qty\030\013 \001(\020B\013\235\254\033@\004\000\000\240\254\033\016"
    "\022\034\n\024refresh_qty_exponent\030\014 \001(\017\022*\n\025second"
    "ary_display_qty\030\r \001(\020B\013\235\254\033:\004\000\000\240\254\033\016\022&\n\036se"
    "condary_display_qty_exponent\030\016 \001(\017\"v\n\025Tr"
    "adingSessionIdUnion\0228\n\022trading_session_i"
    "d\030\001 \001(\0162\034.Common.TradingSessionIdEnum\022#\n"
    "\033trading_session_id_sfixed64\030\002 \001(\020\"\204\001\n\030T"
    "radingSessionSubIdUnion\022\?\n\026trading_sessi"
    "on_sub_id\030\001 \001(\0162\037.Common.TradingSessionS"
    "ubIdEnum\022\'\n\037trading_session_sub_id_sfixe"
    "d64\030\002 \001(\020\"\241\001\n\nTrdgSesGrp\022E\n\022trading_sess"
    "ion_id\030\001 \001(\0162\034.Common.TradingSessionIdEn"
    "umB\013\235\254\033P\001\000\000\240\254\033\017\022L\n\026trading_session_sub_i"
    "d\030\002 \001(\0162\037.Common.TradingSessionSubIdEnum"
    "B\013\235\254\033q\002\000\000\240\254\033\017\"`\n\013SecAltIdGrp\022$\n\017security"
    "_alt_id\030\001 \001(\tB\013\235\254\033\307\001\000\000\240\254\033\017\022+\n\026security_a"
    "lt_id_source\030\002 \001(\tB\013\235\254\033\310\001\000\000\240\254\033\017\"\201\001\n\013Secu"
    "rityXml\022!\n\014security_xml\030\001 \001(\tB\013\235\254\033\241\004\000\000\240\254"
    "\033!\022%\n\020security_xml_len\030\002 \001(\007B\013\235\254\033\240\004\000\000\240\254\033"
    "\022\022(\n\023security_xml_schema\030\003 \001(\tB\013\235\254\033\242\004\000\000\240"
    "\254\033\017\"X\n\016EventTypeUnion\022)\n\nevent_type\030\001 \001("
    "\0162\025.Common.EventTypeEnum\022\033\n\023event_type_s"
    "fixed64\030\002 \001(\020\"\336\001\n\007EvntGrp\022\037\n\nevent_date\030"
    "\001 \001(\017B\013\235\254\033b\003\000\000\240\254\033\n\022\035\n\010event_px\030\002 \001(\020B\013\235\254"
    "\033c\003\000\000\240\254\033\014\022\031\n\021event_px_exponent\030\003 \001(\017\022\037\n\n"
    "event_text\030\004 \001(\tB\013\235\254\033d\003\000\000\240\254\033\017\0226\n\nevent_t"
    "ype\030\005 \001(\0162\025.Common.EventTypeEnumB\013\235\254\033a\003\000"
    "\000\240\254\033\003\022\037\n\nevent_time\030\006 \001(\020B\013\235\254\033y\004\000\000\240\254\033\021\"w"
    "\n\024InstrumentPtysSubGrp\022,\n\027instrument_par"
    "ty_sub_id\030\001 \001(\tB\013\235\254\033\035\004\000\000\240\254\033\017\0221\n\034instrume"
    "nt_party_sub_id_type\030\002 \001(\020B\013\235\254\033\036\004\000\000\240\254\033\003\""
    "\342\001\n\021InstrumentParties\022(\n\023instrument_part"
    "y_id\030\001 \001(\tB\013\235\254\033\373\003\000\000\240\254\033\017\022/\n\032instrument_pa"
    "rty_id_source\030\002 \001(\tB\013\235\254\033\032\004\000\000\240\254\033\000\022*\n\025inst"
    "rument_party_role\030\003 \001(\020B\013\235\254\033\033\004\000\000\240\254\033\003\022F\n\027"
    "instrument_ptys_sub_grp\030\004 \003(\0132\034.Common.I"
    "nstrumentPtysSubGrpB\007\235\254\033\034\004\000\000\"o\n\021ComplexE"
    "ventTimes\022+\n\026complex_event_end_time\030\001 \001("
    "\020B\013\235\254\033\330\005\000\000\240\254\033\020\022-\n\030complex_event_start_ti"
    "me\030\002 \001(\020B\013\235\254\033\327\005\000\000\240\254\033\020\"\260\001\n\021ComplexEventDa"
    "tes\022+\n\026complex_event_end_date\030\001 \001(\020B\013\235\254\033"
    "\325\005\000\000\240\254\033\021\022-\n\030complex_event_start_date\030\002 \001"
    "(\020B\013\235\254\033\324\005\000\000\240\254\033\021\022\?\n\023complex_event_times\030\003"
    " \003(\0132\031.Common.ComplexEventTimesB\007\235\254\033\326\005\000\000"
    "\"\314\005\n\rComplexEvents\022O\n\027complex_event_cond"
    "ition\030\001 \001(\0162!.Common.ComplexEventConditi"
    "onEnumB\013\235\254\033\322\005\000\000\240\254\033\003\022\?\n\023complex_event_dat"
    "es\030\002 \003(\0132\031.Common.ComplexEventDatesB\007\235\254\033"
    "\323\005\000\000\022(\n\023complex_event_price\030\003 \001(\020B\013\235\254\033\316\005"
    "\000\000\240\254\033\014\022$\n\034complex_event_price_exponent\030\004"
    " \001(\017\022e\n#complex_event_price_boundary_met"
    "hod\030\005 \001(\0162+.Common.ComplexEventPriceBoun"
    "daryMethodEnumB\013\235\254\033\317\005\000\000\240\254\033\003\022;\n&complex_e"
    "vent_price_boundary_precision\030\006 \001(\020B\013\235\254\033"
    "\320\005\000\000\240\254\033\024\0227\n/complex_event_price_boundary"
    "_precision_exponent\030\007 \001(\017\022Y\n\035complex_eve"
    "nt_price_time_type\030\010 \001(\0162%.Common.Comple"
    "xEventPriceTimeTypeEnumB\013\235\254\033\321\005\000\000\240\254\033\003\022E\n\022"
    "complex_event_type\030\t \001(\0162\034.Common.Comple"
    "xEventTypeEnumB\013\235\254\033\314\005\000\000\240\254\033\003\022.\n\031complex_o"
    "pt_payout_amount\030\n \001(\020B\013\235\254\033\315\005\000\000\240\254\033\006\022*\n\"c"
    "omplex_opt_payout_amount_exponent\030\013 \001(\017\""
    "\260\001\n#StrikePriceDeterminationMethodUnion\022"
    "U\n!strike_price_determination_method\030\001 \001"
    "(\0162*.Common.StrikePriceDeterminationMeth"
    "odEnum\0222\n*strike_price_determination_met"
    "hod_sfixed64\030\002 \001(\020\"v\n\025FlowScheduleTypeUn"
    "ion\0228\n\022flow_schedule_type\030\001 \001(\0162\034.Common"
    ".FlowScheduleTypeEnum\022#\n\033flow_schedule_t"
    "ype_sfixed64\030\002 \001(\020\"X\n\016CpProgramUnion\022)\n\n"
    "cp_program\030\001 \001(\0162\025.Common.CpProgramEnum\022"
    "\033\n\023cp_program_sfixed64\030\002 \001(\020\"\330$\n\nInstrum"
    "ent\022\035\n\010cfi_code\030\001 \001(\tB\013\235\254\033\315\001\000\000\240\254\033\017\022(\n\023co"
    "ntract_multiplier\030\002 \001(\001B\013\235\254\033\347\000\000\000\240\254\033\002\022%\n\020"
    "country_of_issue\030\003 \001(\tB\013\235\254\033\326\001\000\000\240\254\033\027\022(\n\023c"
    "oupon_payment_date\030\004 \001(\017B\013\235\254\033\340\000\000\000\240\254\033\n\022 \n"
    "\013coupon_rate\030\005 \001(\020B\013\235\254\033\337\000\000\000\240\254\033\024\022\034\n\024coupo"
    "n_rate_exponent\030\006 \001(\017\022\"\n\rcredit_rating\030\007"
    " \001(\tB\013\235\254\033\377\000\000\000\240\254\033\017\022#\n\016encoded_issuer\030\010 \001("
    "\014B\013\235\254\033]\001\000\000\240\254\033\001\022\'\n\022encoded_issuer_len\030\t \001"
    "(\007B\013\235\254\033\\\001\000\000\240\254\033\022\022*\n\025encoded_security_desc"
    "\030\n \001(\014B\013\235\254\033_\001\000\000\240\254\033\001\022.\n\031encoded_security_"
    "desc_len\030\013 \001(\007B\013\235\254\033^\001\000\000\240\254\033\022\022\033\n\006factor\030\014 "
    "\001(\001B\013\235\254\033\344\000\000\000\240\254\033\002\022#\n\016instr_registry\030\r \001(\t"
    "B\013\235\254\033\037\002\000\000\240\254\033\017\022\037\n\nissue_date\030\016 \001(\017B\013\235\254\033\341\000"
    "\000\000\240\254\033\n\022\033\n\006issuer\030\017 \001(\tB\013\235\254\033j\000\000\000\240\254\033\017\022$\n\017l"
    "ocale_of_issue\030\020 \001(\tB\013\235\254\033\330\001\000\000\240\254\033\017\022\"\n\rmat"
    "urity_date\030\021 \001(\017B\013\235\254\033\035\002\000\000\240\254\033\n\022(\n\023maturit"
    "y_month_year\030\022 \001(\017B\013\235\254\033\310\000\000\000\240\254\033\005\022\"\n\ropt_a"
    "ttribute\030\023 \001(\tB\013\235\254\033\316\000\000\000\240\254\033\000\0221\n\007product\030\024"
    " \001(\0162\023.Common.ProductEnumB\013\235\254\033\314\001\000\000\240\254\033\003\022("
    "\n\017redemption_date\030\025 \001(\017B\017\235\254\033\360\000\000\000\240\254\033\n\270\254\033\006"
    "\0226\n\035repo_collateral_security_type\030\026 \001(\tB"
    "\017\235\254\033\357\000\000\000\240\254\033\017\270\254\033\006\022(\n\017repurchase_rate\030\027 \001("
    "\020B\017\235\254\033\343\000\000\000\240\254\033\024\270\254\033\006\022 \n\030repurchase_rate_ex"
    "ponent\030\030 \001(\017\022(\n\017repurchase_term\030\031 \001(\020B\017\235"
    "\254\033\342\000\000\000\240\254\033\003\270\254\033\006\022\"\n\rsecurity_desc\030\032 \001(\tB\013\235"
    "\254\033k\000\000\000\240\254\033\017\022&\n\021security_exchange\030\033 \001(\tB\013\235"
    "\254\033\317\000\000\000\240\254\033\t\022 \n\013security_id\030\034 \001(\tB\013\235\254\0330\000\000\000"
    "\240\254\033\017\022E\n\022security_id_source\030\035 \001(\0162\034.Commo"
    "n.SecurityIdSourceEnumB\013\235\254\033\026\000\000\000\240\254\033\017\022<\n\rs"
    "ecurity_type\030\036 \001(\0162\030.Common.SecurityType"
    "EnumB\013\235\254\033\247\000\000\000\240\254\033\017\022/\n\032state_or_province_o"
    "f_issue\030\037 \001(\tB\013\235\254\033\327\001\000\000\240\254\033\017\022!\n\014strike_pri"
    "ce\030  \001(\020B\013\235\254\033\312\000\000\000\240\254\033\014\022\035\n\025strike_price_ex"
    "ponent\030! \001(\017\022\033\n\006symbol\030\" \001(\tB\013\235\254\0337\000\000\000\240\254\033"
    "\017\0226\n\nsymbol_sfx\030# \001(\0162\025.Common.SymbolSfx"
    "EnumB\013\235\254\033A\000\000\000\240\254\033\017\0226\n\ncp_program\030$ \001(\0162\025."
    "Common.CpProgramEnumB\013\235\254\033k\003\000\000\240\254\033\003\022 \n\013cp_"
    "reg_type\030% \001(\tB\013\235\254\033l\003\000\000\240\254\033\017\022)\n\024contract_"
    "settl_month\030& \001(\017B\013\235\254\033\233\002\000\000\240\254\033\005\022\037\n\ndated_"
    "date\030\' \001(\017B\013\235\254\033i\003\000\000\240\254\033\n\022*\n\010evnt_grp\030( \003("
    "\0132\017.Common.EvntGrpB\007\235\254\033`\003\000\000\022.\n\031instrmt_a"
    "ssignment_method\030) \001(\tB\013\235\254\033\031\004\000\000\240\254\033\000\022>\n\022i"
    "nstrument_parties\030* \003(\0132\031.Common.Instrum"
    "entPartiesB\007\235\254\033\372\003\000\000\022*\n\025interest_accrual_"
    "date\030+ \001(\017B\013\235\254\033j\003\000\000\240\254\033\n\022\"\n\rmaturity_time"
    "\030, \001(\tB\013\235\254\0337\004\000\000\240\254\033\035\022(\n\023min_price_increme"
    "nt\030- \001(\001B\013\235\254\033\311\003\000\000\240\254\033\002\022&\n\021nt_position_lim"
    "it\030. \001(\020B\013\235\254\033\313\003\000\000\240\254\033\003\022\031\n\004pool\030/ \001(\tB\013\235\254\033"
    "\263\002\000\000\240\254\033\017\022#\n\016position_limit\0300 \001(\020B\013\235\254\033\312\003\000"
    "\000\240\254\033\003\0227\n\013put_or_call\0301 \001(\0162\025.Common.PutO"
    "rCallEnumB\013\235\254\033\311\000\000\000\240\254\033\003\0224\n\016sec_alt_id_grp"
    "\0302 \003(\0132\023.Common.SecAltIdGrpB\007\235\254\033\306\001\000\000\022@\n\017"
    "security_status\0303 \001(\0162\032.Common.SecurityS"
    "tatusEnumB\013\235\254\033\305\003\000\000\240\254\033\017\022&\n\021security_sub_t"
    "ype\0304 \001(\tB\013\235\254\033\372\002\000\000\240\254\033\017\022(\n\023settle_on_open"
    "_flag\0305 \001(\tB\013\235\254\033\306\003\000\000\240\254\033\017\022$\n\017strike_curre"
    "ncy\0306 \001(\tB\013\235\254\033\263\003\000\000\240\254\033\010\022&\n\021strike_multipl"
    "ier\0307 \001(\001B\013\235\254\033\307\003\000\000\240\254\033\002\022!\n\014strike_value\0308"
    " \001(\001B\013\235\254\033\310\003\000\000\240\254\033\002\0224\n\ttime_unit\0309 \001(\0162\024.C"
    "ommon.TimeUnitEnumB\013\235\254\033\345\003\000\000\240\254\033\017\022\?\n\017unit_"
    "of_measure\030: \001(\0162\031.Common.UnitOfMeasureE"
    "numB\013\235\254\033\344\003\000\000\240\254\033\017\022\036\n\tcap_price\030; \001(\020B\013\235\254\033"
    "\257\004\000\000\240\254\033\014\022\032\n\022cap_price_exponent\030< \001(\017\022>\n\016"
    "exercise_style\030= \001(\0162\031.Common.ExerciseSt"
    "yleEnumB\013\235\254\033\252\004\000\000\240\254\033\003\0227\n\"flex_product_eli"
    "gibility_indicator\030> \001(\010B\013\235\254\033\332\004\000\000\240\254\033\007\022\'\n"
    "\022flexible_indicator\030\? \001(\010B\013\235\254\033\334\004\000\000\240\254\033\007\022 "
    "\n\013floor_price\030@ \001(\020B\013\235\254\033\260\004\000\000\240\254\033\014\022\034\n\024floo"
    "r_price_exponent\030A \001(\017\0228\n\013list_method\030B "
    "\001(\0162\026.Common.ListMethodEnumB\013\235\254\033\256\004\000\000\240\254\033\003"
    "\022/\n\032min_price_increment_amount\030C \001(\020B\013\235\254"
    "\033z\004\000\000\240\254\033\006\022+\n#min_price_increment_amount_"
    "exponent\030D \001(\017\022&\n\021opt_payout_amount\030E \001("
    "\020B\013\235\254\033\253\004\000\000\240\254\033\006\022\"\n\032opt_payout_amount_expo"
    "nent\030F \001(\017\022E\n\022price_quote_method\030G \001(\0162\034"
    ".Common.PriceQuoteMethodEnumB\013\235\254\033\254\004\000\000\240\254\033"
    "\017\022*\n\025price_unit_of_measure\030H \001(\tB\013\235\254\033\247\004\000"
    "\000\240\254\033\017\022.\n\031price_unit_of_measure_qty\030I \001(\020"
    "B\013\235\254\033\250\004\000\000\240\254\033\016\022*\n\"price_unit_of_measure_q"
    "ty_exponent\030J \001(\017\022$\n\017product_complex\030K \001"
    "(\tB\013\235\254\033\313\004\000\000\240\254\033\017\022#\n\016security_group\030L \001(\tB"
    "\013\235\254\033\177\004\000\000\240\254\033\017\022/\n\014security_xml\030M \001(\0132\023.Com"
    "mon.SecurityXmlB\004\250\254\033\007\022:\n\014settl_method\030N "
    "\001(\0162\027.Common.SettlMethodEnumB\013\235\254\033\251\004\000\000\240\254\033"
    "\000\022(\n\023unit_of_measure_qty\030O \001(\020B\013\235\254\033{\004\000\000\240"
    "\254\033\016\022$\n\034unit_of_measure_qty_exponent\030P \001("
    "\017\022B\n\020valuation_method\030Q \001(\0162\033.Common.Val"
    "uationMethodEnumB\013\235\254\033\255\004\000\000\240\254\033\017\022Q\n\030contrac"
    "t_multiplier_unit\030R \001(\0162\".Common.Contrac"
    "tMultiplierUnitEnumB\013\235\254\033\233\005\000\000\240\254\033\003\022E\n\022flow"
    "_schedule_type\030S \001(\0162\034.Common.FlowSchedu"
    "leTypeEnumB\013\235\254\033\237\005\000\000\240\254\033\003\022%\n\020attachment_po"
    "int\030T \001(\020B\013\235\254\033\261\005\000\000\240\254\033\024\022!\n\031attachment_poi"
    "nt_exponent\030U \001(\017\022%\n\020detachment_point\030V "
    "\001(\020B\013\235\254\033\262\005\000\000\240\254\033\024\022!\n\031detachment_point_exp"
    "onent\030W \001(\017\0224\n\037notional_percentage_outst"
    "anding\030X \001(\020B\013\235\254\033\253\005\000\000\240\254\033\024\0220\n(notional_pe"
    "rcentage_outstanding_exponent\030Y \001(\017\022=\n(o"
    "riginal_notional_percentage_outstanding\030"
    "Z \001(\020B\013\235\254\033\254\005\000\000\240\254\033\024\0229\n1original_notional_"
    "percentage_outstanding_exponent\030[ \001(\017\022F\n"
    "\022restructuring_type\030\\ \001(\0162\035.Common.Restr"
    "ucturingTypeEnumB\013\235\254\033\251\005\000\000\240\254\033\017\0225\n\tseniori"
    "ty\030] \001(\0162\025.Common.SeniorityEnumB\013\235\254\033\252\005\000\000"
    "\240\254\033\017\0226\n\016complex_events\030^ \003(\0132\025.Common.Co"
    "mplexEventsB\007\235\254\033\313\005\000\000\022\?\n\017opt_payout_type\030"
    "_ \001(\0162\031.Common.OptPayoutTypeEnumB\013\235\254\033\312\005\000"
    "\000\240\254\033\003\022X\n\034strike_price_boundary_method\030` "
    "\001(\0162%.Common.StrikePriceBoundaryMethodEn"
    "umB\013\235\254\033\307\005\000\000\240\254\033\003\0224\n\037strike_price_boundary"
    "_precision\030a \001(\020B\013\235\254\033\310\005\000\000\240\254\033\024\0220\n(strike_"
    "price_boundary_precision_exponent\030b \001(\017\022"
    "b\n!strike_price_determination_method\030c \001"
    "(\0162*.Common.StrikePriceDeterminationMeth"
    "odEnumB\013\235\254\033\306\005\000\000\240\254\033\003\022j\n%underlying_price_"
    "determination_method\030d \001(\0162..Common.Unde"
    "rlyingPriceDeterminationMethodEnumB\013\235\254\033\311"
    "\005\000\000\240\254\033\003\"\254\003\n\020FinancingDetails\022\'\n\022agreemen"
    "t_currency\030\001 \001(\tB\013\235\254\033\226\003\000\000\240\254\033\010\022#\n\016agreeme"
    "nt_date\030\002 \001(\017B\013\235\254\033\223\003\000\000\240\254\033\n\022#\n\016agreement_"
    "desc\030\003 \001(\tB\013\235\254\033\221\003\000\000\240\254\033\017\022!\n\014agreement_id\030"
    "\004 \001(\tB\013\235\254\033\222\003\000\000\240\254\033\017\022<\n\rdelivery_type\030\005 \001("
    "\0162\030.Common.DeliveryTypeEnumB\013\235\254\033\227\003\000\000\240\254\033\003"
    "\022\035\n\010end_date\030\006 \001(\017B\013\235\254\033\225\003\000\000\240\254\033\n\022!\n\014margi"
    "n_ratio\030\007 \001(\020B\013\235\254\033\202\003\000\000\240\254\033\024\022\035\n\025margin_rat"
    "io_exponent\030\010 \001(\017\022\037\n\nstart_date\030\t \001(\017B\013\235"
    "\254\033\224\003\000\000\240\254\033\n\022B\n\020termination_type\030\n \001(\0162\033.C"
    "ommon.TerminationTypeEnumB\013\235\254\033\024\003\000\000\240\254\033\003\"y"
    "\n\016UndSecAltIdGrp\022/\n\032underlying_security_"
    "alt_id\030\001 \001(\tB\013\235\254\033\312\001\000\000\240\254\033\017\0226\n!underlying_"
    "security_alt_id_source\030\002 \001(\tB\013\235\254\033\313\001\000\000\240\254\033"
    "\017\"o\n\026UnderlyingStipulations\022)\n\024underlyin"
    "g_stip_type\030\001 \001(\tB\013\235\254\033x\003\000\000\240\254\033\017\022*\n\025underl"
    "ying_stip_value\030\002 \001(\tB\013\235\254\033y\003\000\000\240\254\033\017\"\222\001\n\031U"
    "ndlyInstrumentPtysSubGrp\0227\n\"underlying_i"
    "nstrument_party_sub_id\030\001 \001(\tB\013\235\254\033\'\004\000\000\240\254\033"
    "\017\022<\n\'underlying_instrument_party_sub_id_"
    "type\030\002 \001(\020B\013\235\254\033(\004\000\000\240\254\033\003\"\223\002\n\026UndlyInstrum"
    "entParties\0223\n\036underlying_instrument_part"
    "y_id\030\001 \001(\tB\013\235\254\033#\004\000\000\240\254\033\017\022:\n%underlying_in"
    "strument_party_id_source\030\002 \001(\tB\013\235\254\033$\004\000\000\240"
    "\254\033\000\0225\n underlying_instrument_party_role\030"
    "\003 \001(\020B\013\235\254\033%\004\000\000\240\254\033\003\022Q\n\035undly_instrument_p"
    "tys_sub_grp\030\004 \003(\0132!.Common.UndlyInstrume"
    "ntPtysSubGrpB\007\235\254\033&\004\000\000\"x\n\037UnderlyingFlowS"
    "cheduleTypeUnion\022%\n\035underlying_flow_sche"
    "dule_type\030\001 \001(\020\022.\n&underlying_flow_sched"
    "ule_type_sfixed64\030\002 \001(\020\"\357#\n\024UnderlyingIn"
    "strument\022.\n\031encoded_underlying_issuer\030\001 "
    "\001(\014B\013\235\254\033k\001\000\000\240\254\033\001\0222\n\035encoded_underlying_i"
    "ssuer_len\030\002 \001(\007B\013\235\254\033j\001\000\000\240\254\033\022\0225\n encoded_"
    "underlying_security_desc\030\003 \001(\014B\013\235\254\033m\001\000\000\240"
    "\254\033\001\0229\n$encoded_underlying_security_desc_"
    "len\030\004 \001(\007B\013\235\254\033l\001\000\000\240\254\033\022\022(\n\023underlying_cfi"
    "_code\030\005 \001(\tB\013\235\254\033\317\001\000\000\240\254\033\017\0223\n\036underlying_c"
    "ontract_multiplier\030\006 \001(\001B\013\235\254\033\264\001\000\000\240\254\033\002\0220\n"
    "\033underlying_country_of_issue\030\007 \001(\tB\013\235\254\033P"
    "\002\000\000\240\254\033\027\0223\n\036underlying_coupon_payment_dat"
    "e\030\010 \001(\017B\013\235\254\033\361\000\000\000\240\254\033\n\022+\n\026underlying_coupo"
    "n_rate\030\t \001(\020B\013\235\254\033\263\001\000\000\240\254\033\024\022\'\n\037underlying_"
    "coupon_rate_exponent\030\n \001(\017\022-\n\030underlying"
    "_credit_rating\030\013 \001(\tB\013\235\254\033\000\001\000\000\240\254\033\017\022&\n\021und"
    "erlying_factor\030\014 \001(\001B\013\235\254\033\366\000\000\000\240\254\033\002\022.\n\031und"
    "erlying_instr_registry\030\r \001(\tB\013\235\254\033S\002\000\000\240\254\033"
    "\017\022*\n\025underlying_issue_date\030\016 \001(\017B\013\235\254\033\362\000\000"
    "\000\240\254\033\n\022&\n\021underlying_issuer\030\017 \001(\tB\013\235\254\0332\001\000"
    "\000\240\254\033\017\022/\n\032underlying_locale_of_issue\030\020 \001("
    "\tB\013\235\254\033R\002\000\000\240\254\033\017\022-\n\030underlying_maturity_da"
    "te\030\021 \001(\017B\013\235\254\033\036\002\000\000\240\254\033\n\0223\n\036underlying_matu"
    "rity_month_year\030\022 \001(\017B\013\235\254\0339\001\000\000\240\254\033\005\022-\n\030un"
    "derlying_opt_attribute\030\023 \001(\tB\013\235\254\033=\001\000\000\240\254\033"
    "\000\022\'\n\022underlying_product\030\024 \001(\020B\013\235\254\033\316\001\000\000\240\254"
    "\033\003\022+\n\026underlying_put_or_call\030\025 \001(\020B\013\235\254\033;"
    "\001\000\000\240\254\033\003\0223\n\032underlying_redemption_date\030\026 "
    "\001(\017B\017\235\254\033\367\000\000\000\240\254\033\n\270\254\033\006\022A\n(underlying_repo_"
    "collateral_security_type\030\027 \001(\tB\017\235\254\033\363\000\000\000\240"
    "\254\033\017\270\254\033\006\0223\n\032underlying_repurchase_rate\030\030 "
    "\001(\020B\017\235\254\033\365\000\000\000\240\254\033\024\270\254\033\006\022+\n#underlying_repur"
    "chase_rate_exponent\030\031 \001(\017\0223\n\032underlying_"
    "repurchase_term\030\032 \001(\020B\017\235\254\033\364\000\000\000\240\254\033\003\270\254\033\006\022-"
    "\n\030underlying_security_desc\030\033 \001(\tB\013\235\254\0333\001\000"
    "\000\240\254\033\017\0221\n\034underlying_security_exchange\030\034 "
    "\001(\tB\013\235\254\0334\001\000\000\240\254\033\t\022+\n\026underlying_security_"
    "id\030\035 \001(\tB\013\235\254\0335\001\000\000\240\254\033\017\0222\n\035underlying_secu"
    "rity_id_source\030\036 \001(\tB\013\235\254\0331\001\000\000\240\254\033\017\022-\n\030und"
    "erlying_security_type\030\037 \001(\tB\013\235\254\0336\001\000\000\240\254\033\017"
    "\022:\n%underlying_state_or_province_of_issu"
    "e\030  \001(\tB\013\235\254\033Q\002\000\000\240\254\033\017\022,\n\027underlying_strik"
    "e_price\030! \001(\020B\013\235\254\033<\001\000\000\240\254\033\014\022(\n underlying"
    "_strike_price_exponent\030\" \001(\017\022&\n\021underlyi"
    "ng_symbol\030# \001(\tB\013\235\254\0337\001\000\000\240\254\033\017\022*\n\025underlyi"
    "ng_symbol_sfx\030$ \001(\tB\013\235\254\0338\001\000\000\240\254\033\017\022;\n\022und_"
    "sec_alt_id_grp\030% \003(\0132\026.Common.UndSecAltI"
    "dGrpB\007\235\254\033\311\001\000\000\0221\n\034underlying_adjusted_qua"
    "ntity\030& \001(\020B\013\235\254\033\024\004\000\000\240\254\033\016\022-\n%underlying_a"
    "djusted_quantity_exponent\030\' \001(\017\0222\n\035under"
    "lying_allocation_percent\030( \001(\020B\013\235\254\033\314\003\000\000\240"
    "\254\033\024\022.\n&underlying_allocation_percent_exp"
    "onent\030) \001(\017\022*\n\025underlying_cp_program\030* \001"
    "(\tB\013\235\254\033m\003\000\000\240\254\033\017\022+\n\026underlying_cp_reg_typ"
    "e\030+ \001(\tB\013\235\254\033n\003\000\000\240\254\033\017\022)\n\024underlying_cap_v"
    "alue\030, \001(\020B\013\235\254\033\016\004\000\000\240\254\033\006\022%\n\035underlying_ca"
    "p_value_exponent\030- \001(\017\022+\n\026underlying_cas"
    "h_amount\030. \001(\020B\013\235\254\033\315\003\000\000\240\254\033\006\022\'\n\037underlyin"
    "g_cash_amount_exponent\030/ \001(\017\022I\n\024underlyi"
    "ng_cash_type\0300 \001(\0162\036.Common.UnderlyingCa"
    "shTypeEnumB\013\235\254\033\316\003\000\000\240\254\033\017\022(\n\023underlying_cu"
    "rrency\0301 \001(\tB\013\235\254\033>\001\000\000\240\254\033\010\022-\n\030underlying_"
    "current_value\0302 \001(\020B\013\235\254\033u\003\000\000\240\254\033\006\022)\n!unde"
    "rlying_current_value_exponent\0303 \001(\017\022+\n\026u"
    "nderlying_dirty_price\0304 \001(\020B\013\235\254\033r\003\000\000\240\254\033\014"
    "\022\'\n\037underlying_dirty_price_exponent\0305 \001("
    "\017\022)\n\024underlying_end_price\0306 \001(\020B\013\235\254\033s\003\000\000"
    "\240\254\033\014\022%\n\035underlying_end_price_exponent\0307 "
    "\001(\017\022)\n\024underlying_end_value\0308 \001(\020B\013\235\254\033v\003"
    "\000\000\240\254\033\006\022%\n\035underlying_end_value_exponent\030"
    "9 \001(\017\022\'\n\022underlying_fx_rate\030: \001(\001B\013\235\254\033\025\004"
    "\000\000\240\254\033\002\022N\n\027underlying_fx_rate_calc\030; \001(\0162"
    " .Common.UnderlyingFxRateCalcEnumB\013\235\254\033\026\004"
    "\000\000\240\254\033\000\022\"\n\runderlying_px\030< \001(\020B\013\235\254\033*\003\000\000\240\254"
    "\033\014\022\036\n\026underlying_px_exponent\030= \001(\017\022#\n\016un"
    "derlying_qty\030> \001(\020B\013\235\254\033o\003\000\000\240\254\033\016\022\037\n\027under"
    "lying_qty_exponent\030\? \001(\017\0221\n\034underlying_s"
    "ecurity_sub_type\030@ \001(\tB\013\235\254\033\373\002\000\000\240\254\033\017\022,\n\027u"
    "nderlying_settl_method\030A \001(\tB\013\235\254\033\017\004\000\000\240\254\033"
    "\017\022U\n\032underlying_settlement_type\030B \001(\0162$."
    "Common.UnderlyingSettlementTypeEnumB\013\235\254\033"
    "\317\003\000\000\240\254\033\003\022+\n\026underlying_start_value\030C \001(\020"
    "B\013\235\254\033t\003\000\000\240\254\033\006\022\'\n\037underlying_start_value_"
    "exponent\030D \001(\017\022H\n\027underlying_stipulation"
    "s\030E \003(\0132\036.Common.UnderlyingStipulationsB"
    "\007\235\254\033w\003\000\000\022/\n\032underlying_strike_currency\030F"
    " \001(\tB\013\235\254\033\255\003\000\000\240\254\033\010\022)\n\024underlying_time_uni"
    "t\030G \001(\tB\013\235\254\033\350\003\000\000\240\254\033\017\022/\n\032underlying_unit_"
    "of_measure\030H \001(\tB\013\235\254\033\346\003\000\000\240\254\033\017\022I\n\030undly_i"
    "nstrument_parties\030I \003(\0132\036.Common.UndlyIn"
    "strumentPartiesB\007\235\254\033\"\004\000\000\022.\n\031underlying_e"
    "xercise_style\030J \001(\020B\013\235\254\033\213\005\000\000\240\254\033\003\022-\n\030unde"
    "rlying_maturity_time\030K \001(\tB\013\235\254\033\275\004\000\000\240\254\033\035\022"
    "5\n underlying_price_unit_of_measure\030L \001("
    "\tB\013\235\254\033\220\005\000\000\240\254\033\017\0229\n$underlying_price_unit_"
    "of_measure_qty\030M \001(\020B\013\235\254\033\221\005\000\000\240\254\033\016\0225\n-und"
    "erlying_price_unit_of_measure_qty_expone"
    "nt\030N \001(\017\0223\n\036underlying_unit_of_measure_q"
    "ty\030O \001(\020B\013\235\254\033\217\005\000\000\240\254\033\016\022/\n\'underlying_unit"
    "_of_measure_qty_exponent\030P \001(\017\0228\n#underl"
    "ying_contract_multiplier_unit\030Q \001(\020B\013\235\254\033"
    "\235\005\000\000\240\254\033\003\0222\n\035underlying_flow_schedule_typ"
    "e\030R \001(\020B\013\235\254\033\241\005\000\000\240\254\033\003\0220\n\033underlying_attac"
    "hment_point\030S \001(\020B\013\235\254\033\263\005\000\000\240\254\033\024\022,\n$underl"
    "ying_attachment_point_exponent\030T \001(\017\0220\n\033"
    "underlying_detachment_point\030U \001(\020B\013\235\254\033\264\005"
    "\000\000\240\254\033\024\022,\n$underlying_detachment_point_ex"
    "ponent\030V \001(\017\022\?\n*underlying_notional_perc"
    "entage_outstanding\030W \001(\020B\013\235\254\033\257\005\000\000\240\254\033\024\022;\n"
    "3underlying_notional_percentage_outstand"
    "ing_exponent\030X \001(\017\022H\n3underlying_origina"
    "l_notional_percentage_outstanding\030Y \001(\020B"
    "\013\235\254\033\260\005\000\000\240\254\033\024\022D\n<underlying_original_noti"
    "onal_percentage_outstanding_exponent\030Z \001"
    "(\017\0222\n\035underlying_restructuring_type\030[ \001("
    "\tB\013\235\254\033\255\005\000\000\240\254\033\017\022)\n\024underlying_seniority\030\\"
    " \001(\tB\013\235\254\033\256\005\000\000\240\254\033\017\"R\n\rUndInstrmtGrp\022A\n\025un"
    "derlying_instrument\030\001 \001(\0132\034.Common.Under"
    "lyingInstrumentB\004\250\254\033\006\"z\n\014Stipulations\022B\n"
    "\020stipulation_type\030\001 \001(\0162\033.Common.Stipula"
    "tionTypeEnumB\013\235\254\033\351\000\000\000\240\254\033\017\022&\n\021stipulation"
    "_value\030\002 \001(\tB\013\235\254\033\352\000\000\000\240\254\033\017\"\303\002\n\014OrderQtyDa"
    "ta\022#\n\016cash_order_qty\030\001 \001(\020B\013\235\254\033\230\000\000\000\240\254\033\016\022"
    "\037\n\027cash_order_qty_exponent\030\002 \001(\017\022\"\n\rorde"
    "r_percent\030\003 \001(\020B\013\235\254\033\004\002\000\000\240\254\033\024\022\036\n\026order_pe"
    "rcent_exponent\030\004 \001(\017\022\036\n\torder_qty\030\005 \001(\020B"
    "\013\235\254\033&\000\000\000\240\254\033\016\022\032\n\022order_qty_exponent\030\006 \001(\017"
    "\022F\n\022rounding_direction\030\007 \001(\0162\035.Common.Ro"
    "undingDirectionEnumB\013\235\254\033\324\001\000\000\240\254\033\000\022%\n\020roun"
    "ding_modulus\030\010 \001(\001B\013\235\254\033\325\001\000\000\240\254\033\002\"\256\007\n\025Trig"
    "geringInstruction\022>\n\016trigger_action\030\001 \001("
    "\0162\031.Common.TriggerActionEnumB\013\235\254\033M\004\000\000\240\254\033"
    "\000\022&\n\021trigger_new_price\030\002 \001(\020B\013\235\254\033V\004\000\000\240\254\033"
    "\014\022\"\n\032trigger_new_price_exponent\030\003 \001(\017\022$\n"
    "\017trigger_new_qty\030\004 \001(\020B\013\235\254\033X\004\000\000\240\254\033\016\022 \n\030t"
    "rigger_new_qty_exponent\030\005 \001(\017\022E\n\022trigger"
    "_order_type\030\006 \001(\0162\034.Common.TriggerOrderT"
    "ypeEnumB\013\235\254\033W\004\000\000\240\254\033\000\022\"\n\rtrigger_price\030\007 "
    "\001(\020B\013\235\254\033N\004\000\000\240\254\033\014\022\036\n\026trigger_price_expone"
    "nt\030\010 \001(\017\022O\n\027trigger_price_direction\030\t \001("
    "\0162!.Common.TriggerPriceDirectionEnumB\013\235\254"
    "\033U\004\000\000\240\254\033\000\022E\n\022trigger_price_type\030\n \001(\0162\034."
    "Common.TriggerPriceTypeEnumB\013\235\254\033S\004\000\000\240\254\033\000"
    "\022P\n\030trigger_price_type_scope\030\013 \001(\0162!.Com"
    "mon.TriggerPriceTypeScopeEnumB\013\235\254\033T\004\000\000\240\254"
    "\033\000\022*\n\025trigger_security_desc\030\014 \001(\tB\013\235\254\033R\004"
    "\000\000\240\254\033\017\022(\n\023trigger_security_id\030\r \001(\tB\013\235\254\033"
    "P\004\000\000\240\254\033\017\022/\n\032trigger_security_id_source\030\016"
    " \001(\tB\013\235\254\033Q\004\000\000\240\254\033\017\022#\n\016trigger_symbol\030\017 \001("
    "\tB\013\235\254\033O\004\000\000\240\254\033\017\022/\n\032trigger_trading_sessio"
    "n_id\030\020 \001(\tB\013\235\254\033Y\004\000\000\240\254\033\017\0223\n\036trigger_tradi"
    "ng_session_sub_id\030\021 \001(\tB\013\235\254\033Z\004\000\000\240\254\033\017\022:\n\014"
    "trigger_type\030\022 \001(\0162\027.Common.TriggerTypeE"
    "numB\013\235\254\033L\004\000\000\240\254\033\000\"\312\003\n\032SpreadOrBenchmarkCu"
    "rveData\022-\n\030benchmark_curve_currency\030\001 \001("
    "\tB\013\235\254\033\334\000\000\000\240\254\033\010\022I\n\024benchmark_curve_name\030\002"
    " \001(\0162\036.Common.BenchmarkCurveNameEnumB\013\235\254"
    "\033\335\000\000\000\240\254\033\017\022*\n\025benchmark_curve_point\030\003 \001(\t"
    "B\013\235\254\033\336\000\000\000\240\254\033\017\022\033\n\006spread\030\004 \001(\020B\013\235\254\033\332\000\000\000\240\254"
    "\033\r\022\027\n\017spread_exponent\030\005 \001(\017\022$\n\017benchmark"
    "_price\030\006 \001(\020B\013\235\254\033\226\002\000\000\240\254\033\014\022 \n\030benchmark_p"
    "rice_exponent\030\007 \001(\017\022)\n\024benchmark_price_t"
    "ype\030\010 \001(\020B\013\235\254\033\227\002\000\000\240\254\033\003\022*\n\025benchmark_secu"
    "rity_id\030\t \001(\tB\013\235\254\033\273\002\000\000\240\254\033\017\0221\n\034benchmark_"
    "security_id_source\030\n \001(\tB\013\235\254\033\371\002\000\000\240\254\033\017\"\321\002"
    "\n\tYieldData\022\032\n\005yield\030\001 \001(\020B\013\235\254\033\354\000\000\000\240\254\033\024\022"
    "\026\n\016yield_exponent\030\002 \001(\017\0226\n\nyield_type\030\003 "
    "\001(\0162\025.Common.YieldTypeEnumB\013\235\254\033\353\000\000\000\240\254\033\017\022"
    "$\n\017yield_calc_date\030\004 \001(\017B\013\235\254\033\275\002\000\000\240\254\033\n\022*\n"
    "\025yield_redemption_date\030\005 \001(\017B\013\235\254\033\270\002\000\000\240\254\033"
    "\n\022+\n\026yield_redemption_price\030\006 \001(\020B\013\235\254\033\271\002"
    "\000\000\240\254\033\014\022\'\n\037yield_redemption_price_exponen"
    "t\030\007 \001(\017\0220\n\033yield_redemption_price_type\030\010"
    " \001(\020B\013\235\254\033\272\002\000\000\240\254\033\003\"\351\001\n\016CommissionData\022\"\n\r"
    "comm_currency\030\001 \001(\tB\013\235\254\033\337\001\000\000\240\254\033\010\0224\n\tcomm"
    "_type\030\002 \001(\0162\024.Common.CommTypeEnumB\013\235\254\033\r\000"
    "\000\000\240\254\033\000\022\037\n\ncommission\030\003 \001(\020B\013\235\254\033\014\000\000\000\240\254\033\006\022"
    "\033\n\023commission_exponent\030\004 \001(\017\022\?\n\017fund_ren"
    "ew_waiv\030\005 \001(\0162\031.Common.FundRenewWaivEnum"
    "B\013\235\254\033\361\001\000\000\240\254\033\000\"\317\004\n\017PegInstructions\022=\n\016peg"
    "_limit_type\030\001 \001(\0162\030.Common.PegLimitTypeE"
    "numB\013\235\254\033E\003\000\000\240\254\033\003\022;\n\rpeg_move_type\030\002 \001(\0162"
    "\027.Common.PegMoveTypeEnumB\013\235\254\033C\003\000\000\240\254\033\003\022\?\n"
    "\017peg_offset_type\030\003 \001(\0162\031.Common.PegOffse"
    "tTypeEnumB\013\235\254\033D\003\000\000\240\254\033\003\022%\n\020peg_offset_val"
    "ue\030\004 \001(\001B\013\235\254\033\323\000\000\000\240\254\033\002\022=\n\016peg_price_type\030"
    "\005 \001(\0162\030.Common.PegPriceTypeEnumB\013\235\254\033F\004\000\000"
    "\240\254\033\003\022G\n\023peg_round_direction\030\006 \001(\0162\035.Comm"
    "on.PegRoundDirectionEnumB\013\235\254\033F\003\000\000\240\254\033\003\0224\n"
    "\tpeg_scope\030\007 \001(\0162\024.Common.PegScopeEnumB\013"
    "\235\254\033H\003\000\000\240\254\033\003\022&\n\021peg_security_desc\030\010 \001(\tB\013"
    "\235\254\033K\004\000\000\240\254\033\017\022$\n\017peg_security_id\030\t \001(\tB\013\235\254"
    "\033I\004\000\000\240\254\033\017\022+\n\026peg_security_id_source\030\n \001("
    "\tB\013\235\254\033H\004\000\000\240\254\033\017\022\037\n\npeg_symbol\030\013 \001(\tB\013\235\254\033J"
    "\004\000\000\240\254\033\017\"\212\004\n\026DiscretionInstructions\022@\n\017di"
    "scretion_inst\030\001 \001(\0162\032.Common.DiscretionI"
    "nstEnumB\013\235\254\033\204\001\000\000\240\254\033\000\022K\n\025discretion_limit"
    "_type\030\002 \001(\0162\037.Common.DiscretionLimitType"
    "EnumB\013\235\254\033K\003\000\000\240\254\033\003\022I\n\024discretion_move_typ"
    "e\030\003 \001(\0162\036.Common.DiscretionMoveTypeEnumB"
    "\013\235\254\033I\003\000\000\240\254\033\003\022M\n\026discretion_offset_type\030\004"
    " \001(\0162 .Common.DiscretionOffsetTypeEnumB\013"
    "\235\254\033J\003\000\000\240\254\033\003\022,\n\027discretion_offset_value\030\005"
    " \001(\001B\013\235\254\033\205\001\000\000\240\254\033\002\022U\n\032discretion_round_di"
    "rection\030\006 \001(\0162$.Common.DiscretionRoundDi"
    "rectionEnumB\013\235\254\033L\003\000\000\240\254\033\003\022B\n\020discretion_s"
    "cope\030\007 \001(\0162\033.Common.DiscretionScopeEnumB"
    "\013\235\254\033N\003\000\000\240\254\033\003\"\305\001\n\025StrategyParametersGrp\022,"
    "\n\027strategy_parameter_name\030\001 \001(\tB\013\235\254\033\276\003\000\000"
    "\240\254\033\017\022O\n\027strategy_parameter_type\030\002 \001(\0162!."
    "Common.StrategyParameterTypeEnumB\013\235\254\033\277\003\000"
    "\000\240\254\033\003\022-\n\030strategy_parameter_value\030\003 \001(\tB"
    "\013\235\254\033\300\003\000\000\240\254\033\017\"\202\003\n\020TrdRegTimestamps\022P\n\030des"
    "k_order_handling_inst\030\001 \001(\0162!.Common.Des"
    "kOrderHandlingInstEnumB\013\235\254\033\013\004\000\000\240\254\033\013\0224\n\td"
    "esk_type\030\002 \001(\0162\024.Common.DeskTypeEnumB\013\235\254"
    "\033\t\004\000\000\240\254\033\017\022A\n\020desk_type_source\030\003 \001(\0162\032.Co"
    "mmon.DeskTypeSourceEnumB\013\235\254\033\n\004\000\000\240\254\033\003\022&\n\021"
    "trd_reg_timestamp\030\004 \001(\020B\013\235\254\033\001\003\000\000\240\254\033\021\022-\n\030"
    "trd_reg_timestamp_origin\030\005 \001(\tB\013\235\254\033\003\003\000\000\240"
    "\254\033\017\022L\n\026trd_reg_timestamp_type\030\006 \001(\0162\037.Co"
    "mmon.TrdRegTimestampTypeEnumB\013\235\254\033\002\003\000\000\240\254\033"
    "\003\"\254\001\n\032ApplicationSequenceControl\022\034\n\007appl"
    "_id\030\001 \001(\tB\013\235\254\033\234\004\000\000\240\254\033\017\022&\n\021appl_last_seq_"
    "num\030\002 \001(\007B\013\235\254\033F\005\000\000\240\254\033\025\022%\n\020appl_resend_fl"
    "ag\030\003 \001(\010B\013\235\254\033H\005\000\000\240\254\033\007\022!\n\014appl_seq_num\030\004 "
    "\001(\007B\013\235\254\033\235\004\000\000\240\254\033\025\"\355\001\n\tContraGrp\022\"\n\rcontra"
    "_broker\030\001 \001(\tB\013\235\254\033w\001\000\000\240\254\033\017\022&\n\021contra_leg"
    "_ref_id\030\002 \001(\tB\013\235\254\033\217\002\000\000\240\254\033\017\022%\n\020contra_tra"
    "de_qty\030\003 \001(\020B\013\235\254\033\265\001\000\000\240\254\033\016\022!\n\031contra_trad"
    "e_qty_exponent\030\004 \001(\017\022&\n\021contra_trade_tim"
    "e\030\005 \001(\020B\013\235\254\033\266\001\000\000\240\254\033\021\022\"\n\rcontra_trader\030\006 "
    "\001(\tB\013\235\254\033Q\001\000\000\240\254\033\017\"j\n\017NstdPtys4SubGrp\022(\n\023n"
    "ested4party_sub_id\030\001 \001(\tB\013\235\254\033\204\005\000\000\240\254\033\017\022-\n"
    "\030nested4party_sub_id_type\030\002 \001(\020B\013\235\254\033\203\005\000\000"
    "\240\254\033\003\"\310\001\n\016NestedParties4\022$\n\017nested4party_"
    "id\030\001 \001(\tB\013\235\254\033\207\005\000\000\240\254\033\017\022+\n\026nested4party_id"
    "_source\030\002 \001(\tB\013\235\254\033\210\005\000\000\240\254\033\000\022&\n\021nested4par"
    "ty_role\030\003 \001(\020B\013\235\254\033\211\005\000\000\240\254\033\003\022;\n\021nstd_ptys4"
    "sub_grp\030\004 \003(\0132\027.Common.NstdPtys4SubGrpB\007"
    "\235\254\033\205\005\000\000\"\256\001\n\nRateSource\0228\n\013rate_source\030\001 "
    "\001(\0162\026.Common.RateSourceEnumB\013\235\254\033\246\005\000\000\240\254\033\003"
    "\022A\n\020rate_source_type\030\002 \001(\0162\032.Common.Rate"
    "SourceTypeEnumB\013\235\254\033\247\005\000\000\240\254\033\003\022#\n\016reference"
    "_page\030\003 \001(\tB\013\235\254\033\250\005\000\000\240\254\033\017\"\222\001\n\nContAmtGrp\022"
    "\"\n\rcont_amt_curr\030\001 \001(\tB\013\235\254\033\t\002\000\000\240\254\033\010\022;\n\rc"
    "ont_amt_type\030\002 \001(\0162\027.Common.ContAmtTypeE"
    "numB\013\235\254\033\007\002\000\000\240\254\033\003\022#\n\016cont_amt_value\030\003 \001(\001"
    "B\013\235\254\033\010\002\000\000\240\254\033\002\"k\n\016LegSecAltIdGrp\022(\n\023leg_s"
    "ecurity_alt_id\030\001 \001(\tB\013\235\254\033]\002\000\000\240\254\033\017\022/\n\032leg"
    "_security_alt_id_source\030\002 \001(\tB\013\235\254\033^\002\000\000\240\254"
    "\033\017\"c\n\030LegFlowScheduleTypeUnion\022\036\n\026leg_fl"
    "ow_schedule_type\030\001 \001(\020\022\'\n\037leg_flow_sched"
    "ule_type_sfixed64\030\002 \001(\020\"\315\023\n\rInstrumentLe"
    "g\022\'\n\022encoded_leg_issuer\030\001 \001(\014B\013\235\254\033k\002\000\000\240\254"
    "\033\001\022+\n\026encoded_leg_issuer_len\030\002 \001(\007B\013\235\254\033j"
    "\002\000\000\240\254\033\022\022.\n\031encoded_leg_security_desc\030\003 \001"
    "(\014B\013\235\254\033n\002\000\000\240\254\033\001\0222\n\035encoded_leg_security_"
    "desc_len\030\004 \001(\007B\013\235\254\033m\002\000\000\240\254\033\022\022!\n\014leg_cfi_c"
    "ode\030\005 \001(\tB\013\235\254\033`\002\000\000\240\254\033\017\022,\n\027leg_contract_m"
    "ultiplier\030\006 \001(\001B\013\235\254\033f\002\000\000\240\254\033\002\022)\n\024leg_coun"
    "try_of_issue\030\007 \001(\tB\013\235\254\033T\002\000\000\240\254\033\027\022,\n\027leg_c"
    "oupon_payment_date\030\010 \001(\017B\013\235\254\033\370\000\000\000\240\254\033\n\022$\n"
    "\017leg_coupon_rate\030\t \001(\020B\013\235\254\033g\002\000\000\240\254\033\024\022 \n\030l"
    "eg_coupon_rate_exponent\030\n \001(\017\022&\n\021leg_cre"
    "dit_rating\030\013 \001(\tB\013\235\254\033\001\001\000\000\240\254\033\017\022\037\n\nleg_fac"
    "tor\030\014 \001(\001B\013\235\254\033\375\000\000\000\240\254\033\002\022\'\n\022leg_instr_regi"
    "stry\030\r \001(\tB\013\235\254\033W\002\000\000\240\254\033\017\022#\n\016leg_issue_dat"
    "e\030\016 \001(\017B\013\235\254\033\371\000\000\000\240\254\033\n\022\037\n\nleg_issuer\030\017 \001(\t"
    "B\013\235\254\033i\002\000\000\240\254\033\017\022(\n\023leg_locale_of_issue\030\020 \001"
    "(\tB\013\235\254\033V\002\000\000\240\254\033\017\022&\n\021leg_maturity_date\030\021 \001"
    "(\017B\013\235\254\033c\002\000\000\240\254\033\n\022,\n\027leg_maturity_month_ye"
    "ar\030\022 \001(\017B\013\235\254\033b\002\000\000\240\254\033\005\022&\n\021leg_opt_attribu"
    "te\030\023 \001(\tB\013\235\254\033e\002\000\000\240\254\033\000\022 \n\013leg_product\030\024 \001"
    "(\020B\013\235\254\033_\002\000\000\240\254\033\003\022\"\n\rleg_ratio_qty\030\025 \001(\001B\013"
    "\235\254\033o\002\000\000\240\254\033\002\022,\n\023leg_redemption_date\030\026 \001(\017"
    "B\017\235\254\033\376\000\000\000\240\254\033\n\270\254\033\006\022:\n!leg_repo_collateral"
    "_security_type\030\027 \001(\tB\017\235\254\033\372\000\000\000\240\254\033\017\270\254\033\006\022,\n"
    "\023leg_repurchase_rate\030\030 \001(\020B\017\235\254\033\374\000\000\000\240\254\033\024\270"
    "\254\033\006\022$\n\034leg_repurchase_rate_exponent\030\031 \001("
    "\017\022,\n\023leg_repurchase_term\030\032 \001(\020B\017\235\254\033\373\000\000\000\240"
    "\254\033\003\270\254\033\006\022&\n\021leg_security_desc\030\033 \001(\tB\013\235\254\033l"
    "\002\000\000\240\254\033\017\022*\n\025leg_security_exchange\030\034 \001(\tB\013"
    "\235\254\033h\002\000\000\240\254\033\t\022$\n\017leg_security_id\030\035 \001(\tB\013\235\254"
    "\033Z\002\000\000\240\254\033\017\022+\n\026leg_security_id_source\030\036 \001("
    "\tB\013\235\254\033[\002\000\000\240\254\033\017\022&\n\021leg_security_type\030\037 \001("
    "\tB\013\235\254\033a\002\000\000\240\254\033\017\022\035\n\010leg_side\030  \001(\tB\013\235\254\033p\002\000"
    "\000\240\254\033\000\0223\n\036leg_state_or_province_of_issue\030"
    "! \001(\tB\013\235\254\033U\002\000\000\240\254\033\017\022%\n\020leg_strike_price\030\""
    " \001(\020B\013\235\254\033d\002\000\000\240\254\033\014\022!\n\031leg_strike_price_ex"
    "ponent\030# \001(\017\022\037\n\nleg_symbol\030$ \001(\tB\013\235\254\033X\002\000"
    "\000\240\254\033\017\022#\n\016leg_symbol_sfx\030% \001(\tB\013\235\254\033Y\002\000\000\240\254"
    "\033\017\022-\n\030leg_contract_settl_month\030& \001(\017B\013\235\254"
    "\033\273\003\000\000\240\254\033\005\022!\n\014leg_currency\030\' \001(\tB\013\235\254\033,\002\000\000"
    "\240\254\033\010\022#\n\016leg_dated_date\030( \001(\017B\013\235\254\033\343\002\000\000\240\254\033"
    "\n\022.\n\031leg_interest_accrual_date\030) \001(\017B\013\235\254"
    "\033\274\003\000\000\240\254\033\n\022%\n\020leg_option_ratio\030* \001(\001B\013\235\254\033"
    "\371\003\000\000\240\254\033\002\022\035\n\010leg_pool\030+ \001(\tB\013\235\254\033\344\002\000\000\240\254\033\017\022"
    "\036\n\tleg_price\030, \001(\020B\013\235\254\0336\002\000\000\240\254\033\014\022\032\n\022leg_p"
    "rice_exponent\030- \001(\017\022;\n\022leg_sec_alt_id_gr"
    "p\030. \003(\0132\026.Common.LegSecAltIdGrpB\007\235\254\033\\\002\000\000"
    "\022*\n\025leg_security_sub_type\030/ \001(\tB\013\235\254\033\374\002\000\000"
    "\240\254\033\017\022(\n\023leg_strike_currency\0300 \001(\tB\013\235\254\033\256\003"
    "\000\000\240\254\033\010\022\"\n\rleg_time_unit\0301 \001(\tB\013\235\254\033\351\003\000\000\240\254"
    "\033\017\022(\n\023leg_unit_of_measure\0302 \001(\tB\013\235\254\033\347\003\000\000"
    "\240\254\033\017\022\'\n\022leg_exercise_style\0303 \001(\020B\013\235\254\033\214\005\000"
    "\000\240\254\033\003\022&\n\021leg_maturity_time\0304 \001(\tB\013\235\254\033\274\004\000"
    "\000\240\254\033\035\022.\n\031leg_price_unit_of_measure\0305 \001(\t"
    "B\013\235\254\033\215\005\000\000\240\254\033\017\0222\n\035leg_price_unit_of_measu"
    "re_qty\0306 \001(\020B\013\235\254\033\216\005\000\000\240\254\033\016\022.\n&leg_price_u"
    "nit_of_measure_qty_exponent\0307 \001(\017\022$\n\017leg"
    "_put_or_call\0308 \001(\020B\013\235\254\033N\005\000\000\240\254\033\003\022,\n\027leg_u"
    "nit_of_measure_qty\0309 \001(\020B\013\235\254\033\310\004\000\000\240\254\033\016\022(\n"
    " leg_unit_of_measure_qty_exponent\030: \001(\017\022"
    "1\n\034leg_contract_multiplier_unit\030; \001(\020B\013\235"
    "\254\033\234\005\000\000\240\254\033\003\022+\n\026leg_flow_schedule_type\030< \001"
    "(\020B\013\235\254\033\240\005\000\000\240\254\033\003\"h\n\017LegStipulations\022)\n\024le"
    "g_stipulation_type\030\001 \001(\tB\013\235\254\033\260\002\000\000\240\254\033\017\022*\n"
    "\025leg_stipulation_value\030\002 \001(\tB\013\235\254\033\261\002\000\000\240\254\033"
    "\017\"j\n\017NstdPtys2SubGrp\022(\n\023nested2party_sub"
    "_id\030\001 \001(\tB\013\235\254\033\370\002\000\000\240\254\033\017\022-\n\030nested2party_s"
    "ub_id_type\030\002 \001(\020B\013\235\254\033\'\003\000\000\240\254\033\003\"\310\001\n\016Nested"
    "Parties2\022$\n\017nested2party_id\030\001 \001(\tB\013\235\254\033\365\002"
    "\000\000\240\254\033\017\022+\n\026nested2party_id_source\030\002 \001(\tB\013"
    "\235\254\033\366\002\000\000\240\254\033\000\022&\n\021nested2party_role\030\003 \001(\020B\013"
    "\235\254\033\367\002\000\000\240\254\033\003\022;\n\021nstd_ptys2sub_grp\030\004 \003(\0132\027"
    ".Common.NstdPtys2SubGrpB\007\235\254\033&\003\000\000\"\302\002\n\016Leg"
    "PreAllocGrp\022&\n\021leg_alloc_account\030\001 \001(\tB\013"
    "\235\254\033\237\002\000\000\240\254\033\017\022-\n\030leg_alloc_acct_id_source\030"
    "\002 \001(\tB\013\235\254\033\242\002\000\000\240\254\033\017\022\"\n\rleg_alloc_qty\030\003 \001("
    "\020B\013\235\254\033\241\002\000\000\240\254\033\016\022\036\n\026leg_alloc_qty_exponent"
    "\030\004 \001(\017\022,\n\027leg_individual_alloc_id\030\005 \001(\tB"
    "\013\235\254\033\240\002\000\000\240\254\033\017\0228\n\017nested_parties2\030\006 \003(\0132\026."
    "Common.NestedParties2B\007\235\254\033\364\002\000\000\022-\n\030leg_al"
    "loc_settl_currency\030\007 \001(\tB\013\235\254\033W\005\000\000\240\254\033\010\"j\n"
    "\017NstdPtys3SubGrp\022(\n\023nested3party_sub_id\030"
    "\001 \001(\tB\013\235\254\033\271\003\000\000\240\254\033\017\022-\n\030nested3party_sub_i"
    "d_type\030\002 \001(\020B\013\235\254\033\272\003\000\000\240\254\033\003\"\310\001\n\016NestedPart"
    "ies3\022$\n\017nested3party_id\030\001 \001(\tB\013\235\254\033\265\003\000\000\240\254"
    "\033\017\022+\n\026nested3party_id_source\030\002 \001(\tB\013\235\254\033\266"
    "\003\000\000\240\254\033\000\022&\n\021nested3party_role\030\003 \001(\020B\013\235\254\033\267"
    "\003\000\000\240\254\033\003\022;\n\021nstd_ptys3sub_grp\030\004 \003(\0132\027.Com"
    "mon.NstdPtys3SubGrpB\007\235\254\033\270\003\000\000\"\355\t\n\021Instrmt"
    "LegExecGrp\0223\n\016instrument_leg\030\001 \001(\0132\025.Com"
    "mon.InstrumentLegB\004\250\254\033\006\0220\n\033leg_calculate"
    "d_ccy_last_qty\030\002 \001(\020B\013\235\254\0332\004\000\000\240\254\033\016\022,\n$leg"
    "_calculated_ccy_last_qty_exponent\030\003 \001(\017\022"
    "-\n\030leg_covered_or_uncovered\030\004 \001(\020B\013\235\254\0335\002"
    "\000\000\240\254\033\003\022(\n\023leg_gross_trade_amt\030\005 \001(\020B\013\235\254\033"
    "3\004\000\000\240\254\033\006\022$\n\034leg_gross_trade_amt_exponent"
    "\030\006 \001(\017\022,\n\027leg_last_forward_points\030\007 \001(\020B"
    "\013\235\254\0331\004\000\000\240\254\033\r\022(\n leg_last_forward_points_"
    "exponent\030\010 \001(\017\022 \n\013leg_last_px\030\t \001(\020B\013\235\254\033"
    "}\002\000\000\240\254\033\014\022\034\n\024leg_last_px_exponent\030\n \001(\017\022\""
    "\n\rleg_order_qty\030\013 \001(\020B\013\235\254\033\255\002\000\000\240\254\033\016\022\036\n\026le"
    "g_order_qty_exponent\030\014 \001(\017\022(\n\023leg_positi"
    "on_effect\030\r \001(\tB\013\235\254\0334\002\000\000\240\254\033\000\022 \n\007leg_qty\030"
    "\016 \001(\020B\017\235\254\033\257\002\000\000\240\254\033\016\270\254\033\t\022\030\n\020leg_qty_expone"
    "nt\030\017 \001(\017\022\037\n\nleg_ref_id\030\020 \001(\tB\013\235\254\033\216\002\000\000\240\254\033"
    "\017\022\'\n\022leg_settl_currency\030\021 \001(\tB\013\235\254\033\243\002\000\000\240\254"
    "\033\010\022#\n\016leg_settl_date\030\022 \001(\017B\013\235\254\033L\002\000\000\240\254\033\n\022"
    "#\n\016leg_settl_type\030\023 \001(\tB\013\235\254\033K\002\000\000\240\254\033\000\022:\n\020"
    "leg_stipulations\030\024 \003(\0132\027.Common.LegStipu"
    "lationsB\007\235\254\033\253\002\000\000\022;\n\rleg_swap_type\030\025 \001(\0162"
    "\027.Common.LegSwapTypeEnumB\013\235\254\033\262\002\000\000\240\254\033\003\022!\n"
    "\014leg_alloc_id\030\026 \001(\tB\013\235\254\033V\005\000\000\240\254\033\017\022\'\n\022leg_"
    "currency_ratio\030\027 \001(\001B\013\235\254\033g\005\000\000\240\254\033\002\022\'\n\022leg"
    "_dividend_yield\030\030 \001(\020B\013\235\254\033e\005\000\000\240\254\033\024\022#\n\033le"
    "g_dividend_yield_exponent\030\031 \001(\017\022!\n\014leg_l"
    "ast_qty\030\032 \001(\020B\013\235\254\033\212\005\000\000\240\254\033\016\022\035\n\025leg_last_q"
    "ty_exponent\030\033 \001(\017\022:\n\021leg_pre_alloc_grp\030\034"
    " \003(\0132\026.Common.LegPreAllocGrpB\007\235\254\033\236\002\000\000\022#\n"
    "\016leg_volatility\030\035 \001(\001B\013\235\254\033c\005\000\000\240\254\033\002\0228\n\017ne"
    "sted_parties3\030\036 \003(\0132\026.Common.NestedParti"
    "es3B\007\235\254\033\264\003\000\000\"\357\001\n\013MiscFeesGrp\022!\n\014misc_fee"
    "_amt\030\001 \001(\020B\013\235\254\033\211\000\000\000\240\254\033\006\022\035\n\025misc_fee_amt_"
    "exponent\030\002 \001(\017\022=\n\016misc_fee_basis\030\003 \001(\0162\030"
    ".Common.MiscFeeBasisEnumB\013\235\254\033{\003\000\000\240\254\033\003\022\"\n"
    "\rmisc_fee_curr\030\004 \001(\tB\013\235\254\033\212\000\000\000\240\254\033\010\022;\n\rmis"
    "c_fee_type\030\005 \001(\0162\027.Common.MiscFeeTypeEnu"
    "mB\013\235\254\033\213\000\000\000\240\254\033\017\"D\n\rInstrmtLegGrp\0223\n\016instr"
    "ument_leg\030\001 \001(\0132\025.Common.InstrumentLegB\004"
    "\250\254\033\006\"\245\001\n\020InstrmtLegIoiGrp\0223\n\016instrument_"
    "leg\030\001 \001(\0132\025.Common.InstrumentLegB\004\250\254\033\006\022 "
    "\n\013leg_ioi_qty\030\002 \001(\tB\013\235\254\033\252\002\000\000\240\254\033\017\022:\n\020leg_"
    "stipulations\030\003 \003(\0132\027.Common.LegStipulati"
    "onsB\007\235\254\033\253\002\000\000\"i\n\nRoutingGrp\022\037\n\nrouting_id"
    "\030\001 \001(\tB\013\235\254\033\331\000\000\000\240\254\033\017\022:\n\014routing_type\030\002 \001("
    "\0162\027.Common.RoutingTypeEnumB\013\235\254\033\330\000\000\000\240\254\033\003\""
    "r\n\024InstrAttribTypeUnion\0226\n\021instr_attrib_"
    "type\030\001 \001(\0162\033.Common.InstrAttribTypeEnum\022"
    "\"\n\032instr_attrib_type_sfixed64\030\002 \001(\020\"x\n\010A"
    "ttrbGrp\022C\n\021instr_attrib_type\030\001 \001(\0162\033.Com"
    "mon.InstrAttribTypeEnumB\013\235\254\033g\003\000\000\240\254\033\003\022\'\n\022"
    "instr_attrib_value\030\002 \001(\tB\013\235\254\033h\003\000\000\240\254\033\017\"\301\001"
    "\n\023InstrumentExtension\022,\n\tattrb_grp\030\001 \003(\013"
    "2\020.Common.AttrbGrpB\007\235\254\033f\003\000\000\022<\n\rdelivery_"
    "form\030\002 \001(\0162\030.Common.DeliveryFormEnumB\013\235\254"
    "\033\234\002\000\000\240\254\033\003\022 \n\013pct_at_risk\030\003 \001(\020B\013\235\254\033e\003\000\000\240"
    "\254\033\024\022\034\n\024pct_at_risk_exponent\030\004 \001(\017\"\270\002\n\tTi"
    "ckRules\022)\n\024end_tick_price_range\030\001 \001(\020B\013\235"
    "\254\033\267\004\000\000\240\254\033\014\022%\n\035end_tick_price_range_expon"
    "ent\030\002 \001(\017\022+\n\026start_tick_price_range\030\003 \001("
    "\020B\013\235\254\033\266\004\000\000\240\254\033\014\022\'\n\037start_tick_price_range"
    "_exponent\030\004 \001(\017\022#\n\016tick_increment\030\005 \001(\020B"
    "\013\235\254\033\270\004\000\000\240\254\033\014\022\037\n\027tick_increment_exponent\030"
    "\006 \001(\017\022=\n\016tick_rule_type\030\007 \001(\0162\030.Common.T"
    "ickRuleTypeEnumB\013\235\254\033\271\004\000\000\240\254\033\003\"\204\001\n\014LotType"
    "Rules\0222\n\010lot_type\030\001 \001(\0162\023.Common.LotType"
    "EnumB\013\235\254\033E\004\000\000\240\254\033\000\022!\n\014min_lot_size\030\002 \001(\020B"
    "\013\235\254\033\317\004\000\000\240\254\033\016\022\035\n\025min_lot_size_exponent\030\003 "
    "\001(\017\"\272\002\n\013PriceLimits\022%\n\020high_limit_price\030"
    "\001 \001(\020B\013\235\254\033}\004\000\000\240\254\033\014\022!\n\031high_limit_price_e"
    "xponent\030\002 \001(\017\022$\n\017low_limit_price\030\003 \001(\020B\013"
    "\235\254\033|\004\000\000\240\254\033\014\022 \n\030low_limit_price_exponent\030"
    "\004 \001(\017\022A\n\020price_limit_type\030\005 \001(\0162\032.Common"
    ".PriceLimitTypeEnumB\013\235\254\033\032\005\000\000\240\254\033\003\022,\n\027trad"
    "ing_reference_price\030\006 \001(\020B\013\235\254\033~\004\000\000\240\254\033\014\022("
    "\n trading_reference_price_exponent\030\007 \001(\017"
    "\"\233\006\n\020BaseTradingRules\022B\n\020expiration_cycl"
    "e\030\001 \001(\0162\033.Common.ExpirationCycleEnumB\013\235\254"
    "\033;\003\000\000\240\254\033\003\022Q\n\030implied_market_indicator\030\002 "
    "\001(\0162\".Common.ImpliedMarketIndicatorEnumB"
    "\013\235\254\033x\004\000\000\240\254\033\003\0225\n\016lot_type_rules\030\003 \003(\0132\024.C"
    "ommon.LotTypeRulesB\007\235\254\033\322\004\000\000\022(\n\023max_price"
    "_variation\030\004 \001(\001B\013\235\254\033w\004\000\000\240\254\033\002\022\"\n\rmax_tra"
    "de_vol\030\005 \001(\020B\013\235\254\033t\004\000\000\240\254\033\016\022\036\n\026max_trade_v"
    "ol_exponent\030\006 \001(\017\022\"\n\rmin_trade_vol\030\007 \001(\020"
    "B\013\235\254\0332\002\000\000\240\254\033\016\022\036\n\026min_trade_vol_exponent\030"
    "\010 \001(\017\022>\n\016multileg_model\030\t \001(\0162\031.Common.M"
    "ultilegModelEnumB\013\235\254\033a\005\000\000\240\254\033\003\022K\n\025multile"
    "g_price_method\030\n \001(\0162\037.Common.MultilegPr"
    "iceMethodEnumB\013\235\254\033b\005\000\000\240\254\033\003\022/\n\014price_limi"
    "ts\030\013 \001(\0132\023.Common.PriceLimitsB\004\250\254\033\007\0226\n\np"
    "rice_type\030\014 \001(\0162\025.Common.PriceTypeEnumB\013"
    "\235\254\033\247\001\000\000\240\254\033\003\022\036\n\tround_lot\030\r \001(\020B\013\235\254\0331\002\000\000\240"
    "\254\033\016\022\032\n\022round_lot_exponent\030\016 \001(\017\022.\n\ntick_"
    "rules\030\017 \003(\0132\021.Common.TickRulesB\007\235\254\033\265\004\000\000\022"
    "%\n\020trading_currency\030\020 \001(\tB\013\235\254\033\335\004\000\000\240\254\033\010\"B"
    "\n\014OrdTypeRules\0222\n\010ord_type\030\001 \001(\0162\023.Commo"
    "n.OrdTypeEnumB\013\235\254\033(\000\000\000\240\254\033\000\"O\n\020TimeInForc"
    "eRules\022;\n\rtime_in_force\030\001 \001(\0162\027.Common.T"
    "imeInForceEnumB\013\235\254\033;\000\000\000\240\254\033\000\"5\n\rExecInstR"
    "ules\022$\n\017exec_inst_value\030\001 \001(\tB\013\235\254\033\034\005\000\000\240\254"
    "\033\000\"j\n\nMatchRules\022$\n\017match_algorithm\030\001 \001("
    "\tB\013\235\254\033v\004\000\000\240\254\033\017\0226\n\nmatch_type\030\002 \001(\0162\025.Com"
    "mon.MatchTypeEnumB\013\235\254\033>\002\000\000\240\254\033\017\"\226\001\n\023Marke"
    "tDataFeedTypes\0229\n\014md_book_type\030\001 \001(\0162\026.C"
    "ommon.MdBookTypeEnumB\013\235\254\033\375\003\000\000\240\254\033\003\022!\n\014md_"
    "feed_type\030\002 \001(\tB\013\235\254\033\376\003\000\000\240\254\033\017\022!\n\014market_d"
    "epth\030\003 \001(\020B\013\235\254\033\010\001\000\000\240\254\033\003\"\275\002\n\023TradingSessi"
    "onRules\0227\n\017exec_inst_rules\030\001 \003(\0132\025.Commo"
    "n.ExecInstRulesB\007\235\254\033\320\004\000\000\022D\n\026market_data_"
    "feed_types\030\002 \003(\0132\033.Common.MarketDataFeed"
    "TypesB\007\235\254\033u\004\000\000\0220\n\013match_rules\030\003 \003(\0132\022.Co"
    "mmon.MatchRulesB\007\235\254\033\323\004\000\000\0225\n\016ord_type_rul"
    "es\030\004 \003(\0132\024.Common.OrdTypeRulesB\007\235\254\033\325\004\000\000\022"
    ">\n\023time_in_force_rules\030\005 \003(\0132\030.Common.Ti"
    "meInForceRulesB\007\235\254\033\327\004\000\000\"\357\001\n\026TradingSessi"
    "onRulesGrp\022E\n\022trading_session_id\030\001 \001(\0162\034"
    ".Common.TradingSessionIdEnumB\013\235\254\033P\001\000\000\240\254\033"
    "\017\022@\n\025trading_session_rules\030\002 \001(\0132\033.Commo"
    "n.TradingSessionRulesB\004\250\254\033\007\022L\n\026trading_s"
    "ession_sub_id\030\003 \001(\0162\037.Common.TradingSess"
    "ionSubIdEnumB\013\235\254\033q\002\000\000\240\254\033\017\"z\n\031NestedInstr"
    "umentAttribute\022-\n\030nested_instr_attrib_ty"
    "pe\030\001 \001(\020B\013\235\254\033\272\004\000\000\240\254\033\003\022.\n\031nested_instr_at"
    "trib_value\030\002 \001(\tB\013\235\254\033\273\004\000\000\240\254\033\017\"\357\001\n\024Securi"
    "tyTradingRules\022:\n\022base_trading_rules\030\001 \001"
    "(\0132\030.Common.BaseTradingRulesB\004\250\254\033\007\022O\n\033ne"
    "sted_instrument_attribute\030\002 \003(\0132!.Common"
    ".NestedInstrumentAttributeB\007\235\254\033 \005\000\000\022J\n\031t"
    "rading_session_rules_grp\030\003 \003(\0132\036.Common."
    "TradingSessionRulesGrpB\007\235\254\033\035\005\000\000\"\205\003\n\rMatu"
    "rityRules\022,\n\027end_maturity_month_year\030\001 \001"
    "(\017B\013\235\254\033\312\004\000\000\240\254\033\005\022T\n\032maturity_month_year_f"
    "ormat\030\002 \001(\0162#.Common.MaturityMonthYearFo"
    "rmatEnumB\013\235\254\033\027\005\000\000\240\254\033\003\0222\n\035maturity_month_"
    "year_increment\030\003 \001(\020B\013\235\254\033\315\004\000\000\240\254\033\003\022e\n#mat"
    "urity_month_year_increment_units\030\004 \001(\0162+"
    ".Common.MaturityMonthYearIncrementUnitsE"
    "numB\013\235\254\033\026\005\000\000\240\254\033\003\022%\n\020maturity_rule_id\030\005 \001"
    "(\tB\013\235\254\033\306\004\000\000\240\254\033\017\022.\n\031start_maturity_month_"
    "year\030\006 \001(\017B\013\235\254\033\331\004\000\000\240\254\033\005\"\341\002\n\013StrikeRules\022"
    "(\n\023end_strike_px_range\030\001 \001(\020B\013\235\254\033\263\004\000\000\240\254\033"
    "\014\022$\n\034end_strike_px_range_exponent\030\002 \001(\017\022"
    "6\n\016maturity_rules\030\003 \003(\0132\025.Common.Maturit"
    "yRulesB\007\235\254\033\324\004\000\000\022*\n\025start_strike_px_range"
    "\030\004 \001(\020B\013\235\254\033\262\004\000\000\240\254\033\014\022&\n\036start_strike_px_r"
    "ange_exponent\030\005 \001(\017\022*\n\025strike_exercise_s"
    "tyle\030\006 \001(\020B\013\235\254\033\030\005\000\000\240\254\033\003\022%\n\020strike_increm"
    "ent\030\007 \001(\001B\013\235\254\033\264\004\000\000\240\254\033\002\022#\n\016strike_rule_id"
    "\030\010 \001(\tB\013\235\254\033\307\004\000\000\240\254\033\017\"\322\001\n\020MarketSegmentGrp"
    "\022\036\n\tmarket_id\030\001 \001(\tB\013\235\254\033\025\005\000\000\240\254\033\t\022&\n\021mark"
    "et_segment_id\030\002 \001(\tB\013\235\254\033\024\005\000\000\240\254\033\017\022B\n\026secu"
    "rity_trading_rules\030\003 \001(\0132\034.Common.Securi"
    "tyTradingRulesB\004\250\254\033\007\0222\n\014strike_rules\030\004 \003"
    "(\0132\023.Common.StrikeRulesB\007\235\254\033\261\004\000\000\"\250\002\n\025Leg"
    "BenchmarkCurveData\0221\n\034leg_benchmark_curv"
    "e_currency\030\001 \001(\tB\013\235\254\033\244\002\000\000\240\254\033\010\022-\n\030leg_ben"
    "chmark_curve_name\030\002 \001(\tB\013\235\254\033\245\002\000\000\240\254\033\017\022.\n\031"
    "leg_benchmark_curve_point\030\003 \001(\tB\013\235\254\033\246\002\000\000"
    "\240\254\033\017\022(\n\023leg_benchmark_price\030\004 \001(\020B\013\235\254\033\247\002"
    "\000\000\240\254\033\014\022$\n\034leg_benchmark_price_exponent\030\005"
    " \001(\017\022-\n\030leg_benchmark_price_type\030\006 \001(\020B\013"
    "\235\254\033\250\002\000\000\240\254\033\003\"\260\002\n\024InstrmtLegSecListGrp\0223\n\016"
    "instrument_leg\030\001 \001(\0132\025.Common.Instrument"
    "LegB\004\250\254\033\006\022E\n\030leg_benchmark_curve_data\030\002 "
    "\001(\0132\035.Common.LegBenchmarkCurveDataB\004\250\254\033\006"
    "\022#\n\016leg_settl_type\030\003 \001(\tB\013\235\254\033K\002\000\000\240\254\033\000\022:\n"
    "\020leg_stipulations\030\004 \003(\0132\027.Common.LegStip"
    "ulationsB\007\235\254\033\253\002\000\000\022;\n\rleg_swap_type\030\005 \001(\016"
    "2\027.Common.LegSwapTypeEnumB\013\235\254\033\262\002\000\000\240\254\033\003*\267"
    "\014\n\022PartySubIdTypeEnum\022(\n\035PARTY_SUB_ID_TY"
    "PE_APPLICATION\020\000\032\005\242\224#\0014\022!\n\025PARTY_SUB_ID_"
    "TYPE_BIC\020\001\032\006\242\224#\00216\0228\n,PARTY_SUB_ID_TYPE_"
    "CSDPARTICIPANT_MEMBER_CODE\020\002\032\006\242\224#\00217\022/\n#"
    "PARTY_SUB_ID_TYPE_CASH_ACCOUNT_NAME\020\003\032\006\242"
    "\224#\00223\0221\n%PARTY_SUB_ID_TYPE_CASH_ACCOUNT_"
    "NUMBER\020\004\032\006\242\224#\00215\022)\n\036PARTY_SUB_ID_TYPE_CO"
    "NTACT_NAME\020\005\032\005\242\224#\0019\022(\n\034PARTY_SUB_ID_TYPE"
    "_DEPARTMENT\020\006\032\006\242\224#\00224\022*\n\037PARTY_SUB_ID_TY"
    "PE_EMAIL_ADDRESS\020\007\032\005\242\224#\0018\022(\n\034PARTY_SUB_I"
    "D_TYPE_FAX_NUMBER\020\010\032\006\242\224#\00221\022!\n\026PARTY_SUB"
    "_ID_TYPE_FIRM\020\t\032\005\242\224#\0011\0224\n)PARTY_SUB_ID_T"
    "YPE_FULL_LEGAL_NAME_OF_FIRM\020\n\032\005\242\224#\0015\022/\n#"
    "PARTY_SUB_ID_TYPE_FUND_ACCOUNT_NAME\020\013\032\006\242"
    "\224#\00219\022+\n\037PARTY_SUB_ID_TYPE_LOCATION_DESK"
    "\020\014\032\006\242\224#\00225\022#\n\030PARTY_SUB_ID_TYPE_PERSON\020\r"
    "\032\005\242\224#\0012\022)\n\036PARTY_SUB_ID_TYPE_PHONE_NUMBE"
    "R\020\016\032\005\242\224#\0017\0223\n\'PARTY_SUB_ID_TYPE_POSITION"
    "_ACCOUNT_TYPE\020\017\032\006\242\224#\00226\022+\n PARTY_SUB_ID_"
    "TYPE_POSTAL_ADDRESS\020\020\032\005\242\224#\0016\0220\n$PARTY_SU"
    "B_ID_TYPE_REGISTERED_ADDRESS\020\021\032\006\242\224#\00218\022A"
    "\n5PARTY_SUB_ID_TYPE_REGISTERED_ADDRESS_F"
    "OR_CONFIRMATION\020\022\032\006\242\224#\00212\022/\n#PARTY_SUB_I"
    "D_TYPE_REGISTRATION_NAME\020\023\032\006\242\224#\00214\0221\n%PA"
    "RTY_SUB_ID_TYPE_REGISTRATION_NUMBER\020\024\032\006\242"
    "\224#\00211\022/\n#PARTY_SUB_ID_TYPE_REGULATORY_ST"
    "ATUS\020\025\032\006\242\224#\00213\0225\n)PARTY_SUB_ID_TYPE_SECU"
    "RITIES_ACCOUNT_NAME\020\026\032\006\242\224#\00222\0227\n+PARTY_S"
    "UB_ID_TYPE_SECURITIES_ACCOUNT_NUMBER\020\027\032\006"
    "\242\224#\00210\022#\n\030PARTY_SUB_ID_TYPE_SYSTEM\020\030\032\005\242\224"
    "#\0013\022*\n\036PARTY_SUB_ID_TYPE_TELEX_NUMBER\020\031\032"
    "\006\242\224#\00220\0220\n$PARTY_SUB_ID_TYPE_SECURITY_LO"
    "CATE_ID\020\032\032\006\242\224#\00227\0223\n\'PARTY_SUB_ID_TYPE_E"
    "LIGIBLE_COUNTERPARTY\020\033\032\006\242\224#\00229\022-\n!PARTY_"
    "SUB_ID_TYPE_EXECUTION_VENUE\020\034\032\006\242\224#\00232\022&\n"
    "\032PARTY_SUB_ID_TYPE_LOCATION\020\035\032\006\242\224#\00231\022*\n"
    "\036PARTY_SUB_ID_TYPE_MARKET_MAKER\020\036\032\006\242\224#\0022"
    "8\0221\n%PARTY_SUB_ID_TYPE_PROFESSIONAL_CLIE"
    "NT\020\037\032\006\242\224#\00230\022:\n.PARTY_SUB_ID_TYPE_CURREN"
    "CY_DELIVERY_IDENTIFIER\020 \032\006\242\224#\00233*\210\007\n\021Par"
    "tyIdSourceEnum\0225\n*PARTY_ID_SOURCE_AUSTRA"
    "LIAN_BUSINESS_NUMBER\020\000\032\005\242\224#\0019\0225\n*PARTY_I"
    "D_SOURCE_AUSTRALIAN_TAX_FILE_NUMBER\020\001\032\005\242"
    "\224#\001A\022\036\n\023PARTY_ID_SOURCE_BIC\020\002\032\005\242\224#\001B\022.\n#"
    "PARTY_ID_SOURCE_CHINESE_INVESTOR_ID\020\003\032\005\242"
    "\224#\0015\022-\n\"PARTY_ID_SOURCE_GENERAL_IDENTIFI"
    "ER\020\004\032\005\242\224#\001C\022+\n PARTY_ID_SOURCE_ISO_COUNT"
    "RY_CODE\020\005\032\005\242\224#\001E\022-\n\"PARTY_ID_SOURCE_KORE"
    "AN_INVESTOR_ID\020\006\032\005\242\224#\0011\0227\n,PARTY_ID_SOUR"
    "CE_MALAYSIAN_CENTRAL_DEPOSITORY\020\007\032\005\242\224#\0014"
    "\022&\n\033PARTY_ID_SOURCE_PROPRIETARY\020\010\032\005\242\224#\001D"
    "\0225\n*PARTY_ID_SOURCE_SETTLEMENT_ENTITY_LO"
    "CATION\020\t\032\005\242\224#\001F\0228\n-PARTY_ID_SOURCE_TAIWA"
    "NESE_FOREIGN_INVESTOR_ID\020\n\032\005\242\224#\0012\0221\n&PAR"
    "TY_ID_SOURCE_TAIWANESE_TRADING_ACCT\020\013\032\005\242"
    "\224#\0013\022B\n7PARTY_ID_SOURCE_UK_NATIONAL_INSU"
    "RANCE_OR_PENSION_NUMBER\020\014\032\005\242\224#\0016\0227\n,PART"
    "Y_ID_SOURCE_US_EMPLOYER_OR_TAX_ID_NUMBER"
    "\020\r\032\005\242\224#\0018\0224\n)PARTY_ID_SOURCE_US_SOCIAL_S"
    "ECURITY_NUMBER\020\016\032\005\242\224#\0017\022)\n\036PARTY_ID_SOUR"
    "CE_CSDPARTICIPANT\020\017\032\005\242\224#\001H\022\'\n\034PARTY_ID_S"
    "OURCE_ISITCACRONYM\020\020\032\005\242\224#\001I\022\036\n\023PARTY_ID_"
    "SOURCE_MIC\020\021\032\005\242\224#\001G*\225\034\n\rPartyRoleEnum\022&\n"
    "\033PARTY_ROLE_BROKER_OF_CREDIT\020\000\032\005\242\224#\0012\022#\n"
    "\030PARTY_ROLE_CLEARING_FIRM\020\001\032\005\242\224#\0014\022\037\n\024PA"
    "RTY_ROLE_CLIENT_ID\020\002\032\005\242\224#\0013\022+\n\037PARTY_ROL"
    "E_CONTRA_CLEARING_FIRM\020\003\032\006\242\224#\00218\022\"\n\026PART"
    "Y_ROLE_CONTRA_FIRM\020\004\032\006\242\224#\00217\0222\n&PARTY_RO"
    "LE_CORRESPONDANT_CLEARING_FIRM\020\005\032\006\242\224#\00215"
    "\022#\n\030PARTY_ROLE_ENTERING_FIRM\020\006\032\005\242\224#\0017\022$\n"
    "\031PARTY_ROLE_EXECUTING_FIRM\020\007\032\005\242\224#\0011\022\'\n\033P"
    "ARTY_ROLE_EXECUTING_SYSTEM\020\010\032\006\242\224#\00216\022\'\n\033"
    "PARTY_ROLE_EXECUTING_TRADER\020\t\032\006\242\224#\00212\022,\n"
    "!PARTY_ROLE_FUND_MANAGER_CLIENT_ID\020\n\032\005\242\224"
    "#\0019\022+\n\037PARTY_ROLE_GIVEUP_CLEARING_FIRM\020\013"
    "\032\006\242\224#\00214\022&\n\033PARTY_ROLE_INTRODUCING_FIRM\020"
    "\014\032\005\242\224#\0016\022!\n\026PARTY_ROLE_INVESTOR_ID\020\r\032\005\242\224"
    "#\0015\022\034\n\021PARTY_ROLE_LOCATE\020\016\032\005\242\224#\0018\022-\n!PAR"
    "TY_ROLE_ORDER_ORIGINATION_FIRM\020\017\032\006\242\224#\00213"
    "\022/\n#PARTY_ROLE_ORDER_ORIGINATION_TRADER\020"
    "\020\032\006\242\224#\00211\022*\n\036PARTY_ROLE_SETTLEMENT_LOCAT"
    "ION\020\021\032\006\242\224#\00210\022&\n\032PARTY_ROLE_SPONSORING_F"
    "IRM\020\022\032\006\242\224#\00219\022-\n!PARTY_ROLE_UNDERLYING_C"
    "ONTRA_FIRM\020\023\032\006\242\224#\00220\022)\n\035PARTY_ROLE_CONTR"
    "A_INVESTOR_ID\020\024\032\006\242\224#\00239\022\'\n\033PARTY_ROLE_TR"
    "ANSFER_TO_FIRM\020\025\032\006\242\224#\00240\022\034\n\020PARTY_ROLE_A"
    "GENT\020\026\032\006\242\224#\00230\022\"\n\026PARTY_ROLE_BENEFICIARY"
    "\020\027\032\006\242\224#\00232\022\034\n\020PARTY_ROLE_BUYER\020\030\032\006\242\224#\00227"
    "\022,\n PARTY_ROLE_CLEARING_ORGANIZATION\020\031\032\006"
    "\242\224#\00221\022$\n\030PARTY_ROLE_CONTRA_TRADER\020\032\032\006\242\224"
    "#\00237\022+\n\037PARTY_ROLE_CORRESPONDENT_BROKER\020"
    "\033\032\006\242\224#\00226\022:\n.PARTY_ROLE_CORRESPONDENT_CL"
    "EARING_ORGANIZATION\020\034\032\006\242\224#\00225\022 \n\024PARTY_R"
    "OLE_CUSTODIAN\020\035\032\006\242\224#\00228\022\'\n\033PARTY_ROLE_CU"
    "STOMER_ACCOUNT\020\036\032\006\242\224#\00224\022&\n\032PARTY_ROLE_E"
    "NTERING_TRADER\020\037\032\006\242\224#\00236\022\037\n\023PARTY_ROLE_E"
    "XCHANGE\020 \032\006\242\224#\00222\022\'\n\033PARTY_ROLE_INTEREST"
    "ED_PARTY\020!\032\006\242\224#\00233\022#\n\027PARTY_ROLE_INTERME"
    "DIARY\020\"\032\006\242\224#\00229\022)\n\035PARTY_ROLE_LIQUIDITY_"
    "PROVIDER\020#\032\006\242\224#\00235\022\'\n\033PARTY_ROLE_POSITIO"
    "N_ACCOUNT\020$\032\006\242\224#\00238\022&\n\032PARTY_ROLE_REGULA"
    "TORY_BODY\020%\032\006\242\224#\00234\022$\n\030PARTY_ROLE_SUB_CU"
    "STODIAN\020&\032\006\242\224#\00231\022)\n\035PARTY_ROLE_INTRODUC"
    "ING_BROKER\020\'\032\006\242\224#\00260\022&\n\032PARTY_ROLE_CONTR"
    "A_EXCHANGE\020(\032\006\242\224#\00242\022.\n\"PARTY_ROLE_CONTR"
    "A_POSITION_ACCOUNT\020)\032\006\242\224#\00241\022-\n!PARTY_RO"
    "LE_INTERNAL_CARRY_ACCOUNT\020*\032\006\242\224#\00243\022.\n\"P"
    "ARTY_ROLE_ORDER_ENTRY_OPERATOR_ID\020+\032\006\242\224#"
    "\00244\022/\n#PARTY_ROLE_SECONDARY_ACCOUNT_NUMB"
    "ER\020,\032\006\242\224#\00245\022$\n\030PARTY_ROLE_ASSET_MANAGER"
    "\020-\032\006\242\224#\00249\022\'\n\033PARTY_ROLE_CLAIMING_ACCOUN"
    "T\020.\032\006\242\224#\00248\022#\n\027PARTY_ROLE_FOREIGN_FIRM\020/"
    "\032\006\242\224#\00246\0226\n*PARTY_ROLE_LARGE_TRADER_REPO"
    "RTABLE_ACCOUNT\0200\032\006\242\224#\00252\022&\n\032PARTY_ROLE_P"
    "LEDGEE_ACCOUNT\0201\032\006\242\224#\00251\022&\n\032PARTY_ROLE_P"
    "LEDGOR_ACCOUNT\0202\032\006\242\224#\00250\022&\n\032PARTY_ROLE_S"
    "ENDER_LOCATION\0203\032\006\242\224#\00254\022!\n\025PARTY_ROLE_S"
    "ESSION_ID\0204\032\006\242\224#\00255\0222\n&PARTY_ROLE_THIRD_"
    "PARTY_ALLOCATION_FIRM\0205\032\006\242\224#\00247\022&\n\032PARTY"
    "_ROLE_TRADER_MNEMONIC\0206\032\006\242\224#\00253\022.\n\"PARTY"
    "_ROLE_ACCEPTABLE_COUNTERPARTY\0207\032\006\242\224#\00256\022"
    "$\n\030PARTY_ROLE_ENTERING_UNIT\0208\032\006\242\224#\00258\022%\n"
    "\031PARTY_ROLE_EXECUTING_UNIT\0209\032\006\242\224#\00259\0220\n$"
    "PARTY_ROLE_UNACCEPTABLE_COUNTERPARTY\020:\032\006"
    "\242\224#\00257\0224\n(PARTY_ROLE_COMPETENT_AUTHORITY"
    "_LIQUIDITY\020;\032\006\242\224#\00270\022<\n0PARTY_ROLE_COMPE"
    "TENT_AUTHORITY_TRANSACTION_VENUE\020<\032\006\242\224#\002"
    "71\022\036\n\022PARTY_ROLE_DESK_ID\020=\032\006\242\224#\00276\022&\n\032PA"
    "RTY_ROLE_EXECUTION_VENUE\020>\032\006\242\224#\00273\022/\n#PA"
    "RTY_ROLE_HOME_COMPETENT_AUTHORITY\020\?\032\006\242\224#"
    "\00269\022/\n#PARTY_ROLE_HOST_COMPETENT_AUTHORI"
    "TY\020@\032\006\242\224#\00268\022&\n\032PARTY_ROLE_INVESTMENT_FI"
    "RM\020A\032\006\242\224#\00267\022\"\n\026PARTY_ROLE_LOCATION_ID\020B"
    "\032\006\242\224#\00275\0223\n\'PARTY_ROLE_MARKET_DATA_ENTRY"
    "_ORIGINATOR\020C\032\006\242\224#\00274\022)\n\035PARTY_ROLE_MARK"
    "ET_DATA_MARKET\020D\032\006\242\224#\00277\022#\n\027PARTY_ROLE_M"
    "ARKET_MAKER\020E\032\006\242\224#\00266\0224\n(PARTY_ROLE_MULT"
    "ILATERAL_TRADING_FACILITY\020F\032\006\242\224#\00264\022\'\n\033P"
    "ARTY_ROLE_QUOTE_ORIGINATOR\020G\032\006\242\224#\00261\022\'\n\033"
    "PARTY_ROLE_REGULATED_MARKET\020H\032\006\242\224#\00265\022(\n"
    "\034PARTY_ROLE_REPORT_ORIGINATOR\020I\032\006\242\224#\00262\022"
    "-\n!PARTY_ROLE_REPORTING_INTERMEDIARY\020J\032\006"
    "\242\224#\00272\022.\n\"PARTY_ROLE_SYSTEMATIC_INTERNAL"
    "ISER\020K\032\006\242\224#\00263\022(\n\034PARTY_ROLE_ALLOCATION_"
    "ENTITY\020L\032\006\242\224#\00278\022)\n\035PARTY_ROLE_BROKER_CL"
    "EARING_ID\020M\032\006\242\224#\00281\022#\n\027PARTY_ROLE_PRIME_"
    "BROKER\020N\032\006\242\224#\00279\022$\n\030PARTY_ROLE_STEP_OUT_"
    "FIRM\020O\032\006\242\224#\00280\0226\n*PARTY_ROLE_CENTRAL_REG"
    "ISTRATION_DEPOSITORY\020P\032\006\242\224#\00282\0227\n+PARTY_"
    "ROLE_ACCEPTABLE_SETTLING_COUNTERPARTY\020Q\032"
    "\006\242\224#\00284\022\'\n\033PARTY_ROLE_CLEARING_ACCOUNT\020R"
    "\032\006\242\224#\00283\0229\n-PARTY_ROLE_UNACCEPTABLE_SETT"
    "LING_COUNTERPARTY\020S\032\006\242\224#\00285*U\n\017DisplayWh"
    "enEnum\022\037\n\024DISPLAY_WHEN_EXHAUST\020\000\032\005\242\224#\0012\022"
    "!\n\026DISPLAY_WHEN_IMMEDIATE\020\001\032\005\242\224#\0011*\236\001\n\021D"
    "isplayMethodEnum\022!\n\026DISPLAY_METHOD_INITI"
    "AL\020\000\032\005\242\224#\0011\022\035\n\022DISPLAY_METHOD_NEW\020\001\032\005\242\224#"
    "\0012\022 \n\025DISPLAY_METHOD_RANDOM\020\002\032\005\242\224#\0013\022%\n\032"
    "DISPLAY_METHOD_UNDISCLOSED\020\003\032\005\242\224#\0014*\203\002\n\024"
    "TradingSessionIdEnum\022)\n\036TRADING_SESSION_"
    "ID_AFTER_HOURS\020\000\032\005\242\224#\0016\022\'\n\034TRADING_SESSI"
    "ON_ID_AFTERNOON\020\001\032\005\242\224#\0014\022!\n\026TRADING_SESS"
    "ION_ID_DAY\020\002\032\005\242\224#\0011\022%\n\032TRADING_SESSION_I"
    "D_EVENING\020\003\032\005\242\224#\0015\022&\n\033TRADING_SESSION_ID"
    "_HALF_DAY\020\004\032\005\242\224#\0012\022%\n\032TRADING_SESSION_ID"
    "_MORNING\020\005\032\005\242\224#\0013*\203\003\n\027TradingSessionSubI"
    "dEnum\022<\n1TRADING_SESSION_SUB_ID_CLOSING_"
    "OR_CLOSING_AUCTION\020\000\032\005\242\224#\0014\022,\n!TRADING_S"
    "ESSION_SUB_ID_CONTINUOUS\020\001\032\005\242\224#\0013\0222\n\'TRA"
    "DING_SESSION_SUB_ID_INTRADAY_AUCTION\020\002\032\005"
    "\242\224#\0016\022<\n1TRADING_SESSION_SUB_ID_OPENING_"
    "OR_OPENING_AUCTION\020\003\032\005\242\224#\0012\022.\n#TRADING_S"
    "ESSION_SUB_ID_POST_TRADING\020\004\032\005\242\224#\0015\022-\n\"T"
    "RADING_SESSION_SUB_ID_PRE_TRADING\020\005\032\005\242\224#"
    "\0011\022+\n TRADING_SESSION_SUB_ID_QUIESCENT\020\006"
    "\032\005\242\224#\0017*\252\006\n\rEventTypeEnum\022\032\n\017EVENT_TYPE_"
    "CALL\020\000\032\005\242\224#\0012\022\034\n\020EVENT_TYPE_OTHER\020\001\032\006\242\224#"
    "\00299\022\031\n\016EVENT_TYPE_PUT\020\002\032\005\242\224#\0011\022\'\n\034EVENT_"
    "TYPE_SINKING_FUND_CALL\020\003\032\005\242\224#\0014\022\034\n\021EVENT"
    "_TYPE_TENDER\020\004\032\005\242\224#\0013\022 \n\025EVENT_TYPE_ACTI"
    "VATION\020\005\032\005\242\224#\0015\022#\n\030EVENT_TYPE_INACTIVIAT"
    "ION\020\006\032\005\242\224#\0016\022.\n#EVENT_TYPE_LAST_ELIGIBLE"
    "_TRADE_DATE\020\007\032\005\242\224#\0017\022/\n#EVENT_TYPE_FINAL"
    "_INVENTORY_DUE_DATE\020\010\032\006\242\224#\00216\022*\n\036EVENT_T"
    "YPE_FIRST_DELIVERY_DATE\020\t\032\006\242\224#\00213\022(\n\034EVE"
    "NT_TYPE_FIRST_INTENT_DATE\020\n\032\006\242\224#\00217\0221\n%E"
    "VENT_TYPE_INITIAL_INVENTORY_DUE_DATE\020\013\032\006"
    "\242\224#\00215\022)\n\035EVENT_TYPE_LAST_DELIVERY_DATE\020"
    "\014\032\006\242\224#\00214\022\'\n\033EVENT_TYPE_LAST_INTENT_DATE"
    "\020\r\032\006\242\224#\00218\022,\n EVENT_TYPE_POSITION_REMOVA"
    "L_DATE\020\016\032\006\242\224#\00219\022#\n\030EVENT_TYPE_SWAP_END_"
    "DATE\020\017\032\005\242\224#\0019\022*\n\036EVENT_TYPE_SWAP_NEXT_RO"
    "LL_DATE\020\020\032\006\242\224#\00212\022+\n\037EVENT_TYPE_SWAP_NEX"
    "T_START_DATE\020\021\032\006\242\224#\00211\022%\n\031EVENT_TYPE_SWA"
    "P_ROLL_DATE\020\022\032\006\242\224#\00210\022%\n\032EVENT_TYPE_SWAP"
    "_START_DATE\020\023\032\005\242\224#\0018*\232\003\n\024ComplexEventTyp"
    "eEnum\022$\n\031COMPLEX_EVENT_TYPE_CAPPED\020\000\032\005\242\224"
    "#\0011\022)\n\036COMPLEX_EVENT_TYPE_KNOCK_IN_UP\020\001\032"
    "\005\242\224#\0013\022,\n!COMPLEX_EVENT_TYPE_KNOCK_OUT_D"
    "OWN\020\002\032\005\242\224#\0016\022*\n\037COMPLEX_EVENT_TYPE_KNOCK"
    "_OUT_UP\020\003\032\005\242\224#\0015\022*\n\037COMPLEX_EVENT_TYPE_K"
    "OCK_IN_DOWN\020\004\032\005\242\224#\0014\022+\n COMPLEX_EVENT_TY"
    "PE_RESET_BARRIER\020\005\032\005\242\224#\0018\022-\n\"COMPLEX_EVE"
    "NT_TYPE_ROLLING_BARRIER\020\006\032\005\242\224#\0019\022%\n\032COMP"
    "LEX_EVENT_TYPE_TRIGGER\020\007\032\005\242\224#\0012\022(\n\035COMPL"
    "EX_EVENT_TYPE_UNDERLYING\020\010\032\005\242\224#\0017*\310\003\n#Co"
    "mplexEventPriceBoundaryMethodEnum\022K\n@COM"
    "PLEX_EVENT_PRICE_BOUNDARY_METHOD_EQUAL_T"
    "O_COMPLEX_EVENT_PRICE\020\000\032\005\242\224#\0013\022O\nDCOMPLE"
    "X_EVENT_PRICE_BOUNDARY_METHOD_GREATER_TH"
    "AN_COMPLEX_EVENT_PRICE\020\001\032\005\242\224#\0015\022[\nPCOMPL"
    "EX_EVENT_PRICE_BOUNDARY_METHOD_GREATER_T"
    "HAN_OR_EQUAL_TO_COMPLEX_EVENT_PRICE\020\002\032\005\242"
    "\224#\0014\022L\nACOMPLEX_EVENT_PRICE_BOUNDARY_MET"
    "HOD_LESS_THAN_COMPLEX_EVENT_PRICE\020\003\032\005\242\224#"
    "\0011\022X\nMCOMPLEX_EVENT_PRICE_BOUNDARY_METHO"
    "D_LESS_THAN_OR_EQUAL_TO_COMPLEX_EVENT_PR"
    "ICE\020\004\032\005\242\224#\0012*\301\001\n\035ComplexEventPriceTimeTy"
    "peEnum\0223\n(COMPLEX_EVENT_PRICE_TIME_TYPE_"
    "EXPIRATION\020\000\032\005\242\224#\0011\0222\n\'COMPLEX_EVENT_PRI"
    "CE_TIME_TYPE_IMMEDIATE\020\001\032\005\242\224#\0012\0227\n,COMPL"
    "EX_EVENT_PRICE_TIME_TYPE_SPECIFIED_DATE\020"
    "\002\032\005\242\224#\0013*j\n\031ComplexEventConditionEnum\022&\n"
    "\033COMPLEX_EVENT_CONDITION_AND\020\000\032\005\242\224#\0011\022%\n"
    "\032COMPLEX_EVENT_CONDITION_OR\020\001\032\005\242\224#\0012*g\n\r"
    "SymbolSfxEnum\0222\n&SYMBOL_SFX_EUCP_WITH_LU"
    "MP_SUM_INTEREST\020\000\032\006\242\224#\002CD\022\"\n\026SYMBOL_SFX_"
    "WHEN_ISSUED\020\001\032\006\242\224#\002WI*\377\007\n\024SecurityIdSour"
    "ceEnum\022#\n\030SECURITY_ID_SOURCE_CUSIP\020\000\032\005\242\224"
    "#\0011\022\"\n\027SECURITY_ID_SOURCE_QUIK\020\001\032\005\242\224#\0013\022"
    "#\n\030SECURITY_ID_SOURCE_SEDOL\020\002\032\005\242\224#\0012\022)\n\036"
    "SECURITY_ID_SOURCE_ISIN_NUMBER\020\003\032\005\242\224#\0014\022"
    "&\n\033SECURITY_ID_SOURCE_RIC_CODE\020\004\032\005\242\224#\0015\022"
    ".\n#SECURITY_ID_SOURCE_ISO_COUNTRY_CODE\020\005"
    "\032\005\242\224#\0017\022/\n$SECURITY_ID_SOURCE_ISO_CURREN"
    "CY_CODE\020\006\032\005\242\224#\0016\022;\n0SECURITY_ID_SOURCE_C"
    "ONSOLIDATED_TAPE_ASSOCIATION\020\007\032\005\242\224#\0019\022-\n"
    "\"SECURITY_ID_SOURCE_EXCHANGE_SYMBOL\020\010\032\005\242"
    "\224#\0018\022%\n\032SECURITY_ID_SOURCE_BELGIAN\020\t\032\005\242\224"
    "#\001F\022.\n#SECURITY_ID_SOURCE_BLOOMBERG_SYMB"
    "OL\020\n\032\005\242\224#\001A\022$\n\031SECURITY_ID_SOURCE_COMMON"
    "\020\013\032\005\242\224#\001G\022#\n\030SECURITY_ID_SOURCE_DUTCH\020\014\032"
    "\005\242\224#\001C\022%\n\032SECURITY_ID_SOURCE_SICOVAM\020\r\032\005"
    "\242\224#\001E\022%\n\032SECURITY_ID_SOURCE_VALOREN\020\016\032\005\242"
    "\224#\001D\022(\n\035SECURITY_ID_SOURCE_WERTPAPIER\020\017\032"
    "\005\242\224#\001B\022,\n!SECURITY_ID_SOURCE_CLEARING_HO"
    "USE\020\020\032\005\242\224#\001H\0225\n*SECURITY_ID_SOURCE_ISDA_"
    "FPML_SPECIFICATION\020\021\032\005\242\224#\001I\022>\n3SECURITY_"
    "ID_SOURCE_OPTION_PRICE_REPORTING_AUTHORI"
    "TY\020\022\032\005\242\224#\001J\022.\n#SECURITY_ID_SOURCE_LETTER"
    "_OF_CREDIT\020\023\032\005\242\224#\001L\022+\n SECURITY_ID_SOURC"
    "E_ISDA_FPML_URL\020\024\032\005\242\224#\001K\022=\n2SECURITY_ID_"
    "SOURCE_MARKETPLACE_ASSIGNED_IDENTIFIER\020\025"
    "\032\005\242\224#\001M*\205\003\n\013ProductEnum\022\031\n\016PRODUCT_AGENC"
    "Y\020\000\032\005\242\224#\0011\022\034\n\021PRODUCT_COMMODITY\020\001\032\005\242\224#\0012"
    "\022\034\n\021PRODUCT_CORPORATE\020\002\032\005\242\224#\0013\022\033\n\020PRODUC"
    "T_CURRENCY\020\003\032\005\242\224#\0014\022\031\n\016PRODUCT_EQUITY\020\004\032"
    "\005\242\224#\0015\022\035\n\022PRODUCT_GOVERNMENT\020\005\032\005\242\224#\0016\022\030\n"
    "\rPRODUCT_INDEX\020\006\032\005\242\224#\0017\022\027\n\014PRODUCT_LOAN\020"
    "\007\032\005\242\224#\0018\022\036\n\023PRODUCT_MONEYMARKET\020\010\032\005\242\224#\0019"
    "\022\034\n\020PRODUCT_MORTGAGE\020\t\032\006\242\224#\00210\022\035\n\021PRODUC"
    "T_MUNICIPAL\020\n\032\006\242\224#\00211\022\031\n\rPRODUCT_OTHER\020\013"
    "\032\006\242\224#\00212\022\035\n\021PRODUCT_FINANCING\020\014\032\006\242\224#\00213*"
    "\272,\n\020SecurityTypeEnum\022,\n SECURITY_TYPE_BA"
    "NKERS_ACCEPTANCE\020\000\032\006\242\224#\002BA\0220\n$SECURITY_T"
    "YPE_CERTIFICATE_OF_DEPOSIT\020\001\032\006\242\224#\002CD\022=\n0"
    "SECURITY_TYPE_COLLATERALIZED_MORTGAGE_OB"
    "LIGATION\020\002\032\007\242\224#\003CMO\022*\n\036SECURITY_TYPE_COM"
    "MERCIAL_PAPER\020\003\032\006\242\224#\002CP\022&\n\032SECURITY_TYPE"
    "_COMMON_STOCK\020\004\032\006\242\224#\002CS\022*\n\034SECURITY_TYPE"
    "_CORPORATE_BOND\020\005\032\010\242\224#\004CORP\0226\n)SECURITY_"
    "TYPE_CORPORATE_PRIVATE_PLACEMENT\020\006\032\007\242\224#\003"
    "CPP\0228\n\'SECURITY_TYPE_FOREIGN_EXCHANGE_CO"
    "NTRACT\020\007\032\013\242\224#\003FOR\270\224#\t\022!\n\024SECURITY_TYPE_F"
    "UTURE\020\010\032\007\242\224#\003FUT\0225\n(SECURITY_TYPE_MISCEL"
    "LANEOUS_PASS_THROUGH\020\t\032\007\242\224#\003MPT\0221\n$SECUR"
    "ITY_TYPE_MORTGAGE_INTEREST_ONLY\020\n\032\007\242\224#\003M"
    "IO\0222\n%SECURITY_TYPE_MORTGAGE_PRINCIPAL_O"
    "NLY\020\013\032\007\242\224#\003MPO\0225\n(SECURITY_TYPE_MORTGAGE"
    "_PRIVATE_PLACEMENT\020\014\032\007\242\224#\003MPP\022%\n\031SECURIT"
    "Y_TYPE_MUTUAL_FUND\020\r\032\006\242\224#\002MF\022,\n\036SECURITY"
    "_TYPE_NO_SECURITY_TYPE\020\016\032\010\242\224#\004NONE\022!\n\024SE"
    "CURITY_TYPE_OPTION\020\017\032\007\242\224#\003OPT\022)\n\035SECURIT"
    "Y_TYPE_PREFERRED_STOCK\020\020\032\006\242\224#\002PS\022&\n\032SECU"
    "RITY_TYPE_TIME_DEPOSIT\020\021\032\006\242\224#\002TD\0224\n\"SECU"
    "RITY_TYPE_US_TREASURY_BILL_OLD\020\022\032\014\242\224#\004US"
    "TB\270\224#\006\022\"\n\025SECURITY_TYPE_WARRANT\020\023\032\007\242\224#\003W"
    "AR\022*\n\036SECURITY_TYPE_CONVERTIBLE_BOND\020\024\032\006"
    "\242\224#\002CB\022)\n\034SECURITY_TYPE_IOETTEMORTGAGE\020\025"
    "\032\007\242\224#\003IET\022!\n\026SECURITY_TYPE_WILDCARD\020\026\032\005\242"
    "\224#\001\?\022&\n\025SECURITY_TYPE_AMENDED\020\027\032\013\242\224#\007AME"
    "NDED\0222\n%SECURITY_TYPE_ASSET_BACKED_SECUR"
    "ITIES\020\030\032\007\242\224#\003ABS\022$\n\030SECURITY_TYPE_BANK_N"
    "OTES\020\031\032\006\242\224#\002BN\022,\n\037SECURITY_TYPE_BILL_OF_"
    "EXCHANGES\020\032\032\007\242\224#\003BOX\022\'\n\030SECURITY_TYPE_BR"
    "ADY_BOND\020\033\032\t\242\224#\005BRADY\022)\n\031SECURITY_TYPE_B"
    "RIDGE_LOAN\020\034\032\n\242\224#\006BRIDGE\022$\n\030SECURITY_TYP"
    "E_CALL_LOANS\020\035\032\006\242\224#\002CL\0225\n\'SECURITY_TYPE_"
    "CERTIFICATE_OF_OBLIGATION\020\036\032\010\242\224#\004COFO\0228\n"
    "*SECURITY_TYPE_CERTIFICATE_OF_PARTICIPAT"
    "ION\020\037\032\010\242\224#\004COFP\022 \n\022SECURITY_TYPE_CORP\020 \032"
    "\010\242\224#\004CMBS\0220\n\"SECURITY_TYPE_DEBTOR_IN_POS"
    "SESSION\020!\032\010\242\224#\004DINP\022(\n\027SECURITY_TYPE_DEF"
    "AULTED\020\"\032\013\242\224#\007DEFLTED\022\'\n\033SECURITY_TYPE_D"
    "EPOSIT_NOTES\020#\032\006\242\224#\002DN\022)\n\033SECURITY_TYPE_"
    "DUAL_CURRENCY\020$\032\010\242\224#\004DUAL\022-\n SECURITY_TY"
    "PE_EXTENDED_COMM_NOTE\020%\032\007\242\224#\003XCN\0220\n#SECU"
    "RITY_TYPE_FEDERAL_AGENCY_COUPON\020&\032\007\242\224#\003F"
    "AC\0228\n*SECURITY_TYPE_FEDERAL_AGENCY_DISCO"
    "UNT_NOTE\020\'\032\010\242\224#\004FADN\0222\n&SECURITY_TYPE_GE"
    "NERAL_OBLIGATION_BONDS\020(\032\006\242\224#\002GO\022,\n\034SECU"
    "RITY_TYPE_INDEXED_LINKED\020)\032\n\242\224#\006XLINKD\022@"
    "\n2SECURITY_TYPE_INTEREST_STRIP_FROM_ANY_"
    "BOND_OR_NOTE\020*\032\010\242\224#\004TINT\022,\n\036SECURITY_TYP"
    "E_LETTER_OF_CREDIT\020+\032\010\242\224#\004LOFC\022)\n\034SECURI"
    "TY_TYPE_LIQUIDITY_NOTE\020,\032\007\242\224#\003LQN\022*\n\036SEC"
    "URITY_TYPE_MANDATORY_TENDER\020-\032\006\242\224#\002MT\022&\n"
    "\025SECURITY_TYPE_MATURED\020.\032\013\242\224#\007MATURED\022,\n"
    "\037SECURITY_TYPE_MEDIUM_TERM_NOTES\020/\032\007\242\224#\003"
    "MTN\0225\n(SECURITY_TYPE_MORTGAGE_BACKED_SEC"
    "URITIES\0200\032\007\242\224#\003MBS\022/\n!SECURITY_TYPE_MULT"
    "ILEG_INSTRUMENT\0201\032\010\242\224#\004MLEG\0222\n&SECURITY_"
    "TYPE_OTHER_ANTICIPATION_NOTES\0202\032\006\242\224#\002AN\022"
    "&\n\027SECURITY_TYPE_OVERNIGHT\0203\032\t\242\224#\005ONITE\022"
    "(\n\032SECURITY_TYPE_PLAZOS_FIJOS\0204\032\010\242\224#\004PZF"
    "J\022K\n=SECURITY_TYPE_PRINCIPAL_STRIP_FROM_"
    "ANON_CALLABLE_BOND_OR_NOTE\0205\032\010\242\224#\004TPRN\022E"
    "\n7SECURITY_TYPE_PRINCIPAL_STRIP_OF_ACALL"
    "ABLE_BOND_OR_NOTE\0206\032\010\242\224#\004TCAL\0221\n$SECURIT"
    "Y_TYPE_PRIVATE_EXPORT_FUNDING\0207\032\007\242\224#\003PEF"
    "\022)\n\035SECURITY_TYPE_PROMISSORY_NOTE\0208\032\006\242\224#"
    "\002PN\022\'\n\026SECURITY_TYPE_REPLACED\0209\032\013\242\224#\007REP"
    "LACD\022&\n\025SECURITY_TYPE_RETIRED\020:\032\013\242\224#\007RET"
    "IRED\0224\n\'SECURITY_TYPE_REVENUE_ANTICIPATI"
    "ON_NOTE\020;\032\007\242\224#\003RAN\022(\n\033SECURITY_TYPE_REVE"
    "NUE_BONDS\020<\032\007\242\224#\003REV\022\'\n\026SECURITY_TYPE_RE"
    "VOLVER\020=\032\013\242\224#\007RVLVTRM\022)\n\033SECURITY_TYPE_R"
    "EVOLVER_LOAN\020>\032\010\242\224#\004RVLV\022/\n\"SECURITY_TYP"
    "E_SHORT_TERM_LOAN_NOTE\020\?\032\007\242\224#\003STN\022/\n SEC"
    "URITY_TYPE_SPECIAL_ASSESSMENT\020@\032\t\242\224#\005SPC"
    "LA\022/\n SECURITY_TYPE_SPECIAL_OBLIGATION\020A"
    "\032\t\242\224#\005SPCLO\022(\n\031SECURITY_TYPE_SPECIAL_TAX"
    "\020B\032\t\242\224#\005SPCLT\022.\n\036SECURITY_TYPE_STRUCTURE"
    "D_NOTES\020C\032\n\242\224#\006STRUCT\0220\n!SECURITY_TYPE_S"
    "WING_LINE_FACILITY\020D\032\t\242\224#\005SWING\022*\n\034SECUR"
    "ITY_TYPE_TAX_ALLOCATION\020E\032\010\242\224#\004TAXA\0220\n#S"
    "ECURITY_TYPE_TAX_ANTICIPATION_NOTE\020F\032\007\242\224"
    "#\003TAN\0227\n)SECURITY_TYPE_TAX_EXEMPT_COMMER"
    "CIAL_PAPER\020G\032\010\242\224#\004TECP\0229\n+SECURITY_TYPE_"
    "TAX_REVENUE_ANTICIPATION_NOTE\020H\032\010\242\224#\004TRA"
    "N\022%\n\027SECURITY_TYPE_TERM_LOAN\020I\032\010\242\224#\004TERM"
    "\022*\n\035SECURITY_TYPE_TO_BE_ANNOUNCED\020J\032\007\242\224#"
    "\003TBA\022C\n5SECURITY_TYPE_TREASURY_INFLATION"
    "_PROTECTED_SECURITIES\020K\032\010\242\224#\004TIPS\022-\n\036SEC"
    "URITY_TYPE_US_TREASURY_BOND\020L\032\t\242\224#\005TBOND"
    "\0223\n\"SECURITY_TYPE_US_TREASURY_NOTE_OLD\020M"
    "\032\013\242\224#\003UST\270\224#\006\0225\n\'SECURITY_TYPE_VARIABLE_"
    "RATE_DEMAND_NOTE\020N\032\010\242\224#\004VRDN\022(\n\027SECURITY"
    "_TYPE_WITHDRAWN\020O\032\013\242\224#\007WITHDRN\0221\n#SECURI"
    "TY_TYPE_YANKEE_CORPORATE_BOND\020P\032\010\242\224#\004YAN"
    "K\022+\n\032SECURITY_TYPE_BUY_SELLBACK\020Q\032\013\242\224#\007B"
    "UYSELL\0227\n)SECURITY_TYPE_EURO_CERTIFICATE"
    "_OF_DEPOSIT\020R\032\010\242\224#\004EUCD\0221\n#SECURITY_TYPE"
    "_EURO_COMMERCIAL_PAPER\020S\032\010\242\224#\004EUCP\0221\n!SE"
    "CURITY_TYPE_EURO_CORPORATE_BOND\020T\032\n\242\224#\006E"
    "UCORP\022,\n\035SECURITY_TYPE_EURO_SOVEREIGNS\020U"
    "\032\t\242\224#\005EUSOV\0229\n(SECURITY_TYPE_EURO_SUPRAN"
    "ATIONAL_COUPONS\020V\032\013\242\224#\007EUSUPRA\022&\n\025SECURI"
    "TY_TYPE_FORWARD\020W\032\013\242\224#\007FORWARD\022(\n\031SECURI"
    "TY_TYPE_PFANDBRIEFE\020X\032\t\242\224#\005PFAND\022&\n\030SECU"
    "RITY_TYPE_REPURCHASE\020Y\032\010\242\224#\004REPO\022.\n\035SECU"
    "RITY_TYPE_SECURITIES_LOAN\020Z\032\013\242\224#\007SECLOAN"
    "\0222\n\037SECURITY_TYPE_SECURITIES_PLEDGE\020[\032\r\242"
    "\224#\tSECPLEDGE\0226\n\'SECURITY_TYPE_USD_SUPRAN"
    "ATIONAL_COUPONS\020\\\032\t\242\224#\005SUPRA\022-\n\036SECURITY"
    "_TYPE_US_TREASURY_BILL\020]\032\t\242\224#\005TBILL\022-\n\036S"
    "ECURITY_TYPE_US_TREASURY_NOTE\020^\032\t\242\224#\005TNO"
    "TE\0228\n+SECURITY_TYPE_YANKEE_CERTIFICATE_O"
    "F_DEPOSIT\020_\032\007\242\224#\003YCD\022-\n SECURITY_TYPE_OP"
    "TIONS_ON_FUTURES\020`\032\007\242\224#\003OOF\022.\n!SECURITY_"
    "TYPE_OPTIONS_ON_PHYSICAL\020a\032\007\242\224#\003OOP\022 \n\022S"
    "ECURITY_TYPE_CASH\020b\032\010\242\224#\004CASH\022+\n\036SECURIT"
    "Y_TYPE_OPTIONS_ON_COMBO\020c\032\007\242\224#\003OOC\022-\n SE"
    "CURITY_TYPE_INTEREST_RATE_SWAP\020d\032\007\242\224#\003IR"
    "S\022/\n\"SECURITY_TYPE_BANK_DEPOSITORY_NOTE\020"
    "e\032\007\242\224#\003BDN\0222\n$SECURITY_TYPE_CANADIAN_MON"
    "EY_MARKETS\020f\032\010\242\224#\004CAMM\0222\n%SECURITY_TYPE_"
    "CANADIAN_MORTGAGE_BONDS\020g\032\007\242\224#\003CMB\0225\n\'SE"
    "CURITY_TYPE_CANADIAN_PROVINCIAL_BONDS\020h\032"
    "\010\242\224#\004PROV\0222\n%SECURITY_TYPE_CANADIAN_TREA"
    "SURY_BILLS\020i\032\007\242\224#\003CTB\0222\n%SECURITY_TYPE_C"
    "ANADIAN_TREASURY_NOTES\020j\032\007\242\224#\003CAN\022.\n!SEC"
    "URITY_TYPE_CREDIT_DEFAULT_SWAP\020k\032\007\242\224#\003CD"
    "S\022\?\n0SECURITY_TYPE_EURO_CORPORATE_FLOATI"
    "NG_RATE_NOTES\020l\032\t\242\224#\005EUFRN\0222\n$SECURITY_T"
    "YPE_SECURED_LIQUIDITY_NOTE\020m\032\010\242\224#\004SLQN\0220"
    "\n\"SECURITY_TYPE_TAXABLE_MUNICIPAL_CP\020n\032\010"
    "\242\224#\004TMCP\022/\n!SECURITY_TYPE_TERM_LIQUIDITY"
    "_NOTE\020o\032\010\242\224#\004TLQN\022\'\n\033SECURITY_TYPE_TREAS"
    "URY_BILL\020p\032\006\242\224#\002TB\022;\n.SECURITY_TYPE_US_C"
    "ORPORATE_FLOATING_RATE_NOTES\020q\032\007\242\224#\003FRN\022"
    "\'\n\030SECURITY_TYPE_FX_FORWARD\020r\032\t\242\224#\005FXFWD"
    "\022%\n\025SECURITY_TYPE_FX_SPOT\020s\032\n\242\224#\006FXSPOT\022"
    "%\n\025SECURITY_TYPE_FX_SWAP\020t\032\n\242\224#\006FXSWAP\0224"
    "\n%SECURITY_TYPE_NON_DELIVERABLE_FORWARD\020"
    "u\032\t\242\224#\005FXNDF*\\\n\022SecurityStatusEnum\022!\n\026SE"
    "CURITY_STATUS_ACTIVE\020\000\032\005\242\224#\0011\022#\n\030SECURIT"
    "Y_STATUS_INACTIVE\020\001\032\005\242\224#\0012*\367\001\n\025Restructu"
    "ringTypeEnum\0221\n%RESTRUCTURING_TYPE_FULL_"
    "RESTRUCTURING\020\000\032\006\242\224#\002FR\0229\n-RESTRUCTURING"
    "_TYPE_MODIFIED_MOD_RESTRUCTURING\020\001\032\006\242\224#\002"
    "MM\0225\n)RESTRUCTURING_TYPE_MODIFIED_RESTRU"
    "CTURING\020\002\032\006\242\224#\002MR\0229\n-RESTRUCTURING_TYPE_"
    "NO_RESTRUCTURING_SPECIFIED\020\003\032\006\242\224#\002XR*w\n\r"
    "SeniorityEnum\022\034\n\020SENIORITY_SENIOR\020\000\032\006\242\224#"
    "\002SR\022$\n\030SENIORITY_SENIOR_SECURED\020\001\032\006\242\224#\002S"
    "D\022\"\n\026SENIORITY_SUBORDINATED\020\002\032\006\242\224#\002SB*\300\002"
    "\n\"StrikePriceDeterminationMethodEnum\0229\n."
    "STRIKE_PRICE_DETERMINATION_METHOD_FIXED_"
    "STRIKE\020\000\032\005\242\224#\0011\022E\n:STRIKE_PRICE_DETERMIN"
    "ATION_METHOD_STRIKE_SET_AT_EXPIRATION\020\001\032"
    "\005\242\224#\0012\022N\nCSTRIKE_PRICE_DETERMINATION_MET"
    "HOD_STRIKE_SET_TO_AVERAGE_ACROSS_LIFE\020\002\032"
    "\005\242\224#\0013\022H\n=STRIKE_PRICE_DETERMINATION_MET"
    "HOD_STRIKE_SET_TO_OPTIMAL_VALUE\020\003\032\005\242\224#\0014"
    "*\262\002\n\035StrikePriceBoundaryMethodEnum\022-\n\"ST"
    "RIKE_PRICE_BOUNDARY_METHOD_EQUAL\020\000\032\005\242\224#\001"
    "3\0224\n)STRIKE_PRICE_BOUNDARY_METHOD_GREATE"
    "R_THAN\020\001\032\005\242\224#\0015\022=\n2STRIKE_PRICE_BOUNDARY"
    "_METHOD_GREATER_THAN_OR_EQUAL\020\002\032\005\242\224#\0014\0221"
    "\n&STRIKE_PRICE_BOUNDARY_METHOD_LESS_THAN"
    "\020\003\032\005\242\224#\0011\022:\n/STRIKE_PRICE_BOUNDARY_METHO"
    "D_LESS_THAN_OR_EQUAL\020\004\032\005\242\224#\0012*\346\001\n&Underl"
    "yingPriceDeterminationMethodEnum\022>\n3UNDE"
    "RLYING_PRICE_DETERMINATION_METHOD_OPTIMA"
    "L_VALUE\020\000\032\005\242\224#\0013\0228\n-UNDERLYING_PRICE_DET"
    "ERMINATION_METHOD_REGULAR\020\001\032\005\242\224#\0011\022B\n7UN"
    "DERLYING_PRICE_DETERMINATION_METHOD_SPEC"
    "IAL_REFERENCE\020\002\032\005\242\224#\0012*\235\001\n\032ContractMulti"
    "plierUnitEnum\022(\n\035CONTRACT_MULTIPLIER_UNI"
    "T_DAYS\020\000\032\005\242\224#\0012\022)\n\036CONTRACT_MULTIPLIER_U"
    "NIT_HOURS\020\001\032\005\242\224#\0011\022*\n\037CONTRACT_MULTIPLIE"
    "R_UNIT_SHARES\020\002\032\005\242\224#\0010*\241\002\n\024FlowScheduleT"
    "ypeEnum\022=\n2FLOW_SCHEDULE_TYPE_NERC_CALEN"
    "DAR_ALL_DAYS_IN_MONTH\020\000\032\005\242\224#\0012\0223\n(FLOW_S"
    "CHEDULE_TYPE_NERC_EASTERN_OFF_PEAK\020\001\032\005\242\224"
    "#\0010\022/\n$FLOW_SCHEDULE_TYPE_NERC_EASTERN_P"
    "EAK\020\002\032\005\242\224#\0013\0223\n(FLOW_SCHEDULE_TYPE_NERC_"
    "WESTERN_OFF_PEAK\020\003\032\005\242\224#\0011\022/\n$FLOW_SCHEDU"
    "LE_TYPE_NERC_WESTERN_PEAK\020\004\032\005\242\224#\0014*\262\004\n\021U"
    "nitOfMeasureEnum\022$\n\027UNIT_OF_MEASURE_BARR"
    "ELS\020\000\032\007\242\224#\003Bbl\022/\n\"UNIT_OF_MEASURE_BILLIO"
    "N_CUBIC_FEET\020\001\032\007\242\224#\003Bcf\022#\n\027UNIT_OF_MEASU"
    "RE_BUSHELS\020\002\032\006\242\224#\002Bu\022$\n\027UNIT_OF_MEASURE_"
    "GALLONS\020\003\032\007\242\224#\003Gal\022+\n\036UNIT_OF_MEASURE_ME"
    "GAWATT_HOURS\020\004\032\007\242\224#\003MWh\022&\n\033UNIT_OF_MEASU"
    "RE_METRIC_TONS\020\005\032\005\242\224#\001t\0222\n\037UNIT_OF_MEASU"
    "RE_MILLION_BARRELS\020\006\032\r\242\224#\005MMbbl\270\224#\t\022.\n\037U"
    "NIT_OF_MEASURE_ONE_MILLION_BTU\020\007\032\t\242\224#\005MM"
    "Btu\022#\n\026UNIT_OF_MEASURE_POUNDS\020\010\032\007\242\224#\003lbs"
    "\022 \n\024UNIT_OF_MEASURE_TONS\020\t\032\006\242\224#\002tn\022*\n\033UN"
    "IT_OF_MEASURE_TROY_OUNCES\020\n\032\t\242\224#\005oz_tr\022&"
    "\n\031UNIT_OF_MEASURE_USDOLLARS\020\013\032\007\242\224#\003USD\022\'"
    "\n\032UNIT_OF_MEASURE_ALLOWANCES\020\014\032\007\242\224#\003Alw*"
    "y\n\017SettlMethodEnum\0220\n%SETTL_METHOD_CASH_"
    "SETTLEMENT_REQUIRED\020\000\032\005\242\224#\001C\0224\n)SETTL_ME"
    "THOD_PHYSICAL_SETTLEMENT_REQUIRED\020\001\032\005\242\224#"
    "\001P*~\n\021ExerciseStyleEnum\022\"\n\027EXERCISE_STYL"
    "E_AMERICAN\020\000\032\005\242\224#\0011\022!\n\026EXERCISE_STYLE_BE"
    "RMUDA\020\001\032\005\242\224#\0012\022\"\n\027EXERCISE_STYLE_EUROPEA"
    "N\020\002\032\005\242\224#\0010*}\n\021OptPayoutTypeEnum\022!\n\026OPT_P"
    "AYOUT_TYPE_BINARY\020\000\032\005\242\224#\0013\022!\n\026OPT_PAYOUT"
    "_TYPE_CAPPED\020\001\032\005\242\224#\0012\022\"\n\027OPT_PAYOUT_TYPE"
    "_VANILLA\020\002\032\005\242\224#\0011*\317\001\n\024PriceQuoteMethodEn"
    "um\022%\n\030PRICE_QUOTE_METHOD_INDEX\020\000\032\007\242\224#\003IN"
    "X\0223\n&PRICE_QUOTE_METHOD_INTEREST_RATE_IN"
    "DEX\020\001\032\007\242\224#\003INT\022(\n\033PRICE_QUOTE_METHOD_STA"
    "NDARD\020\002\032\007\242\224#\003STD\0221\n!PRICE_QUOTE_METHOD_P"
    "ERCENT_OF_PAR\020\003\032\n\242\224#\006PCTPAR*\331\002\n\023Valuatio"
    "nMethodEnum\022:\n-VALUATION_METHOD_FUTURES_"
    "STYLE_MARK_TO_MARKET\020\000\032\007\242\224#\003FUT\022N\n\?VALUA"
    "TION_METHOD_FUTURES_STYLE_WITH_AN_ATTACH"
    "ED_CASH_ADJUSTMENT\020\001\032\t\242\224#\005FUTDA\022,\n\036VALUA"
    "TION_METHOD_PREMIUM_STYLE\020\002\032\010\242\224#\004EQTY\022M\n"
    "\?VALUATION_METHOD_CDS_IN_DELIVERY_USE_RE"
    "COVERY_RATE_TO_CALCULATE\020\003\032\010\242\224#\004CDSD\0229\n,"
    "VALUATION_METHOD_CDS_STYLE_COLLATERALIZA"
    "TION\020\004\032\007\242\224#\003CDS*_\n\016ListMethodEnum\022&\n\033LIS"
    "T_METHOD_PRE_LISTED_ONLY\020\000\032\005\242\224#\0010\022%\n\032LIS"
    "T_METHOD_USER_REQUESTED\020\001\032\005\242\224#\0011*H\n\rPutO"
    "rCallEnum\022\033\n\020PUT_OR_CALL_CALL\020\000\032\005\242\224#\0011\022\032"
    "\n\017PUT_OR_CALL_PUT\020\001\032\005\242\224#\0010*\324\001\n\014TimeUnitE"
    "num\022\030\n\rTIME_UNIT_DAY\020\000\032\005\242\224#\001D\022\031\n\016TIME_UN"
    "IT_HOUR\020\001\032\005\242\224#\001H\022\035\n\020TIME_UNIT_MINUTE\020\002\032\007"
    "\242\224#\003Min\022\033\n\017TIME_UNIT_MONTH\020\003\032\006\242\224#\002Mo\022\033\n\020"
    "TIME_UNIT_SECOND\020\004\032\005\242\224#\001S\022\032\n\016TIME_UNIT_W"
    "EEK\020\005\032\006\242\224#\002Wk\022\032\n\016TIME_UNIT_YEAR\020\006\032\006\242\224#\002Y"
    "r*p\n\rCpProgramEnum\022\034\n\020CP_PROGRAM_OTHER\020\000"
    "\032\006\242\224#\00299\022 \n\025CP_PROGRAM_PROGRAM3A3\020\001\032\005\242\224#"
    "\0011\022\037\n\024CP_PROGRAM_PROGRAM42\020\002\032\005\242\224#\0012*\246\001\n\023"
    "TerminationTypeEnum\022$\n\031TERMINATION_TYPE_"
    "FLEXIBLE\020\000\032\005\242\224#\0013\022 \n\025TERMINATION_TYPE_OP"
    "EN\020\001\032\005\242\224#\0014\022%\n\032TERMINATION_TYPE_OVERNIGH"
    "T\020\002\032\005\242\224#\0011\022 \n\025TERMINATION_TYPE_TERM\020\003\032\005\242"
    "\224#\0012*\250\001\n\020DeliveryTypeEnum\022\035\n\022DELIVERY_TY"
    "PE_FREE\020\000\032\005\242\224#\0011\022(\n\035DELIVERY_TYPE_HOLD_I"
    "N_CUSTODY\020\001\032\005\242\224#\0013\022\"\n\027DELIVERY_TYPE_TRI_"
    "PARTY\020\002\032\005\242\224#\0012\022\'\n\034DELIVERY_TYPE_VERSUS_P"
    "AYMENT\020\003\032\005\242\224#\0010*\250\001\n\034UnderlyingSettlement"
    "TypeEnum\022,\n!UNDERLYING_SETTLEMENT_TYPE_T"
    "PLUS1\020\000\032\005\242\224#\0012\022,\n!UNDERLYING_SETTLEMENT_"
    "TYPE_TPLUS3\020\001\032\005\242\224#\0014\022,\n!UNDERLYING_SETTL"
    "EMENT_TYPE_TPLUS4\020\002\032\005\242\224#\0015*l\n\026Underlying"
    "CashTypeEnum\022\'\n\031UNDERLYING_CASH_TYPE_DIF"
    "F\020\000\032\010\242\224#\004DIFF\022)\n\032UNDERLYING_CASH_TYPE_FI"
    "XED\020\001\032\t\242\224#\005FIXED*r\n\030UnderlyingFxRateCalc"
    "Enum\022)\n\036UNDERLYING_FX_RATE_CALC_DIVIDE\020\000"
    "\032\005\242\224#\001D\022+\n UNDERLYING_FX_RATE_CALC_MULTI"
    "PLY\020\001\032\005\242\224#\001M*\211#\n\023StipulationTypeEnum\0227\n*"
    "STIPULATION_TYPE_ABSOLUTE_PREPAYMENT_SPE"
    "ED\020\000\032\007\242\224#\003ABS\0229\n,STIPULATION_TYPE_CONSTA"
    "NT_PREPAYMENT_PENALTY\020\001\032\007\242\224#\003CPP\0226\n)STIP"
    "ULATION_TYPE_CONSTANT_PREPAYMENT_RATE\020\002\032"
    "\007\242\224#\003CPR\0227\n*STIPULATION_TYPE_CONSTANT_PR"
    "EPAYMENT_YIELD\020\003\032\007\242\224#\003CPY\022G\n:STIPULATION"
    "_TYPE_FINAL_CP_ROF_HOME_EQUITY_PREPAYMEN"
    "T_CURVE\020\004\032\007\242\224#\003HEP\022*\n\034STIPULATION_TYPE_G"
    "EOGRAPHICS\020\005\032\010\242\224#\004GEOG\022*\n\033STIPULATION_TY"
    "PE_ISSUE_DATE\020\006\032\t\242\224#\005ISSUE\022-\n\035STIPULATIO"
    "N_TYPE_LOT_VARIANCE\020\007\032\n\242\224#\006LOTVAR\0225\n(STI"
    "PULATION_TYPE_MATURITY_YEAR_AND_MONTH\020\010\032"
    "\007\242\224#\003MAT\0225\n(STIPULATION_TYPE_MONTHLY_PRE"
    "PAYMENT_RATE\020\t\032\007\242\224#\003MPR\0221\n!STIPULATION_T"
    "YPE_NUMBER_OF_PIECES\020\n\032\n\242\224#\006PIECES\022<\n/ST"
    "IPULATION_TYPE_PERCENT_OF_BMAPREPAYMENT_"
    "CURVE\020\013\032\007\242\224#\003PSA\022N\nASTIPULATION_TYPE_PER"
    "CENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_"
    "CURVE\020\014\032\007\242\224#\003MHP\022D\n7STIPULATION_TYPE_PER"
    "CENT_OF_PROSPECTUS_PREPAYMENT_CURVE\020\r\032\007\242"
    "\224#\003PPC\022,\n\036STIPULATION_TYPE_POOLS_MAXIMUM"
    "\020\016\032\010\242\224#\004PMAX\022+\n\036STIPULATION_TYPE_POOLS_P"
    "ER_LOT\020\017\032\007\242\224#\003PPL\022/\n\"STIPULATION_TYPE_PO"
    "OLS_PER_MILLION\020\020\032\007\242\224#\003PPM\022-\n STIPULATIO"
    "N_TYPE_POOLS_PER_TRADE\020\021\032\007\242\224#\003PPT\022.\n STI"
    "PULATION_TYPE_PRODUCTION_YEAR\020\022\032\010\242\224#\004PRO"
    "D\0226\n)STIPULATION_TYPE_SINGLE_MONTHLY_MOR"
    "TALITY\020\023\032\007\242\224#\003SMM\022/\n\037STIPULATION_TYPE_TR"
    "ADE_VARIANCE\020\024\032\n\242\224#\006TRDVAR\0225\n(STIPULATIO"
    "N_TYPE_WEIGHTED_AVERAGE_COUPON\020\025\032\007\242\224#\003WA"
    "C\022:\n-STIPULATION_TYPE_WEIGHTED_AVERAGE_L"
    "IFE_COUPON\020\026\032\007\242\224#\003WAL\0228\n*STIPULATION_TYP"
    "E_WEIGHTED_AVERAGE_LOAN_AGE\020\027\032\010\242\224#\004WALA\022"
    "7\n*STIPULATION_TYPE_WEIGHTED_AVERAGE_MAT"
    "URITY\020\030\032\007\242\224#\003WAM\0225\n(STIPULATION_TYPE_ALT"
    "ERNATIVE_MINIMUM_TAX\020\031\032\007\242\224#\003AMT\0225\n\"STIPU"
    "LATION_TYPE_AUTO_REINVESTMENT\020\032\032\r\242\224#\tAUT"
    "OREINV\0221\n\037STIPULATION_TYPE_BANK_QUALIFIE"
    "D\020\033\032\014\242\224#\010BANKQUAL\0223\n#STIPULATION_TYPE_BA"
    "RGAIN_CONDITIONS\020\034\032\n\242\224#\006BGNCON\0229\n\'STIPUL"
    "ATION_TYPE_BENCHMARK_PRICE_SOURCE\020\035\032\014\242\224#"
    "\010PXSOURCE\0221\n STIPULATION_TYPE_CALL_PROTE"
    "CTION\020\036\032\013\242\224#\007PROTECT\022-\n\035STIPULATION_TYPE"
    "_COUPON_RANGE\020\037\032\n\242\224#\006COUPON\0221\n\035STIPULATI"
    "ON_TYPE_CUSTOM_START\020 \032\016\242\224#\nCUSTOMDATE\0225"
    "\n(STIPULATION_TYPE_EXPLICIT_LOT_IDENTIFI"
    "ER\020!\032\007\242\224#\003LOT\022,\n\036STIPULATION_TYPE_FREEFO"
    "RM_TEXT\020\"\032\010\242\224#\004TEXT\0224\n\"STIPULATION_TYPE_"
    "ISO_CURRENCY_CODE\020#\032\014\242\224#\010CURRENCY\022)\n\030STI"
    "PULATION_TYPE_INSURED\020$\032\013\242\224#\007INSURED\0224\n!"
    "STIPULATION_TYPE_ISSUE_SIZE_RANGE\020%\032\r\242\224#"
    "\tISSUESIZE\022\'\n\027STIPULATION_TYPE_ISSUER\020&\032"
    "\n\242\224#\006ISSUER\0220\n\036STIPULATION_TYPE_LOOKBACK"
    "_DAYS\020\'\032\014\242\224#\010LOOKBACK\022.\n\036STIPULATION_TYP"
    "E_MARKET_SECTOR\020(\032\n\242\224#\006SECTOR\0221\n\037STIPULA"
    "TION_TYPE_MATURITY_RANGE\020)\032\014\242\224#\010MATURITY"
    "\0227\n&STIPULATION_TYPE_MAXIMUM_SUBSTITUTIO"
    "NS\020*\032\013\242\224#\007MAXSUBS\0226\n%STIPULATION_TYPE_MI"
    "NIMUM_DENOMINATION\020+\032\013\242\224#\007MINDNOM\0223\n\"STI"
    "PULATION_TYPE_MINIMUM_INCREMENT\020,\032\013\242\224#\007M"
    "ININCR\0221\n!STIPULATION_TYPE_MINIMUM_QUANT"
    "ITY\020-\032\n\242\224#\006MINQTY\0223\n\"STIPULATION_TYPE_PA"
    "YMENT_FREQUENCY\020.\032\013\242\224#\007PAYFREQ\022+\n\034STIPUL"
    "ATION_TYPE_PRICE_RANGE\020/\032\t\242\224#\005PRICE\0225\n\"S"
    "TIPULATION_TYPE_PRICING_FREQUENCY\0200\032\r\242\224#"
    "\tPRICEFREQ\022)\n\030STIPULATION_TYPE_PURPOSE\0201"
    "\032\013\242\224#\007PURPOSE\0228\n(STIPULATION_TYPE_RATING"
    "_SOURCE_AND_RANGE\0202\032\n\242\224#\006RATING\022/\n\033STIPU"
    "LATION_TYPE_RESTRICTED\0203\032\016\242\224#\nRESTRICTED"
    "\022D\n3STIPULATION_TYPE_SECURITY_TYPE_INCLU"
    "DED_OR_EXCLUDED\0204\032\013\242\224#\007SECTYPE\022*\n\032STIPUL"
    "ATION_TYPE_STRUCTURE\0205\032\n\242\224#\006STRUCT\022:\n(ST"
    "IPULATION_TYPE_SUBSTITUTIONS_FREQUENCY\0206"
    "\032\014\242\224#\010SUBSFREQ\0225\n#STIPULATION_TYPE_SUBST"
    "ITUTIONS_LEFT\0207\032\014\242\224#\010SUBSLEFT\0227\n#STIPULA"
    "TION_TYPE_TYPE_OF_REDEMPTION\0208\032\016\242\224#\nREDE"
    "MPTION\0224\n#STIPULATION_TYPE_VALUATION_DIS"
    "COUNT\0209\032\013\242\224#\007HAIRCUT\022*\n\033STIPULATION_TYPE"
    "_WHOLE_POOL\020:\032\t\242\224#\005WHOLE\022+\n\034STIPULATION_"
    "TYPE_YIELD_RANGE\020;\032\t\242\224#\005YIELD\022U\nCSTIPULA"
    "TION_TYPE_AVAILABLE_OFFER_QUANTITY_TO_BE"
    "_SHOWN_TO_THE_STREET\020<\032\014\242\224#\010AVAILQTY\0222\n\""
    "STIPULATION_TYPE_AVERAGE_FICOSCORE\020=\032\n\242\224"
    "#\006AVFICO\0222\n\"STIPULATION_TYPE_AVERAGE_LOA"
    "N_SIZE\020>\032\n\242\224#\006AVSIZE\0224\n\036STIPULATION_TYPE"
    "_BROKER_CREDIT\020\?\032\020\242\224#\014BROKERCREDIT\022E\n-ST"
    "IPULATION_TYPE_BROKER_SALES_CREDIT_OVERR"
    "IDE\020@\032\022\242\224#\016SALESCREDITOVR\0220\n\036STIPULATION"
    "_TYPE_DISCOUNT_RATE\020A\032\014\242\224#\010DISCOUNT\022E\n5S"
    "TIPULATION_TYPE_INTEREST_OF_ROLLING_OR_C"
    "LOSING_TRADE\020B\032\n\242\224#\006REFINT\0225\n%STIPULATIO"
    "N_TYPE_MAXIMUM_LOAN_BALANCE\020C\032\n\242\224#\006MAXBA"
    "L\0226\n#STIPULATION_TYPE_MAXIMUM_ORDER_SIZE"
    "\020D\032\r\242\224#\tMAXORDQTY\022P\n<STIPULATION_TYPE_OF"
    "FER_PRICE_TO_BE_SHOWN_TO_INTERNAL_BROKER"
    "S\020E\032\016\242\224#\nINTERNALPX\022T\n\?STIPULATION_TYPE_"
    "OFFER_QUANTITY_TO_BE_SHOWN_TO_INTERNAL_B"
    "ROKERS\020F\032\017\242\224#\013INTERNALQTY\022;\n)STIPULATION"
    "_TYPE_ORDER_QUANTITY_INCREMENT\020G\032\014\242\224#\010OR"
    "DRINCR\022.\n STIPULATION_TYPE_POOL_IDENTIFI"
    "ER\020H\032\010\242\224#\004POOL\022G\n6STIPULATION_TYPE_PRIMA"
    "RY_OR_SECONDARY_MARKET_INDICATOR\020I\032\013\242\224#\007"
    "PRIMARY\022G\n6STIPULATION_TYPE_PRINCIPAL_OF"
    "_ROLLING_OR_CLOSING_TRADE\020J\032\013\242\224#\007REFPRIN"
    "\022H\n6STIPULATION_TYPE_REFERENCE_TO_ROLLIN"
    "G_OR_CLOSING_TRADE\020K\032\014\242\224#\010REFTRADE\022F\n4ST"
    "IPULATION_TYPE_THE_MINIMUM_RESIDUAL_OFFE"
    "R_QUANTITY\020L\032\014\242\224#\010LEAVEQTY\0224\n\036STIPULATIO"
    "N_TYPE_TRADER_CREDIT\020M\032\020\242\224#\014TRADERCREDIT"
    "\0225\n#STIPULATION_TYPE_TYPE_OF_ROLL_TRADE\020"
    "N\032\014\242\224#\010ROLLTYPE\022/\n\"STIPULATION_TYPE_YIEL"
    "D_TO_MATURITY\020O\032\007\242\224#\003YTM*\231\001\n\025RoundingDir"
    "ectionEnum\022(\n\035ROUNDING_DIRECTION_ROUND_D"
    "OWN\020\000\032\005\242\224#\0011\022.\n#ROUNDING_DIRECTION_ROUND"
    "_TO_NEAREST\020\001\032\005\242\224#\0010\022&\n\033ROUNDING_DIRECTI"
    "ON_ROUND_UP\020\002\032\005\242\224#\0012*\275\001\n\017TriggerTypeEnum"
    "\022$\n\031TRIGGER_TYPE_NEXT_AUCTION\020\000\032\005\242\224#\0013\022)"
    "\n\036TRIGGER_TYPE_PARTIAL_EXECUTION\020\001\032\005\242\224#\001"
    "1\022&\n\033TRIGGER_TYPE_PRICE_MOVEMENT\020\002\032\005\242\224#\001"
    "4\0221\n&TRIGGER_TYPE_SPECIFIED_TRADING_SESS"
    "ION\020\003\032\005\242\224#\0012*{\n\021TriggerActionEnum\022\"\n\027TRI"
    "GGER_ACTION_ACTIVATE\020\000\032\005\242\224#\0011\022 \n\025TRIGGER"
    "_ACTION_CANCEL\020\001\032\005\242\224#\0013\022 \n\025TRIGGER_ACTIO"
    "N_MODIFY\020\002\032\005\242\224#\0012*\250\002\n\024TriggerPriceTypeEn"
    "um\022&\n\033TRIGGER_PRICE_TYPE_BEST_BID\020\000\032\005\242\224#"
    "\0013\0224\n)TRIGGER_PRICE_TYPE_BEST_BID_OR_LAS"
    "T_TRADE\020\001\032\005\242\224#\0014\022&\n\033TRIGGER_PRICE_TYPE_B"
    "EST_MID\020\002\032\005\242\224#\0016\022(\n\035TRIGGER_PRICE_TYPE_B"
    "EST_OFFER\020\003\032\005\242\224#\0011\0226\n+TRIGGER_PRICE_TYPE"
    "_BEST_OFFER_OR_LAST_TRADE\020\004\032\005\242\224#\0015\022(\n\035TR"
    "IGGER_PRICE_TYPE_LAST_TRADE\020\005\032\005\242\224#\0012*\312\001\n"
    "\031TriggerPriceTypeScopeEnum\022*\n\037TRIGGER_PR"
    "ICE_TYPE_SCOPE_GLOBAL\020\000\032\005\242\224#\0013\022)\n\036TRIGGE"
    "R_PRICE_TYPE_SCOPE_LOCAL\020\001\032\005\242\224#\0011\022,\n!TRI"
    "GGER_PRICE_TYPE_SCOPE_NATIONAL\020\002\032\005\242\224#\0012\022"
    "(\n\035TRIGGER_PRICE_TYPE_SCOPE_NONE\020\003\032\005\242\224#\001"
    "0*k\n\031TriggerPriceDirectionEnum\022\'\n\034TRIGGE"
    "R_PRICE_DIRECTION_DOWN\020\000\032\005\242\224#\001D\022%\n\032TRIGG"
    "ER_PRICE_DIRECTION_UP\020\001\032\005\242\224#\001U*a\n\024Trigge"
    "rOrderTypeEnum\022#\n\030TRIGGER_ORDER_TYPE_LIM"
    "IT\020\000\032\005\242\224#\0012\022$\n\031TRIGGER_ORDER_TYPE_MARKET"
    "\020\001\032\005\242\224#\0011*\302\004\n\026BenchmarkCurveNameEnum\022-\n\034"
    "BENCHMARK_CURVE_NAME_EURIBOR\020\000\032\013\242\224#\007Euri"
    "bor\0224\n BENCHMARK_CURVE_NAME_FUTURE_SWAP\020"
    "\001\032\016\242\224#\nFutureSWAP\022)\n\032BENCHMARK_CURVE_NAM"
    "E_LIBID\020\002\032\t\242\224#\005LIBID\022)\n\032BENCHMARK_CURVE_"
    "NAME_LIBOR\020\003\032\t\242\224#\005LIBOR\022.\n\035BENCHMARK_CUR"
    "VE_NAME_MUNI_AAA\020\004\032\013\242\224#\007MuniAAA\022)\n\032BENCH"
    "MARK_CURVE_NAME_OTHER\020\005\032\t\242\224#\005OTHER\0225\n BE"
    "NCHMARK_CURVE_NAME_PFANDBRIEFE\020\006\032\017\242\224#\013Pf"
    "andbriefe\022\'\n\031BENCHMARK_CURVE_NAME_SWAP\020\007"
    "\032\010\242\224#\004SWAP\022/\n\035BENCHMARK_CURVE_NAME_TREAS"
    "URY\020\010\032\014\242\224#\010Treasury\022)\n\032BENCHMARK_CURVE_N"
    "AME_EONIA\020\t\032\t\242\224#\005EONIA\022+\n\033BENCHMARK_CURV"
    "E_NAME_EUREPO\020\n\032\n\242\224#\006EUREPO\022)\n\032BENCHMARK"
    "_CURVE_NAME_SONIA\020\013\032\t\242\224#\005SONIA*\275\r\n\rYield"
    "TypeEnum\022,\n\032YIELD_TYPE_AFTER_TAX_YIELD\020\000"
    "\032\014\242\224#\010AFTERTAX\022\'\n\027YIELD_TYPE_ANNUAL_YIEL"
    "D\020\001\032\n\242\224#\006ANNUAL\022#\n\025YIELD_TYPE_BOOK_YIELD"
    "\020\002\032\010\242\224#\004BOOK\022\'\n\030YIELD_TYPE_CLOSING_YIELD"
    "\020\003\032\t\242\224#\005CLOSE\022=\n*YIELD_TYPE_CLOSING_YIEL"
    "D_MOST_RECENT_MONTH\020\004\032\r\242\224#\tLASTMONTH\022A\n,"
    "YIELD_TYPE_CLOSING_YIELD_MOST_RECENT_QUA"
    "RTER\020\005\032\017\242\224#\013LASTQUARTER\022;\n)YIELD_TYPE_CL"
    "OSING_YIELD_MOST_RECENT_YEAR\020\006\032\014\242\224#\010LAST"
    "YEAR\022+\n\031YIELD_TYPE_COMPOUND_YIELD\020\007\032\014\242\224#"
    "\010COMPOUND\022)\n\030YIELD_TYPE_CURRENT_YIELD\020\010\032"
    "\013\242\224#\007CURRENT\0223\n YIELD_TYPE_GVNT_EQUIVALE"
    "NT_YIELD\020\t\032\r\242\224#\tGOVTEQUIV\022=\n%YIELD_TYPE_"
    "INVERSE_FLOATER_BOND_YIELD\020\n\032\022\242\224#\016INVERS"
    "EFLOATER\022-\n\037YIELD_TYPE_MARK_TO_MARKET_YI"
    "ELD\020\013\032\010\242\224#\004MARK\0227\n$YIELD_TYPE_MOST_RECEN"
    "T_CLOSING_YIELD\020\014\032\r\242\224#\tLASTCLOSE\022.\n\035YIEL"
    "D_TYPE_OPEN_AVERAGE_YIELD\020\r\032\013\242\224#\007OPENAVG"
    "\0222\n\037YIELD_TYPE_PREVIOUS_CLOSE_YIELD\020\016\032\r\242"
    "\224#\tPREVCLOSE\022+\n\031YIELD_TYPE_PROCEEDS_YIEL"
    "D\020\017\032\014\242\224#\010PROCEEDS\0220\n\034YIELD_TYPE_SEMI_ANN"
    "UAL_YIELD\020\020\032\016\242\224#\nSEMIANNUAL\022\'\n\027YIELD_TYP"
    "E_SIMPLE_YIELD\020\021\032\n\242\224#\006SIMPLE\0221\n\037YIELD_TY"
    "PE_TAX_EQUIVALENT_YIELD\020\022\032\014\242\224#\010TAXEQUIV\022"
    "*\n\033YIELD_TYPE_TRUE_GROSS_YIELD\020\023\032\t\242\224#\005GR"
    "OSS\022#\n\025YIELD_TYPE_TRUE_YIELD\020\024\032\010\242\224#\004TRUE"
    "\022*\n\031YIELD_TYPE_YIELD_AT_ISSUE\020\025\032\013\242\224#\007ATI"
    "SSUE\0223\n#YIELD_TYPE_YIELD_CHANGE_SINCE_CL"
    "OSE\020\026\032\n\242\224#\006CHANGE\0229\n$YIELD_TYPE_YIELD_TO"
    "_AVERAGE_MATURITY\020\027\032\017\242\224#\013AVGMATURITY\022=\n("
    "YIELD_TYPE_YIELD_TO_LONGEST_AVERAGE_LIFE"
    "\020\030\032\017\242\224#\013LONGAVGLIFE\022.\n\034YIELD_TYPE_YIELD_"
    "TO_MATURITY\020\031\032\014\242\224#\010MATURITY\022+\n\035YIELD_TYP"
    "E_YIELD_TO_NEXT_CALL\020\032\032\010\242\224#\004CALL\022)\n\034YIEL"
    "D_TYPE_YIELD_TO_NEXT_PUT\020\033\032\007\242\224#\003PUT\0223\n\037Y"
    "IELD_TYPE_YIELD_TO_NEXT_REFUND\020\034\032\016\242\224#\nNE"
    "XTREFUND\022\?\n)YIELD_TYPE_YIELD_TO_SHORTEST"
    "_AVERAGE_LIFE\020\035\032\020\242\224#\014SHORTAVGLIFE\022/\n\037YIE"
    "LD_TYPE_YIELD_TO_TENDER_DATE\020\036\032\n\242\224#\006TEND"
    "ER\022(\n\031YIELD_TYPE_YIELD_TO_WORST\020\037\032\t\242\224#\005W"
    "ORST\022=\n*YIELD_TYPE_YIELD_WITH_INFLATION_"
    "ASSUMPTION\020 \032\r\242\224#\tINFLATION\0221\n\036YIELD_TYP"
    "E_YIELD_VALUE_OF32NDS\020!\032\r\242\224#\tVALUE1_32*\211"
    "\002\n\014CommTypeEnum\022\035\n\022COMM_TYPE_ABSOLUTE\020\000\032"
    "\005\242\224#\0013\022\035\n\022COMM_TYPE_PER_UNIT\020\001\032\005\242\224#\0011\022\034\n"
    "\021COMM_TYPE_PERCENT\020\002\032\005\242\224#\0012\0224\n)COMM_TYPE"
    "_PERCENTAGE_WAIVED_CASH_DISCOUNT\020\003\032\005\242\224#\001"
    "4\0225\n*COMM_TYPE_PERCENTAGE_WAIVED_ENHANCE"
    "D_UNITS\020\004\032\005\242\224#\0015\0220\n%COMM_TYPE_POINTS_PER"
    "_BOND_OR_CONTRACT\020\005\032\005\242\224#\0016*R\n\021FundRenewW"
    "aivEnum\022\035\n\022FUND_RENEW_WAIV_NO\020\000\032\005\242\224#\001N\022\036"
    "\n\023FUND_RENEW_WAIV_YES\020\001\032\005\242\224#\001Y*\325\002\n\020PegPr"
    "iceTypeEnum\022\"\n\027PEG_PRICE_TYPE_LAST_PEG\020\000"
    "\032\005\242\224#\0011\022$\n\031PEG_PRICE_TYPE_MARKET_PEG\020\001\032\005"
    "\242\224#\0014\022\'\n\034PEG_PRICE_TYPE_MID_PRICE_PEG\020\002\032"
    "\005\242\224#\0012\022%\n\032PEG_PRICE_TYPE_OPENING_PEG\020\003\032\005"
    "\242\224#\0013\022,\n!PEG_PRICE_TYPE_PEG_TO_LIMIT_PRI"
    "CE\020\004\032\005\242\224#\0019\022%\n\032PEG_PRICE_TYPE_PEG_TO_VWA"
    "P\020\005\032\005\242\224#\0017\022%\n\032PEG_PRICE_TYPE_PRIMARY_PEG"
    "\020\006\032\005\242\224#\0015\022+\n PEG_PRICE_TYPE_TRAILING_STO"
    "P_PEG\020\007\032\005\242\224#\0018*T\n\017PegMoveTypeEnum\022\036\n\023PEG"
    "_MOVE_TYPE_FIXED\020\000\032\005\242\224#\0011\022!\n\026PEG_MOVE_TY"
    "PE_FLOATING\020\001\032\005\242\224#\0010*\247\001\n\021PegOffsetTypeEn"
    "um\022\'\n\034PEG_OFFSET_TYPE_BASIS_POINTS\020\000\032\005\242\224"
    "#\0011\022 \n\025PEG_OFFSET_TYPE_PRICE\020\001\032\005\242\224#\0010\022%\n"
    "\032PEG_OFFSET_TYPE_PRICE_TIER\020\002\032\005\242\224#\0013\022 \n\025"
    "PEG_OFFSET_TYPE_TICKS\020\003\032\005\242\224#\0012*}\n\020PegLim"
    "itTypeEnum\022#\n\030PEG_LIMIT_TYPE_OR_BETTER\020\000"
    "\032\005\242\224#\0010\022\"\n\027PEG_LIMIT_TYPE_OR_WORSE\020\001\032\005\242\224"
    "#\0012\022 \n\025PEG_LIMIT_TYPE_STRICT\020\002\032\005\242\224#\0011*t\n"
    "\025PegRoundDirectionEnum\022.\n#PEG_ROUND_DIRE"
    "CTION_MORE_AGGRESSIVE\020\000\032\005\242\224#\0011\022+\n PEG_RO"
    "UND_DIRECTION_MORE_PASSIVE\020\001\032\005\242\224#\0012*\225\001\n\014"
    "PegScopeEnum\022\033\n\020PEG_SCOPE_GLOBAL\020\000\032\005\242\224#\001"
    "3\022\032\n\017PEG_SCOPE_LOCAL\020\001\032\005\242\224#\0011\022\035\n\022PEG_SCO"
    "PE_NATIONAL\020\002\032\005\242\224#\0012\022-\n\"PEG_SCOPE_NATION"
    "AL_EXCLUDING_LOCAL\020\003\032\005\242\224#\0014*\275\003\n\022Discreti"
    "onInstEnum\0225\n*DISCRETION_INST_RELATED_TO"
    "_DISPLAYED_PRICE\020\000\032\005\242\224#\0010\0226\n+DISCRETION_"
    "INST_RELATED_TO_LAST_TRADE_PRICE\020\001\032\005\242\224#\001"
    "5\0229\n.DISCRETION_INST_RELATED_TO_LOCAL_PR"
    "IMARY_PRICE\020\002\032\005\242\224#\0013\0222\n\'DISCRETION_INST_"
    "RELATED_TO_MARKET_PRICE\020\003\032\005\242\224#\0011\0224\n)DISC"
    "RETION_INST_RELATED_TO_MIDPOINT_PRICE\020\004\032"
    "\005\242\224#\0014\0223\n(DISCRETION_INST_RELATED_TO_PRI"
    "MARY_PRICE\020\005\032\005\242\224#\0012\022*\n\037DISCRETION_INST_R"
    "ELATED_TO_VWAP\020\006\032\005\242\224#\0016\0222\n\'DISCRETION_IN"
    "ST_AVERAGE_PRICE_GUARANTEE\020\007\032\005\242\224#\0017*i\n\026D"
    "iscretionMoveTypeEnum\022%\n\032DISCRETION_MOVE"
    "_TYPE_FIXED\020\000\032\005\242\224#\0011\022(\n\035DISCRETION_MOVE_"
    "TYPE_FLOATING\020\001\032\005\242\224#\0010*\312\001\n\030DiscretionOff"
    "setTypeEnum\022.\n#DISCRETION_OFFSET_TYPE_BA"
    "SIS_POINTS\020\000\032\005\242\224#\0011\022\'\n\034DISCRETION_OFFSET"
    "_TYPE_PRICE\020\001\032\005\242\224#\0010\022,\n!DISCRETION_OFFSE"
    "T_TYPE_PRICE_TIER\020\002\032\005\242\224#\0013\022\'\n\034DISCRETION"
    "_OFFSET_TYPE_TICKS\020\003\032\005\242\224#\0012*\231\001\n\027Discreti"
    "onLimitTypeEnum\022*\n\037DISCRETION_LIMIT_TYPE"
    "_OR_BETTER\020\000\032\005\242\224#\0010\022)\n\036DISCRETION_LIMIT_"
    "TYPE_OR_WORSE\020\001\032\005\242\224#\0012\022\'\n\034DISCRETION_LIM"
    "IT_TYPE_STRICT\020\002\032\005\242\224#\0011*\211\001\n\034DiscretionRo"
    "undDirectionEnum\0225\n*DISCRETION_ROUND_DIR"
    "ECTION_MORE_AGGRESSIVE\020\000\032\005\242\224#\0011\0222\n\'DISCR"
    "ETION_ROUND_DIRECTION_MORE_PASSIVE\020\001\032\005\242\224"
    "#\0012*\270\001\n\023DiscretionScopeEnum\022\"\n\027DISCRETIO"
    "N_SCOPE_GLOBAL\020\000\032\005\242\224#\0013\022!\n\026DISCRETION_SC"
    "OPE_LOCAL\020\001\032\005\242\224#\0011\022$\n\031DISCRETION_SCOPE_N"
    "ATIONAL\020\002\032\005\242\224#\0012\0224\n)DISCRETION_SCOPE_NAT"
    "IONAL_EXCLUDING_LOCAL\020\003\032\005\242\224#\0014*\341\n\n\031Strat"
    "egyParameterTypeEnum\022\'\n\033STRATEGY_PARAMET"
    "ER_TYPE_AMT\020\000\032\006\242\224#\00210\022+\n\037STRATEGY_PARAME"
    "TER_TYPE_BOOLEAN\020\001\032\006\242\224#\00213\022(\n\034STRATEGY_P"
    "ARAMETER_TYPE_CHAR\020\002\032\006\242\224#\00212\022,\n STRATEGY"
    "_PARAMETER_TYPE_CURRENCY\020\003\032\006\242\224#\00216\022(\n\034ST"
    "RATEGY_PARAMETER_TYPE_DATA\020\004\032\006\242\224#\00223\022,\n "
    "STRATEGY_PARAMETER_TYPE_EXCHANGE\020\005\032\006\242\224#\002"
    "17\022(\n\035STRATEGY_PARAMETER_TYPE_FLOAT\020\006\032\005\242"
    "\224#\0016\022&\n\033STRATEGY_PARAMETER_TYPE_INT\020\007\032\005\242"
    "\224#\0011\022)\n\036STRATEGY_PARAMETER_TYPE_LENGTH\020\010"
    "\032\005\242\224#\0012\0222\n&STRATEGY_PARAMETER_TYPE_LOCAL"
    "_MKT_DATE\020\t\032\006\242\224#\00221\022.\n\"STRATEGY_PARAMETE"
    "R_TYPE_MONTH_YEAR\020\n\032\006\242\224#\00218\0227\n+STRATEGY_"
    "PARAMETER_TYPE_MULTIPLE_CHAR_VALUE\020\013\032\006\242\224"
    "#\00215\022/\n$STRATEGY_PARAMETER_TYPE_NUM_IN_G"
    "ROUP\020\014\032\005\242\224#\0013\022.\n\"STRATEGY_PARAMETER_TYPE"
    "_PERCENTAGE\020\r\032\006\242\224#\00211\022(\n\035STRATEGY_PARAME"
    "TER_TYPE_PRICE\020\016\032\005\242\224#\0018\022/\n$STRATEGY_PARA"
    "METER_TYPE_PRICE_OFFSET\020\017\032\005\242\224#\0019\022&\n\033STRA"
    "TEGY_PARAMETER_TYPE_QTY\020\020\032\005\242\224#\0017\022*\n\037STRA"
    "TEGY_PARAMETER_TYPE_SEQ_NUM\020\021\032\005\242\224#\0014\022*\n\036"
    "STRATEGY_PARAMETER_TYPE_STRING\020\022\032\006\242\224#\00214"
    "\022*\n\037STRATEGY_PARAMETER_TYPE_TAG_NUM\020\023\032\005\242"
    "\224#\0015\0221\n%STRATEGY_PARAMETER_TYPE_UTC_DATE"
    "_ONLY\020\024\032\006\242\224#\00222\0221\n%STRATEGY_PARAMETER_TY"
    "PE_UTC_TIME_ONLY\020\025\032\006\242\224#\00220\0221\n%STRATEGY_P"
    "ARAMETER_TYPE_UTC_TIMESTAMP\020\026\032\006\242\224#\00219\0229\n"
    "-STRATEGY_PARAMETER_TYPE_MULTIPLE_STRING"
    "_VALUE\020\027\032\006\242\224#\00224\022+\n\037STRATEGY_PARAMETER_T"
    "YPE_COUNTRY\020\030\032\006\242\224#\00225\022,\n STRATEGY_PARAME"
    "TER_TYPE_LANGUAGE\020\031\032\006\242\224#\00226\0220\n$STRATEGY_"
    "PARAMETER_TYPE_TZ_TIME_ONLY\020\032\032\006\242\224#\00227\0220\n"
    "$STRATEGY_PARAMETER_TYPE_TZ_TIMESTAMP\020\033\032"
    "\006\242\224#\00228\022)\n\035STRATEGY_PARAMETER_TYPE_TENOR"
    "\020\034\032\006\242\224#\00229*\362\002\n\027TrdRegTimestampTypeEnum\0222"
    "\n\'TRD_REG_TIMESTAMP_TYPE_BROKER_EXECUTIO"
    "N\020\000\032\005\242\224#\0015\0220\n%TRD_REG_TIMESTAMP_TYPE_BRO"
    "KER_RECEIPT\020\001\032\005\242\224#\0014\0220\n%TRD_REG_TIMESTAM"
    "P_TYPE_EXECUTION_TIME\020\002\032\005\242\224#\0011\022)\n\036TRD_RE"
    "G_TIMESTAMP_TYPE_TIME_IN\020\003\032\005\242\224#\0012\022*\n\037TRD"
    "_REG_TIMESTAMP_TYPE_TIME_OUT\020\004\032\005\242\224#\0013\022.\n"
    "#TRD_REG_TIMESTAMP_TYPE_DESK_RECEIPT\020\005\032\005"
    "\242\224#\0016\0228\n-TRD_REG_TIMESTAMP_TYPE_SUBMISSI"
    "ON_TO_CLEARING\020\006\032\005\242\224#\0017*\201\003\n\014DeskTypeEnum"
    "\022\033\n\020DESK_TYPE_AGENCY\020\000\032\005\242\224#\001A\022\037\n\023DESK_TY"
    "PE_ARBITRAGE\020\001\032\006\242\224#\002AR\022 \n\025DESK_TYPE_DERI"
    "VATIVES\020\002\032\005\242\224#\001D\022#\n\027DESK_TYPE_INSTITUTIO"
    "NAL\020\003\032\006\242\224#\002IS\022#\n\027DESK_TYPE_INTERNATIONAL"
    "\020\004\032\006\242\224#\002IN\022\032\n\017DESK_TYPE_OTHER\020\005\032\005\242\224#\001O\022\'"
    "\n\033DESK_TYPE_PREFERRED_TRADING\020\006\032\006\242\224#\002PF\022"
    "%\n\031DESK_TYPE_PROGRAM_TRADING\020\007\032\006\242\224#\002PT\022!"
    "\n\025DESK_TYPE_PROPRIETARY\020\010\032\006\242\224#\002PR\022\032\n\017DES"
    "K_TYPE_SALES\020\t\032\005\242\224#\001S\022\034\n\021DESK_TYPE_TRADI"
    "NG\020\n\032\005\242\224#\001T*:\n\022DeskTypeSourceEnum\022$\n\031DES"
    "K_TYPE_SOURCE_NASDOATS\020\000\032\005\242\224#\0011*\237\n\n\031Desk"
    "OrderHandlingInstEnum\0222\n%DESK_ORDER_HAND"
    "LING_INST_ADD_ON_ORDER\020\000\032\007\242\224#\003ADD\0221\n$DES"
    "K_ORDER_HANDLING_INST_ALL_OR_NONE\020\001\032\007\242\224#"
    "\003AON\0223\n&DESK_ORDER_HANDLING_INST_CASH_NO"
    "T_HELD\020\002\032\007\242\224#\003CNH\0224\n\'DESK_ORDER_HANDLING"
    "_INST_DIRECTED_ORDER\020\003\032\007\242\224#\003DIR\022G\n:DESK_"
    "ORDER_HANDLING_INST_EXCHANGE_FOR_PHYSICA"
    "L_TRANSACTION\020\004\032\007\242\224#\003E.W\0222\n%DESK_ORDER_H"
    "ANDLING_INST_FILL_OR_KILL\020\005\032\007\242\224#\003FOK\0223\n\'"
    "DESK_ORDER_HANDLING_INST_IMBALANCE_ONLY\020"
    "\006\032\006\242\224#\002IO\0229\n,DESK_ORDER_HANDLING_INST_IM"
    "MEDIATE_OR_CANCEL\020\007\032\007\242\224#\003IOC\0224\n\'DESK_ORD"
    "ER_HANDLING_INST_LIMIT_ON_CLOSE\020\010\032\007\242\224#\003L"
    "OC\0223\n&DESK_ORDER_HANDLING_INST_LIMIT_ON_"
    "OPEN\020\t\032\007\242\224#\003LOO\0225\n(DESK_ORDER_HANDLING_I"
    "NST_MARKET_AT_CLOSE\020\n\032\007\242\224#\003MAC\0224\n\'DESK_O"
    "RDER_HANDLING_INST_MARKET_AT_OPEN\020\013\032\007\242\224#"
    "\003MAO\0225\n(DESK_ORDER_HANDLING_INST_MARKET_"
    "ON_CLOSE\020\014\032\007\242\224#\003MOC\0224\n\'DESK_ORDER_HANDLI"
    "NG_INST_MARKET_ON_OPEN\020\r\032\007\242\224#\003MOO\0226\n)DES"
    "K_ORDER_HANDLING_INST_MINIMUM_QUANTITY\020\016"
    "\032\007\242\224#\003MQT\022-\n!DESK_ORDER_HANDLING_INST_NO"
    "T_HELD\020\017\032\006\242\224#\002NH\0222\n%DESK_ORDER_HANDLING_"
    "INST_OVER_THE_DAY\020\020\032\007\242\224#\003OVD\022,\n\037DESK_ORD"
    "ER_HANDLING_INST_PEGGED\020\021\032\007\242\224#\003PEG\0228\n+DE"
    "SK_ORDER_HANDLING_INST_RESERVE_SIZE_ORDE"
    "R\020\022\032\007\242\224#\003RSV\022+\n\036DESK_ORDER_HANDLING_INST"
    "_SCALE\020\023\032\007\242\224#\003SCL\022<\n/DESK_ORDER_HANDLING"
    "_INST_STOP_STOCK_TRANSACTION\020\024\032\007\242\224#\003S.W\022"
    "0\n#DESK_ORDER_HANDLING_INST_TIME_ORDER\020\025"
    "\032\007\242\224#\003TMO\0222\n&DESK_ORDER_HANDLING_INST_TR"
    "AILING_STOP\020\026\032\006\242\224#\002TS\022*\n\035DESK_ORDER_HAND"
    "LING_INST_WORK\020\027\032\007\242\224#\003WRK*\222\001\n\016RateSource"
    "Enum\022 \n\025RATE_SOURCE_BLOOMBERG\020\000\032\005\242\224#\0010\022\035"
    "\n\021RATE_SOURCE_OTHER\020\001\032\006\242\224#\00299\022\036\n\023RATE_SO"
    "URCE_REUTERS\020\002\032\005\242\224#\0011\022\037\n\024RATE_SOURCE_TEL"
    "ERATE\020\003\032\005\242\224#\0012*`\n\022RateSourceTypeEnum\022#\n\030"
    "RATE_SOURCE_TYPE_PRIMARY\020\000\032\005\242\224#\0010\022%\n\032RAT"
    "E_SOURCE_TYPE_SECONDARY\020\001\032\005\242\224#\0011*\200\006\n\017Con"
    "tAmtTypeEnum\022*\n\037CONT_AMT_TYPE_COMMISSION"
    "_AMOUNT\020\000\032\005\242\224#\0011\022+\n CONT_AMT_TYPE_COMMIS"
    "SION_PERCENT\020\001\032\005\242\224#\0012\022-\n\"CONT_AMT_TYPE_D"
    "ILUTION_LEVY_AMOUNT\020\002\032\005\242\224#\0017\022.\n#CONT_AMT"
    "_TYPE_DILUTION_LEVY_PERCENT\020\003\032\005\242\224#\0018\022(\n\035"
    "CONT_AMT_TYPE_DISCOUNT_AMOUNT\020\004\032\005\242\224#\0015\022)"
    "\n\036CONT_AMT_TYPE_DISCOUNT_PERCENT\020\005\032\005\242\224#\001"
    "6\022+\n CONT_AMT_TYPE_EXIT_CHARGE_AMOUNT\020\006\032"
    "\005\242\224#\0019\022-\n!CONT_AMT_TYPE_EXIT_CHARGE_PERC"
    "ENT\020\007\032\006\242\224#\00210\022\?\n3CONT_AMT_TYPE_FUND_BASE"
    "D_RENEWAL_COMMISSION_ON_FUND\020\010\032\006\242\224#\00214\022@"
    "\n4CONT_AMT_TYPE_FUND_BASED_RENEWAL_COMMI"
    "SSION_ON_ORDER\020\t\032\006\242\224#\00213\022\?\n3CONT_AMT_TYP"
    "E_FUND_BASED_RENEWAL_COMMISSION_PERCENT\020"
    "\n\032\006\242\224#\00211\022.\n#CONT_AMT_TYPE_INITIAL_CHARG"
    "E_AMOUNT\020\013\032\005\242\224#\0013\022/\n$CONT_AMT_TYPE_INITI"
    "AL_CHARGE_PERCENT\020\014\032\005\242\224#\0014\022/\n#CONT_AMT_T"
    "YPE_NET_SETTLEMENT_AMOUNT\020\r\032\006\242\224#\00215\022.\n\"C"
    "ONT_AMT_TYPE_PROJECTED_FUND_VALUE\020\016\032\006\242\224#"
    "\00212*\245\001\n\017LegSwapTypeEnum\022*\n\037LEG_SWAP_TYPE"
    "_MODIFIED_DURATION\020\000\032\005\242\224#\0012\022$\n\031LEG_SWAP_"
    "TYPE_PAR_FOR_PAR\020\001\032\005\242\224#\0011\022!\n\026LEG_SWAP_TY"
    "PE_PROCEEDS\020\002\032\005\242\224#\0015\022\035\n\022LEG_SWAP_TYPE_RI"
    "SK\020\003\032\005\242\224#\0014*\227\004\n\017MiscFeeTypeEnum\022&\n\033MISC_"
    "FEE_TYPE_EXCHANGE_FEES\020\000\032\005\242\224#\0014\022\035\n\022MISC_"
    "FEE_TYPE_LEVY\020\001\032\005\242\224#\0016\022)\n\036MISC_FEE_TYPE_"
    "LOCAL_COMMISSION\020\002\032\005\242\224#\0013\022\036\n\023MISC_FEE_TY"
    "PE_OTHER\020\003\032\005\242\224#\0017\022#\n\030MISC_FEE_TYPE_REGUL"
    "ATORY\020\004\032\005\242\224#\0011\022\036\n\023MISC_FEE_TYPE_STAMP\020\005\032"
    "\005\242\224#\0015\022\034\n\021MISC_FEE_TYPE_TAX\020\006\032\005\242\224#\0012\022\037\n\024"
    "MISC_FEE_TYPE_MARKUP\020\007\032\005\242\224#\0018\022(\n\035MISC_FE"
    "E_TYPE_CONSUMPTION_TAX\020\010\032\005\242\224#\0019\022\037\n\023MISC_"
    "FEE_TYPE_AGENT\020\t\032\006\242\224#\00212\022$\n\030MISC_FEE_TYP"
    "E_CONVERSION\020\n\032\006\242\224#\00211\022)\n\035MISC_FEE_TYPE_"
    "PER_TRANSACTION\020\013\032\006\242\224#\00210\022*\n\036MISC_FEE_TY"
    "PE_SECURITY_LENDING\020\014\032\006\242\224#\00214\022&\n\032MISC_FE"
    "E_TYPE_TRANSFER_FEE\020\r\032\006\242\224#\00213*\200\001\n\020MiscFe"
    "eBasisEnum\022\"\n\027MISC_FEE_BASIS_ABSOLUTE\020\000\032"
    "\005\242\224#\0010\022\"\n\027MISC_FEE_BASIS_PER_UNIT\020\001\032\005\242\224#"
    "\0011\022$\n\031MISC_FEE_BASIS_PERCENTAGE\020\002\032\005\242\224#\0012"
    "*\243\001\n\017RoutingTypeEnum\022\"\n\027ROUTING_TYPE_BLO"
    "CK_FIRM\020\000\032\005\242\224#\0013\022\"\n\027ROUTING_TYPE_BLOCK_L"
    "IST\020\001\032\005\242\224#\0014\022#\n\030ROUTING_TYPE_TARGET_FIRM"
    "\020\002\032\005\242\224#\0011\022#\n\030ROUTING_TYPE_TARGET_LIST\020\003\032"
    "\005\242\224#\0012*\341\013\n\023InstrAttribTypeEnum\022&\n\032INSTR_"
    "ATTRIB_TYPE_CALLABLE\020\000\032\006\242\224#\00211\022;\n/INSTR_"
    "ATTRIB_TYPE_CALLABLE_BELOW_MATURITY_VALU"
    "E\020\001\032\006\242\224#\00221\0225\n)INSTR_ATTRIB_TYPE_CALLABL"
    "E_WITHOUT_NOTICE\020\002\032\006\242\224#\00222\022*\n\037INSTR_ATTR"
    "IB_TYPE_COUPON_PERIOD\020\003\032\005\242\224#\0018\0222\n&INSTR_"
    "ATTRIB_TYPE_ESCROWED_TO_MATURITY\020\004\032\006\242\224#\002"
    "12\0229\n-INSTR_ATTRIB_TYPE_ESCROWED_TO_REDE"
    "MPTION_DATE\020\005\032\006\242\224#\00213\022!\n\026INSTR_ATTRIB_TY"
    "PE_FLAT\020\006\032\005\242\224#\0011\022(\n\034INSTR_ATTRIB_TYPE_IN"
    "_DEFAULT\020\007\032\006\242\224#\00215\022%\n\031INSTR_ATTRIB_TYPE_"
    "INDEXED\020\010\032\006\242\224#\00218\022-\n\"INSTR_ATTRIB_TYPE_I"
    "NTEREST_BEARING\020\t\032\005\242\224#\0013\022-\n\"INSTR_ATTRIB"
    "_TYPE_LESS_FEE_FOR_PUT\020\n\032\005\242\224#\0016\0221\n&INSTR"
    "_ATTRIB_TYPE_NO_PERIODIC_PAYMENTS\020\013\032\005\242\224#"
    "\0014\0225\n)INSTR_ATTRIB_TYPE_ORIGINAL_ISSUE_D"
    "ISCOUNT\020\014\032\006\242\224#\00210\022;\n/INSTR_ATTRIB_TYPE_O"
    "RIGINAL_ISSUE_DISCOUNT_PRICE\020\r\032\006\242\224#\00220\022*"
    "\n\036INSTR_ATTRIB_TYPE_PRE_REFUNDED\020\016\032\006\242\224#\002"
    "14\022+\n INSTR_ATTRIB_TYPE_STEPPED_COUPON\020\017"
    "\032\005\242\224#\0017\022@\n4INSTR_ATTRIB_TYPE_SUBJECT_TO_"
    "ALTERNATIVE_MINIMUM_TAX\020\020\032\006\242\224#\00219\022%\n\031INS"
    "TR_ATTRIB_TYPE_TAXABLE\020\021\032\006\242\224#\00217\022\"\n\026INST"
    "R_ATTRIB_TYPE_TEXT\020\022\032\006\242\224#\00299\022%\n\031INSTR_AT"
    "TRIB_TYPE_UNRATED\020\023\032\006\242\224#\00216\022*\n\037INSTR_ATT"
    "RIB_TYPE_VARIABLE_RATE\020\024\032\005\242\224#\0015\022!\n\026INSTR"
    "_ATTRIB_TYPE_WHEN\020\025\032\005\242\224#\0019\022(\n\035INSTR_ATTR"
    "IB_TYPE_ZERO_COUPON\020\026\032\005\242\224#\0012\022;\n/INSTR_AT"
    "TRIB_TYPE_PRICE_TICK_RULES_FOR_SECURITY\020"
    "\027\032\006\242\224#\00223\022I\n=INSTR_ATTRIB_TYPE_TRADE_TYP"
    "E_ELIGIBILITY_DETAILS_FOR_SECURITY\020\030\032\006\242\224"
    "#\00224\0224\n(INSTR_ATTRIB_TYPE_INSTRUMENT_DEN"
    "OMINATOR\020\031\032\006\242\224#\00225\0222\n&INSTR_ATTRIB_TYPE_"
    "INSTRUMENT_NUMERATOR\020\032\032\006\242\224#\00226\0228\n,INSTR_"
    "ATTRIB_TYPE_INSTRUMENT_PRICE_PRECISION\020\033"
    "\032\006\242\224#\00227\0225\n)INSTR_ATTRIB_TYPE_INSTRUMENT"
    "_STRIKE_PRICE\020\034\032\006\242\224#\00228\0221\n%INSTR_ATTRIB_"
    "TYPE_TRADEABLE_INDICATOR\020\035\032\006\242\224#\00229*X\n\020De"
    "liveryFormEnum\022\037\n\024DELIVERY_FORM_BEARER\020\000"
    "\032\005\242\224#\0012\022#\n\030DELIVERY_FORM_BOOK_ENTRY\020\001\032\005\242"
    "\224#\0011*\335\001\n\020TickRuleTypeEnum\022\037\n\024TICK_RULE_T"
    "YPE_FIXED\020\000\032\005\242\224#\0012\022!\n\026TICK_RULE_TYPE_REG"
    "ULAR\020\001\032\005\242\224#\0010\0220\n%TICK_RULE_TYPE_SETTLED_"
    "AS_ASPREAD_LEG\020\002\032\005\242\224#\0014\022/\n$TICK_RULE_TYP"
    "E_TRADED_AS_ASPREAD_LEG\020\003\032\005\242\224#\0013\022\"\n\027TICK"
    "_RULE_TYPE_VARIABLE\020\004\032\005\242\224#\0011*\222\001\n\013LotType"
    "Enum\022\035\n\022LOT_TYPE_BLOCK_LOT\020\000\032\005\242\224#\0013\022\033\n\020L"
    "OT_TYPE_ODD_LOT\020\001\032\005\242\224#\0011\022\035\n\022LOT_TYPE_ROU"
    "ND_LOT\020\002\032\005\242\224#\0012\022(\n\035LOT_TYPE_ROUND_LOT_BA"
    "SED_UPON\020\003\032\005\242\224#\0014*\202\001\n\022PriceLimitTypeEnum"
    "\022&\n\033PRICE_LIMIT_TYPE_PERCENTAGE\020\000\032\005\242\224#\0012"
    "\022!\n\026PRICE_LIMIT_TYPE_PRICE\020\001\032\005\242\224#\0010\022!\n\026P"
    "RICE_LIMIT_TYPE_TICKS\020\002\032\005\242\224#\0011*\300\001\n\023Expir"
    "ationCycleEnum\022;\n0EXPIRATION_CYCLE_EXPIR"
    "E_ON_TRADING_SESSION_CLOSE\020\000\032\005\242\224#\0010\022:\n/E"
    "XPIRATION_CYCLE_EXPIRE_ON_TRADING_SESSIO"
    "N_OPEN\020\001\032\005\242\224#\0011\0220\n%EXPIRATION_CYCLE_SPEC"
    "IFIED_EXPIRATION\020\002\032\005\242\224#\0012*\363\001\n\032ImpliedMar"
    "ketIndicatorEnum\022C\n8IMPLIED_MARKET_INDIC"
    "ATOR_BOTH_IMPLIED_IN_AND_IMPLIED_OUT\020\000\032\005"
    "\242\224#\0013\022.\n#IMPLIED_MARKET_INDICATOR_IMPLIE"
    "D_IN\020\001\032\005\242\224#\0011\022/\n$IMPLIED_MARKET_INDICATO"
    "R_IMPLIED_OUT\020\002\032\005\242\224#\0012\022/\n$IMPLIED_MARKET"
    "_INDICATOR_NOT_IMPLIED\020\003\032\005\242\224#\0010*\255\001\n\021Mult"
    "ilegModelEnum\0226\n+MULTILEG_MODEL_PREDEFIN"
    "ED_MULTILEG_SECURITY\020\000\032\005\242\224#\0010\022&\n\033MULTILE"
    "G_MODEL_USER_DEFINED\020\001\032\005\242\224#\0012\0228\n-MULTILE"
    "G_MODEL_USER_DEFINED_MULTILEG_SECURITY\020\002"
    "\032\005\242\224#\0011*\317\002\n\027MultilegPriceMethodEnum\022@\n5M"
    "ULTILEG_PRICE_METHOD_CONTRACT_WEIGHTED_A"
    "VERAGE_PRICE\020\000\032\005\242\224#\0014\022+\n MULTILEG_PRICE_"
    "METHOD_INDIVIDUAL\020\001\032\005\242\224#\0013\0221\n&MULTILEG_P"
    "RICE_METHOD_MULTIPLIED_PRICE\020\002\032\005\242\224#\0015\022*\n"
    "\037MULTILEG_PRICE_METHOD_NET_PRICE\020\003\032\005\242\224#\001"
    "0\0223\n(MULTILEG_PRICE_METHOD_REVERSED_NET_"
    "PRICE\020\004\032\005\242\224#\0011\0221\n&MULTILEG_PRICE_METHOD_"
    "YIELD_DIFFERENCE\020\005\032\005\242\224#\0012*\203\006\n\rPriceTypeE"
    "num\022\"\n\027PRICE_TYPE_FIXED_AMOUNT\020\000\032\005\242\224#\0013\022"
    "\036\n\023PRICE_TYPE_PER_UNIT\020\001\032\005\242\224#\0012\022 \n\025PRICE"
    "_TYPE_PERCENTAGE\020\002\032\005\242\224#\0011\022\036\n\023PRICE_TYPE_"
    "DISCOUNT\020\003\032\005\242\224#\0014\022\035\n\022PRICE_TYPE_PREMIUM\020"
    "\004\032\005\242\224#\0015\022\034\n\021PRICE_TYPE_SPREAD\020\005\032\005\242\224#\0016\022\036"
    "\n\023PRICE_TYPE_TEDPRICE\020\006\032\005\242\224#\0017\022\036\n\023PRICE_"
    "TYPE_TEDYIELD\020\007\032\005\242\224#\0018\0220\n$PRICE_TYPE_FIX"
    "ED_CABINET_TRADE_PRICE\020\010\032\006\242\224#\00210\0223\n\'PRIC"
    "E_TYPE_VARIABLE_CABINET_TRADE_PRICE\020\t\032\006\242"
    "\224#\00211\022\033\n\020PRICE_TYPE_YIELD\020\n\032\005\242\224#\0019\022.\n\"PR"
    "ICE_TYPE_PRODUCT_TICKS_IN_EIGHTS\020\013\032\006\242\224#\002"
    "15\022/\n#PRICE_TYPE_PRODUCT_TICKS_IN_FOURTH"
    "S\020\014\032\006\242\224#\00214\022-\n!PRICE_TYPE_PRODUCT_TICKS_"
    "IN_HALFS\020\r\032\006\242\224#\00213\0229\n-PRICE_TYPE_PRODUCT"
    "_TICKS_IN_ONE_TWENTY_EIGHTS\020\016\032\006\242\224#\00219\0222\n"
    "&PRICE_TYPE_PRODUCT_TICKS_IN_SIXTEENTHS\020"
    "\017\032\006\242\224#\00216\0224\n(PRICE_TYPE_PRODUCT_TICKS_IN"
    "_SIXTY_FORTHS\020\020\032\006\242\224#\00218\0226\n*PRICE_TYPE_PR"
    "ODUCT_TICKS_IN_THIRTY_SECONDS\020\021\032\006\242\224#\00217*"
    "\227\007\n\013OrdTypeEnum\022\031\n\016ORD_TYPE_LIMIT\020\000\032\005\242\224#"
    "\0012\022&\n\027ORD_TYPE_LIMIT_ON_CLOSE\020\001\032\t\242\224#\001B\270\224"
    "#\005\022\'\n\030ORD_TYPE_LIMIT_OR_BETTER\020\002\032\t\242\224#\0017\270"
    "\224#\006\022)\n\036ORD_TYPE_LIMIT_WITH_OR_WITHOUT\020\003\032"
    "\005\242\224#\0018\022\032\n\017ORD_TYPE_MARKET\020\004\032\005\242\224#\0011\022\'\n\030OR"
    "D_TYPE_MARKET_ON_CLOSE\020\005\032\t\242\224#\0015\270\224#\005\022\034\n\021O"
    "RD_TYPE_ON_BASIS\020\006\032\005\242\224#\0019\022 \n\021ORD_TYPE_ON"
    "_CLOSE\020\007\032\t\242\224#\001A\270\224#\005\022\030\n\rORD_TYPE_STOP\020\010\032\005"
    "\242\224#\0013\022\036\n\023ORD_TYPE_STOP_LIMIT\020\t\032\005\242\224#\0014\022#\n"
    "\030ORD_TYPE_WITH_OR_WITHOUT\020\n\032\005\242\224#\0016\022\032\n\017OR"
    "D_TYPE_PEGGED\020\013\032\005\242\224#\001P\022$\n\025ORD_TYPE_FOREX"
    "_MARKET\020\014\032\t\242\224#\001C\270\224#\005\022(\n\035ORD_TYPE_PREVIOU"
    "SLY_INDICATED\020\r\032\005\242\224#\001E\022%\n\032ORD_TYPE_PREVI"
    "OUSLY_QUOTED\020\016\032\005\242\224#\001D\022#\n\024ORD_TYPE_FOREX_"
    "LIMIT\020\017\032\t\242\224#\001F\270\224#\005\022/\n ORD_TYPE_FOREX_PRE"
    "VIOUSLY_QUOTED\020\020\032\t\242\224#\001H\270\224#\005\022\036\n\023ORD_TYPE_"
    "FOREX_SWAP\020\021\032\005\242\224#\001G\022\032\n\017ORD_TYPE_FUNARI\020\022"
    "\032\005\242\224#\001I\022%\n\032ORD_TYPE_MARKET_IF_TOUCHED\020\023\032"
    "\005\242\224#\001J\0222\n\'ORD_TYPE_MARKET_WITH_LEFT_OVER"
    "_AS_LIMIT\020\024\032\005\242\224#\001K\022-\n\"ORD_TYPE_NEXT_FUND"
    "_VALUATION_POINT\020\025\032\005\242\224#\001M\0221\n&ORD_TYPE_PR"
    "EVIOUS_FUND_VALUATION_POINT\020\026\032\005\242\224#\001L\022+\n "
    "ORD_TYPE_COUNTER_ORDER_SELECTION\020\027\032\005\242\224#\001"
    "Q*\253\003\n\017TimeInForceEnum\022\'\n\034TIME_IN_FORCE_A"
    "T_THE_OPENING\020\000\032\005\242\224#\0012\022\034\n\021TIME_IN_FORCE_"
    "DAY\020\001\032\005\242\224#\0010\022%\n\032TIME_IN_FORCE_FILL_OR_KI"
    "LL\020\002\032\005\242\224#\0014\022)\n\036TIME_IN_FORCE_GOOD_TILL_C"
    "ANCEL\020\003\032\005\242\224#\0011\022+\n TIME_IN_FORCE_GOOD_TIL"
    "L_CROSSING\020\004\032\005\242\224#\0015\022,\n!TIME_IN_FORCE_IMM"
    "EDIATE_OR_CANCEL\020\005\032\005\242\224#\0013\022\'\n\034TIME_IN_FOR"
    "CE_GOOD_TILL_DATE\020\006\032\005\242\224#\0016\022%\n\032TIME_IN_FO"
    "RCE_AT_THE_CLOSE\020\007\032\005\242\224#\0017\022$\n\031TIME_IN_FOR"
    "CE_AT_CROSSING\020\010\032\005\242\224#\0019\022.\n#TIME_IN_FORCE"
    "_GOOD_THROUGH_CROSSING\020\t\032\005\242\224#\0018*\366\t\n\rMatc"
    "hTypeEnum\0228\n,MATCH_TYPE_A1EXACT_MATCH_SU"
    "MMARIZED_QUANTITY\020\000\032\006\242\224#\002S1\0228\n,MATCH_TYP"
    "E_A2EXACT_MATCH_SUMMARIZED_QUANTITY\020\001\032\006\242"
    "\224#\002S2\0228\n,MATCH_TYPE_A3EXACT_MATCH_SUMMAR"
    "IZED_QUANTITY\020\002\032\006\242\224#\002S3\0228\n,MATCH_TYPE_A4"
    "EXACT_MATCH_SUMMARIZED_QUANTITY\020\003\032\006\242\224#\002S"
    "4\0228\n,MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED"
    "_QUANTITY\020\004\032\006\242\224#\002S5\022(\n\034MATCH_TYPE_ACTACC"
    "EPTED_TRADE\020\005\032\006\242\224#\002M3\022*\n\036MATCH_TYPE_ACTD"
    "EFAULT_AFTER_M2\020\006\032\006\242\224#\002M5\022\'\n\033MATCH_TYPE_"
    "ACTDEFAULT_TRADE\020\007\032\006\242\224#\002M4\022!\n\025MATCH_TYPE"
    "_ACTM6MATCH\020\010\032\006\242\224#\002M6\0225\n)MATCH_TYPE_EXAC"
    "T_MATCH_MINUS_BADGES_TIMES\020\t\032\006\242\224#\002M1\022.\n\""
    "MATCH_TYPE_EXACT_MATCH_PLUS2BADGES\020\n\032\006\242\224"
    "#\002A4\0228\n,MATCH_TYPE_EXACT_MATCH_PLUS2BADG"
    "ES_EXEC_TIME\020\013\032\006\242\224#\002A3\022.\n\"MATCH_TYPE_EXA"
    "CT_MATCH_PLUS4BADGES\020\014\032\006\242\224#\002A2\0228\n,MATCH_"
    "TYPE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME\020\r"
    "\032\006\242\224#\002A1\0221\n%MATCH_TYPE_EXACT_MATCH_PLUS_"
    "EXEC_TIME\020\016\032\006\242\224#\002A5\022#\n\027MATCH_TYPE_OCSLOC"
    "KED_IN\020\017\032\006\242\224#\002MT\022\?\n3MATCH_TYPE_STAMPED_A"
    "DVISORIES_OR_SPECIALIST_ACCEPTS\020\020\032\006\242\224#\002A"
    "Q\022:\n.MATCH_TYPE_SUMMARIZED_MATCH_MINUS_B"
    "ADGES_TIMES\020\021\032\006\242\224#\002M2\022 \n\025MATCH_TYPE_AUTO"
    "_MATCH\020\022\032\005\242\224#\0014\022\"\n\027MATCH_TYPE_CALL_AUCTI"
    "ON\020\023\032\005\242\224#\0017\022,\n!MATCH_TYPE_CONFIRMED_TRAD"
    "E_REPORT\020\024\032\005\242\224#\0013\022-\n\"MATCH_TYPE_COUNTER_"
    "ORDER_SELECTION\020\025\032\005\242\224#\0016\022#\n\030MATCH_TYPE_C"
    "ROSS_AUCTION\020\026\032\005\242\224#\0015\022,\n!MATCH_TYPE_ONE_"
    "PARTY_TRADE_REPORT\020\027\032\005\242\224#\0011\022,\n!MATCH_TYP"
    "E_TWO_PARTY_TRADE_REPORT\020\030\032\005\242\224#\0012\022\035\n\022MAT"
    "CH_TYPE_ISSUING\020\031\032\005\242\224#\0018*\177\n\016MdBookTypeEn"
    "um\022#\n\030MD_BOOK_TYPE_ORDER_DEPTH\020\000\032\005\242\224#\0013\022"
    "#\n\030MD_BOOK_TYPE_PRICE_DEPTH\020\001\032\005\242\224#\0012\022#\n\030"
    "MD_BOOK_TYPE_TOP_OF_BOOK\020\002\032\005\242\224#\0011*\301\001\n\033Ma"
    "turityMonthYearFormatEnum\0224\n)MATURITY_MO"
    "NTH_YEAR_FORMAT_YEAR_MONTH_DAY\020\000\032\005\242\224#\0011\022"
    "5\n*MATURITY_MONTH_YEAR_FORMAT_YEAR_MONTH"
    "_ONLY\020\001\032\005\242\224#\0010\0225\n*MATURITY_MONTH_YEAR_FO"
    "RMAT_YEAR_MONTH_WEEK\020\002\032\005\242\224#\0012*\375\001\n#Maturi"
    "tyMonthYearIncrementUnitsEnum\0223\n(MATURIT"
    "Y_MONTH_YEAR_INCREMENT_UNITS_DAYS\020\000\032\005\242\224#"
    "\0011\0225\n*MATURITY_MONTH_YEAR_INCREMENT_UNIT"
    "S_MONTHS\020\001\032\005\242\224#\0010\0224\n)MATURITY_MONTH_YEAR"
    "_INCREMENT_UNITS_WEEKS\020\002\032\005\242\224#\0012\0224\n)MATUR"
    "ITY_MONTH_YEAR_INCREMENT_UNITS_YEARS\020\003\032\005"
    "\242\224#\0013B$\n\032org.fixprotocol.componentsB\006Com"
    "mon", 74683);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  PartySubIdTypeUnion::default_instance_ = new PartySubIdTypeUnion();
  PtysSubGrp::default_instance_ = new PtysSubGrp();
  Parties::default_instance_ = new Parties();
  NstdPtysSubGrp::default_instance_ = new NstdPtysSubGrp();
  NestedParties::default_instance_ = new NestedParties();
  PreAllocGrp::default_instance_ = new PreAllocGrp();
  DisplayInstruction::default_instance_ = new DisplayInstruction();
  TradingSessionIdUnion::default_instance_ = new TradingSessionIdUnion();
  TradingSessionSubIdUnion::default_instance_ = new TradingSessionSubIdUnion();
  TrdgSesGrp::default_instance_ = new TrdgSesGrp();
  SecAltIdGrp::default_instance_ = new SecAltIdGrp();
  SecurityXml::default_instance_ = new SecurityXml();
  EventTypeUnion::default_instance_ = new EventTypeUnion();
  EvntGrp::default_instance_ = new EvntGrp();
  InstrumentPtysSubGrp::default_instance_ = new InstrumentPtysSubGrp();
  InstrumentParties::default_instance_ = new InstrumentParties();
  ComplexEventTimes::default_instance_ = new ComplexEventTimes();
  ComplexEventDates::default_instance_ = new ComplexEventDates();
  ComplexEvents::default_instance_ = new ComplexEvents();
  StrikePriceDeterminationMethodUnion::default_instance_ = new StrikePriceDeterminationMethodUnion();
  FlowScheduleTypeUnion::default_instance_ = new FlowScheduleTypeUnion();
  CpProgramUnion::default_instance_ = new CpProgramUnion();
  Instrument::default_instance_ = new Instrument();
  FinancingDetails::default_instance_ = new FinancingDetails();
  UndSecAltIdGrp::default_instance_ = new UndSecAltIdGrp();
  UnderlyingStipulations::default_instance_ = new UnderlyingStipulations();
  UndlyInstrumentPtysSubGrp::default_instance_ = new UndlyInstrumentPtysSubGrp();
  UndlyInstrumentParties::default_instance_ = new UndlyInstrumentParties();
  UnderlyingFlowScheduleTypeUnion::default_instance_ = new UnderlyingFlowScheduleTypeUnion();
  UnderlyingInstrument::default_instance_ = new UnderlyingInstrument();
  UndInstrmtGrp::default_instance_ = new UndInstrmtGrp();
  Stipulations::default_instance_ = new Stipulations();
  OrderQtyData::default_instance_ = new OrderQtyData();
  TriggeringInstruction::default_instance_ = new TriggeringInstruction();
  SpreadOrBenchmarkCurveData::default_instance_ = new SpreadOrBenchmarkCurveData();
  YieldData::default_instance_ = new YieldData();
  CommissionData::default_instance_ = new CommissionData();
  PegInstructions::default_instance_ = new PegInstructions();
  DiscretionInstructions::default_instance_ = new DiscretionInstructions();
  StrategyParametersGrp::default_instance_ = new StrategyParametersGrp();
  TrdRegTimestamps::default_instance_ = new TrdRegTimestamps();
  ApplicationSequenceControl::default_instance_ = new ApplicationSequenceControl();
  ContraGrp::default_instance_ = new ContraGrp();
  NstdPtys4SubGrp::default_instance_ = new NstdPtys4SubGrp();
  NestedParties4::default_instance_ = new NestedParties4();
  RateSource::default_instance_ = new RateSource();
  ContAmtGrp::default_instance_ = new ContAmtGrp();
  LegSecAltIdGrp::default_instance_ = new LegSecAltIdGrp();
  LegFlowScheduleTypeUnion::default_instance_ = new LegFlowScheduleTypeUnion();
  InstrumentLeg::default_instance_ = new InstrumentLeg();
  LegStipulations::default_instance_ = new LegStipulations();
  NstdPtys2SubGrp::default_instance_ = new NstdPtys2SubGrp();
  NestedParties2::default_instance_ = new NestedParties2();
  LegPreAllocGrp::default_instance_ = new LegPreAllocGrp();
  NstdPtys3SubGrp::default_instance_ = new NstdPtys3SubGrp();
  NestedParties3::default_instance_ = new NestedParties3();
  InstrmtLegExecGrp::default_instance_ = new InstrmtLegExecGrp();
  MiscFeesGrp::default_instance_ = new MiscFeesGrp();
  InstrmtLegGrp::default_instance_ = new InstrmtLegGrp();
  InstrmtLegIoiGrp::default_instance_ = new InstrmtLegIoiGrp();
  RoutingGrp::default_instance_ = new RoutingGrp();
  InstrAttribTypeUnion::default_instance_ = new InstrAttribTypeUnion();
  AttrbGrp::default_instance_ = new AttrbGrp();
  InstrumentExtension::default_instance_ = new InstrumentExtension();
  TickRules::default_instance_ = new TickRules();
  LotTypeRules::default_instance_ = new LotTypeRules();
  PriceLimits::default_instance_ = new PriceLimits();
  BaseTradingRules::default_instance_ = new BaseTradingRules();
  OrdTypeRules::default_instance_ = new OrdTypeRules();
  TimeInForceRules::default_instance_ = new TimeInForceRules();
  ExecInstRules::default_instance_ = new ExecInstRules();
  MatchRules::default_instance_ = new MatchRules();
  MarketDataFeedTypes::default_instance_ = new MarketDataFeedTypes();
  TradingSessionRules::default_instance_ = new TradingSessionRules();
  TradingSessionRulesGrp::default_instance_ = new TradingSessionRulesGrp();
  NestedInstrumentAttribute::default_instance_ = new NestedInstrumentAttribute();
  SecurityTradingRules::default_instance_ = new SecurityTradingRules();
  MaturityRules::default_instance_ = new MaturityRules();
  StrikeRules::default_instance_ = new StrikeRules();
  MarketSegmentGrp::default_instance_ = new MarketSegmentGrp();
  LegBenchmarkCurveData::default_instance_ = new LegBenchmarkCurveData();
  InstrmtLegSecListGrp::default_instance_ = new InstrmtLegSecListGrp();
  PartySubIdTypeUnion::default_instance_->InitAsDefaultInstance();
  PtysSubGrp::default_instance_->InitAsDefaultInstance();
  Parties::default_instance_->InitAsDefaultInstance();
  NstdPtysSubGrp::default_instance_->InitAsDefaultInstance();
  NestedParties::default_instance_->InitAsDefaultInstance();
  PreAllocGrp::default_instance_->InitAsDefaultInstance();
  DisplayInstruction::default_instance_->InitAsDefaultInstance();
  TradingSessionIdUnion::default_instance_->InitAsDefaultInstance();
  TradingSessionSubIdUnion::default_instance_->InitAsDefaultInstance();
  TrdgSesGrp::default_instance_->InitAsDefaultInstance();
  SecAltIdGrp::default_instance_->InitAsDefaultInstance();
  SecurityXml::default_instance_->InitAsDefaultInstance();
  EventTypeUnion::default_instance_->InitAsDefaultInstance();
  EvntGrp::default_instance_->InitAsDefaultInstance();
  InstrumentPtysSubGrp::default_instance_->InitAsDefaultInstance();
  InstrumentParties::default_instance_->InitAsDefaultInstance();
  ComplexEventTimes::default_instance_->InitAsDefaultInstance();
  ComplexEventDates::default_instance_->InitAsDefaultInstance();
  ComplexEvents::default_instance_->InitAsDefaultInstance();
  StrikePriceDeterminationMethodUnion::default_instance_->InitAsDefaultInstance();
  FlowScheduleTypeUnion::default_instance_->InitAsDefaultInstance();
  CpProgramUnion::default_instance_->InitAsDefaultInstance();
  Instrument::default_instance_->InitAsDefaultInstance();
  FinancingDetails::default_instance_->InitAsDefaultInstance();
  UndSecAltIdGrp::default_instance_->InitAsDefaultInstance();
  UnderlyingStipulations::default_instance_->InitAsDefaultInstance();
  UndlyInstrumentPtysSubGrp::default_instance_->InitAsDefaultInstance();
  UndlyInstrumentParties::default_instance_->InitAsDefaultInstance();
  UnderlyingFlowScheduleTypeUnion::default_instance_->InitAsDefaultInstance();
  UnderlyingInstrument::default_instance_->InitAsDefaultInstance();
  UndInstrmtGrp::default_instance_->InitAsDefaultInstance();
  Stipulations::default_instance_->InitAsDefaultInstance();
  OrderQtyData::default_instance_->InitAsDefaultInstance();
  TriggeringInstruction::default_instance_->InitAsDefaultInstance();
  SpreadOrBenchmarkCurveData::default_instance_->InitAsDefaultInstance();
  YieldData::default_instance_->InitAsDefaultInstance();
  CommissionData::default_instance_->InitAsDefaultInstance();
  PegInstructions::default_instance_->InitAsDefaultInstance();
  DiscretionInstructions::default_instance_->InitAsDefaultInstance();
  StrategyParametersGrp::default_instance_->InitAsDefaultInstance();
  TrdRegTimestamps::default_instance_->InitAsDefaultInstance();
  ApplicationSequenceControl::default_instance_->InitAsDefaultInstance();
  ContraGrp::default_instance_->InitAsDefaultInstance();
  NstdPtys4SubGrp::default_instance_->InitAsDefaultInstance();
  NestedParties4::default_instance_->InitAsDefaultInstance();
  RateSource::default_instance_->InitAsDefaultInstance();
  ContAmtGrp::default_instance_->InitAsDefaultInstance();
  LegSecAltIdGrp::default_instance_->InitAsDefaultInstance();
  LegFlowScheduleTypeUnion::default_instance_->InitAsDefaultInstance();
  InstrumentLeg::default_instance_->InitAsDefaultInstance();
  LegStipulations::default_instance_->InitAsDefaultInstance();
  NstdPtys2SubGrp::default_instance_->InitAsDefaultInstance();
  NestedParties2::default_instance_->InitAsDefaultInstance();
  LegPreAllocGrp::default_instance_->InitAsDefaultInstance();
  NstdPtys3SubGrp::default_instance_->InitAsDefaultInstance();
  NestedParties3::default_instance_->InitAsDefaultInstance();
  InstrmtLegExecGrp::default_instance_->InitAsDefaultInstance();
  MiscFeesGrp::default_instance_->InitAsDefaultInstance();
  InstrmtLegGrp::default_instance_->InitAsDefaultInstance();
  InstrmtLegIoiGrp::default_instance_->InitAsDefaultInstance();
  RoutingGrp::default_instance_->InitAsDefaultInstance();
  InstrAttribTypeUnion::default_instance_->InitAsDefaultInstance();
  AttrbGrp::default_instance_->InitAsDefaultInstance();
  InstrumentExtension::default_instance_->InitAsDefaultInstance();
  TickRules::default_instance_->InitAsDefaultInstance();
  LotTypeRules::default_instance_->InitAsDefaultInstance();
  PriceLimits::default_instance_->InitAsDefaultInstance();
  BaseTradingRules::default_instance_->InitAsDefaultInstance();
  OrdTypeRules::default_instance_->InitAsDefaultInstance();
  TimeInForceRules::default_instance_->InitAsDefaultInstance();
  ExecInstRules::default_instance_->InitAsDefaultInstance();
  MatchRules::default_instance_->InitAsDefaultInstance();
  MarketDataFeedTypes::default_instance_->InitAsDefaultInstance();
  TradingSessionRules::default_instance_->InitAsDefaultInstance();
  TradingSessionRulesGrp::default_instance_->InitAsDefaultInstance();
  NestedInstrumentAttribute::default_instance_->InitAsDefaultInstance();
  SecurityTradingRules::default_instance_->InitAsDefaultInstance();
  MaturityRules::default_instance_->InitAsDefaultInstance();
  StrikeRules::default_instance_->InitAsDefaultInstance();
  MarketSegmentGrp::default_instance_->InitAsDefaultInstance();
  LegBenchmarkCurveData::default_instance_->InitAsDefaultInstance();
  InstrmtLegSecListGrp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_2eproto {
  StaticDescriptorInitializer_common_2eproto() {
    protobuf_AddDesc_common_2eproto();
  }
} static_descriptor_initializer_common_2eproto_;
const ::google::protobuf::EnumDescriptor* PartySubIdTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartySubIdTypeEnum_descriptor_;
}
bool PartySubIdTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartyIdSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartyIdSourceEnum_descriptor_;
}
bool PartyIdSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PartyRoleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartyRoleEnum_descriptor_;
}
bool PartyRoleEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayWhenEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayWhenEnum_descriptor_;
}
bool DisplayWhenEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DisplayMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayMethodEnum_descriptor_;
}
bool DisplayMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionIdEnum_descriptor_;
}
bool TradingSessionIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionSubIdEnum_descriptor_;
}
bool TradingSessionSubIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventTypeEnum_descriptor_;
}
bool EventTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComplexEventTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventTypeEnum_descriptor_;
}
bool ComplexEventTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComplexEventPriceBoundaryMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventPriceBoundaryMethodEnum_descriptor_;
}
bool ComplexEventPriceBoundaryMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComplexEventPriceTimeTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventPriceTimeTypeEnum_descriptor_;
}
bool ComplexEventPriceTimeTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ComplexEventConditionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventConditionEnum_descriptor_;
}
bool ComplexEventConditionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SymbolSfxEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SymbolSfxEnum_descriptor_;
}
bool SymbolSfxEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityIdSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityIdSourceEnum_descriptor_;
}
bool SecurityIdSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProductEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductEnum_descriptor_;
}
bool ProductEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityTypeEnum_descriptor_;
}
bool SecurityTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityStatusEnum_descriptor_;
}
bool SecurityStatusEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RestructuringTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestructuringTypeEnum_descriptor_;
}
bool RestructuringTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SeniorityEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeniorityEnum_descriptor_;
}
bool SeniorityEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StrikePriceDeterminationMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrikePriceDeterminationMethodEnum_descriptor_;
}
bool StrikePriceDeterminationMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StrikePriceBoundaryMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrikePriceBoundaryMethodEnum_descriptor_;
}
bool StrikePriceBoundaryMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnderlyingPriceDeterminationMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingPriceDeterminationMethodEnum_descriptor_;
}
bool UnderlyingPriceDeterminationMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContractMultiplierUnitEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContractMultiplierUnitEnum_descriptor_;
}
bool ContractMultiplierUnitEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FlowScheduleTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowScheduleTypeEnum_descriptor_;
}
bool FlowScheduleTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitOfMeasureEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitOfMeasureEnum_descriptor_;
}
bool UnitOfMeasureEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SettlMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlMethodEnum_descriptor_;
}
bool SettlMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExerciseStyleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExerciseStyleEnum_descriptor_;
}
bool ExerciseStyleEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OptPayoutTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptPayoutTypeEnum_descriptor_;
}
bool OptPayoutTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceQuoteMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceQuoteMethodEnum_descriptor_;
}
bool PriceQuoteMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ValuationMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValuationMethodEnum_descriptor_;
}
bool ValuationMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ListMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListMethodEnum_descriptor_;
}
bool ListMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PutOrCallEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutOrCallEnum_descriptor_;
}
bool PutOrCallEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeUnitEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeUnitEnum_descriptor_;
}
bool TimeUnitEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CpProgramEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CpProgramEnum_descriptor_;
}
bool CpProgramEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TerminationTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminationTypeEnum_descriptor_;
}
bool TerminationTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeliveryTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliveryTypeEnum_descriptor_;
}
bool DeliveryTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnderlyingSettlementTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingSettlementTypeEnum_descriptor_;
}
bool UnderlyingSettlementTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnderlyingCashTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingCashTypeEnum_descriptor_;
}
bool UnderlyingCashTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnderlyingFxRateCalcEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingFxRateCalcEnum_descriptor_;
}
bool UnderlyingFxRateCalcEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StipulationTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StipulationTypeEnum_descriptor_;
}
bool StipulationTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoundingDirectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoundingDirectionEnum_descriptor_;
}
bool RoundingDirectionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerTypeEnum_descriptor_;
}
bool TriggerTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerActionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerActionEnum_descriptor_;
}
bool TriggerActionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerPriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerPriceTypeEnum_descriptor_;
}
bool TriggerPriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerPriceTypeScopeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerPriceTypeScopeEnum_descriptor_;
}
bool TriggerPriceTypeScopeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerPriceDirectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerPriceDirectionEnum_descriptor_;
}
bool TriggerPriceDirectionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TriggerOrderTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggerOrderTypeEnum_descriptor_;
}
bool TriggerOrderTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BenchmarkCurveNameEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BenchmarkCurveNameEnum_descriptor_;
}
bool BenchmarkCurveNameEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* YieldTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YieldTypeEnum_descriptor_;
}
bool YieldTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CommTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommTypeEnum_descriptor_;
}
bool CommTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FundRenewWaivEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FundRenewWaivEnum_descriptor_;
}
bool FundRenewWaivEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegPriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegPriceTypeEnum_descriptor_;
}
bool PegPriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegMoveTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegMoveTypeEnum_descriptor_;
}
bool PegMoveTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegOffsetTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegOffsetTypeEnum_descriptor_;
}
bool PegOffsetTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegLimitTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegLimitTypeEnum_descriptor_;
}
bool PegLimitTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegRoundDirectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegRoundDirectionEnum_descriptor_;
}
bool PegRoundDirectionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PegScopeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegScopeEnum_descriptor_;
}
bool PegScopeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionInstEnum_descriptor_;
}
bool DiscretionInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionMoveTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionMoveTypeEnum_descriptor_;
}
bool DiscretionMoveTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionOffsetTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionOffsetTypeEnum_descriptor_;
}
bool DiscretionOffsetTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionLimitTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionLimitTypeEnum_descriptor_;
}
bool DiscretionLimitTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionRoundDirectionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionRoundDirectionEnum_descriptor_;
}
bool DiscretionRoundDirectionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiscretionScopeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionScopeEnum_descriptor_;
}
bool DiscretionScopeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StrategyParameterTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyParameterTypeEnum_descriptor_;
}
bool StrategyParameterTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TrdRegTimestampTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrdRegTimestampTypeEnum_descriptor_;
}
bool TrdRegTimestampTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeskTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskTypeEnum_descriptor_;
}
bool DeskTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeskTypeSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskTypeSourceEnum_descriptor_;
}
bool DeskTypeSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeskOrderHandlingInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeskOrderHandlingInstEnum_descriptor_;
}
bool DeskOrderHandlingInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RateSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateSourceEnum_descriptor_;
}
bool RateSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RateSourceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateSourceTypeEnum_descriptor_;
}
bool RateSourceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContAmtTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContAmtTypeEnum_descriptor_;
}
bool ContAmtTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LegSwapTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegSwapTypeEnum_descriptor_;
}
bool LegSwapTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MiscFeeTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiscFeeTypeEnum_descriptor_;
}
bool MiscFeeTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MiscFeeBasisEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiscFeeBasisEnum_descriptor_;
}
bool MiscFeeBasisEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoutingTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingTypeEnum_descriptor_;
}
bool RoutingTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InstrAttribTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrAttribTypeEnum_descriptor_;
}
bool InstrAttribTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeliveryFormEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliveryFormEnum_descriptor_;
}
bool DeliveryFormEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TickRuleTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TickRuleTypeEnum_descriptor_;
}
bool TickRuleTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LotTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotTypeEnum_descriptor_;
}
bool LotTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceLimitTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceLimitTypeEnum_descriptor_;
}
bool PriceLimitTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExpirationCycleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpirationCycleEnum_descriptor_;
}
bool ExpirationCycleEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ImpliedMarketIndicatorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImpliedMarketIndicatorEnum_descriptor_;
}
bool ImpliedMarketIndicatorEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MultilegModelEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultilegModelEnum_descriptor_;
}
bool MultilegModelEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MultilegPriceMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultilegPriceMethodEnum_descriptor_;
}
bool MultilegPriceMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceTypeEnum_descriptor_;
}
bool PriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrdTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdTypeEnum_descriptor_;
}
bool OrdTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInForceEnum_descriptor_;
}
bool TimeInForceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTypeEnum_descriptor_;
}
bool MatchTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MdBookTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MdBookTypeEnum_descriptor_;
}
bool MdBookTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaturityMonthYearFormatEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaturityMonthYearFormatEnum_descriptor_;
}
bool MaturityMonthYearFormatEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MaturityMonthYearIncrementUnitsEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaturityMonthYearIncrementUnitsEnum_descriptor_;
}
bool MaturityMonthYearIncrementUnitsEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PartySubIdTypeUnion::kPartySubIdTypeFieldNumber;
const int PartySubIdTypeUnion::kPartySubIdTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

PartySubIdTypeUnion::PartySubIdTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartySubIdTypeUnion::InitAsDefaultInstance() {
}

PartySubIdTypeUnion::PartySubIdTypeUnion(const PartySubIdTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartySubIdTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  party_sub_id_type_ = 0;
  party_sub_id_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartySubIdTypeUnion::~PartySubIdTypeUnion() {
  SharedDtor();
}

void PartySubIdTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartySubIdTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartySubIdTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartySubIdTypeUnion_descriptor_;
}

const PartySubIdTypeUnion& PartySubIdTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PartySubIdTypeUnion* PartySubIdTypeUnion::default_instance_ = NULL;

PartySubIdTypeUnion* PartySubIdTypeUnion::New() const {
  return new PartySubIdTypeUnion;
}

void PartySubIdTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    party_sub_id_type_ = 0;
    party_sub_id_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartySubIdTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.PartySubIdTypeEnum party_sub_id_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PartySubIdTypeEnum_IsValid(value)) {
            set_party_sub_id_type(static_cast< ::Common::PartySubIdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_party_sub_id_type_sfixed64;
        break;
      }

      // optional sfixed64 party_sub_id_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_party_sub_id_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &party_sub_id_type_sfixed64_)));
          set_has_party_sub_id_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartySubIdTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.PartySubIdTypeEnum party_sub_id_type = 1;
  if (has_party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->party_sub_id_type(), output);
  }

  // optional sfixed64 party_sub_id_type_sfixed64 = 2;
  if (has_party_sub_id_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->party_sub_id_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartySubIdTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.PartySubIdTypeEnum party_sub_id_type = 1;
  if (has_party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->party_sub_id_type(), target);
  }

  // optional sfixed64 party_sub_id_type_sfixed64 = 2;
  if (has_party_sub_id_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->party_sub_id_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartySubIdTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.PartySubIdTypeEnum party_sub_id_type = 1;
    if (has_party_sub_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->party_sub_id_type());
    }

    // optional sfixed64 party_sub_id_type_sfixed64 = 2;
    if (has_party_sub_id_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartySubIdTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartySubIdTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartySubIdTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartySubIdTypeUnion::MergeFrom(const PartySubIdTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_sub_id_type()) {
      set_party_sub_id_type(from.party_sub_id_type());
    }
    if (from.has_party_sub_id_type_sfixed64()) {
      set_party_sub_id_type_sfixed64(from.party_sub_id_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartySubIdTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartySubIdTypeUnion::CopyFrom(const PartySubIdTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartySubIdTypeUnion::IsInitialized() const {

  return true;
}

void PartySubIdTypeUnion::Swap(PartySubIdTypeUnion* other) {
  if (other != this) {
    std::swap(party_sub_id_type_, other->party_sub_id_type_);
    std::swap(party_sub_id_type_sfixed64_, other->party_sub_id_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartySubIdTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartySubIdTypeUnion_descriptor_;
  metadata.reflection = PartySubIdTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PtysSubGrp::kPartySubIdFieldNumber;
const int PtysSubGrp::kPartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

PtysSubGrp::PtysSubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PtysSubGrp::InitAsDefaultInstance() {
}

PtysSubGrp::PtysSubGrp(const PtysSubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PtysSubGrp::SharedCtor() {
  _cached_size_ = 0;
  party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  party_sub_id_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PtysSubGrp::~PtysSubGrp() {
  SharedDtor();
}

void PtysSubGrp::SharedDtor() {
  if (party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void PtysSubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PtysSubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PtysSubGrp_descriptor_;
}

const PtysSubGrp& PtysSubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PtysSubGrp* PtysSubGrp::default_instance_ = NULL;

PtysSubGrp* PtysSubGrp::New() const {
  return new PtysSubGrp;
}

void PtysSubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_party_sub_id()) {
      if (party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        party_sub_id_->clear();
      }
    }
    party_sub_id_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PtysSubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->party_sub_id().data(), this->party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_party_sub_id_type;
        break;
      }

      // optional .Common.PartySubIdTypeEnum party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_sub_id_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PartySubIdTypeEnum_IsValid(value)) {
            set_party_sub_id_type(static_cast< ::Common::PartySubIdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PtysSubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string party_sub_id = 1;
  if (has_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->party_sub_id().data(), this->party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->party_sub_id(), output);
  }

  // optional .Common.PartySubIdTypeEnum party_sub_id_type = 2;
  if (has_party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PtysSubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string party_sub_id = 1;
  if (has_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->party_sub_id().data(), this->party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->party_sub_id(), target);
  }

  // optional .Common.PartySubIdTypeEnum party_sub_id_type = 2;
  if (has_party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PtysSubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string party_sub_id = 1;
    if (has_party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->party_sub_id());
    }

    // optional .Common.PartySubIdTypeEnum party_sub_id_type = 2;
    if (has_party_sub_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->party_sub_id_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PtysSubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PtysSubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PtysSubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PtysSubGrp::MergeFrom(const PtysSubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_sub_id()) {
      set_party_sub_id(from.party_sub_id());
    }
    if (from.has_party_sub_id_type()) {
      set_party_sub_id_type(from.party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PtysSubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PtysSubGrp::CopyFrom(const PtysSubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PtysSubGrp::IsInitialized() const {

  return true;
}

void PtysSubGrp::Swap(PtysSubGrp* other) {
  if (other != this) {
    std::swap(party_sub_id_, other->party_sub_id_);
    std::swap(party_sub_id_type_, other->party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PtysSubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PtysSubGrp_descriptor_;
  metadata.reflection = PtysSubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Parties::kPartyIdFieldNumber;
const int Parties::kPartyIdSourceFieldNumber;
const int Parties::kPartyRoleFieldNumber;
const int Parties::kPtysSubGrpFieldNumber;
#endif  // !_MSC_VER

Parties::Parties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Parties::InitAsDefaultInstance() {
}

Parties::Parties(const Parties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Parties::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  party_id_source_ = 0;
  party_role_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parties::~Parties() {
  SharedDtor();
}

void Parties::SharedDtor() {
  if (party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete party_id_;
  }
  if (this != default_instance_) {
  }
}

void Parties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Parties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Parties_descriptor_;
}

const Parties& Parties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Parties* Parties::default_instance_ = NULL;

Parties* Parties::New() const {
  return new Parties;
}

void Parties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_party_id()) {
      if (party_id_ != &::google::protobuf::internal::kEmptyString) {
        party_id_->clear();
      }
    }
    party_id_source_ = 0;
    party_role_ = 0;
  }
  ptys_sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Parties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->party_id().data(), this->party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_party_id_source;
        break;
      }

      // optional .Common.PartyIdSourceEnum party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PartyIdSourceEnum_IsValid(value)) {
            set_party_id_source(static_cast< ::Common::PartyIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_party_role;
        break;
      }

      // optional .Common.PartyRoleEnum party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party_role:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PartyRoleEnum_IsValid(value)) {
            set_party_role(static_cast< ::Common::PartyRoleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ptys_sub_grp;
        break;
      }

      // repeated .Common.PtysSubGrp ptys_sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ptys_sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ptys_sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ptys_sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Parties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->party_id().data(), this->party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->party_id(), output);
  }

  // optional .Common.PartyIdSourceEnum party_id_source = 2;
  if (has_party_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->party_id_source(), output);
  }

  // optional .Common.PartyRoleEnum party_role = 3;
  if (has_party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->party_role(), output);
  }

  // repeated .Common.PtysSubGrp ptys_sub_grp = 4;
  for (int i = 0; i < this->ptys_sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ptys_sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Parties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string party_id = 1;
  if (has_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->party_id().data(), this->party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->party_id(), target);
  }

  // optional .Common.PartyIdSourceEnum party_id_source = 2;
  if (has_party_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->party_id_source(), target);
  }

  // optional .Common.PartyRoleEnum party_role = 3;
  if (has_party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->party_role(), target);
  }

  // repeated .Common.PtysSubGrp ptys_sub_grp = 4;
  for (int i = 0; i < this->ptys_sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ptys_sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Parties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->party_id());
    }

    // optional .Common.PartyIdSourceEnum party_id_source = 2;
    if (has_party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->party_id_source());
    }

    // optional .Common.PartyRoleEnum party_role = 3;
    if (has_party_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->party_role());
    }

  }
  // repeated .Common.PtysSubGrp ptys_sub_grp = 4;
  total_size += 1 * this->ptys_sub_grp_size();
  for (int i = 0; i < this->ptys_sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ptys_sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Parties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Parties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Parties::MergeFrom(const Parties& from) {
  GOOGLE_CHECK_NE(&from, this);
  ptys_sub_grp_.MergeFrom(from.ptys_sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_party_id()) {
      set_party_id(from.party_id());
    }
    if (from.has_party_id_source()) {
      set_party_id_source(from.party_id_source());
    }
    if (from.has_party_role()) {
      set_party_role(from.party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Parties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parties::CopyFrom(const Parties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parties::IsInitialized() const {

  return true;
}

void Parties::Swap(Parties* other) {
  if (other != this) {
    std::swap(party_id_, other->party_id_);
    std::swap(party_id_source_, other->party_id_source_);
    std::swap(party_role_, other->party_role_);
    ptys_sub_grp_.Swap(&other->ptys_sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Parties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Parties_descriptor_;
  metadata.reflection = Parties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NstdPtysSubGrp::kNestedPartySubIdFieldNumber;
const int NstdPtysSubGrp::kNestedPartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

NstdPtysSubGrp::NstdPtysSubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NstdPtysSubGrp::InitAsDefaultInstance() {
}

NstdPtysSubGrp::NstdPtysSubGrp(const NstdPtysSubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NstdPtysSubGrp::SharedCtor() {
  _cached_size_ = 0;
  nested_party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NstdPtysSubGrp::~NstdPtysSubGrp() {
  SharedDtor();
}

void NstdPtysSubGrp::SharedDtor() {
  if (nested_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested_party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void NstdPtysSubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NstdPtysSubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NstdPtysSubGrp_descriptor_;
}

const NstdPtysSubGrp& NstdPtysSubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NstdPtysSubGrp* NstdPtysSubGrp::default_instance_ = NULL;

NstdPtysSubGrp* NstdPtysSubGrp::New() const {
  return new NstdPtysSubGrp;
}

void NstdPtysSubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested_party_sub_id()) {
      if (nested_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        nested_party_sub_id_->clear();
      }
    }
    nested_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NstdPtysSubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested_party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested_party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested_party_sub_id().data(), this->nested_party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nested_party_sub_id_type;
        break;
      }

      // optional sfixed64 nested_party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested_party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested_party_sub_id_type_)));
          set_has_nested_party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NstdPtysSubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested_party_sub_id = 1;
  if (has_nested_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_sub_id().data(), this->nested_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested_party_sub_id(), output);
  }

  // optional sfixed64 nested_party_sub_id_type = 2;
  if (has_nested_party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->nested_party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NstdPtysSubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested_party_sub_id = 1;
  if (has_nested_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_sub_id().data(), this->nested_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested_party_sub_id(), target);
  }

  // optional sfixed64 nested_party_sub_id_type = 2;
  if (has_nested_party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->nested_party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NstdPtysSubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested_party_sub_id = 1;
    if (has_nested_party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested_party_sub_id());
    }

    // optional sfixed64 nested_party_sub_id_type = 2;
    if (has_nested_party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NstdPtysSubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NstdPtysSubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NstdPtysSubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NstdPtysSubGrp::MergeFrom(const NstdPtysSubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested_party_sub_id()) {
      set_nested_party_sub_id(from.nested_party_sub_id());
    }
    if (from.has_nested_party_sub_id_type()) {
      set_nested_party_sub_id_type(from.nested_party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NstdPtysSubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NstdPtysSubGrp::CopyFrom(const NstdPtysSubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NstdPtysSubGrp::IsInitialized() const {

  return true;
}

void NstdPtysSubGrp::Swap(NstdPtysSubGrp* other) {
  if (other != this) {
    std::swap(nested_party_sub_id_, other->nested_party_sub_id_);
    std::swap(nested_party_sub_id_type_, other->nested_party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NstdPtysSubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NstdPtysSubGrp_descriptor_;
  metadata.reflection = NstdPtysSubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NestedParties::kNestedPartyIdFieldNumber;
const int NestedParties::kNestedPartyIdSourceFieldNumber;
const int NestedParties::kNestedPartyRoleFieldNumber;
const int NestedParties::kNstdPtysSubGrpFieldNumber;
#endif  // !_MSC_VER

NestedParties::NestedParties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NestedParties::InitAsDefaultInstance() {
}

NestedParties::NestedParties(const NestedParties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NestedParties::SharedCtor() {
  _cached_size_ = 0;
  nested_party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested_party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested_party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NestedParties::~NestedParties() {
  SharedDtor();
}

void NestedParties::SharedDtor() {
  if (nested_party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested_party_id_;
  }
  if (nested_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete nested_party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void NestedParties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedParties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedParties_descriptor_;
}

const NestedParties& NestedParties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NestedParties* NestedParties::default_instance_ = NULL;

NestedParties* NestedParties::New() const {
  return new NestedParties;
}

void NestedParties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested_party_id()) {
      if (nested_party_id_ != &::google::protobuf::internal::kEmptyString) {
        nested_party_id_->clear();
      }
    }
    if (has_nested_party_id_source()) {
      if (nested_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        nested_party_id_source_->clear();
      }
    }
    nested_party_role_ = GOOGLE_LONGLONG(0);
  }
  nstd_ptys_sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NestedParties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested_party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested_party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested_party_id().data(), this->nested_party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested_party_id_source;
        break;
      }

      // optional string nested_party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested_party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested_party_id_source().data(), this->nested_party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nested_party_role;
        break;
      }

      // optional sfixed64 nested_party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested_party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested_party_role_)));
          set_has_nested_party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys_sub_grp;
        break;
      }

      // repeated .Common.NstdPtysSubGrp nstd_ptys_sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nstd_ptys_sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nstd_ptys_sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys_sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NestedParties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested_party_id = 1;
  if (has_nested_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_id().data(), this->nested_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested_party_id(), output);
  }

  // optional string nested_party_id_source = 2;
  if (has_nested_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_id_source().data(), this->nested_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nested_party_id_source(), output);
  }

  // optional sfixed64 nested_party_role = 3;
  if (has_nested_party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->nested_party_role(), output);
  }

  // repeated .Common.NstdPtysSubGrp nstd_ptys_sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys_sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nstd_ptys_sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NestedParties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested_party_id = 1;
  if (has_nested_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_id().data(), this->nested_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested_party_id(), target);
  }

  // optional string nested_party_id_source = 2;
  if (has_nested_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_party_id_source().data(), this->nested_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nested_party_id_source(), target);
  }

  // optional sfixed64 nested_party_role = 3;
  if (has_nested_party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->nested_party_role(), target);
  }

  // repeated .Common.NstdPtysSubGrp nstd_ptys_sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys_sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nstd_ptys_sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NestedParties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested_party_id = 1;
    if (has_nested_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested_party_id());
    }

    // optional string nested_party_id_source = 2;
    if (has_nested_party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested_party_id_source());
    }

    // optional sfixed64 nested_party_role = 3;
    if (has_nested_party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.NstdPtysSubGrp nstd_ptys_sub_grp = 4;
  total_size += 1 * this->nstd_ptys_sub_grp_size();
  for (int i = 0; i < this->nstd_ptys_sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nstd_ptys_sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedParties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NestedParties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NestedParties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NestedParties::MergeFrom(const NestedParties& from) {
  GOOGLE_CHECK_NE(&from, this);
  nstd_ptys_sub_grp_.MergeFrom(from.nstd_ptys_sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested_party_id()) {
      set_nested_party_id(from.nested_party_id());
    }
    if (from.has_nested_party_id_source()) {
      set_nested_party_id_source(from.nested_party_id_source());
    }
    if (from.has_nested_party_role()) {
      set_nested_party_role(from.nested_party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NestedParties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedParties::CopyFrom(const NestedParties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedParties::IsInitialized() const {

  return true;
}

void NestedParties::Swap(NestedParties* other) {
  if (other != this) {
    std::swap(nested_party_id_, other->nested_party_id_);
    std::swap(nested_party_id_source_, other->nested_party_id_source_);
    std::swap(nested_party_role_, other->nested_party_role_);
    nstd_ptys_sub_grp_.Swap(&other->nstd_ptys_sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NestedParties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedParties_descriptor_;
  metadata.reflection = NestedParties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreAllocGrp::kAllocAccountFieldNumber;
const int PreAllocGrp::kAllocAcctIdSourceFieldNumber;
const int PreAllocGrp::kAllocQtyFieldNumber;
const int PreAllocGrp::kAllocQtyExponentFieldNumber;
const int PreAllocGrp::kAllocSettlCurrencyFieldNumber;
const int PreAllocGrp::kIndividualAllocIdFieldNumber;
const int PreAllocGrp::kNestedPartiesFieldNumber;
#endif  // !_MSC_VER

PreAllocGrp::PreAllocGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreAllocGrp::InitAsDefaultInstance() {
}

PreAllocGrp::PreAllocGrp(const PreAllocGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreAllocGrp::SharedCtor() {
  _cached_size_ = 0;
  alloc_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alloc_acct_id_source_ = GOOGLE_LONGLONG(0);
  alloc_qty_ = GOOGLE_LONGLONG(0);
  alloc_qty_exponent_ = 0;
  alloc_settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  individual_alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreAllocGrp::~PreAllocGrp() {
  SharedDtor();
}

void PreAllocGrp::SharedDtor() {
  if (alloc_account_ != &::google::protobuf::internal::kEmptyString) {
    delete alloc_account_;
  }
  if (alloc_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete alloc_settl_currency_;
  }
  if (individual_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete individual_alloc_id_;
  }
  if (this != default_instance_) {
  }
}

void PreAllocGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreAllocGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreAllocGrp_descriptor_;
}

const PreAllocGrp& PreAllocGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PreAllocGrp* PreAllocGrp::default_instance_ = NULL;

PreAllocGrp* PreAllocGrp::New() const {
  return new PreAllocGrp;
}

void PreAllocGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_alloc_account()) {
      if (alloc_account_ != &::google::protobuf::internal::kEmptyString) {
        alloc_account_->clear();
      }
    }
    alloc_acct_id_source_ = GOOGLE_LONGLONG(0);
    alloc_qty_ = GOOGLE_LONGLONG(0);
    alloc_qty_exponent_ = 0;
    if (has_alloc_settl_currency()) {
      if (alloc_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
        alloc_settl_currency_->clear();
      }
    }
    if (has_individual_alloc_id()) {
      if (individual_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
        individual_alloc_id_->clear();
      }
    }
  }
  nested_parties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreAllocGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string alloc_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alloc_account().data(), this->alloc_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_alloc_acct_id_source;
        break;
      }

      // optional sfixed64 alloc_acct_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alloc_acct_id_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &alloc_acct_id_source_)));
          set_has_alloc_acct_id_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_alloc_qty;
        break;
      }

      // optional sfixed64 alloc_qty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alloc_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &alloc_qty_)));
          set_has_alloc_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_alloc_qty_exponent;
        break;
      }

      // optional sfixed32 alloc_qty_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alloc_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &alloc_qty_exponent_)));
          set_has_alloc_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_alloc_settl_currency;
        break;
      }

      // optional string alloc_settl_currency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alloc_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alloc_settl_currency().data(), this->alloc_settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_individual_alloc_id;
        break;
      }

      // optional string individual_alloc_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_individual_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_individual_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->individual_alloc_id().data(), this->individual_alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nested_parties;
        break;
      }

      // repeated .Common.NestedParties nested_parties = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nested_parties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_nested_parties;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreAllocGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string alloc_account = 1;
  if (has_alloc_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alloc_account().data(), this->alloc_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->alloc_account(), output);
  }

  // optional sfixed64 alloc_acct_id_source = 2;
  if (has_alloc_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->alloc_acct_id_source(), output);
  }

  // optional sfixed64 alloc_qty = 3;
  if (has_alloc_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->alloc_qty(), output);
  }

  // optional sfixed32 alloc_qty_exponent = 4;
  if (has_alloc_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->alloc_qty_exponent(), output);
  }

  // optional string alloc_settl_currency = 5;
  if (has_alloc_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alloc_settl_currency().data(), this->alloc_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->alloc_settl_currency(), output);
  }

  // optional string individual_alloc_id = 6;
  if (has_individual_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->individual_alloc_id().data(), this->individual_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->individual_alloc_id(), output);
  }

  // repeated .Common.NestedParties nested_parties = 7;
  for (int i = 0; i < this->nested_parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nested_parties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreAllocGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string alloc_account = 1;
  if (has_alloc_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alloc_account().data(), this->alloc_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alloc_account(), target);
  }

  // optional sfixed64 alloc_acct_id_source = 2;
  if (has_alloc_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->alloc_acct_id_source(), target);
  }

  // optional sfixed64 alloc_qty = 3;
  if (has_alloc_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->alloc_qty(), target);
  }

  // optional sfixed32 alloc_qty_exponent = 4;
  if (has_alloc_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->alloc_qty_exponent(), target);
  }

  // optional string alloc_settl_currency = 5;
  if (has_alloc_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alloc_settl_currency().data(), this->alloc_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alloc_settl_currency(), target);
  }

  // optional string individual_alloc_id = 6;
  if (has_individual_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->individual_alloc_id().data(), this->individual_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->individual_alloc_id(), target);
  }

  // repeated .Common.NestedParties nested_parties = 7;
  for (int i = 0; i < this->nested_parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nested_parties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreAllocGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string alloc_account = 1;
    if (has_alloc_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alloc_account());
    }

    // optional sfixed64 alloc_acct_id_source = 2;
    if (has_alloc_acct_id_source()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 alloc_qty = 3;
    if (has_alloc_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 alloc_qty_exponent = 4;
    if (has_alloc_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string alloc_settl_currency = 5;
    if (has_alloc_settl_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alloc_settl_currency());
    }

    // optional string individual_alloc_id = 6;
    if (has_individual_alloc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->individual_alloc_id());
    }

  }
  // repeated .Common.NestedParties nested_parties = 7;
  total_size += 1 * this->nested_parties_size();
  for (int i = 0; i < this->nested_parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nested_parties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreAllocGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreAllocGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreAllocGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreAllocGrp::MergeFrom(const PreAllocGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  nested_parties_.MergeFrom(from.nested_parties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alloc_account()) {
      set_alloc_account(from.alloc_account());
    }
    if (from.has_alloc_acct_id_source()) {
      set_alloc_acct_id_source(from.alloc_acct_id_source());
    }
    if (from.has_alloc_qty()) {
      set_alloc_qty(from.alloc_qty());
    }
    if (from.has_alloc_qty_exponent()) {
      set_alloc_qty_exponent(from.alloc_qty_exponent());
    }
    if (from.has_alloc_settl_currency()) {
      set_alloc_settl_currency(from.alloc_settl_currency());
    }
    if (from.has_individual_alloc_id()) {
      set_individual_alloc_id(from.individual_alloc_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreAllocGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAllocGrp::CopyFrom(const PreAllocGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAllocGrp::IsInitialized() const {

  return true;
}

void PreAllocGrp::Swap(PreAllocGrp* other) {
  if (other != this) {
    std::swap(alloc_account_, other->alloc_account_);
    std::swap(alloc_acct_id_source_, other->alloc_acct_id_source_);
    std::swap(alloc_qty_, other->alloc_qty_);
    std::swap(alloc_qty_exponent_, other->alloc_qty_exponent_);
    std::swap(alloc_settl_currency_, other->alloc_settl_currency_);
    std::swap(individual_alloc_id_, other->individual_alloc_id_);
    nested_parties_.Swap(&other->nested_parties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreAllocGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreAllocGrp_descriptor_;
  metadata.reflection = PreAllocGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DisplayInstruction::kDisplayHighQtyFieldNumber;
const int DisplayInstruction::kDisplayHighQtyExponentFieldNumber;
const int DisplayInstruction::kDisplayLowQtyFieldNumber;
const int DisplayInstruction::kDisplayLowQtyExponentFieldNumber;
const int DisplayInstruction::kDisplayMethodFieldNumber;
const int DisplayInstruction::kDisplayMinIncrFieldNumber;
const int DisplayInstruction::kDisplayMinIncrExponentFieldNumber;
const int DisplayInstruction::kDisplayQtyFieldNumber;
const int DisplayInstruction::kDisplayQtyExponentFieldNumber;
const int DisplayInstruction::kDisplayWhenFieldNumber;
const int DisplayInstruction::kRefreshQtyFieldNumber;
const int DisplayInstruction::kRefreshQtyExponentFieldNumber;
const int DisplayInstruction::kSecondaryDisplayQtyFieldNumber;
const int DisplayInstruction::kSecondaryDisplayQtyExponentFieldNumber;
#endif  // !_MSC_VER

DisplayInstruction::DisplayInstruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DisplayInstruction::InitAsDefaultInstance() {
}

DisplayInstruction::DisplayInstruction(const DisplayInstruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DisplayInstruction::SharedCtor() {
  _cached_size_ = 0;
  display_high_qty_ = GOOGLE_LONGLONG(0);
  display_high_qty_exponent_ = 0;
  display_low_qty_ = GOOGLE_LONGLONG(0);
  display_low_qty_exponent_ = 0;
  display_method_ = 0;
  display_min_incr_ = GOOGLE_LONGLONG(0);
  display_min_incr_exponent_ = 0;
  display_qty_ = GOOGLE_LONGLONG(0);
  display_qty_exponent_ = 0;
  display_when_ = 0;
  refresh_qty_ = GOOGLE_LONGLONG(0);
  refresh_qty_exponent_ = 0;
  secondary_display_qty_ = GOOGLE_LONGLONG(0);
  secondary_display_qty_exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DisplayInstruction::~DisplayInstruction() {
  SharedDtor();
}

void DisplayInstruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DisplayInstruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisplayInstruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayInstruction_descriptor_;
}

const DisplayInstruction& DisplayInstruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DisplayInstruction* DisplayInstruction::default_instance_ = NULL;

DisplayInstruction* DisplayInstruction::New() const {
  return new DisplayInstruction;
}

void DisplayInstruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    display_high_qty_ = GOOGLE_LONGLONG(0);
    display_high_qty_exponent_ = 0;
    display_low_qty_ = GOOGLE_LONGLONG(0);
    display_low_qty_exponent_ = 0;
    display_method_ = 0;
    display_min_incr_ = GOOGLE_LONGLONG(0);
    display_min_incr_exponent_ = 0;
    display_qty_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    display_qty_exponent_ = 0;
    display_when_ = 0;
    refresh_qty_ = GOOGLE_LONGLONG(0);
    refresh_qty_exponent_ = 0;
    secondary_display_qty_ = GOOGLE_LONGLONG(0);
    secondary_display_qty_exponent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DisplayInstruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 display_high_qty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &display_high_qty_)));
          set_has_display_high_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_display_high_qty_exponent;
        break;
      }

      // optional sfixed32 display_high_qty_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_display_high_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &display_high_qty_exponent_)));
          set_has_display_high_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_display_low_qty;
        break;
      }

      // optional sfixed64 display_low_qty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_display_low_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &display_low_qty_)));
          set_has_display_low_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_display_low_qty_exponent;
        break;
      }

      // optional sfixed32 display_low_qty_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_display_low_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &display_low_qty_exponent_)));
          set_has_display_low_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_display_method;
        break;
      }

      // optional .Common.DisplayMethodEnum display_method = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DisplayMethodEnum_IsValid(value)) {
            set_display_method(static_cast< ::Common::DisplayMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_display_min_incr;
        break;
      }

      // optional sfixed64 display_min_incr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_display_min_incr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &display_min_incr_)));
          set_has_display_min_incr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_display_min_incr_exponent;
        break;
      }

      // optional sfixed32 display_min_incr_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_display_min_incr_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &display_min_incr_exponent_)));
          set_has_display_min_incr_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_display_qty;
        break;
      }

      // optional sfixed64 display_qty = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_display_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &display_qty_)));
          set_has_display_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_display_qty_exponent;
        break;
      }

      // optional sfixed32 display_qty_exponent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_display_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &display_qty_exponent_)));
          set_has_display_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_display_when;
        break;
      }

      // optional .Common.DisplayWhenEnum display_when = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_display_when:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DisplayWhenEnum_IsValid(value)) {
            set_display_when(static_cast< ::Common::DisplayWhenEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_refresh_qty;
        break;
      }

      // optional sfixed64 refresh_qty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_refresh_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &refresh_qty_)));
          set_has_refresh_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_refresh_qty_exponent;
        break;
      }

      // optional sfixed32 refresh_qty_exponent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_refresh_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &refresh_qty_exponent_)));
          set_has_refresh_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_secondary_display_qty;
        break;
      }

      // optional sfixed64 secondary_display_qty = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_secondary_display_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &secondary_display_qty_)));
          set_has_secondary_display_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_secondary_display_qty_exponent;
        break;
      }

      // optional sfixed32 secondary_display_qty_exponent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_secondary_display_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &secondary_display_qty_exponent_)));
          set_has_secondary_display_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DisplayInstruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 display_high_qty = 1;
  if (has_display_high_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->display_high_qty(), output);
  }

  // optional sfixed32 display_high_qty_exponent = 2;
  if (has_display_high_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->display_high_qty_exponent(), output);
  }

  // optional sfixed64 display_low_qty = 3;
  if (has_display_low_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->display_low_qty(), output);
  }

  // optional sfixed32 display_low_qty_exponent = 4;
  if (has_display_low_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->display_low_qty_exponent(), output);
  }

  // optional .Common.DisplayMethodEnum display_method = 5;
  if (has_display_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->display_method(), output);
  }

  // optional sfixed64 display_min_incr = 6;
  if (has_display_min_incr()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->display_min_incr(), output);
  }

  // optional sfixed32 display_min_incr_exponent = 7;
  if (has_display_min_incr_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->display_min_incr_exponent(), output);
  }

  // optional sfixed64 display_qty = 8;
  if (has_display_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->display_qty(), output);
  }

  // optional sfixed32 display_qty_exponent = 9;
  if (has_display_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->display_qty_exponent(), output);
  }

  // optional .Common.DisplayWhenEnum display_when = 10;
  if (has_display_when()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->display_when(), output);
  }

  // optional sfixed64 refresh_qty = 11;
  if (has_refresh_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->refresh_qty(), output);
  }

  // optional sfixed32 refresh_qty_exponent = 12;
  if (has_refresh_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->refresh_qty_exponent(), output);
  }

  // optional sfixed64 secondary_display_qty = 13;
  if (has_secondary_display_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->secondary_display_qty(), output);
  }

  // optional sfixed32 secondary_display_qty_exponent = 14;
  if (has_secondary_display_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->secondary_display_qty_exponent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DisplayInstruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 display_high_qty = 1;
  if (has_display_high_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->display_high_qty(), target);
  }

  // optional sfixed32 display_high_qty_exponent = 2;
  if (has_display_high_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->display_high_qty_exponent(), target);
  }

  // optional sfixed64 display_low_qty = 3;
  if (has_display_low_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->display_low_qty(), target);
  }

  // optional sfixed32 display_low_qty_exponent = 4;
  if (has_display_low_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->display_low_qty_exponent(), target);
  }

  // optional .Common.DisplayMethodEnum display_method = 5;
  if (has_display_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->display_method(), target);
  }

  // optional sfixed64 display_min_incr = 6;
  if (has_display_min_incr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->display_min_incr(), target);
  }

  // optional sfixed32 display_min_incr_exponent = 7;
  if (has_display_min_incr_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->display_min_incr_exponent(), target);
  }

  // optional sfixed64 display_qty = 8;
  if (has_display_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->display_qty(), target);
  }

  // optional sfixed32 display_qty_exponent = 9;
  if (has_display_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->display_qty_exponent(), target);
  }

  // optional .Common.DisplayWhenEnum display_when = 10;
  if (has_display_when()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->display_when(), target);
  }

  // optional sfixed64 refresh_qty = 11;
  if (has_refresh_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->refresh_qty(), target);
  }

  // optional sfixed32 refresh_qty_exponent = 12;
  if (has_refresh_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->refresh_qty_exponent(), target);
  }

  // optional sfixed64 secondary_display_qty = 13;
  if (has_secondary_display_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->secondary_display_qty(), target);
  }

  // optional sfixed32 secondary_display_qty_exponent = 14;
  if (has_secondary_display_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->secondary_display_qty_exponent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DisplayInstruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 display_high_qty = 1;
    if (has_display_high_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 display_high_qty_exponent = 2;
    if (has_display_high_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 display_low_qty = 3;
    if (has_display_low_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 display_low_qty_exponent = 4;
    if (has_display_low_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.DisplayMethodEnum display_method = 5;
    if (has_display_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_method());
    }

    // optional sfixed64 display_min_incr = 6;
    if (has_display_min_incr()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 display_min_incr_exponent = 7;
    if (has_display_min_incr_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 display_qty = 8;
    if (has_display_qty()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 display_qty_exponent = 9;
    if (has_display_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.DisplayWhenEnum display_when = 10;
    if (has_display_when()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_when());
    }

    // optional sfixed64 refresh_qty = 11;
    if (has_refresh_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 refresh_qty_exponent = 12;
    if (has_refresh_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 secondary_display_qty = 13;
    if (has_secondary_display_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 secondary_display_qty_exponent = 14;
    if (has_secondary_display_qty_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisplayInstruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DisplayInstruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DisplayInstruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DisplayInstruction::MergeFrom(const DisplayInstruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display_high_qty()) {
      set_display_high_qty(from.display_high_qty());
    }
    if (from.has_display_high_qty_exponent()) {
      set_display_high_qty_exponent(from.display_high_qty_exponent());
    }
    if (from.has_display_low_qty()) {
      set_display_low_qty(from.display_low_qty());
    }
    if (from.has_display_low_qty_exponent()) {
      set_display_low_qty_exponent(from.display_low_qty_exponent());
    }
    if (from.has_display_method()) {
      set_display_method(from.display_method());
    }
    if (from.has_display_min_incr()) {
      set_display_min_incr(from.display_min_incr());
    }
    if (from.has_display_min_incr_exponent()) {
      set_display_min_incr_exponent(from.display_min_incr_exponent());
    }
    if (from.has_display_qty()) {
      set_display_qty(from.display_qty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_display_qty_exponent()) {
      set_display_qty_exponent(from.display_qty_exponent());
    }
    if (from.has_display_when()) {
      set_display_when(from.display_when());
    }
    if (from.has_refresh_qty()) {
      set_refresh_qty(from.refresh_qty());
    }
    if (from.has_refresh_qty_exponent()) {
      set_refresh_qty_exponent(from.refresh_qty_exponent());
    }
    if (from.has_secondary_display_qty()) {
      set_secondary_display_qty(from.secondary_display_qty());
    }
    if (from.has_secondary_display_qty_exponent()) {
      set_secondary_display_qty_exponent(from.secondary_display_qty_exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DisplayInstruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisplayInstruction::CopyFrom(const DisplayInstruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisplayInstruction::IsInitialized() const {

  return true;
}

void DisplayInstruction::Swap(DisplayInstruction* other) {
  if (other != this) {
    std::swap(display_high_qty_, other->display_high_qty_);
    std::swap(display_high_qty_exponent_, other->display_high_qty_exponent_);
    std::swap(display_low_qty_, other->display_low_qty_);
    std::swap(display_low_qty_exponent_, other->display_low_qty_exponent_);
    std::swap(display_method_, other->display_method_);
    std::swap(display_min_incr_, other->display_min_incr_);
    std::swap(display_min_incr_exponent_, other->display_min_incr_exponent_);
    std::swap(display_qty_, other->display_qty_);
    std::swap(display_qty_exponent_, other->display_qty_exponent_);
    std::swap(display_when_, other->display_when_);
    std::swap(refresh_qty_, other->refresh_qty_);
    std::swap(refresh_qty_exponent_, other->refresh_qty_exponent_);
    std::swap(secondary_display_qty_, other->secondary_display_qty_);
    std::swap(secondary_display_qty_exponent_, other->secondary_display_qty_exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DisplayInstruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DisplayInstruction_descriptor_;
  metadata.reflection = DisplayInstruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradingSessionIdUnion::kTradingSessionIdFieldNumber;
const int TradingSessionIdUnion::kTradingSessionIdSfixed64FieldNumber;
#endif  // !_MSC_VER

TradingSessionIdUnion::TradingSessionIdUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradingSessionIdUnion::InitAsDefaultInstance() {
}

TradingSessionIdUnion::TradingSessionIdUnion(const TradingSessionIdUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradingSessionIdUnion::SharedCtor() {
  _cached_size_ = 0;
  trading_session_id_ = 0;
  trading_session_id_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradingSessionIdUnion::~TradingSessionIdUnion() {
  SharedDtor();
}

void TradingSessionIdUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradingSessionIdUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradingSessionIdUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionIdUnion_descriptor_;
}

const TradingSessionIdUnion& TradingSessionIdUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TradingSessionIdUnion* TradingSessionIdUnion::default_instance_ = NULL;

TradingSessionIdUnion* TradingSessionIdUnion::New() const {
  return new TradingSessionIdUnion;
}

void TradingSessionIdUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_session_id_ = 0;
    trading_session_id_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradingSessionIdUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TradingSessionIdEnum trading_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::Common::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_trading_session_id_sfixed64;
        break;
      }

      // optional sfixed64 trading_session_id_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trading_session_id_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trading_session_id_sfixed64_)));
          set_has_trading_session_id_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradingSessionIdUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trading_session_id(), output);
  }

  // optional sfixed64 trading_session_id_sfixed64 = 2;
  if (has_trading_session_id_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->trading_session_id_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradingSessionIdUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trading_session_id(), target);
  }

  // optional sfixed64 trading_session_id_sfixed64 = 2;
  if (has_trading_session_id_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->trading_session_id_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradingSessionIdUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TradingSessionIdEnum trading_session_id = 1;
    if (has_trading_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional sfixed64 trading_session_id_sfixed64 = 2;
    if (has_trading_session_id_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradingSessionIdUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradingSessionIdUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradingSessionIdUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradingSessionIdUnion::MergeFrom(const TradingSessionIdUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_trading_session_id_sfixed64()) {
      set_trading_session_id_sfixed64(from.trading_session_id_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradingSessionIdUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSessionIdUnion::CopyFrom(const TradingSessionIdUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSessionIdUnion::IsInitialized() const {

  return true;
}

void TradingSessionIdUnion::Swap(TradingSessionIdUnion* other) {
  if (other != this) {
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(trading_session_id_sfixed64_, other->trading_session_id_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradingSessionIdUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradingSessionIdUnion_descriptor_;
  metadata.reflection = TradingSessionIdUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradingSessionSubIdUnion::kTradingSessionSubIdFieldNumber;
const int TradingSessionSubIdUnion::kTradingSessionSubIdSfixed64FieldNumber;
#endif  // !_MSC_VER

TradingSessionSubIdUnion::TradingSessionSubIdUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradingSessionSubIdUnion::InitAsDefaultInstance() {
}

TradingSessionSubIdUnion::TradingSessionSubIdUnion(const TradingSessionSubIdUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradingSessionSubIdUnion::SharedCtor() {
  _cached_size_ = 0;
  trading_session_sub_id_ = 0;
  trading_session_sub_id_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradingSessionSubIdUnion::~TradingSessionSubIdUnion() {
  SharedDtor();
}

void TradingSessionSubIdUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradingSessionSubIdUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradingSessionSubIdUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionSubIdUnion_descriptor_;
}

const TradingSessionSubIdUnion& TradingSessionSubIdUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TradingSessionSubIdUnion* TradingSessionSubIdUnion::default_instance_ = NULL;

TradingSessionSubIdUnion* TradingSessionSubIdUnion::New() const {
  return new TradingSessionSubIdUnion;
}

void TradingSessionSubIdUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_session_sub_id_ = 0;
    trading_session_sub_id_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradingSessionSubIdUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::Common::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_trading_session_sub_id_sfixed64;
        break;
      }

      // optional sfixed64 trading_session_sub_id_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trading_session_sub_id_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trading_session_sub_id_sfixed64_)));
          set_has_trading_session_sub_id_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradingSessionSubIdUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 1;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trading_session_sub_id(), output);
  }

  // optional sfixed64 trading_session_sub_id_sfixed64 = 2;
  if (has_trading_session_sub_id_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->trading_session_sub_id_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradingSessionSubIdUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 1;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trading_session_sub_id(), target);
  }

  // optional sfixed64 trading_session_sub_id_sfixed64 = 2;
  if (has_trading_session_sub_id_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->trading_session_sub_id_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradingSessionSubIdUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 1;
    if (has_trading_session_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

    // optional sfixed64 trading_session_sub_id_sfixed64 = 2;
    if (has_trading_session_sub_id_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradingSessionSubIdUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradingSessionSubIdUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradingSessionSubIdUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradingSessionSubIdUnion::MergeFrom(const TradingSessionSubIdUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
    if (from.has_trading_session_sub_id_sfixed64()) {
      set_trading_session_sub_id_sfixed64(from.trading_session_sub_id_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradingSessionSubIdUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSessionSubIdUnion::CopyFrom(const TradingSessionSubIdUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSessionSubIdUnion::IsInitialized() const {

  return true;
}

void TradingSessionSubIdUnion::Swap(TradingSessionSubIdUnion* other) {
  if (other != this) {
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(trading_session_sub_id_sfixed64_, other->trading_session_sub_id_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradingSessionSubIdUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradingSessionSubIdUnion_descriptor_;
  metadata.reflection = TradingSessionSubIdUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrdgSesGrp::kTradingSessionIdFieldNumber;
const int TrdgSesGrp::kTradingSessionSubIdFieldNumber;
#endif  // !_MSC_VER

TrdgSesGrp::TrdgSesGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrdgSesGrp::InitAsDefaultInstance() {
}

TrdgSesGrp::TrdgSesGrp(const TrdgSesGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrdgSesGrp::SharedCtor() {
  _cached_size_ = 0;
  trading_session_id_ = 0;
  trading_session_sub_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrdgSesGrp::~TrdgSesGrp() {
  SharedDtor();
}

void TrdgSesGrp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrdgSesGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrdgSesGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrdgSesGrp_descriptor_;
}

const TrdgSesGrp& TrdgSesGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TrdgSesGrp* TrdgSesGrp::default_instance_ = NULL;

TrdgSesGrp* TrdgSesGrp::New() const {
  return new TrdgSesGrp;
}

void TrdgSesGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_session_id_ = 0;
    trading_session_sub_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrdgSesGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TradingSessionIdEnum trading_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::Common::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::Common::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrdgSesGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trading_session_id(), output);
  }

  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 2;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->trading_session_sub_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrdgSesGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trading_session_id(), target);
  }

  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 2;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->trading_session_sub_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrdgSesGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TradingSessionIdEnum trading_session_id = 1;
    if (has_trading_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 2;
    if (has_trading_session_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrdgSesGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrdgSesGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrdgSesGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrdgSesGrp::MergeFrom(const TrdgSesGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrdgSesGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrdgSesGrp::CopyFrom(const TrdgSesGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrdgSesGrp::IsInitialized() const {

  return true;
}

void TrdgSesGrp::Swap(TrdgSesGrp* other) {
  if (other != this) {
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrdgSesGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrdgSesGrp_descriptor_;
  metadata.reflection = TrdgSesGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecAltIdGrp::kSecurityAltIdFieldNumber;
const int SecAltIdGrp::kSecurityAltIdSourceFieldNumber;
#endif  // !_MSC_VER

SecAltIdGrp::SecAltIdGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecAltIdGrp::InitAsDefaultInstance() {
}

SecAltIdGrp::SecAltIdGrp(const SecAltIdGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecAltIdGrp::SharedCtor() {
  _cached_size_ = 0;
  security_alt_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_alt_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecAltIdGrp::~SecAltIdGrp() {
  SharedDtor();
}

void SecAltIdGrp::SharedDtor() {
  if (security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_alt_id_;
  }
  if (security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete security_alt_id_source_;
  }
  if (this != default_instance_) {
  }
}

void SecAltIdGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecAltIdGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecAltIdGrp_descriptor_;
}

const SecAltIdGrp& SecAltIdGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SecAltIdGrp* SecAltIdGrp::default_instance_ = NULL;

SecAltIdGrp* SecAltIdGrp::New() const {
  return new SecAltIdGrp;
}

void SecAltIdGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_security_alt_id()) {
      if (security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
        security_alt_id_->clear();
      }
    }
    if (has_security_alt_id_source()) {
      if (security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
        security_alt_id_source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecAltIdGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string security_alt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_alt_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_alt_id().data(), this->security_alt_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_security_alt_id_source;
        break;
      }

      // optional string security_alt_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_alt_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_alt_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_alt_id_source().data(), this->security_alt_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecAltIdGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string security_alt_id = 1;
  if (has_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_alt_id().data(), this->security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->security_alt_id(), output);
  }

  // optional string security_alt_id_source = 2;
  if (has_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_alt_id_source().data(), this->security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->security_alt_id_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecAltIdGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string security_alt_id = 1;
  if (has_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_alt_id().data(), this->security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->security_alt_id(), target);
  }

  // optional string security_alt_id_source = 2;
  if (has_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_alt_id_source().data(), this->security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->security_alt_id_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecAltIdGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string security_alt_id = 1;
    if (has_security_alt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_alt_id());
    }

    // optional string security_alt_id_source = 2;
    if (has_security_alt_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_alt_id_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecAltIdGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecAltIdGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecAltIdGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecAltIdGrp::MergeFrom(const SecAltIdGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_security_alt_id()) {
      set_security_alt_id(from.security_alt_id());
    }
    if (from.has_security_alt_id_source()) {
      set_security_alt_id_source(from.security_alt_id_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecAltIdGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecAltIdGrp::CopyFrom(const SecAltIdGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecAltIdGrp::IsInitialized() const {

  return true;
}

void SecAltIdGrp::Swap(SecAltIdGrp* other) {
  if (other != this) {
    std::swap(security_alt_id_, other->security_alt_id_);
    std::swap(security_alt_id_source_, other->security_alt_id_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecAltIdGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecAltIdGrp_descriptor_;
  metadata.reflection = SecAltIdGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityXml::kSecurityXmlFieldNumber;
const int SecurityXml::kSecurityXmlLenFieldNumber;
const int SecurityXml::kSecurityXmlSchemaFieldNumber;
#endif  // !_MSC_VER

SecurityXml::SecurityXml()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityXml::InitAsDefaultInstance() {
}

SecurityXml::SecurityXml(const SecurityXml& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityXml::SharedCtor() {
  _cached_size_ = 0;
  security_xml_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_xml_len_ = 0u;
  security_xml_schema_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityXml::~SecurityXml() {
  SharedDtor();
}

void SecurityXml::SharedDtor() {
  if (security_xml_ != &::google::protobuf::internal::kEmptyString) {
    delete security_xml_;
  }
  if (security_xml_schema_ != &::google::protobuf::internal::kEmptyString) {
    delete security_xml_schema_;
  }
  if (this != default_instance_) {
  }
}

void SecurityXml::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityXml::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityXml_descriptor_;
}

const SecurityXml& SecurityXml::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SecurityXml* SecurityXml::default_instance_ = NULL;

SecurityXml* SecurityXml::New() const {
  return new SecurityXml;
}

void SecurityXml::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_security_xml()) {
      if (security_xml_ != &::google::protobuf::internal::kEmptyString) {
        security_xml_->clear();
      }
    }
    security_xml_len_ = 0u;
    if (has_security_xml_schema()) {
      if (security_xml_schema_ != &::google::protobuf::internal::kEmptyString) {
        security_xml_schema_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityXml::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string security_xml = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_xml()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_xml().data(), this->security_xml().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_security_xml_len;
        break;
      }

      // optional fixed32 security_xml_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_security_xml_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &security_xml_len_)));
          set_has_security_xml_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security_xml_schema;
        break;
      }

      // optional string security_xml_schema = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_xml_schema:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_xml_schema()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_xml_schema().data(), this->security_xml_schema().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityXml::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string security_xml = 1;
  if (has_security_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_xml().data(), this->security_xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->security_xml(), output);
  }

  // optional fixed32 security_xml_len = 2;
  if (has_security_xml_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->security_xml_len(), output);
  }

  // optional string security_xml_schema = 3;
  if (has_security_xml_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_xml_schema().data(), this->security_xml_schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->security_xml_schema(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityXml::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string security_xml = 1;
  if (has_security_xml()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_xml().data(), this->security_xml().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->security_xml(), target);
  }

  // optional fixed32 security_xml_len = 2;
  if (has_security_xml_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->security_xml_len(), target);
  }

  // optional string security_xml_schema = 3;
  if (has_security_xml_schema()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_xml_schema().data(), this->security_xml_schema().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->security_xml_schema(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityXml::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string security_xml = 1;
    if (has_security_xml()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_xml());
    }

    // optional fixed32 security_xml_len = 2;
    if (has_security_xml_len()) {
      total_size += 1 + 4;
    }

    // optional string security_xml_schema = 3;
    if (has_security_xml_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_xml_schema());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityXml::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityXml* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityXml*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityXml::MergeFrom(const SecurityXml& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_security_xml()) {
      set_security_xml(from.security_xml());
    }
    if (from.has_security_xml_len()) {
      set_security_xml_len(from.security_xml_len());
    }
    if (from.has_security_xml_schema()) {
      set_security_xml_schema(from.security_xml_schema());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityXml::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityXml::CopyFrom(const SecurityXml& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityXml::IsInitialized() const {

  return true;
}

void SecurityXml::Swap(SecurityXml* other) {
  if (other != this) {
    std::swap(security_xml_, other->security_xml_);
    std::swap(security_xml_len_, other->security_xml_len_);
    std::swap(security_xml_schema_, other->security_xml_schema_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityXml::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityXml_descriptor_;
  metadata.reflection = SecurityXml_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventTypeUnion::kEventTypeFieldNumber;
const int EventTypeUnion::kEventTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

EventTypeUnion::EventTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventTypeUnion::InitAsDefaultInstance() {
}

EventTypeUnion::EventTypeUnion(const EventTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  event_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventTypeUnion::~EventTypeUnion() {
  SharedDtor();
}

void EventTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventTypeUnion_descriptor_;
}

const EventTypeUnion& EventTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EventTypeUnion* EventTypeUnion::default_instance_ = NULL;

EventTypeUnion* EventTypeUnion::New() const {
  return new EventTypeUnion;
}

void EventTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    event_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.EventTypeEnum event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::EventTypeEnum_IsValid(value)) {
            set_event_type(static_cast< ::Common::EventTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_event_type_sfixed64;
        break;
      }

      // optional sfixed64 event_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &event_type_sfixed64_)));
          set_has_event_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.EventTypeEnum event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event_type(), output);
  }

  // optional sfixed64 event_type_sfixed64 = 2;
  if (has_event_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->event_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.EventTypeEnum event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event_type(), target);
  }

  // optional sfixed64 event_type_sfixed64 = 2;
  if (has_event_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->event_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.EventTypeEnum event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional sfixed64 event_type_sfixed64 = 2;
    if (has_event_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventTypeUnion::MergeFrom(const EventTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_type_sfixed64()) {
      set_event_type_sfixed64(from.event_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventTypeUnion::CopyFrom(const EventTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTypeUnion::IsInitialized() const {

  return true;
}

void EventTypeUnion::Swap(EventTypeUnion* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(event_type_sfixed64_, other->event_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventTypeUnion_descriptor_;
  metadata.reflection = EventTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EvntGrp::kEventDateFieldNumber;
const int EvntGrp::kEventPxFieldNumber;
const int EvntGrp::kEventPxExponentFieldNumber;
const int EvntGrp::kEventTextFieldNumber;
const int EvntGrp::kEventTypeFieldNumber;
const int EvntGrp::kEventTimeFieldNumber;
#endif  // !_MSC_VER

EvntGrp::EvntGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EvntGrp::InitAsDefaultInstance() {
}

EvntGrp::EvntGrp(const EvntGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EvntGrp::SharedCtor() {
  _cached_size_ = 0;
  event_date_ = 0;
  event_px_ = GOOGLE_LONGLONG(0);
  event_px_exponent_ = 0;
  event_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  event_type_ = 0;
  event_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvntGrp::~EvntGrp() {
  SharedDtor();
}

void EvntGrp::SharedDtor() {
  if (event_text_ != &::google::protobuf::internal::kEmptyString) {
    delete event_text_;
  }
  if (this != default_instance_) {
  }
}

void EvntGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvntGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvntGrp_descriptor_;
}

const EvntGrp& EvntGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

EvntGrp* EvntGrp::default_instance_ = NULL;

EvntGrp* EvntGrp::New() const {
  return new EvntGrp;
}

void EvntGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_date_ = 0;
    event_px_ = GOOGLE_LONGLONG(0);
    event_px_exponent_ = 0;
    if (has_event_text()) {
      if (event_text_ != &::google::protobuf::internal::kEmptyString) {
        event_text_->clear();
      }
    }
    event_type_ = 0;
    event_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EvntGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 event_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &event_date_)));
          set_has_event_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_event_px;
        break;
      }

      // optional sfixed64 event_px = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &event_px_)));
          set_has_event_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_event_px_exponent;
        break;
      }

      // optional sfixed32 event_px_exponent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_event_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &event_px_exponent_)));
          set_has_event_px_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_text;
        break;
      }

      // optional string event_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_text().data(), this->event_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }

      // optional .Common.EventTypeEnum event_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::EventTypeEnum_IsValid(value)) {
            set_event_type(static_cast< ::Common::EventTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_event_time;
        break;
      }

      // optional sfixed64 event_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &event_time_)));
          set_has_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EvntGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 event_date = 1;
  if (has_event_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->event_date(), output);
  }

  // optional sfixed64 event_px = 2;
  if (has_event_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->event_px(), output);
  }

  // optional sfixed32 event_px_exponent = 3;
  if (has_event_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->event_px_exponent(), output);
  }

  // optional string event_text = 4;
  if (has_event_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_text().data(), this->event_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->event_text(), output);
  }

  // optional .Common.EventTypeEnum event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->event_type(), output);
  }

  // optional sfixed64 event_time = 6;
  if (has_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->event_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EvntGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 event_date = 1;
  if (has_event_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->event_date(), target);
  }

  // optional sfixed64 event_px = 2;
  if (has_event_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->event_px(), target);
  }

  // optional sfixed32 event_px_exponent = 3;
  if (has_event_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->event_px_exponent(), target);
  }

  // optional string event_text = 4;
  if (has_event_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_text().data(), this->event_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->event_text(), target);
  }

  // optional .Common.EventTypeEnum event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->event_type(), target);
  }

  // optional sfixed64 event_time = 6;
  if (has_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->event_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EvntGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 event_date = 1;
    if (has_event_date()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 event_px = 2;
    if (has_event_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 event_px_exponent = 3;
    if (has_event_px_exponent()) {
      total_size += 1 + 4;
    }

    // optional string event_text = 4;
    if (has_event_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_text());
    }

    // optional .Common.EventTypeEnum event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // optional sfixed64 event_time = 6;
    if (has_event_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvntGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EvntGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EvntGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EvntGrp::MergeFrom(const EvntGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_date()) {
      set_event_date(from.event_date());
    }
    if (from.has_event_px()) {
      set_event_px(from.event_px());
    }
    if (from.has_event_px_exponent()) {
      set_event_px_exponent(from.event_px_exponent());
    }
    if (from.has_event_text()) {
      set_event_text(from.event_text());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_event_time()) {
      set_event_time(from.event_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EvntGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvntGrp::CopyFrom(const EvntGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvntGrp::IsInitialized() const {

  return true;
}

void EvntGrp::Swap(EvntGrp* other) {
  if (other != this) {
    std::swap(event_date_, other->event_date_);
    std::swap(event_px_, other->event_px_);
    std::swap(event_px_exponent_, other->event_px_exponent_);
    std::swap(event_text_, other->event_text_);
    std::swap(event_type_, other->event_type_);
    std::swap(event_time_, other->event_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EvntGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvntGrp_descriptor_;
  metadata.reflection = EvntGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentPtysSubGrp::kInstrumentPartySubIdFieldNumber;
const int InstrumentPtysSubGrp::kInstrumentPartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

InstrumentPtysSubGrp::InstrumentPtysSubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentPtysSubGrp::InitAsDefaultInstance() {
}

InstrumentPtysSubGrp::InstrumentPtysSubGrp(const InstrumentPtysSubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentPtysSubGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentPtysSubGrp::~InstrumentPtysSubGrp() {
  SharedDtor();
}

void InstrumentPtysSubGrp::SharedDtor() {
  if (instrument_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void InstrumentPtysSubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentPtysSubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentPtysSubGrp_descriptor_;
}

const InstrumentPtysSubGrp& InstrumentPtysSubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrumentPtysSubGrp* InstrumentPtysSubGrp::default_instance_ = NULL;

InstrumentPtysSubGrp* InstrumentPtysSubGrp::New() const {
  return new InstrumentPtysSubGrp;
}

void InstrumentPtysSubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_party_sub_id()) {
      if (instrument_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_party_sub_id_->clear();
      }
    }
    instrument_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentPtysSubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_party_sub_id().data(), this->instrument_party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_instrument_party_sub_id_type;
        break;
      }

      // optional sfixed64 instrument_party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_instrument_party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &instrument_party_sub_id_type_)));
          set_has_instrument_party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentPtysSubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_party_sub_id = 1;
  if (has_instrument_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_sub_id().data(), this->instrument_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_party_sub_id(), output);
  }

  // optional sfixed64 instrument_party_sub_id_type = 2;
  if (has_instrument_party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->instrument_party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentPtysSubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_party_sub_id = 1;
  if (has_instrument_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_sub_id().data(), this->instrument_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_party_sub_id(), target);
  }

  // optional sfixed64 instrument_party_sub_id_type = 2;
  if (has_instrument_party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->instrument_party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentPtysSubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_party_sub_id = 1;
    if (has_instrument_party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_party_sub_id());
    }

    // optional sfixed64 instrument_party_sub_id_type = 2;
    if (has_instrument_party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentPtysSubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentPtysSubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentPtysSubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentPtysSubGrp::MergeFrom(const InstrumentPtysSubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_party_sub_id()) {
      set_instrument_party_sub_id(from.instrument_party_sub_id());
    }
    if (from.has_instrument_party_sub_id_type()) {
      set_instrument_party_sub_id_type(from.instrument_party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentPtysSubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentPtysSubGrp::CopyFrom(const InstrumentPtysSubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentPtysSubGrp::IsInitialized() const {

  return true;
}

void InstrumentPtysSubGrp::Swap(InstrumentPtysSubGrp* other) {
  if (other != this) {
    std::swap(instrument_party_sub_id_, other->instrument_party_sub_id_);
    std::swap(instrument_party_sub_id_type_, other->instrument_party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentPtysSubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentPtysSubGrp_descriptor_;
  metadata.reflection = InstrumentPtysSubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentParties::kInstrumentPartyIdFieldNumber;
const int InstrumentParties::kInstrumentPartyIdSourceFieldNumber;
const int InstrumentParties::kInstrumentPartyRoleFieldNumber;
const int InstrumentParties::kInstrumentPtysSubGrpFieldNumber;
#endif  // !_MSC_VER

InstrumentParties::InstrumentParties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentParties::InitAsDefaultInstance() {
}

InstrumentParties::InstrumentParties(const InstrumentParties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentParties::SharedCtor() {
  _cached_size_ = 0;
  instrument_party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentParties::~InstrumentParties() {
  SharedDtor();
}

void InstrumentParties::SharedDtor() {
  if (instrument_party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_party_id_;
  }
  if (instrument_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void InstrumentParties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentParties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentParties_descriptor_;
}

const InstrumentParties& InstrumentParties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrumentParties* InstrumentParties::default_instance_ = NULL;

InstrumentParties* InstrumentParties::New() const {
  return new InstrumentParties;
}

void InstrumentParties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_party_id()) {
      if (instrument_party_id_ != &::google::protobuf::internal::kEmptyString) {
        instrument_party_id_->clear();
      }
    }
    if (has_instrument_party_id_source()) {
      if (instrument_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        instrument_party_id_source_->clear();
      }
    }
    instrument_party_role_ = GOOGLE_LONGLONG(0);
  }
  instrument_ptys_sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentParties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string instrument_party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_party_id().data(), this->instrument_party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instrument_party_id_source;
        break;
      }

      // optional string instrument_party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument_party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument_party_id_source().data(), this->instrument_party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_instrument_party_role;
        break;
      }

      // optional sfixed64 instrument_party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_instrument_party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &instrument_party_role_)));
          set_has_instrument_party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument_ptys_sub_grp;
        break;
      }

      // repeated .Common.InstrumentPtysSubGrp instrument_ptys_sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_ptys_sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrument_ptys_sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument_ptys_sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentParties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string instrument_party_id = 1;
  if (has_instrument_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_id().data(), this->instrument_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->instrument_party_id(), output);
  }

  // optional string instrument_party_id_source = 2;
  if (has_instrument_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_id_source().data(), this->instrument_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instrument_party_id_source(), output);
  }

  // optional sfixed64 instrument_party_role = 3;
  if (has_instrument_party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->instrument_party_role(), output);
  }

  // repeated .Common.InstrumentPtysSubGrp instrument_ptys_sub_grp = 4;
  for (int i = 0; i < this->instrument_ptys_sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->instrument_ptys_sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentParties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string instrument_party_id = 1;
  if (has_instrument_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_id().data(), this->instrument_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->instrument_party_id(), target);
  }

  // optional string instrument_party_id_source = 2;
  if (has_instrument_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument_party_id_source().data(), this->instrument_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instrument_party_id_source(), target);
  }

  // optional sfixed64 instrument_party_role = 3;
  if (has_instrument_party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->instrument_party_role(), target);
  }

  // repeated .Common.InstrumentPtysSubGrp instrument_ptys_sub_grp = 4;
  for (int i = 0; i < this->instrument_ptys_sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->instrument_ptys_sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentParties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string instrument_party_id = 1;
    if (has_instrument_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_party_id());
    }

    // optional string instrument_party_id_source = 2;
    if (has_instrument_party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument_party_id_source());
    }

    // optional sfixed64 instrument_party_role = 3;
    if (has_instrument_party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.InstrumentPtysSubGrp instrument_ptys_sub_grp = 4;
  total_size += 1 * this->instrument_ptys_sub_grp_size();
  for (int i = 0; i < this->instrument_ptys_sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrument_ptys_sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentParties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentParties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentParties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentParties::MergeFrom(const InstrumentParties& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrument_ptys_sub_grp_.MergeFrom(from.instrument_ptys_sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_party_id()) {
      set_instrument_party_id(from.instrument_party_id());
    }
    if (from.has_instrument_party_id_source()) {
      set_instrument_party_id_source(from.instrument_party_id_source());
    }
    if (from.has_instrument_party_role()) {
      set_instrument_party_role(from.instrument_party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentParties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentParties::CopyFrom(const InstrumentParties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentParties::IsInitialized() const {

  return true;
}

void InstrumentParties::Swap(InstrumentParties* other) {
  if (other != this) {
    std::swap(instrument_party_id_, other->instrument_party_id_);
    std::swap(instrument_party_id_source_, other->instrument_party_id_source_);
    std::swap(instrument_party_role_, other->instrument_party_role_);
    instrument_ptys_sub_grp_.Swap(&other->instrument_ptys_sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentParties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentParties_descriptor_;
  metadata.reflection = InstrumentParties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComplexEventTimes::kComplexEventEndTimeFieldNumber;
const int ComplexEventTimes::kComplexEventStartTimeFieldNumber;
#endif  // !_MSC_VER

ComplexEventTimes::ComplexEventTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComplexEventTimes::InitAsDefaultInstance() {
}

ComplexEventTimes::ComplexEventTimes(const ComplexEventTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComplexEventTimes::SharedCtor() {
  _cached_size_ = 0;
  complex_event_end_time_ = GOOGLE_LONGLONG(0);
  complex_event_start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComplexEventTimes::~ComplexEventTimes() {
  SharedDtor();
}

void ComplexEventTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexEventTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexEventTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventTimes_descriptor_;
}

const ComplexEventTimes& ComplexEventTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ComplexEventTimes* ComplexEventTimes::default_instance_ = NULL;

ComplexEventTimes* ComplexEventTimes::New() const {
  return new ComplexEventTimes;
}

void ComplexEventTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    complex_event_end_time_ = GOOGLE_LONGLONG(0);
    complex_event_start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComplexEventTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 complex_event_end_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_end_time_)));
          set_has_complex_event_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_complex_event_start_time;
        break;
      }

      // optional sfixed64 complex_event_start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complex_event_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_start_time_)));
          set_has_complex_event_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComplexEventTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 complex_event_end_time = 1;
  if (has_complex_event_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->complex_event_end_time(), output);
  }

  // optional sfixed64 complex_event_start_time = 2;
  if (has_complex_event_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->complex_event_start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComplexEventTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 complex_event_end_time = 1;
  if (has_complex_event_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->complex_event_end_time(), target);
  }

  // optional sfixed64 complex_event_start_time = 2;
  if (has_complex_event_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->complex_event_start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComplexEventTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 complex_event_end_time = 1;
    if (has_complex_event_end_time()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 complex_event_start_time = 2;
    if (has_complex_event_start_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexEventTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComplexEventTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComplexEventTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexEventTimes::MergeFrom(const ComplexEventTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_complex_event_end_time()) {
      set_complex_event_end_time(from.complex_event_end_time());
    }
    if (from.has_complex_event_start_time()) {
      set_complex_event_start_time(from.complex_event_start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComplexEventTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexEventTimes::CopyFrom(const ComplexEventTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexEventTimes::IsInitialized() const {

  return true;
}

void ComplexEventTimes::Swap(ComplexEventTimes* other) {
  if (other != this) {
    std::swap(complex_event_end_time_, other->complex_event_end_time_);
    std::swap(complex_event_start_time_, other->complex_event_start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComplexEventTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexEventTimes_descriptor_;
  metadata.reflection = ComplexEventTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComplexEventDates::kComplexEventEndDateFieldNumber;
const int ComplexEventDates::kComplexEventStartDateFieldNumber;
const int ComplexEventDates::kComplexEventTimesFieldNumber;
#endif  // !_MSC_VER

ComplexEventDates::ComplexEventDates()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComplexEventDates::InitAsDefaultInstance() {
}

ComplexEventDates::ComplexEventDates(const ComplexEventDates& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComplexEventDates::SharedCtor() {
  _cached_size_ = 0;
  complex_event_end_date_ = GOOGLE_LONGLONG(0);
  complex_event_start_date_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComplexEventDates::~ComplexEventDates() {
  SharedDtor();
}

void ComplexEventDates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexEventDates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexEventDates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEventDates_descriptor_;
}

const ComplexEventDates& ComplexEventDates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ComplexEventDates* ComplexEventDates::default_instance_ = NULL;

ComplexEventDates* ComplexEventDates::New() const {
  return new ComplexEventDates;
}

void ComplexEventDates::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    complex_event_end_date_ = GOOGLE_LONGLONG(0);
    complex_event_start_date_ = GOOGLE_LONGLONG(0);
  }
  complex_event_times_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComplexEventDates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 complex_event_end_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_end_date_)));
          set_has_complex_event_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_complex_event_start_date;
        break;
      }

      // optional sfixed64 complex_event_start_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complex_event_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_start_date_)));
          set_has_complex_event_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_complex_event_times;
        break;
      }

      // repeated .Common.ComplexEventTimes complex_event_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complex_event_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complex_event_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_complex_event_times;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComplexEventDates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 complex_event_end_date = 1;
  if (has_complex_event_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->complex_event_end_date(), output);
  }

  // optional sfixed64 complex_event_start_date = 2;
  if (has_complex_event_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->complex_event_start_date(), output);
  }

  // repeated .Common.ComplexEventTimes complex_event_times = 3;
  for (int i = 0; i < this->complex_event_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->complex_event_times(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComplexEventDates::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 complex_event_end_date = 1;
  if (has_complex_event_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->complex_event_end_date(), target);
  }

  // optional sfixed64 complex_event_start_date = 2;
  if (has_complex_event_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->complex_event_start_date(), target);
  }

  // repeated .Common.ComplexEventTimes complex_event_times = 3;
  for (int i = 0; i < this->complex_event_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->complex_event_times(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComplexEventDates::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 complex_event_end_date = 1;
    if (has_complex_event_end_date()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 complex_event_start_date = 2;
    if (has_complex_event_start_date()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.ComplexEventTimes complex_event_times = 3;
  total_size += 1 * this->complex_event_times_size();
  for (int i = 0; i < this->complex_event_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complex_event_times(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexEventDates::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComplexEventDates* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComplexEventDates*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexEventDates::MergeFrom(const ComplexEventDates& from) {
  GOOGLE_CHECK_NE(&from, this);
  complex_event_times_.MergeFrom(from.complex_event_times_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_complex_event_end_date()) {
      set_complex_event_end_date(from.complex_event_end_date());
    }
    if (from.has_complex_event_start_date()) {
      set_complex_event_start_date(from.complex_event_start_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComplexEventDates::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexEventDates::CopyFrom(const ComplexEventDates& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexEventDates::IsInitialized() const {

  return true;
}

void ComplexEventDates::Swap(ComplexEventDates* other) {
  if (other != this) {
    std::swap(complex_event_end_date_, other->complex_event_end_date_);
    std::swap(complex_event_start_date_, other->complex_event_start_date_);
    complex_event_times_.Swap(&other->complex_event_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComplexEventDates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexEventDates_descriptor_;
  metadata.reflection = ComplexEventDates_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComplexEvents::kComplexEventConditionFieldNumber;
const int ComplexEvents::kComplexEventDatesFieldNumber;
const int ComplexEvents::kComplexEventPriceFieldNumber;
const int ComplexEvents::kComplexEventPriceExponentFieldNumber;
const int ComplexEvents::kComplexEventPriceBoundaryMethodFieldNumber;
const int ComplexEvents::kComplexEventPriceBoundaryPrecisionFieldNumber;
const int ComplexEvents::kComplexEventPriceBoundaryPrecisionExponentFieldNumber;
const int ComplexEvents::kComplexEventPriceTimeTypeFieldNumber;
const int ComplexEvents::kComplexEventTypeFieldNumber;
const int ComplexEvents::kComplexOptPayoutAmountFieldNumber;
const int ComplexEvents::kComplexOptPayoutAmountExponentFieldNumber;
#endif  // !_MSC_VER

ComplexEvents::ComplexEvents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComplexEvents::InitAsDefaultInstance() {
}

ComplexEvents::ComplexEvents(const ComplexEvents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComplexEvents::SharedCtor() {
  _cached_size_ = 0;
  complex_event_condition_ = 0;
  complex_event_price_ = GOOGLE_LONGLONG(0);
  complex_event_price_exponent_ = 0;
  complex_event_price_boundary_method_ = 0;
  complex_event_price_boundary_precision_ = GOOGLE_LONGLONG(0);
  complex_event_price_boundary_precision_exponent_ = 0;
  complex_event_price_time_type_ = 0;
  complex_event_type_ = 0;
  complex_opt_payout_amount_ = GOOGLE_LONGLONG(0);
  complex_opt_payout_amount_exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComplexEvents::~ComplexEvents() {
  SharedDtor();
}

void ComplexEvents::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComplexEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComplexEvents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComplexEvents_descriptor_;
}

const ComplexEvents& ComplexEvents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ComplexEvents* ComplexEvents::default_instance_ = NULL;

ComplexEvents* ComplexEvents::New() const {
  return new ComplexEvents;
}

void ComplexEvents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    complex_event_condition_ = 0;
    complex_event_price_ = GOOGLE_LONGLONG(0);
    complex_event_price_exponent_ = 0;
    complex_event_price_boundary_method_ = 0;
    complex_event_price_boundary_precision_ = GOOGLE_LONGLONG(0);
    complex_event_price_boundary_precision_exponent_ = 0;
    complex_event_price_time_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    complex_event_type_ = 0;
    complex_opt_payout_amount_ = GOOGLE_LONGLONG(0);
    complex_opt_payout_amount_exponent_ = 0;
  }
  complex_event_dates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComplexEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.ComplexEventConditionEnum complex_event_condition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ComplexEventConditionEnum_IsValid(value)) {
            set_complex_event_condition(static_cast< ::Common::ComplexEventConditionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_complex_event_dates;
        break;
      }

      // repeated .Common.ComplexEventDates complex_event_dates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complex_event_dates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complex_event_dates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_complex_event_dates;
        if (input->ExpectTag(25)) goto parse_complex_event_price;
        break;
      }

      // optional sfixed64 complex_event_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complex_event_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_price_)));
          set_has_complex_event_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_complex_event_price_exponent;
        break;
      }

      // optional sfixed32 complex_event_price_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_complex_event_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &complex_event_price_exponent_)));
          set_has_complex_event_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_complex_event_price_boundary_method;
        break;
      }

      // optional .Common.ComplexEventPriceBoundaryMethodEnum complex_event_price_boundary_method = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complex_event_price_boundary_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ComplexEventPriceBoundaryMethodEnum_IsValid(value)) {
            set_complex_event_price_boundary_method(static_cast< ::Common::ComplexEventPriceBoundaryMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_complex_event_price_boundary_precision;
        break;
      }

      // optional sfixed64 complex_event_price_boundary_precision = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complex_event_price_boundary_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_event_price_boundary_precision_)));
          set_has_complex_event_price_boundary_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_complex_event_price_boundary_precision_exponent;
        break;
      }

      // optional sfixed32 complex_event_price_boundary_precision_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_complex_event_price_boundary_precision_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &complex_event_price_boundary_precision_exponent_)));
          set_has_complex_event_price_boundary_precision_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_complex_event_price_time_type;
        break;
      }

      // optional .Common.ComplexEventPriceTimeTypeEnum complex_event_price_time_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complex_event_price_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ComplexEventPriceTimeTypeEnum_IsValid(value)) {
            set_complex_event_price_time_type(static_cast< ::Common::ComplexEventPriceTimeTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_complex_event_type;
        break;
      }

      // optional .Common.ComplexEventTypeEnum complex_event_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_complex_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ComplexEventTypeEnum_IsValid(value)) {
            set_complex_event_type(static_cast< ::Common::ComplexEventTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_complex_opt_payout_amount;
        break;
      }

      // optional sfixed64 complex_opt_payout_amount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_complex_opt_payout_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &complex_opt_payout_amount_)));
          set_has_complex_opt_payout_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_complex_opt_payout_amount_exponent;
        break;
      }

      // optional sfixed32 complex_opt_payout_amount_exponent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_complex_opt_payout_amount_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &complex_opt_payout_amount_exponent_)));
          set_has_complex_opt_payout_amount_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComplexEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.ComplexEventConditionEnum complex_event_condition = 1;
  if (has_complex_event_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->complex_event_condition(), output);
  }

  // repeated .Common.ComplexEventDates complex_event_dates = 2;
  for (int i = 0; i < this->complex_event_dates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->complex_event_dates(i), output);
  }

  // optional sfixed64 complex_event_price = 3;
  if (has_complex_event_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->complex_event_price(), output);
  }

  // optional sfixed32 complex_event_price_exponent = 4;
  if (has_complex_event_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->complex_event_price_exponent(), output);
  }

  // optional .Common.ComplexEventPriceBoundaryMethodEnum complex_event_price_boundary_method = 5;
  if (has_complex_event_price_boundary_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->complex_event_price_boundary_method(), output);
  }

  // optional sfixed64 complex_event_price_boundary_precision = 6;
  if (has_complex_event_price_boundary_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->complex_event_price_boundary_precision(), output);
  }

  // optional sfixed32 complex_event_price_boundary_precision_exponent = 7;
  if (has_complex_event_price_boundary_precision_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->complex_event_price_boundary_precision_exponent(), output);
  }

  // optional .Common.ComplexEventPriceTimeTypeEnum complex_event_price_time_type = 8;
  if (has_complex_event_price_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->complex_event_price_time_type(), output);
  }

  // optional .Common.ComplexEventTypeEnum complex_event_type = 9;
  if (has_complex_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->complex_event_type(), output);
  }

  // optional sfixed64 complex_opt_payout_amount = 10;
  if (has_complex_opt_payout_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->complex_opt_payout_amount(), output);
  }

  // optional sfixed32 complex_opt_payout_amount_exponent = 11;
  if (has_complex_opt_payout_amount_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->complex_opt_payout_amount_exponent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComplexEvents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.ComplexEventConditionEnum complex_event_condition = 1;
  if (has_complex_event_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->complex_event_condition(), target);
  }

  // repeated .Common.ComplexEventDates complex_event_dates = 2;
  for (int i = 0; i < this->complex_event_dates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->complex_event_dates(i), target);
  }

  // optional sfixed64 complex_event_price = 3;
  if (has_complex_event_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->complex_event_price(), target);
  }

  // optional sfixed32 complex_event_price_exponent = 4;
  if (has_complex_event_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->complex_event_price_exponent(), target);
  }

  // optional .Common.ComplexEventPriceBoundaryMethodEnum complex_event_price_boundary_method = 5;
  if (has_complex_event_price_boundary_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->complex_event_price_boundary_method(), target);
  }

  // optional sfixed64 complex_event_price_boundary_precision = 6;
  if (has_complex_event_price_boundary_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->complex_event_price_boundary_precision(), target);
  }

  // optional sfixed32 complex_event_price_boundary_precision_exponent = 7;
  if (has_complex_event_price_boundary_precision_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->complex_event_price_boundary_precision_exponent(), target);
  }

  // optional .Common.ComplexEventPriceTimeTypeEnum complex_event_price_time_type = 8;
  if (has_complex_event_price_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->complex_event_price_time_type(), target);
  }

  // optional .Common.ComplexEventTypeEnum complex_event_type = 9;
  if (has_complex_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->complex_event_type(), target);
  }

  // optional sfixed64 complex_opt_payout_amount = 10;
  if (has_complex_opt_payout_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->complex_opt_payout_amount(), target);
  }

  // optional sfixed32 complex_opt_payout_amount_exponent = 11;
  if (has_complex_opt_payout_amount_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->complex_opt_payout_amount_exponent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComplexEvents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.ComplexEventConditionEnum complex_event_condition = 1;
    if (has_complex_event_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->complex_event_condition());
    }

    // optional sfixed64 complex_event_price = 3;
    if (has_complex_event_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 complex_event_price_exponent = 4;
    if (has_complex_event_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.ComplexEventPriceBoundaryMethodEnum complex_event_price_boundary_method = 5;
    if (has_complex_event_price_boundary_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->complex_event_price_boundary_method());
    }

    // optional sfixed64 complex_event_price_boundary_precision = 6;
    if (has_complex_event_price_boundary_precision()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 complex_event_price_boundary_precision_exponent = 7;
    if (has_complex_event_price_boundary_precision_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.ComplexEventPriceTimeTypeEnum complex_event_price_time_type = 8;
    if (has_complex_event_price_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->complex_event_price_time_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.ComplexEventTypeEnum complex_event_type = 9;
    if (has_complex_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->complex_event_type());
    }

    // optional sfixed64 complex_opt_payout_amount = 10;
    if (has_complex_opt_payout_amount()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 complex_opt_payout_amount_exponent = 11;
    if (has_complex_opt_payout_amount_exponent()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Common.ComplexEventDates complex_event_dates = 2;
  total_size += 1 * this->complex_event_dates_size();
  for (int i = 0; i < this->complex_event_dates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complex_event_dates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComplexEvents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComplexEvents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComplexEvents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComplexEvents::MergeFrom(const ComplexEvents& from) {
  GOOGLE_CHECK_NE(&from, this);
  complex_event_dates_.MergeFrom(from.complex_event_dates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_complex_event_condition()) {
      set_complex_event_condition(from.complex_event_condition());
    }
    if (from.has_complex_event_price()) {
      set_complex_event_price(from.complex_event_price());
    }
    if (from.has_complex_event_price_exponent()) {
      set_complex_event_price_exponent(from.complex_event_price_exponent());
    }
    if (from.has_complex_event_price_boundary_method()) {
      set_complex_event_price_boundary_method(from.complex_event_price_boundary_method());
    }
    if (from.has_complex_event_price_boundary_precision()) {
      set_complex_event_price_boundary_precision(from.complex_event_price_boundary_precision());
    }
    if (from.has_complex_event_price_boundary_precision_exponent()) {
      set_complex_event_price_boundary_precision_exponent(from.complex_event_price_boundary_precision_exponent());
    }
    if (from.has_complex_event_price_time_type()) {
      set_complex_event_price_time_type(from.complex_event_price_time_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_complex_event_type()) {
      set_complex_event_type(from.complex_event_type());
    }
    if (from.has_complex_opt_payout_amount()) {
      set_complex_opt_payout_amount(from.complex_opt_payout_amount());
    }
    if (from.has_complex_opt_payout_amount_exponent()) {
      set_complex_opt_payout_amount_exponent(from.complex_opt_payout_amount_exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComplexEvents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComplexEvents::CopyFrom(const ComplexEvents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComplexEvents::IsInitialized() const {

  return true;
}

void ComplexEvents::Swap(ComplexEvents* other) {
  if (other != this) {
    std::swap(complex_event_condition_, other->complex_event_condition_);
    complex_event_dates_.Swap(&other->complex_event_dates_);
    std::swap(complex_event_price_, other->complex_event_price_);
    std::swap(complex_event_price_exponent_, other->complex_event_price_exponent_);
    std::swap(complex_event_price_boundary_method_, other->complex_event_price_boundary_method_);
    std::swap(complex_event_price_boundary_precision_, other->complex_event_price_boundary_precision_);
    std::swap(complex_event_price_boundary_precision_exponent_, other->complex_event_price_boundary_precision_exponent_);
    std::swap(complex_event_price_time_type_, other->complex_event_price_time_type_);
    std::swap(complex_event_type_, other->complex_event_type_);
    std::swap(complex_opt_payout_amount_, other->complex_opt_payout_amount_);
    std::swap(complex_opt_payout_amount_exponent_, other->complex_opt_payout_amount_exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComplexEvents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComplexEvents_descriptor_;
  metadata.reflection = ComplexEvents_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrikePriceDeterminationMethodUnion::kStrikePriceDeterminationMethodFieldNumber;
const int StrikePriceDeterminationMethodUnion::kStrikePriceDeterminationMethodSfixed64FieldNumber;
#endif  // !_MSC_VER

StrikePriceDeterminationMethodUnion::StrikePriceDeterminationMethodUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrikePriceDeterminationMethodUnion::InitAsDefaultInstance() {
}

StrikePriceDeterminationMethodUnion::StrikePriceDeterminationMethodUnion(const StrikePriceDeterminationMethodUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrikePriceDeterminationMethodUnion::SharedCtor() {
  _cached_size_ = 0;
  strike_price_determination_method_ = 0;
  strike_price_determination_method_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrikePriceDeterminationMethodUnion::~StrikePriceDeterminationMethodUnion() {
  SharedDtor();
}

void StrikePriceDeterminationMethodUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrikePriceDeterminationMethodUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrikePriceDeterminationMethodUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrikePriceDeterminationMethodUnion_descriptor_;
}

const StrikePriceDeterminationMethodUnion& StrikePriceDeterminationMethodUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StrikePriceDeterminationMethodUnion* StrikePriceDeterminationMethodUnion::default_instance_ = NULL;

StrikePriceDeterminationMethodUnion* StrikePriceDeterminationMethodUnion::New() const {
  return new StrikePriceDeterminationMethodUnion;
}

void StrikePriceDeterminationMethodUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strike_price_determination_method_ = 0;
    strike_price_determination_method_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrikePriceDeterminationMethodUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::StrikePriceDeterminationMethodEnum_IsValid(value)) {
            set_strike_price_determination_method(static_cast< ::Common::StrikePriceDeterminationMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_strike_price_determination_method_sfixed64;
        break;
      }

      // optional sfixed64 strike_price_determination_method_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_price_determination_method_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &strike_price_determination_method_sfixed64_)));
          set_has_strike_price_determination_method_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrikePriceDeterminationMethodUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 1;
  if (has_strike_price_determination_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->strike_price_determination_method(), output);
  }

  // optional sfixed64 strike_price_determination_method_sfixed64 = 2;
  if (has_strike_price_determination_method_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->strike_price_determination_method_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrikePriceDeterminationMethodUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 1;
  if (has_strike_price_determination_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->strike_price_determination_method(), target);
  }

  // optional sfixed64 strike_price_determination_method_sfixed64 = 2;
  if (has_strike_price_determination_method_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->strike_price_determination_method_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrikePriceDeterminationMethodUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 1;
    if (has_strike_price_determination_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strike_price_determination_method());
    }

    // optional sfixed64 strike_price_determination_method_sfixed64 = 2;
    if (has_strike_price_determination_method_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrikePriceDeterminationMethodUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrikePriceDeterminationMethodUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrikePriceDeterminationMethodUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrikePriceDeterminationMethodUnion::MergeFrom(const StrikePriceDeterminationMethodUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strike_price_determination_method()) {
      set_strike_price_determination_method(from.strike_price_determination_method());
    }
    if (from.has_strike_price_determination_method_sfixed64()) {
      set_strike_price_determination_method_sfixed64(from.strike_price_determination_method_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrikePriceDeterminationMethodUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrikePriceDeterminationMethodUnion::CopyFrom(const StrikePriceDeterminationMethodUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrikePriceDeterminationMethodUnion::IsInitialized() const {

  return true;
}

void StrikePriceDeterminationMethodUnion::Swap(StrikePriceDeterminationMethodUnion* other) {
  if (other != this) {
    std::swap(strike_price_determination_method_, other->strike_price_determination_method_);
    std::swap(strike_price_determination_method_sfixed64_, other->strike_price_determination_method_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrikePriceDeterminationMethodUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrikePriceDeterminationMethodUnion_descriptor_;
  metadata.reflection = StrikePriceDeterminationMethodUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlowScheduleTypeUnion::kFlowScheduleTypeFieldNumber;
const int FlowScheduleTypeUnion::kFlowScheduleTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

FlowScheduleTypeUnion::FlowScheduleTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlowScheduleTypeUnion::InitAsDefaultInstance() {
}

FlowScheduleTypeUnion::FlowScheduleTypeUnion(const FlowScheduleTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlowScheduleTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  flow_schedule_type_ = 0;
  flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlowScheduleTypeUnion::~FlowScheduleTypeUnion() {
  SharedDtor();
}

void FlowScheduleTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlowScheduleTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlowScheduleTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlowScheduleTypeUnion_descriptor_;
}

const FlowScheduleTypeUnion& FlowScheduleTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FlowScheduleTypeUnion* FlowScheduleTypeUnion::default_instance_ = NULL;

FlowScheduleTypeUnion* FlowScheduleTypeUnion::New() const {
  return new FlowScheduleTypeUnion;
}

void FlowScheduleTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flow_schedule_type_ = 0;
    flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlowScheduleTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::FlowScheduleTypeEnum_IsValid(value)) {
            set_flow_schedule_type(static_cast< ::Common::FlowScheduleTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_flow_schedule_type_sfixed64;
        break;
      }

      // optional sfixed64 flow_schedule_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_flow_schedule_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &flow_schedule_type_sfixed64_)));
          set_has_flow_schedule_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlowScheduleTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 1;
  if (has_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->flow_schedule_type(), output);
  }

  // optional sfixed64 flow_schedule_type_sfixed64 = 2;
  if (has_flow_schedule_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->flow_schedule_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlowScheduleTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 1;
  if (has_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->flow_schedule_type(), target);
  }

  // optional sfixed64 flow_schedule_type_sfixed64 = 2;
  if (has_flow_schedule_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->flow_schedule_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlowScheduleTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 1;
    if (has_flow_schedule_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flow_schedule_type());
    }

    // optional sfixed64 flow_schedule_type_sfixed64 = 2;
    if (has_flow_schedule_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlowScheduleTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlowScheduleTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlowScheduleTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlowScheduleTypeUnion::MergeFrom(const FlowScheduleTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flow_schedule_type()) {
      set_flow_schedule_type(from.flow_schedule_type());
    }
    if (from.has_flow_schedule_type_sfixed64()) {
      set_flow_schedule_type_sfixed64(from.flow_schedule_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlowScheduleTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowScheduleTypeUnion::CopyFrom(const FlowScheduleTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowScheduleTypeUnion::IsInitialized() const {

  return true;
}

void FlowScheduleTypeUnion::Swap(FlowScheduleTypeUnion* other) {
  if (other != this) {
    std::swap(flow_schedule_type_, other->flow_schedule_type_);
    std::swap(flow_schedule_type_sfixed64_, other->flow_schedule_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlowScheduleTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlowScheduleTypeUnion_descriptor_;
  metadata.reflection = FlowScheduleTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CpProgramUnion::kCpProgramFieldNumber;
const int CpProgramUnion::kCpProgramSfixed64FieldNumber;
#endif  // !_MSC_VER

CpProgramUnion::CpProgramUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CpProgramUnion::InitAsDefaultInstance() {
}

CpProgramUnion::CpProgramUnion(const CpProgramUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CpProgramUnion::SharedCtor() {
  _cached_size_ = 0;
  cp_program_ = 0;
  cp_program_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CpProgramUnion::~CpProgramUnion() {
  SharedDtor();
}

void CpProgramUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CpProgramUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CpProgramUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CpProgramUnion_descriptor_;
}

const CpProgramUnion& CpProgramUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CpProgramUnion* CpProgramUnion::default_instance_ = NULL;

CpProgramUnion* CpProgramUnion::New() const {
  return new CpProgramUnion;
}

void CpProgramUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cp_program_ = 0;
    cp_program_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CpProgramUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.CpProgramEnum cp_program = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::CpProgramEnum_IsValid(value)) {
            set_cp_program(static_cast< ::Common::CpProgramEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cp_program_sfixed64;
        break;
      }

      // optional sfixed64 cp_program_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cp_program_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cp_program_sfixed64_)));
          set_has_cp_program_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CpProgramUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.CpProgramEnum cp_program = 1;
  if (has_cp_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cp_program(), output);
  }

  // optional sfixed64 cp_program_sfixed64 = 2;
  if (has_cp_program_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->cp_program_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CpProgramUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.CpProgramEnum cp_program = 1;
  if (has_cp_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cp_program(), target);
  }

  // optional sfixed64 cp_program_sfixed64 = 2;
  if (has_cp_program_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->cp_program_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CpProgramUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.CpProgramEnum cp_program = 1;
    if (has_cp_program()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cp_program());
    }

    // optional sfixed64 cp_program_sfixed64 = 2;
    if (has_cp_program_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CpProgramUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CpProgramUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CpProgramUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CpProgramUnion::MergeFrom(const CpProgramUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cp_program()) {
      set_cp_program(from.cp_program());
    }
    if (from.has_cp_program_sfixed64()) {
      set_cp_program_sfixed64(from.cp_program_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CpProgramUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpProgramUnion::CopyFrom(const CpProgramUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CpProgramUnion::IsInitialized() const {

  return true;
}

void CpProgramUnion::Swap(CpProgramUnion* other) {
  if (other != this) {
    std::swap(cp_program_, other->cp_program_);
    std::swap(cp_program_sfixed64_, other->cp_program_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CpProgramUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CpProgramUnion_descriptor_;
  metadata.reflection = CpProgramUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instrument::kCfiCodeFieldNumber;
const int Instrument::kContractMultiplierFieldNumber;
const int Instrument::kCountryOfIssueFieldNumber;
const int Instrument::kCouponPaymentDateFieldNumber;
const int Instrument::kCouponRateFieldNumber;
const int Instrument::kCouponRateExponentFieldNumber;
const int Instrument::kCreditRatingFieldNumber;
const int Instrument::kEncodedIssuerFieldNumber;
const int Instrument::kEncodedIssuerLenFieldNumber;
const int Instrument::kEncodedSecurityDescFieldNumber;
const int Instrument::kEncodedSecurityDescLenFieldNumber;
const int Instrument::kFactorFieldNumber;
const int Instrument::kInstrRegistryFieldNumber;
const int Instrument::kIssueDateFieldNumber;
const int Instrument::kIssuerFieldNumber;
const int Instrument::kLocaleOfIssueFieldNumber;
const int Instrument::kMaturityDateFieldNumber;
const int Instrument::kMaturityMonthYearFieldNumber;
const int Instrument::kOptAttributeFieldNumber;
const int Instrument::kProductFieldNumber;
const int Instrument::kRedemptionDateFieldNumber;
const int Instrument::kRepoCollateralSecurityTypeFieldNumber;
const int Instrument::kRepurchaseRateFieldNumber;
const int Instrument::kRepurchaseRateExponentFieldNumber;
const int Instrument::kRepurchaseTermFieldNumber;
const int Instrument::kSecurityDescFieldNumber;
const int Instrument::kSecurityExchangeFieldNumber;
const int Instrument::kSecurityIdFieldNumber;
const int Instrument::kSecurityIdSourceFieldNumber;
const int Instrument::kSecurityTypeFieldNumber;
const int Instrument::kStateOrProvinceOfIssueFieldNumber;
const int Instrument::kStrikePriceFieldNumber;
const int Instrument::kStrikePriceExponentFieldNumber;
const int Instrument::kSymbolFieldNumber;
const int Instrument::kSymbolSfxFieldNumber;
const int Instrument::kCpProgramFieldNumber;
const int Instrument::kCpRegTypeFieldNumber;
const int Instrument::kContractSettlMonthFieldNumber;
const int Instrument::kDatedDateFieldNumber;
const int Instrument::kEvntGrpFieldNumber;
const int Instrument::kInstrmtAssignmentMethodFieldNumber;
const int Instrument::kInstrumentPartiesFieldNumber;
const int Instrument::kInterestAccrualDateFieldNumber;
const int Instrument::kMaturityTimeFieldNumber;
const int Instrument::kMinPriceIncrementFieldNumber;
const int Instrument::kNtPositionLimitFieldNumber;
const int Instrument::kPoolFieldNumber;
const int Instrument::kPositionLimitFieldNumber;
const int Instrument::kPutOrCallFieldNumber;
const int Instrument::kSecAltIdGrpFieldNumber;
const int Instrument::kSecurityStatusFieldNumber;
const int Instrument::kSecuritySubTypeFieldNumber;
const int Instrument::kSettleOnOpenFlagFieldNumber;
const int Instrument::kStrikeCurrencyFieldNumber;
const int Instrument::kStrikeMultiplierFieldNumber;
const int Instrument::kStrikeValueFieldNumber;
const int Instrument::kTimeUnitFieldNumber;
const int Instrument::kUnitOfMeasureFieldNumber;
const int Instrument::kCapPriceFieldNumber;
const int Instrument::kCapPriceExponentFieldNumber;
const int Instrument::kExerciseStyleFieldNumber;
const int Instrument::kFlexProductEligibilityIndicatorFieldNumber;
const int Instrument::kFlexibleIndicatorFieldNumber;
const int Instrument::kFloorPriceFieldNumber;
const int Instrument::kFloorPriceExponentFieldNumber;
const int Instrument::kListMethodFieldNumber;
const int Instrument::kMinPriceIncrementAmountFieldNumber;
const int Instrument::kMinPriceIncrementAmountExponentFieldNumber;
const int Instrument::kOptPayoutAmountFieldNumber;
const int Instrument::kOptPayoutAmountExponentFieldNumber;
const int Instrument::kPriceQuoteMethodFieldNumber;
const int Instrument::kPriceUnitOfMeasureFieldNumber;
const int Instrument::kPriceUnitOfMeasureQtyFieldNumber;
const int Instrument::kPriceUnitOfMeasureQtyExponentFieldNumber;
const int Instrument::kProductComplexFieldNumber;
const int Instrument::kSecurityGroupFieldNumber;
const int Instrument::kSecurityXmlFieldNumber;
const int Instrument::kSettlMethodFieldNumber;
const int Instrument::kUnitOfMeasureQtyFieldNumber;
const int Instrument::kUnitOfMeasureQtyExponentFieldNumber;
const int Instrument::kValuationMethodFieldNumber;
const int Instrument::kContractMultiplierUnitFieldNumber;
const int Instrument::kFlowScheduleTypeFieldNumber;
const int Instrument::kAttachmentPointFieldNumber;
const int Instrument::kAttachmentPointExponentFieldNumber;
const int Instrument::kDetachmentPointFieldNumber;
const int Instrument::kDetachmentPointExponentFieldNumber;
const int Instrument::kNotionalPercentageOutstandingFieldNumber;
const int Instrument::kNotionalPercentageOutstandingExponentFieldNumber;
const int Instrument::kOriginalNotionalPercentageOutstandingFieldNumber;
const int Instrument::kOriginalNotionalPercentageOutstandingExponentFieldNumber;
const int Instrument::kRestructuringTypeFieldNumber;
const int Instrument::kSeniorityFieldNumber;
const int Instrument::kComplexEventsFieldNumber;
const int Instrument::kOptPayoutTypeFieldNumber;
const int Instrument::kStrikePriceBoundaryMethodFieldNumber;
const int Instrument::kStrikePriceBoundaryPrecisionFieldNumber;
const int Instrument::kStrikePriceBoundaryPrecisionExponentFieldNumber;
const int Instrument::kStrikePriceDeterminationMethodFieldNumber;
const int Instrument::kUnderlyingPriceDeterminationMethodFieldNumber;
#endif  // !_MSC_VER

Instrument::Instrument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instrument::InitAsDefaultInstance() {
  security_xml_ = const_cast< ::Common::SecurityXml*>(&::Common::SecurityXml::default_instance());
}

Instrument::Instrument(const Instrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instrument::SharedCtor() {
  _cached_size_ = 0;
  cfi_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_multiplier_ = 0;
  country_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coupon_payment_date_ = 0;
  coupon_rate_ = GOOGLE_LONGLONG(0);
  coupon_rate_exponent_ = 0;
  credit_rating_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_issuer_len_ = 0u;
  encoded_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_security_desc_len_ = 0u;
  factor_ = 0;
  instr_registry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issue_date_ = 0;
  issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locale_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maturity_date_ = 0;
  maturity_month_year_ = 0;
  opt_attribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = 0;
  redemption_date_ = 0;
  repo_collateral_security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  repurchase_rate_ = GOOGLE_LONGLONG(0);
  repurchase_rate_exponent_ = 0;
  repurchase_term_ = GOOGLE_LONGLONG(0);
  security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_id_source_ = 0;
  security_type_ = 0;
  state_or_province_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strike_price_ = GOOGLE_LONGLONG(0);
  strike_price_exponent_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symbol_sfx_ = 0;
  cp_program_ = 0;
  cp_reg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contract_settl_month_ = 0;
  dated_date_ = 0;
  instrmt_assignment_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  interest_accrual_date_ = 0;
  maturity_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  min_price_increment_ = 0;
  nt_position_limit_ = GOOGLE_LONGLONG(0);
  pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_limit_ = GOOGLE_LONGLONG(0);
  put_or_call_ = 0;
  security_status_ = 0;
  security_sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  settle_on_open_flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strike_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strike_multiplier_ = 0;
  strike_value_ = 0;
  time_unit_ = 0;
  unit_of_measure_ = 0;
  cap_price_ = GOOGLE_LONGLONG(0);
  cap_price_exponent_ = 0;
  exercise_style_ = 0;
  flex_product_eligibility_indicator_ = false;
  flexible_indicator_ = false;
  floor_price_ = GOOGLE_LONGLONG(0);
  floor_price_exponent_ = 0;
  list_method_ = 0;
  min_price_increment_amount_ = GOOGLE_LONGLONG(0);
  min_price_increment_amount_exponent_ = 0;
  opt_payout_amount_ = GOOGLE_LONGLONG(0);
  opt_payout_amount_exponent_ = 0;
  price_quote_method_ = 0;
  price_unit_of_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  price_unit_of_measure_qty_exponent_ = 0;
  product_complex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_xml_ = NULL;
  settl_method_ = 0;
  unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  unit_of_measure_qty_exponent_ = 0;
  valuation_method_ = 0;
  contract_multiplier_unit_ = 0;
  flow_schedule_type_ = 0;
  attachment_point_ = GOOGLE_LONGLONG(0);
  attachment_point_exponent_ = 0;
  detachment_point_ = GOOGLE_LONGLONG(0);
  detachment_point_exponent_ = 0;
  notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
  notional_percentage_outstanding_exponent_ = 0;
  original_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
  original_notional_percentage_outstanding_exponent_ = 0;
  restructuring_type_ = 0;
  seniority_ = 0;
  opt_payout_type_ = 0;
  strike_price_boundary_method_ = 0;
  strike_price_boundary_precision_ = GOOGLE_LONGLONG(0);
  strike_price_boundary_precision_exponent_ = 0;
  strike_price_determination_method_ = 0;
  underlying_price_determination_method_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instrument::~Instrument() {
  SharedDtor();
}

void Instrument::SharedDtor() {
  if (cfi_code_ != &::google::protobuf::internal::kEmptyString) {
    delete cfi_code_;
  }
  if (country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete country_of_issue_;
  }
  if (credit_rating_ != &::google::protobuf::internal::kEmptyString) {
    delete credit_rating_;
  }
  if (encoded_issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_issuer_;
  }
  if (encoded_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_security_desc_;
  }
  if (instr_registry_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_registry_;
  }
  if (issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete issuer_;
  }
  if (locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete locale_of_issue_;
  }
  if (opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_attribute_;
  }
  if (repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete repo_collateral_security_type_;
  }
  if (security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete security_desc_;
  }
  if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete security_exchange_;
  }
  if (security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_id_;
  }
  if (state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete state_or_province_of_issue_;
  }
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (cp_reg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete cp_reg_type_;
  }
  if (instrmt_assignment_method_ != &::google::protobuf::internal::kEmptyString) {
    delete instrmt_assignment_method_;
  }
  if (maturity_time_ != &::google::protobuf::internal::kEmptyString) {
    delete maturity_time_;
  }
  if (pool_ != &::google::protobuf::internal::kEmptyString) {
    delete pool_;
  }
  if (security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_sub_type_;
  }
  if (settle_on_open_flag_ != &::google::protobuf::internal::kEmptyString) {
    delete settle_on_open_flag_;
  }
  if (strike_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete strike_currency_;
  }
  if (price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
    delete price_unit_of_measure_;
  }
  if (product_complex_ != &::google::protobuf::internal::kEmptyString) {
    delete product_complex_;
  }
  if (security_group_ != &::google::protobuf::internal::kEmptyString) {
    delete security_group_;
  }
  if (this != default_instance_) {
    delete security_xml_;
  }
}

void Instrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instrument_descriptor_;
}

const Instrument& Instrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Instrument* Instrument::default_instance_ = NULL;

Instrument* Instrument::New() const {
  return new Instrument;
}

void Instrument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cfi_code()) {
      if (cfi_code_ != &::google::protobuf::internal::kEmptyString) {
        cfi_code_->clear();
      }
    }
    contract_multiplier_ = 0;
    if (has_country_of_issue()) {
      if (country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        country_of_issue_->clear();
      }
    }
    coupon_payment_date_ = 0;
    coupon_rate_ = GOOGLE_LONGLONG(0);
    coupon_rate_exponent_ = 0;
    if (has_credit_rating()) {
      if (credit_rating_ != &::google::protobuf::internal::kEmptyString) {
        credit_rating_->clear();
      }
    }
    if (has_encoded_issuer()) {
      if (encoded_issuer_ != &::google::protobuf::internal::kEmptyString) {
        encoded_issuer_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    encoded_issuer_len_ = 0u;
    if (has_encoded_security_desc()) {
      if (encoded_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        encoded_security_desc_->clear();
      }
    }
    encoded_security_desc_len_ = 0u;
    factor_ = 0;
    if (has_instr_registry()) {
      if (instr_registry_ != &::google::protobuf::internal::kEmptyString) {
        instr_registry_->clear();
      }
    }
    issue_date_ = 0;
    if (has_issuer()) {
      if (issuer_ != &::google::protobuf::internal::kEmptyString) {
        issuer_->clear();
      }
    }
    if (has_locale_of_issue()) {
      if (locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        locale_of_issue_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maturity_date_ = 0;
    maturity_month_year_ = 0;
    if (has_opt_attribute()) {
      if (opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
        opt_attribute_->clear();
      }
    }
    product_ = 0;
    redemption_date_ = 0;
    if (has_repo_collateral_security_type()) {
      if (repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
        repo_collateral_security_type_->clear();
      }
    }
    repurchase_rate_ = GOOGLE_LONGLONG(0);
    repurchase_rate_exponent_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    repurchase_term_ = GOOGLE_LONGLONG(0);
    if (has_security_desc()) {
      if (security_desc_ != &::google::protobuf::internal::kEmptyString) {
        security_desc_->clear();
      }
    }
    if (has_security_exchange()) {
      if (security_exchange_ != &::google::protobuf::internal::kEmptyString) {
        security_exchange_->clear();
      }
    }
    if (has_security_id()) {
      if (security_id_ != &::google::protobuf::internal::kEmptyString) {
        security_id_->clear();
      }
    }
    security_id_source_ = 0;
    security_type_ = 0;
    if (has_state_or_province_of_issue()) {
      if (state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        state_or_province_of_issue_->clear();
      }
    }
    strike_price_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    strike_price_exponent_ = 0;
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    symbol_sfx_ = 0;
    cp_program_ = 0;
    if (has_cp_reg_type()) {
      if (cp_reg_type_ != &::google::protobuf::internal::kEmptyString) {
        cp_reg_type_->clear();
      }
    }
    contract_settl_month_ = 0;
    dated_date_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_instrmt_assignment_method()) {
      if (instrmt_assignment_method_ != &::google::protobuf::internal::kEmptyString) {
        instrmt_assignment_method_->clear();
      }
    }
    interest_accrual_date_ = 0;
    if (has_maturity_time()) {
      if (maturity_time_ != &::google::protobuf::internal::kEmptyString) {
        maturity_time_->clear();
      }
    }
    min_price_increment_ = 0;
    nt_position_limit_ = GOOGLE_LONGLONG(0);
    if (has_pool()) {
      if (pool_ != &::google::protobuf::internal::kEmptyString) {
        pool_->clear();
      }
    }
    position_limit_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    put_or_call_ = 0;
    security_status_ = 0;
    if (has_security_sub_type()) {
      if (security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
        security_sub_type_->clear();
      }
    }
    if (has_settle_on_open_flag()) {
      if (settle_on_open_flag_ != &::google::protobuf::internal::kEmptyString) {
        settle_on_open_flag_->clear();
      }
    }
    if (has_strike_currency()) {
      if (strike_currency_ != &::google::protobuf::internal::kEmptyString) {
        strike_currency_->clear();
      }
    }
    strike_multiplier_ = 0;
    strike_value_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    time_unit_ = 0;
    unit_of_measure_ = 0;
    cap_price_ = GOOGLE_LONGLONG(0);
    cap_price_exponent_ = 0;
    exercise_style_ = 0;
    flex_product_eligibility_indicator_ = false;
    flexible_indicator_ = false;
    floor_price_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    floor_price_exponent_ = 0;
    list_method_ = 0;
    min_price_increment_amount_ = GOOGLE_LONGLONG(0);
    min_price_increment_amount_exponent_ = 0;
    opt_payout_amount_ = GOOGLE_LONGLONG(0);
    opt_payout_amount_exponent_ = 0;
    price_quote_method_ = 0;
    if (has_price_unit_of_measure()) {
      if (price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
        price_unit_of_measure_->clear();
      }
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    price_unit_of_measure_qty_exponent_ = 0;
    if (has_product_complex()) {
      if (product_complex_ != &::google::protobuf::internal::kEmptyString) {
        product_complex_->clear();
      }
    }
    if (has_security_group()) {
      if (security_group_ != &::google::protobuf::internal::kEmptyString) {
        security_group_->clear();
      }
    }
    if (has_security_xml()) {
      if (security_xml_ != NULL) security_xml_->::Common::SecurityXml::Clear();
    }
    settl_method_ = 0;
    unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    unit_of_measure_qty_exponent_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    valuation_method_ = 0;
    contract_multiplier_unit_ = 0;
    flow_schedule_type_ = 0;
    attachment_point_ = GOOGLE_LONGLONG(0);
    attachment_point_exponent_ = 0;
    detachment_point_ = GOOGLE_LONGLONG(0);
    detachment_point_exponent_ = 0;
    notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    notional_percentage_outstanding_exponent_ = 0;
    original_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
    original_notional_percentage_outstanding_exponent_ = 0;
    restructuring_type_ = 0;
    seniority_ = 0;
    opt_payout_type_ = 0;
    strike_price_boundary_method_ = 0;
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    strike_price_boundary_precision_ = GOOGLE_LONGLONG(0);
    strike_price_boundary_precision_exponent_ = 0;
    strike_price_determination_method_ = 0;
    underlying_price_determination_method_ = 0;
  }
  evnt_grp_.Clear();
  instrument_parties_.Clear();
  sec_alt_id_grp_.Clear();
  complex_events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cfi_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfi_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cfi_code().data(), this->cfi_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_contract_multiplier;
        break;
      }

      // optional double contract_multiplier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contract_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &contract_multiplier_)));
          set_has_contract_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_country_of_issue;
        break;
      }

      // optional string country_of_issue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->country_of_issue().data(), this->country_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_coupon_payment_date;
        break;
      }

      // optional sfixed32 coupon_payment_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coupon_payment_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &coupon_payment_date_)));
          set_has_coupon_payment_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_coupon_rate;
        break;
      }

      // optional sfixed64 coupon_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coupon_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &coupon_rate_)));
          set_has_coupon_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_coupon_rate_exponent;
        break;
      }

      // optional sfixed32 coupon_rate_exponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_coupon_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &coupon_rate_exponent_)));
          set_has_coupon_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_credit_rating;
        break;
      }

      // optional string credit_rating = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_credit_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_credit_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->credit_rating().data(), this->credit_rating().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_encoded_issuer;
        break;
      }

      // optional bytes encoded_issuer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_issuer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_encoded_issuer_len;
        break;
      }

      // optional fixed32 encoded_issuer_len = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_issuer_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_issuer_len_)));
          set_has_encoded_issuer_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_encoded_security_desc;
        break;
      }

      // optional bytes encoded_security_desc = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_security_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_encoded_security_desc_len;
        break;
      }

      // optional fixed32 encoded_security_desc_len = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_security_desc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_security_desc_len_)));
          set_has_encoded_security_desc_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_factor;
        break;
      }

      // optional double factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_instr_registry;
        break;
      }

      // optional string instr_registry = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instr_registry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instr_registry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instr_registry().data(), this->instr_registry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_issue_date;
        break;
      }

      // optional sfixed32 issue_date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_issue_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &issue_date_)));
          set_has_issue_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_issuer;
        break;
      }

      // optional string issuer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->issuer().data(), this->issuer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_locale_of_issue;
        break;
      }

      // optional string locale_of_issue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locale_of_issue().data(), this->locale_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_maturity_date;
        break;
      }

      // optional sfixed32 maturity_date = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maturity_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &maturity_date_)));
          set_has_maturity_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_maturity_month_year;
        break;
      }

      // optional sfixed32 maturity_month_year = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maturity_month_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &maturity_month_year_)));
          set_has_maturity_month_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_opt_attribute;
        break;
      }

      // optional string opt_attribute = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_attribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt_attribute().data(), this->opt_attribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_product;
        break;
      }

      // optional .Common.ProductEnum product = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_product:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ProductEnum_IsValid(value)) {
            set_product(static_cast< ::Common::ProductEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_redemption_date;
        break;
      }

      // optional sfixed32 redemption_date = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_redemption_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &redemption_date_)));
          set_has_redemption_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_repo_collateral_security_type;
        break;
      }

      // optional string repo_collateral_security_type = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_repo_collateral_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_repo_collateral_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->repo_collateral_security_type().data(), this->repo_collateral_security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_repurchase_rate;
        break;
      }

      // optional sfixed64 repurchase_rate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_repurchase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &repurchase_rate_)));
          set_has_repurchase_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_repurchase_rate_exponent;
        break;
      }

      // optional sfixed32 repurchase_rate_exponent = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_repurchase_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &repurchase_rate_exponent_)));
          set_has_repurchase_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_repurchase_term;
        break;
      }

      // optional sfixed64 repurchase_term = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_repurchase_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &repurchase_term_)));
          set_has_repurchase_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_security_desc;
        break;
      }

      // optional string security_desc = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_desc().data(), this->security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_security_exchange;
        break;
      }

      // optional string security_exchange = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_exchange().data(), this->security_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_security_id;
        break;
      }

      // optional string security_id = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_id().data(), this->security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_security_id_source;
        break;
      }

      // optional .Common.SecurityIdSourceEnum security_id_source = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SecurityIdSourceEnum_IsValid(value)) {
            set_security_id_source(static_cast< ::Common::SecurityIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_security_type;
        break;
      }

      // optional .Common.SecurityTypeEnum security_type = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SecurityTypeEnum_IsValid(value)) {
            set_security_type(static_cast< ::Common::SecurityTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_state_or_province_of_issue;
        break;
      }

      // optional string state_or_province_of_issue = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state_or_province_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_or_province_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->state_or_province_of_issue().data(), this->state_or_province_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_strike_price;
        break;
      }

      // optional sfixed64 strike_price = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &strike_price_)));
          set_has_strike_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_strike_price_exponent;
        break;
      }

      // optional sfixed32 strike_price_exponent = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strike_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &strike_price_exponent_)));
          set_has_strike_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_symbol;
        break;
      }

      // optional string symbol = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_symbol_sfx;
        break;
      }

      // optional .Common.SymbolSfxEnum symbol_sfx = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbol_sfx:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SymbolSfxEnum_IsValid(value)) {
            set_symbol_sfx(static_cast< ::Common::SymbolSfxEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_cp_program;
        break;
      }

      // optional .Common.CpProgramEnum cp_program = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cp_program:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::CpProgramEnum_IsValid(value)) {
            set_cp_program(static_cast< ::Common::CpProgramEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_cp_reg_type;
        break;
      }

      // optional string cp_reg_type = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cp_reg_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cp_reg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cp_reg_type().data(), this->cp_reg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_contract_settl_month;
        break;
      }

      // optional sfixed32 contract_settl_month = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contract_settl_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &contract_settl_month_)));
          set_has_contract_settl_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_dated_date;
        break;
      }

      // optional sfixed32 dated_date = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dated_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &dated_date_)));
          set_has_dated_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_evnt_grp;
        break;
      }

      // repeated .Common.EvntGrp evnt_grp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_evnt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_evnt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_evnt_grp;
        if (input->ExpectTag(330)) goto parse_instrmt_assignment_method;
        break;
      }

      // optional string instrmt_assignment_method = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_assignment_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrmt_assignment_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrmt_assignment_method().data(), this->instrmt_assignment_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_instrument_parties;
        break;
      }

      // repeated .Common.InstrumentParties instrument_parties = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrument_parties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_instrument_parties;
        if (input->ExpectTag(349)) goto parse_interest_accrual_date;
        break;
      }

      // optional sfixed32 interest_accrual_date = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_interest_accrual_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &interest_accrual_date_)));
          set_has_interest_accrual_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_maturity_time;
        break;
      }

      // optional string maturity_time = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maturity_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturity_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maturity_time().data(), this->maturity_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_min_price_increment;
        break;
      }

      // optional double min_price_increment = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_price_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_price_increment_)));
          set_has_min_price_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_nt_position_limit;
        break;
      }

      // optional sfixed64 nt_position_limit = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nt_position_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nt_position_limit_)));
          set_has_nt_position_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_pool;
        break;
      }

      // optional string pool = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pool().data(), this->pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(385)) goto parse_position_limit;
        break;
      }

      // optional sfixed64 position_limit = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_position_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &position_limit_)));
          set_has_position_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_put_or_call;
        break;
      }

      // optional .Common.PutOrCallEnum put_or_call = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_put_or_call:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PutOrCallEnum_IsValid(value)) {
            set_put_or_call(static_cast< ::Common::PutOrCallEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(49, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_sec_alt_id_grp;
        break;
      }

      // repeated .Common.SecAltIdGrp sec_alt_id_grp = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_alt_id_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sec_alt_id_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_sec_alt_id_grp;
        if (input->ExpectTag(408)) goto parse_security_status;
        break;
      }

      // optional .Common.SecurityStatusEnum security_status = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SecurityStatusEnum_IsValid(value)) {
            set_security_status(static_cast< ::Common::SecurityStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(51, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_security_sub_type;
        break;
      }

      // optional string security_sub_type = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_sub_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_sub_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_sub_type().data(), this->security_sub_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_settle_on_open_flag;
        break;
      }

      // optional string settle_on_open_flag = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settle_on_open_flag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settle_on_open_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->settle_on_open_flag().data(), this->settle_on_open_flag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_strike_currency;
        break;
      }

      // optional string strike_currency = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strike_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strike_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strike_currency().data(), this->strike_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(441)) goto parse_strike_multiplier;
        break;
      }

      // optional double strike_multiplier = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_multiplier_)));
          set_has_strike_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_strike_value;
        break;
      }

      // optional double strike_value = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_value_)));
          set_has_strike_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_time_unit;
        break;
      }

      // optional .Common.TimeUnitEnum time_unit = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TimeUnitEnum_IsValid(value)) {
            set_time_unit(static_cast< ::Common::TimeUnitEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(57, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_unit_of_measure;
        break;
      }

      // optional .Common.UnitOfMeasureEnum unit_of_measure = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit_of_measure:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::UnitOfMeasureEnum_IsValid(value)) {
            set_unit_of_measure(static_cast< ::Common::UnitOfMeasureEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(58, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(473)) goto parse_cap_price;
        break;
      }

      // optional sfixed64 cap_price = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cap_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cap_price_)));
          set_has_cap_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_cap_price_exponent;
        break;
      }

      // optional sfixed32 cap_price_exponent = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cap_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cap_price_exponent_)));
          set_has_cap_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_exercise_style;
        break;
      }

      // optional .Common.ExerciseStyleEnum exercise_style = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exercise_style:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ExerciseStyleEnum_IsValid(value)) {
            set_exercise_style(static_cast< ::Common::ExerciseStyleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(61, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_flex_product_eligibility_indicator;
        break;
      }

      // optional bool flex_product_eligibility_indicator = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flex_product_eligibility_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flex_product_eligibility_indicator_)));
          set_has_flex_product_eligibility_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_flexible_indicator;
        break;
      }

      // optional bool flexible_indicator = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flexible_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flexible_indicator_)));
          set_has_flexible_indicator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(513)) goto parse_floor_price;
        break;
      }

      // optional sfixed64 floor_price = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_floor_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &floor_price_)));
          set_has_floor_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(525)) goto parse_floor_price_exponent;
        break;
      }

      // optional sfixed32 floor_price_exponent = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floor_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &floor_price_exponent_)));
          set_has_floor_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_list_method;
        break;
      }

      // optional .Common.ListMethodEnum list_method = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ListMethodEnum_IsValid(value)) {
            set_list_method(static_cast< ::Common::ListMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(66, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(537)) goto parse_min_price_increment_amount;
        break;
      }

      // optional sfixed64 min_price_increment_amount = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_price_increment_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_price_increment_amount_)));
          set_has_min_price_increment_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(549)) goto parse_min_price_increment_amount_exponent;
        break;
      }

      // optional sfixed32 min_price_increment_amount_exponent = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_price_increment_amount_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_price_increment_amount_exponent_)));
          set_has_min_price_increment_amount_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(553)) goto parse_opt_payout_amount;
        break;
      }

      // optional sfixed64 opt_payout_amount = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_opt_payout_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &opt_payout_amount_)));
          set_has_opt_payout_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(565)) goto parse_opt_payout_amount_exponent;
        break;
      }

      // optional sfixed32 opt_payout_amount_exponent = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_opt_payout_amount_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &opt_payout_amount_exponent_)));
          set_has_opt_payout_amount_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_price_quote_method;
        break;
      }

      // optional .Common.PriceQuoteMethodEnum price_quote_method = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_quote_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PriceQuoteMethodEnum_IsValid(value)) {
            set_price_quote_method(static_cast< ::Common::PriceQuoteMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(71, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_price_unit_of_measure;
        break;
      }

      // optional string price_unit_of_measure = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_unit_of_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_unit_of_measure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->price_unit_of_measure().data(), this->price_unit_of_measure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(585)) goto parse_price_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 price_unit_of_measure_qty = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_unit_of_measure_qty_)));
          set_has_price_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(597)) goto parse_price_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 price_unit_of_measure_qty_exponent = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_price_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_unit_of_measure_qty_exponent_)));
          set_has_price_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_product_complex;
        break;
      }

      // optional string product_complex = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product_complex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_complex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product_complex().data(), this->product_complex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_security_group;
        break;
      }

      // optional string security_group = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_group().data(), this->security_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(618)) goto parse_security_xml;
        break;
      }

      // optional .Common.SecurityXml security_xml = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_xml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_xml()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_settl_method;
        break;
      }

      // optional .Common.SettlMethodEnum settl_method = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settl_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SettlMethodEnum_IsValid(value)) {
            set_settl_method(static_cast< ::Common::SettlMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(78, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(633)) goto parse_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 unit_of_measure_qty = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &unit_of_measure_qty_)));
          set_has_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(645)) goto parse_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 unit_of_measure_qty_exponent = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &unit_of_measure_qty_exponent_)));
          set_has_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_valuation_method;
        break;
      }

      // optional .Common.ValuationMethodEnum valuation_method = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuation_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ValuationMethodEnum_IsValid(value)) {
            set_valuation_method(static_cast< ::Common::ValuationMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(81, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(656)) goto parse_contract_multiplier_unit;
        break;
      }

      // optional .Common.ContractMultiplierUnitEnum contract_multiplier_unit = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contract_multiplier_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ContractMultiplierUnitEnum_IsValid(value)) {
            set_contract_multiplier_unit(static_cast< ::Common::ContractMultiplierUnitEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(82, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_flow_schedule_type;
        break;
      }

      // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flow_schedule_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::FlowScheduleTypeEnum_IsValid(value)) {
            set_flow_schedule_type(static_cast< ::Common::FlowScheduleTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(83, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(673)) goto parse_attachment_point;
        break;
      }

      // optional sfixed64 attachment_point = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_attachment_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &attachment_point_)));
          set_has_attachment_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(685)) goto parse_attachment_point_exponent;
        break;
      }

      // optional sfixed32 attachment_point_exponent = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attachment_point_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &attachment_point_exponent_)));
          set_has_attachment_point_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(689)) goto parse_detachment_point;
        break;
      }

      // optional sfixed64 detachment_point = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_detachment_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &detachment_point_)));
          set_has_detachment_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(701)) goto parse_detachment_point_exponent;
        break;
      }

      // optional sfixed32 detachment_point_exponent = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_detachment_point_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &detachment_point_exponent_)));
          set_has_detachment_point_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(705)) goto parse_notional_percentage_outstanding;
        break;
      }

      // optional sfixed64 notional_percentage_outstanding = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_notional_percentage_outstanding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &notional_percentage_outstanding_)));
          set_has_notional_percentage_outstanding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(717)) goto parse_notional_percentage_outstanding_exponent;
        break;
      }

      // optional sfixed32 notional_percentage_outstanding_exponent = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_notional_percentage_outstanding_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &notional_percentage_outstanding_exponent_)));
          set_has_notional_percentage_outstanding_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(721)) goto parse_original_notional_percentage_outstanding;
        break;
      }

      // optional sfixed64 original_notional_percentage_outstanding = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_original_notional_percentage_outstanding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &original_notional_percentage_outstanding_)));
          set_has_original_notional_percentage_outstanding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(733)) goto parse_original_notional_percentage_outstanding_exponent;
        break;
      }

      // optional sfixed32 original_notional_percentage_outstanding_exponent = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_original_notional_percentage_outstanding_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &original_notional_percentage_outstanding_exponent_)));
          set_has_original_notional_percentage_outstanding_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(736)) goto parse_restructuring_type;
        break;
      }

      // optional .Common.RestructuringTypeEnum restructuring_type = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restructuring_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::RestructuringTypeEnum_IsValid(value)) {
            set_restructuring_type(static_cast< ::Common::RestructuringTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(92, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(744)) goto parse_seniority;
        break;
      }

      // optional .Common.SeniorityEnum seniority = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seniority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::SeniorityEnum_IsValid(value)) {
            set_seniority(static_cast< ::Common::SeniorityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(93, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_complex_events;
        break;
      }

      // repeated .Common.ComplexEvents complex_events = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_complex_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_complex_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(754)) goto parse_complex_events;
        if (input->ExpectTag(760)) goto parse_opt_payout_type;
        break;
      }

      // optional .Common.OptPayoutTypeEnum opt_payout_type = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt_payout_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::OptPayoutTypeEnum_IsValid(value)) {
            set_opt_payout_type(static_cast< ::Common::OptPayoutTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(95, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(768)) goto parse_strike_price_boundary_method;
        break;
      }

      // optional .Common.StrikePriceBoundaryMethodEnum strike_price_boundary_method = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike_price_boundary_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::StrikePriceBoundaryMethodEnum_IsValid(value)) {
            set_strike_price_boundary_method(static_cast< ::Common::StrikePriceBoundaryMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(96, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(777)) goto parse_strike_price_boundary_precision;
        break;
      }

      // optional sfixed64 strike_price_boundary_precision = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_price_boundary_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &strike_price_boundary_precision_)));
          set_has_strike_price_boundary_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(789)) goto parse_strike_price_boundary_precision_exponent;
        break;
      }

      // optional sfixed32 strike_price_boundary_precision_exponent = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strike_price_boundary_precision_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &strike_price_boundary_precision_exponent_)));
          set_has_strike_price_boundary_precision_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(792)) goto parse_strike_price_determination_method;
        break;
      }

      // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strike_price_determination_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::StrikePriceDeterminationMethodEnum_IsValid(value)) {
            set_strike_price_determination_method(static_cast< ::Common::StrikePriceDeterminationMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(99, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(800)) goto parse_underlying_price_determination_method;
        break;
      }

      // optional .Common.UnderlyingPriceDeterminationMethodEnum underlying_price_determination_method = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underlying_price_determination_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::UnderlyingPriceDeterminationMethodEnum_IsValid(value)) {
            set_underlying_price_determination_method(static_cast< ::Common::UnderlyingPriceDeterminationMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cfi_code = 1;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cfi_code(), output);
  }

  // optional double contract_multiplier = 2;
  if (has_contract_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->contract_multiplier(), output);
  }

  // optional string country_of_issue = 3;
  if (has_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_of_issue().data(), this->country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->country_of_issue(), output);
  }

  // optional sfixed32 coupon_payment_date = 4;
  if (has_coupon_payment_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->coupon_payment_date(), output);
  }

  // optional sfixed64 coupon_rate = 5;
  if (has_coupon_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->coupon_rate(), output);
  }

  // optional sfixed32 coupon_rate_exponent = 6;
  if (has_coupon_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->coupon_rate_exponent(), output);
  }

  // optional string credit_rating = 7;
  if (has_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->credit_rating().data(), this->credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->credit_rating(), output);
  }

  // optional bytes encoded_issuer = 8;
  if (has_encoded_issuer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->encoded_issuer(), output);
  }

  // optional fixed32 encoded_issuer_len = 9;
  if (has_encoded_issuer_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->encoded_issuer_len(), output);
  }

  // optional bytes encoded_security_desc = 10;
  if (has_encoded_security_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->encoded_security_desc(), output);
  }

  // optional fixed32 encoded_security_desc_len = 11;
  if (has_encoded_security_desc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->encoded_security_desc_len(), output);
  }

  // optional double factor = 12;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->factor(), output);
  }

  // optional string instr_registry = 13;
  if (has_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_registry().data(), this->instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->instr_registry(), output);
  }

  // optional sfixed32 issue_date = 14;
  if (has_issue_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->issue_date(), output);
  }

  // optional string issuer = 15;
  if (has_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->issuer(), output);
  }

  // optional string locale_of_issue = 16;
  if (has_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_of_issue().data(), this->locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->locale_of_issue(), output);
  }

  // optional sfixed32 maturity_date = 17;
  if (has_maturity_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->maturity_date(), output);
  }

  // optional sfixed32 maturity_month_year = 18;
  if (has_maturity_month_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->maturity_month_year(), output);
  }

  // optional string opt_attribute = 19;
  if (has_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_attribute().data(), this->opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->opt_attribute(), output);
  }

  // optional .Common.ProductEnum product = 20;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->product(), output);
  }

  // optional sfixed32 redemption_date = 21;
  if (has_redemption_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(21, this->redemption_date(), output);
  }

  // optional string repo_collateral_security_type = 22;
  if (has_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repo_collateral_security_type().data(), this->repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->repo_collateral_security_type(), output);
  }

  // optional sfixed64 repurchase_rate = 23;
  if (has_repurchase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->repurchase_rate(), output);
  }

  // optional sfixed32 repurchase_rate_exponent = 24;
  if (has_repurchase_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(24, this->repurchase_rate_exponent(), output);
  }

  // optional sfixed64 repurchase_term = 25;
  if (has_repurchase_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(25, this->repurchase_term(), output);
  }

  // optional string security_desc = 26;
  if (has_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_desc().data(), this->security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->security_desc(), output);
  }

  // optional string security_exchange = 27;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->security_exchange(), output);
  }

  // optional string security_id = 28;
  if (has_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_id().data(), this->security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->security_id(), output);
  }

  // optional .Common.SecurityIdSourceEnum security_id_source = 29;
  if (has_security_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->security_id_source(), output);
  }

  // optional .Common.SecurityTypeEnum security_type = 30;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->security_type(), output);
  }

  // optional string state_or_province_of_issue = 31;
  if (has_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_or_province_of_issue().data(), this->state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->state_or_province_of_issue(), output);
  }

  // optional sfixed64 strike_price = 32;
  if (has_strike_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(32, this->strike_price(), output);
  }

  // optional sfixed32 strike_price_exponent = 33;
  if (has_strike_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(33, this->strike_price_exponent(), output);
  }

  // optional string symbol = 34;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->symbol(), output);
  }

  // optional .Common.SymbolSfxEnum symbol_sfx = 35;
  if (has_symbol_sfx()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->symbol_sfx(), output);
  }

  // optional .Common.CpProgramEnum cp_program = 36;
  if (has_cp_program()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->cp_program(), output);
  }

  // optional string cp_reg_type = 37;
  if (has_cp_reg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp_reg_type().data(), this->cp_reg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->cp_reg_type(), output);
  }

  // optional sfixed32 contract_settl_month = 38;
  if (has_contract_settl_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(38, this->contract_settl_month(), output);
  }

  // optional sfixed32 dated_date = 39;
  if (has_dated_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(39, this->dated_date(), output);
  }

  // repeated .Common.EvntGrp evnt_grp = 40;
  for (int i = 0; i < this->evnt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->evnt_grp(i), output);
  }

  // optional string instrmt_assignment_method = 41;
  if (has_instrmt_assignment_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrmt_assignment_method().data(), this->instrmt_assignment_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->instrmt_assignment_method(), output);
  }

  // repeated .Common.InstrumentParties instrument_parties = 42;
  for (int i = 0; i < this->instrument_parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->instrument_parties(i), output);
  }

  // optional sfixed32 interest_accrual_date = 43;
  if (has_interest_accrual_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(43, this->interest_accrual_date(), output);
  }

  // optional string maturity_time = 44;
  if (has_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_time().data(), this->maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->maturity_time(), output);
  }

  // optional double min_price_increment = 45;
  if (has_min_price_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->min_price_increment(), output);
  }

  // optional sfixed64 nt_position_limit = 46;
  if (has_nt_position_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(46, this->nt_position_limit(), output);
  }

  // optional string pool = 47;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->pool(), output);
  }

  // optional sfixed64 position_limit = 48;
  if (has_position_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(48, this->position_limit(), output);
  }

  // optional .Common.PutOrCallEnum put_or_call = 49;
  if (has_put_or_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->put_or_call(), output);
  }

  // repeated .Common.SecAltIdGrp sec_alt_id_grp = 50;
  for (int i = 0; i < this->sec_alt_id_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->sec_alt_id_grp(i), output);
  }

  // optional .Common.SecurityStatusEnum security_status = 51;
  if (has_security_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      51, this->security_status(), output);
  }

  // optional string security_sub_type = 52;
  if (has_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_sub_type().data(), this->security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->security_sub_type(), output);
  }

  // optional string settle_on_open_flag = 53;
  if (has_settle_on_open_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settle_on_open_flag().data(), this->settle_on_open_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->settle_on_open_flag(), output);
  }

  // optional string strike_currency = 54;
  if (has_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strike_currency().data(), this->strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      54, this->strike_currency(), output);
  }

  // optional double strike_multiplier = 55;
  if (has_strike_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(55, this->strike_multiplier(), output);
  }

  // optional double strike_value = 56;
  if (has_strike_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->strike_value(), output);
  }

  // optional .Common.TimeUnitEnum time_unit = 57;
  if (has_time_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      57, this->time_unit(), output);
  }

  // optional .Common.UnitOfMeasureEnum unit_of_measure = 58;
  if (has_unit_of_measure()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      58, this->unit_of_measure(), output);
  }

  // optional sfixed64 cap_price = 59;
  if (has_cap_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(59, this->cap_price(), output);
  }

  // optional sfixed32 cap_price_exponent = 60;
  if (has_cap_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(60, this->cap_price_exponent(), output);
  }

  // optional .Common.ExerciseStyleEnum exercise_style = 61;
  if (has_exercise_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61, this->exercise_style(), output);
  }

  // optional bool flex_product_eligibility_indicator = 62;
  if (has_flex_product_eligibility_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(62, this->flex_product_eligibility_indicator(), output);
  }

  // optional bool flexible_indicator = 63;
  if (has_flexible_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->flexible_indicator(), output);
  }

  // optional sfixed64 floor_price = 64;
  if (has_floor_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(64, this->floor_price(), output);
  }

  // optional sfixed32 floor_price_exponent = 65;
  if (has_floor_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(65, this->floor_price_exponent(), output);
  }

  // optional .Common.ListMethodEnum list_method = 66;
  if (has_list_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      66, this->list_method(), output);
  }

  // optional sfixed64 min_price_increment_amount = 67;
  if (has_min_price_increment_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(67, this->min_price_increment_amount(), output);
  }

  // optional sfixed32 min_price_increment_amount_exponent = 68;
  if (has_min_price_increment_amount_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(68, this->min_price_increment_amount_exponent(), output);
  }

  // optional sfixed64 opt_payout_amount = 69;
  if (has_opt_payout_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(69, this->opt_payout_amount(), output);
  }

  // optional sfixed32 opt_payout_amount_exponent = 70;
  if (has_opt_payout_amount_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(70, this->opt_payout_amount_exponent(), output);
  }

  // optional .Common.PriceQuoteMethodEnum price_quote_method = 71;
  if (has_price_quote_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      71, this->price_quote_method(), output);
  }

  // optional string price_unit_of_measure = 72;
  if (has_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_unit_of_measure().data(), this->price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      72, this->price_unit_of_measure(), output);
  }

  // optional sfixed64 price_unit_of_measure_qty = 73;
  if (has_price_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(73, this->price_unit_of_measure_qty(), output);
  }

  // optional sfixed32 price_unit_of_measure_qty_exponent = 74;
  if (has_price_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(74, this->price_unit_of_measure_qty_exponent(), output);
  }

  // optional string product_complex = 75;
  if (has_product_complex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_complex().data(), this->product_complex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      75, this->product_complex(), output);
  }

  // optional string security_group = 76;
  if (has_security_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_group().data(), this->security_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      76, this->security_group(), output);
  }

  // optional .Common.SecurityXml security_xml = 77;
  if (has_security_xml()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->security_xml(), output);
  }

  // optional .Common.SettlMethodEnum settl_method = 78;
  if (has_settl_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      78, this->settl_method(), output);
  }

  // optional sfixed64 unit_of_measure_qty = 79;
  if (has_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(79, this->unit_of_measure_qty(), output);
  }

  // optional sfixed32 unit_of_measure_qty_exponent = 80;
  if (has_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(80, this->unit_of_measure_qty_exponent(), output);
  }

  // optional .Common.ValuationMethodEnum valuation_method = 81;
  if (has_valuation_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      81, this->valuation_method(), output);
  }

  // optional .Common.ContractMultiplierUnitEnum contract_multiplier_unit = 82;
  if (has_contract_multiplier_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      82, this->contract_multiplier_unit(), output);
  }

  // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 83;
  if (has_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      83, this->flow_schedule_type(), output);
  }

  // optional sfixed64 attachment_point = 84;
  if (has_attachment_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(84, this->attachment_point(), output);
  }

  // optional sfixed32 attachment_point_exponent = 85;
  if (has_attachment_point_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(85, this->attachment_point_exponent(), output);
  }

  // optional sfixed64 detachment_point = 86;
  if (has_detachment_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(86, this->detachment_point(), output);
  }

  // optional sfixed32 detachment_point_exponent = 87;
  if (has_detachment_point_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(87, this->detachment_point_exponent(), output);
  }

  // optional sfixed64 notional_percentage_outstanding = 88;
  if (has_notional_percentage_outstanding()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(88, this->notional_percentage_outstanding(), output);
  }

  // optional sfixed32 notional_percentage_outstanding_exponent = 89;
  if (has_notional_percentage_outstanding_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(89, this->notional_percentage_outstanding_exponent(), output);
  }

  // optional sfixed64 original_notional_percentage_outstanding = 90;
  if (has_original_notional_percentage_outstanding()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(90, this->original_notional_percentage_outstanding(), output);
  }

  // optional sfixed32 original_notional_percentage_outstanding_exponent = 91;
  if (has_original_notional_percentage_outstanding_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(91, this->original_notional_percentage_outstanding_exponent(), output);
  }

  // optional .Common.RestructuringTypeEnum restructuring_type = 92;
  if (has_restructuring_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      92, this->restructuring_type(), output);
  }

  // optional .Common.SeniorityEnum seniority = 93;
  if (has_seniority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      93, this->seniority(), output);
  }

  // repeated .Common.ComplexEvents complex_events = 94;
  for (int i = 0; i < this->complex_events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      94, this->complex_events(i), output);
  }

  // optional .Common.OptPayoutTypeEnum opt_payout_type = 95;
  if (has_opt_payout_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      95, this->opt_payout_type(), output);
  }

  // optional .Common.StrikePriceBoundaryMethodEnum strike_price_boundary_method = 96;
  if (has_strike_price_boundary_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      96, this->strike_price_boundary_method(), output);
  }

  // optional sfixed64 strike_price_boundary_precision = 97;
  if (has_strike_price_boundary_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(97, this->strike_price_boundary_precision(), output);
  }

  // optional sfixed32 strike_price_boundary_precision_exponent = 98;
  if (has_strike_price_boundary_precision_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(98, this->strike_price_boundary_precision_exponent(), output);
  }

  // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 99;
  if (has_strike_price_determination_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      99, this->strike_price_determination_method(), output);
  }

  // optional .Common.UnderlyingPriceDeterminationMethodEnum underlying_price_determination_method = 100;
  if (has_underlying_price_determination_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->underlying_price_determination_method(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cfi_code = 1;
  if (has_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cfi_code().data(), this->cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cfi_code(), target);
  }

  // optional double contract_multiplier = 2;
  if (has_contract_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->contract_multiplier(), target);
  }

  // optional string country_of_issue = 3;
  if (has_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->country_of_issue().data(), this->country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->country_of_issue(), target);
  }

  // optional sfixed32 coupon_payment_date = 4;
  if (has_coupon_payment_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->coupon_payment_date(), target);
  }

  // optional sfixed64 coupon_rate = 5;
  if (has_coupon_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->coupon_rate(), target);
  }

  // optional sfixed32 coupon_rate_exponent = 6;
  if (has_coupon_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->coupon_rate_exponent(), target);
  }

  // optional string credit_rating = 7;
  if (has_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->credit_rating().data(), this->credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->credit_rating(), target);
  }

  // optional bytes encoded_issuer = 8;
  if (has_encoded_issuer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->encoded_issuer(), target);
  }

  // optional fixed32 encoded_issuer_len = 9;
  if (has_encoded_issuer_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->encoded_issuer_len(), target);
  }

  // optional bytes encoded_security_desc = 10;
  if (has_encoded_security_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->encoded_security_desc(), target);
  }

  // optional fixed32 encoded_security_desc_len = 11;
  if (has_encoded_security_desc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->encoded_security_desc_len(), target);
  }

  // optional double factor = 12;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->factor(), target);
  }

  // optional string instr_registry = 13;
  if (has_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_registry().data(), this->instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->instr_registry(), target);
  }

  // optional sfixed32 issue_date = 14;
  if (has_issue_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->issue_date(), target);
  }

  // optional string issuer = 15;
  if (has_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->issuer().data(), this->issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->issuer(), target);
  }

  // optional string locale_of_issue = 16;
  if (has_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_of_issue().data(), this->locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->locale_of_issue(), target);
  }

  // optional sfixed32 maturity_date = 17;
  if (has_maturity_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->maturity_date(), target);
  }

  // optional sfixed32 maturity_month_year = 18;
  if (has_maturity_month_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->maturity_month_year(), target);
  }

  // optional string opt_attribute = 19;
  if (has_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_attribute().data(), this->opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->opt_attribute(), target);
  }

  // optional .Common.ProductEnum product = 20;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->product(), target);
  }

  // optional sfixed32 redemption_date = 21;
  if (has_redemption_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(21, this->redemption_date(), target);
  }

  // optional string repo_collateral_security_type = 22;
  if (has_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->repo_collateral_security_type().data(), this->repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->repo_collateral_security_type(), target);
  }

  // optional sfixed64 repurchase_rate = 23;
  if (has_repurchase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->repurchase_rate(), target);
  }

  // optional sfixed32 repurchase_rate_exponent = 24;
  if (has_repurchase_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(24, this->repurchase_rate_exponent(), target);
  }

  // optional sfixed64 repurchase_term = 25;
  if (has_repurchase_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(25, this->repurchase_term(), target);
  }

  // optional string security_desc = 26;
  if (has_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_desc().data(), this->security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->security_desc(), target);
  }

  // optional string security_exchange = 27;
  if (has_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_exchange().data(), this->security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->security_exchange(), target);
  }

  // optional string security_id = 28;
  if (has_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_id().data(), this->security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->security_id(), target);
  }

  // optional .Common.SecurityIdSourceEnum security_id_source = 29;
  if (has_security_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->security_id_source(), target);
  }

  // optional .Common.SecurityTypeEnum security_type = 30;
  if (has_security_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->security_type(), target);
  }

  // optional string state_or_province_of_issue = 31;
  if (has_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->state_or_province_of_issue().data(), this->state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->state_or_province_of_issue(), target);
  }

  // optional sfixed64 strike_price = 32;
  if (has_strike_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(32, this->strike_price(), target);
  }

  // optional sfixed32 strike_price_exponent = 33;
  if (has_strike_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(33, this->strike_price_exponent(), target);
  }

  // optional string symbol = 34;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->symbol(), target);
  }

  // optional .Common.SymbolSfxEnum symbol_sfx = 35;
  if (has_symbol_sfx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->symbol_sfx(), target);
  }

  // optional .Common.CpProgramEnum cp_program = 36;
  if (has_cp_program()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->cp_program(), target);
  }

  // optional string cp_reg_type = 37;
  if (has_cp_reg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cp_reg_type().data(), this->cp_reg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->cp_reg_type(), target);
  }

  // optional sfixed32 contract_settl_month = 38;
  if (has_contract_settl_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(38, this->contract_settl_month(), target);
  }

  // optional sfixed32 dated_date = 39;
  if (has_dated_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(39, this->dated_date(), target);
  }

  // repeated .Common.EvntGrp evnt_grp = 40;
  for (int i = 0; i < this->evnt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->evnt_grp(i), target);
  }

  // optional string instrmt_assignment_method = 41;
  if (has_instrmt_assignment_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrmt_assignment_method().data(), this->instrmt_assignment_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->instrmt_assignment_method(), target);
  }

  // repeated .Common.InstrumentParties instrument_parties = 42;
  for (int i = 0; i < this->instrument_parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->instrument_parties(i), target);
  }

  // optional sfixed32 interest_accrual_date = 43;
  if (has_interest_accrual_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(43, this->interest_accrual_date(), target);
  }

  // optional string maturity_time = 44;
  if (has_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_time().data(), this->maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->maturity_time(), target);
  }

  // optional double min_price_increment = 45;
  if (has_min_price_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->min_price_increment(), target);
  }

  // optional sfixed64 nt_position_limit = 46;
  if (has_nt_position_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(46, this->nt_position_limit(), target);
  }

  // optional string pool = 47;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pool().data(), this->pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->pool(), target);
  }

  // optional sfixed64 position_limit = 48;
  if (has_position_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(48, this->position_limit(), target);
  }

  // optional .Common.PutOrCallEnum put_or_call = 49;
  if (has_put_or_call()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      49, this->put_or_call(), target);
  }

  // repeated .Common.SecAltIdGrp sec_alt_id_grp = 50;
  for (int i = 0; i < this->sec_alt_id_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->sec_alt_id_grp(i), target);
  }

  // optional .Common.SecurityStatusEnum security_status = 51;
  if (has_security_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      51, this->security_status(), target);
  }

  // optional string security_sub_type = 52;
  if (has_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_sub_type().data(), this->security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->security_sub_type(), target);
  }

  // optional string settle_on_open_flag = 53;
  if (has_settle_on_open_flag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->settle_on_open_flag().data(), this->settle_on_open_flag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->settle_on_open_flag(), target);
  }

  // optional string strike_currency = 54;
  if (has_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strike_currency().data(), this->strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->strike_currency(), target);
  }

  // optional double strike_multiplier = 55;
  if (has_strike_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(55, this->strike_multiplier(), target);
  }

  // optional double strike_value = 56;
  if (has_strike_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->strike_value(), target);
  }

  // optional .Common.TimeUnitEnum time_unit = 57;
  if (has_time_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      57, this->time_unit(), target);
  }

  // optional .Common.UnitOfMeasureEnum unit_of_measure = 58;
  if (has_unit_of_measure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      58, this->unit_of_measure(), target);
  }

  // optional sfixed64 cap_price = 59;
  if (has_cap_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(59, this->cap_price(), target);
  }

  // optional sfixed32 cap_price_exponent = 60;
  if (has_cap_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(60, this->cap_price_exponent(), target);
  }

  // optional .Common.ExerciseStyleEnum exercise_style = 61;
  if (has_exercise_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61, this->exercise_style(), target);
  }

  // optional bool flex_product_eligibility_indicator = 62;
  if (has_flex_product_eligibility_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(62, this->flex_product_eligibility_indicator(), target);
  }

  // optional bool flexible_indicator = 63;
  if (has_flexible_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->flexible_indicator(), target);
  }

  // optional sfixed64 floor_price = 64;
  if (has_floor_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(64, this->floor_price(), target);
  }

  // optional sfixed32 floor_price_exponent = 65;
  if (has_floor_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(65, this->floor_price_exponent(), target);
  }

  // optional .Common.ListMethodEnum list_method = 66;
  if (has_list_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      66, this->list_method(), target);
  }

  // optional sfixed64 min_price_increment_amount = 67;
  if (has_min_price_increment_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(67, this->min_price_increment_amount(), target);
  }

  // optional sfixed32 min_price_increment_amount_exponent = 68;
  if (has_min_price_increment_amount_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(68, this->min_price_increment_amount_exponent(), target);
  }

  // optional sfixed64 opt_payout_amount = 69;
  if (has_opt_payout_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(69, this->opt_payout_amount(), target);
  }

  // optional sfixed32 opt_payout_amount_exponent = 70;
  if (has_opt_payout_amount_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(70, this->opt_payout_amount_exponent(), target);
  }

  // optional .Common.PriceQuoteMethodEnum price_quote_method = 71;
  if (has_price_quote_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      71, this->price_quote_method(), target);
  }

  // optional string price_unit_of_measure = 72;
  if (has_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->price_unit_of_measure().data(), this->price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->price_unit_of_measure(), target);
  }

  // optional sfixed64 price_unit_of_measure_qty = 73;
  if (has_price_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(73, this->price_unit_of_measure_qty(), target);
  }

  // optional sfixed32 price_unit_of_measure_qty_exponent = 74;
  if (has_price_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(74, this->price_unit_of_measure_qty_exponent(), target);
  }

  // optional string product_complex = 75;
  if (has_product_complex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product_complex().data(), this->product_complex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->product_complex(), target);
  }

  // optional string security_group = 76;
  if (has_security_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_group().data(), this->security_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        76, this->security_group(), target);
  }

  // optional .Common.SecurityXml security_xml = 77;
  if (has_security_xml()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->security_xml(), target);
  }

  // optional .Common.SettlMethodEnum settl_method = 78;
  if (has_settl_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      78, this->settl_method(), target);
  }

  // optional sfixed64 unit_of_measure_qty = 79;
  if (has_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(79, this->unit_of_measure_qty(), target);
  }

  // optional sfixed32 unit_of_measure_qty_exponent = 80;
  if (has_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(80, this->unit_of_measure_qty_exponent(), target);
  }

  // optional .Common.ValuationMethodEnum valuation_method = 81;
  if (has_valuation_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      81, this->valuation_method(), target);
  }

  // optional .Common.ContractMultiplierUnitEnum contract_multiplier_unit = 82;
  if (has_contract_multiplier_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      82, this->contract_multiplier_unit(), target);
  }

  // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 83;
  if (has_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      83, this->flow_schedule_type(), target);
  }

  // optional sfixed64 attachment_point = 84;
  if (has_attachment_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(84, this->attachment_point(), target);
  }

  // optional sfixed32 attachment_point_exponent = 85;
  if (has_attachment_point_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(85, this->attachment_point_exponent(), target);
  }

  // optional sfixed64 detachment_point = 86;
  if (has_detachment_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(86, this->detachment_point(), target);
  }

  // optional sfixed32 detachment_point_exponent = 87;
  if (has_detachment_point_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(87, this->detachment_point_exponent(), target);
  }

  // optional sfixed64 notional_percentage_outstanding = 88;
  if (has_notional_percentage_outstanding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(88, this->notional_percentage_outstanding(), target);
  }

  // optional sfixed32 notional_percentage_outstanding_exponent = 89;
  if (has_notional_percentage_outstanding_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(89, this->notional_percentage_outstanding_exponent(), target);
  }

  // optional sfixed64 original_notional_percentage_outstanding = 90;
  if (has_original_notional_percentage_outstanding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(90, this->original_notional_percentage_outstanding(), target);
  }

  // optional sfixed32 original_notional_percentage_outstanding_exponent = 91;
  if (has_original_notional_percentage_outstanding_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(91, this->original_notional_percentage_outstanding_exponent(), target);
  }

  // optional .Common.RestructuringTypeEnum restructuring_type = 92;
  if (has_restructuring_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      92, this->restructuring_type(), target);
  }

  // optional .Common.SeniorityEnum seniority = 93;
  if (has_seniority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      93, this->seniority(), target);
  }

  // repeated .Common.ComplexEvents complex_events = 94;
  for (int i = 0; i < this->complex_events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        94, this->complex_events(i), target);
  }

  // optional .Common.OptPayoutTypeEnum opt_payout_type = 95;
  if (has_opt_payout_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      95, this->opt_payout_type(), target);
  }

  // optional .Common.StrikePriceBoundaryMethodEnum strike_price_boundary_method = 96;
  if (has_strike_price_boundary_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      96, this->strike_price_boundary_method(), target);
  }

  // optional sfixed64 strike_price_boundary_precision = 97;
  if (has_strike_price_boundary_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(97, this->strike_price_boundary_precision(), target);
  }

  // optional sfixed32 strike_price_boundary_precision_exponent = 98;
  if (has_strike_price_boundary_precision_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(98, this->strike_price_boundary_precision_exponent(), target);
  }

  // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 99;
  if (has_strike_price_determination_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      99, this->strike_price_determination_method(), target);
  }

  // optional .Common.UnderlyingPriceDeterminationMethodEnum underlying_price_determination_method = 100;
  if (has_underlying_price_determination_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->underlying_price_determination_method(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cfi_code = 1;
    if (has_cfi_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfi_code());
    }

    // optional double contract_multiplier = 2;
    if (has_contract_multiplier()) {
      total_size += 1 + 8;
    }

    // optional string country_of_issue = 3;
    if (has_country_of_issue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_of_issue());
    }

    // optional sfixed32 coupon_payment_date = 4;
    if (has_coupon_payment_date()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 coupon_rate = 5;
    if (has_coupon_rate()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 coupon_rate_exponent = 6;
    if (has_coupon_rate_exponent()) {
      total_size += 1 + 4;
    }

    // optional string credit_rating = 7;
    if (has_credit_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->credit_rating());
    }

    // optional bytes encoded_issuer = 8;
    if (has_encoded_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_issuer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 encoded_issuer_len = 9;
    if (has_encoded_issuer_len()) {
      total_size += 1 + 4;
    }

    // optional bytes encoded_security_desc = 10;
    if (has_encoded_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_security_desc());
    }

    // optional fixed32 encoded_security_desc_len = 11;
    if (has_encoded_security_desc_len()) {
      total_size += 1 + 4;
    }

    // optional double factor = 12;
    if (has_factor()) {
      total_size += 1 + 8;
    }

    // optional string instr_registry = 13;
    if (has_instr_registry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instr_registry());
    }

    // optional sfixed32 issue_date = 14;
    if (has_issue_date()) {
      total_size += 1 + 4;
    }

    // optional string issuer = 15;
    if (has_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->issuer());
    }

    // optional string locale_of_issue = 16;
    if (has_locale_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale_of_issue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed32 maturity_date = 17;
    if (has_maturity_date()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 maturity_month_year = 18;
    if (has_maturity_month_year()) {
      total_size += 2 + 4;
    }

    // optional string opt_attribute = 19;
    if (has_opt_attribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_attribute());
    }

    // optional .Common.ProductEnum product = 20;
    if (has_product()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->product());
    }

    // optional sfixed32 redemption_date = 21;
    if (has_redemption_date()) {
      total_size += 2 + 4;
    }

    // optional string repo_collateral_security_type = 22;
    if (has_repo_collateral_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->repo_collateral_security_type());
    }

    // optional sfixed64 repurchase_rate = 23;
    if (has_repurchase_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 repurchase_rate_exponent = 24;
    if (has_repurchase_rate_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed64 repurchase_term = 25;
    if (has_repurchase_term()) {
      total_size += 2 + 8;
    }

    // optional string security_desc = 26;
    if (has_security_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_desc());
    }

    // optional string security_exchange = 27;
    if (has_security_exchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_exchange());
    }

    // optional string security_id = 28;
    if (has_security_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_id());
    }

    // optional .Common.SecurityIdSourceEnum security_id_source = 29;
    if (has_security_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_id_source());
    }

    // optional .Common.SecurityTypeEnum security_type = 30;
    if (has_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_type());
    }

    // optional string state_or_province_of_issue = 31;
    if (has_state_or_province_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_or_province_of_issue());
    }

    // optional sfixed64 strike_price = 32;
    if (has_strike_price()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sfixed32 strike_price_exponent = 33;
    if (has_strike_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional string symbol = 34;
    if (has_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional .Common.SymbolSfxEnum symbol_sfx = 35;
    if (has_symbol_sfx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbol_sfx());
    }

    // optional .Common.CpProgramEnum cp_program = 36;
    if (has_cp_program()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cp_program());
    }

    // optional string cp_reg_type = 37;
    if (has_cp_reg_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cp_reg_type());
    }

    // optional sfixed32 contract_settl_month = 38;
    if (has_contract_settl_month()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 dated_date = 39;
    if (has_dated_date()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string instrmt_assignment_method = 41;
    if (has_instrmt_assignment_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrmt_assignment_method());
    }

    // optional sfixed32 interest_accrual_date = 43;
    if (has_interest_accrual_date()) {
      total_size += 2 + 4;
    }

    // optional string maturity_time = 44;
    if (has_maturity_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturity_time());
    }

    // optional double min_price_increment = 45;
    if (has_min_price_increment()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 nt_position_limit = 46;
    if (has_nt_position_limit()) {
      total_size += 2 + 8;
    }

    // optional string pool = 47;
    if (has_pool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pool());
    }

    // optional sfixed64 position_limit = 48;
    if (has_position_limit()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .Common.PutOrCallEnum put_or_call = 49;
    if (has_put_or_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->put_or_call());
    }

    // optional .Common.SecurityStatusEnum security_status = 51;
    if (has_security_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_status());
    }

    // optional string security_sub_type = 52;
    if (has_security_sub_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_sub_type());
    }

    // optional string settle_on_open_flag = 53;
    if (has_settle_on_open_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settle_on_open_flag());
    }

    // optional string strike_currency = 54;
    if (has_strike_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strike_currency());
    }

    // optional double strike_multiplier = 55;
    if (has_strike_multiplier()) {
      total_size += 2 + 8;
    }

    // optional double strike_value = 56;
    if (has_strike_value()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .Common.TimeUnitEnum time_unit = 57;
    if (has_time_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_unit());
    }

    // optional .Common.UnitOfMeasureEnum unit_of_measure = 58;
    if (has_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_of_measure());
    }

    // optional sfixed64 cap_price = 59;
    if (has_cap_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 cap_price_exponent = 60;
    if (has_cap_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.ExerciseStyleEnum exercise_style = 61;
    if (has_exercise_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exercise_style());
    }

    // optional bool flex_product_eligibility_indicator = 62;
    if (has_flex_product_eligibility_indicator()) {
      total_size += 2 + 1;
    }

    // optional bool flexible_indicator = 63;
    if (has_flexible_indicator()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 floor_price = 64;
    if (has_floor_price()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional sfixed32 floor_price_exponent = 65;
    if (has_floor_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.ListMethodEnum list_method = 66;
    if (has_list_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->list_method());
    }

    // optional sfixed64 min_price_increment_amount = 67;
    if (has_min_price_increment_amount()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 min_price_increment_amount_exponent = 68;
    if (has_min_price_increment_amount_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 opt_payout_amount = 69;
    if (has_opt_payout_amount()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 opt_payout_amount_exponent = 70;
    if (has_opt_payout_amount_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.PriceQuoteMethodEnum price_quote_method = 71;
    if (has_price_quote_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_quote_method());
    }

    // optional string price_unit_of_measure = 72;
    if (has_price_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_unit_of_measure());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional sfixed64 price_unit_of_measure_qty = 73;
    if (has_price_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 price_unit_of_measure_qty_exponent = 74;
    if (has_price_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional string product_complex = 75;
    if (has_product_complex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_complex());
    }

    // optional string security_group = 76;
    if (has_security_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_group());
    }

    // optional .Common.SecurityXml security_xml = 77;
    if (has_security_xml()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_xml());
    }

    // optional .Common.SettlMethodEnum settl_method = 78;
    if (has_settl_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_method());
    }

    // optional sfixed64 unit_of_measure_qty = 79;
    if (has_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 unit_of_measure_qty_exponent = 80;
    if (has_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .Common.ValuationMethodEnum valuation_method = 81;
    if (has_valuation_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuation_method());
    }

    // optional .Common.ContractMultiplierUnitEnum contract_multiplier_unit = 82;
    if (has_contract_multiplier_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->contract_multiplier_unit());
    }

    // optional .Common.FlowScheduleTypeEnum flow_schedule_type = 83;
    if (has_flow_schedule_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flow_schedule_type());
    }

    // optional sfixed64 attachment_point = 84;
    if (has_attachment_point()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 attachment_point_exponent = 85;
    if (has_attachment_point_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 detachment_point = 86;
    if (has_detachment_point()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 detachment_point_exponent = 87;
    if (has_detachment_point_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 notional_percentage_outstanding = 88;
    if (has_notional_percentage_outstanding()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional sfixed32 notional_percentage_outstanding_exponent = 89;
    if (has_notional_percentage_outstanding_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 original_notional_percentage_outstanding = 90;
    if (has_original_notional_percentage_outstanding()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 original_notional_percentage_outstanding_exponent = 91;
    if (has_original_notional_percentage_outstanding_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.RestructuringTypeEnum restructuring_type = 92;
    if (has_restructuring_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->restructuring_type());
    }

    // optional .Common.SeniorityEnum seniority = 93;
    if (has_seniority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->seniority());
    }

    // optional .Common.OptPayoutTypeEnum opt_payout_type = 95;
    if (has_opt_payout_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt_payout_type());
    }

    // optional .Common.StrikePriceBoundaryMethodEnum strike_price_boundary_method = 96;
    if (has_strike_price_boundary_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strike_price_boundary_method());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional sfixed64 strike_price_boundary_precision = 97;
    if (has_strike_price_boundary_precision()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 strike_price_boundary_precision_exponent = 98;
    if (has_strike_price_boundary_precision_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.StrikePriceDeterminationMethodEnum strike_price_determination_method = 99;
    if (has_strike_price_determination_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strike_price_determination_method());
    }

    // optional .Common.UnderlyingPriceDeterminationMethodEnum underlying_price_determination_method = 100;
    if (has_underlying_price_determination_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underlying_price_determination_method());
    }

  }
  // repeated .Common.EvntGrp evnt_grp = 40;
  total_size += 2 * this->evnt_grp_size();
  for (int i = 0; i < this->evnt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evnt_grp(i));
  }

  // repeated .Common.InstrumentParties instrument_parties = 42;
  total_size += 2 * this->instrument_parties_size();
  for (int i = 0; i < this->instrument_parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrument_parties(i));
  }

  // repeated .Common.SecAltIdGrp sec_alt_id_grp = 50;
  total_size += 2 * this->sec_alt_id_grp_size();
  for (int i = 0; i < this->sec_alt_id_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sec_alt_id_grp(i));
  }

  // repeated .Common.ComplexEvents complex_events = 94;
  total_size += 2 * this->complex_events_size();
  for (int i = 0; i < this->complex_events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->complex_events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instrument::MergeFrom(const Instrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  evnt_grp_.MergeFrom(from.evnt_grp_);
  instrument_parties_.MergeFrom(from.instrument_parties_);
  sec_alt_id_grp_.MergeFrom(from.sec_alt_id_grp_);
  complex_events_.MergeFrom(from.complex_events_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfi_code()) {
      set_cfi_code(from.cfi_code());
    }
    if (from.has_contract_multiplier()) {
      set_contract_multiplier(from.contract_multiplier());
    }
    if (from.has_country_of_issue()) {
      set_country_of_issue(from.country_of_issue());
    }
    if (from.has_coupon_payment_date()) {
      set_coupon_payment_date(from.coupon_payment_date());
    }
    if (from.has_coupon_rate()) {
      set_coupon_rate(from.coupon_rate());
    }
    if (from.has_coupon_rate_exponent()) {
      set_coupon_rate_exponent(from.coupon_rate_exponent());
    }
    if (from.has_credit_rating()) {
      set_credit_rating(from.credit_rating());
    }
    if (from.has_encoded_issuer()) {
      set_encoded_issuer(from.encoded_issuer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_encoded_issuer_len()) {
      set_encoded_issuer_len(from.encoded_issuer_len());
    }
    if (from.has_encoded_security_desc()) {
      set_encoded_security_desc(from.encoded_security_desc());
    }
    if (from.has_encoded_security_desc_len()) {
      set_encoded_security_desc_len(from.encoded_security_desc_len());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_instr_registry()) {
      set_instr_registry(from.instr_registry());
    }
    if (from.has_issue_date()) {
      set_issue_date(from.issue_date());
    }
    if (from.has_issuer()) {
      set_issuer(from.issuer());
    }
    if (from.has_locale_of_issue()) {
      set_locale_of_issue(from.locale_of_issue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maturity_date()) {
      set_maturity_date(from.maturity_date());
    }
    if (from.has_maturity_month_year()) {
      set_maturity_month_year(from.maturity_month_year());
    }
    if (from.has_opt_attribute()) {
      set_opt_attribute(from.opt_attribute());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_redemption_date()) {
      set_redemption_date(from.redemption_date());
    }
    if (from.has_repo_collateral_security_type()) {
      set_repo_collateral_security_type(from.repo_collateral_security_type());
    }
    if (from.has_repurchase_rate()) {
      set_repurchase_rate(from.repurchase_rate());
    }
    if (from.has_repurchase_rate_exponent()) {
      set_repurchase_rate_exponent(from.repurchase_rate_exponent());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_repurchase_term()) {
      set_repurchase_term(from.repurchase_term());
    }
    if (from.has_security_desc()) {
      set_security_desc(from.security_desc());
    }
    if (from.has_security_exchange()) {
      set_security_exchange(from.security_exchange());
    }
    if (from.has_security_id()) {
      set_security_id(from.security_id());
    }
    if (from.has_security_id_source()) {
      set_security_id_source(from.security_id_source());
    }
    if (from.has_security_type()) {
      set_security_type(from.security_type());
    }
    if (from.has_state_or_province_of_issue()) {
      set_state_or_province_of_issue(from.state_or_province_of_issue());
    }
    if (from.has_strike_price()) {
      set_strike_price(from.strike_price());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_strike_price_exponent()) {
      set_strike_price_exponent(from.strike_price_exponent());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_symbol_sfx()) {
      set_symbol_sfx(from.symbol_sfx());
    }
    if (from.has_cp_program()) {
      set_cp_program(from.cp_program());
    }
    if (from.has_cp_reg_type()) {
      set_cp_reg_type(from.cp_reg_type());
    }
    if (from.has_contract_settl_month()) {
      set_contract_settl_month(from.contract_settl_month());
    }
    if (from.has_dated_date()) {
      set_dated_date(from.dated_date());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_instrmt_assignment_method()) {
      set_instrmt_assignment_method(from.instrmt_assignment_method());
    }
    if (from.has_interest_accrual_date()) {
      set_interest_accrual_date(from.interest_accrual_date());
    }
    if (from.has_maturity_time()) {
      set_maturity_time(from.maturity_time());
    }
    if (from.has_min_price_increment()) {
      set_min_price_increment(from.min_price_increment());
    }
    if (from.has_nt_position_limit()) {
      set_nt_position_limit(from.nt_position_limit());
    }
    if (from.has_pool()) {
      set_pool(from.pool());
    }
    if (from.has_position_limit()) {
      set_position_limit(from.position_limit());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_put_or_call()) {
      set_put_or_call(from.put_or_call());
    }
    if (from.has_security_status()) {
      set_security_status(from.security_status());
    }
    if (from.has_security_sub_type()) {
      set_security_sub_type(from.security_sub_type());
    }
    if (from.has_settle_on_open_flag()) {
      set_settle_on_open_flag(from.settle_on_open_flag());
    }
    if (from.has_strike_currency()) {
      set_strike_currency(from.strike_currency());
    }
    if (from.has_strike_multiplier()) {
      set_strike_multiplier(from.strike_multiplier());
    }
    if (from.has_strike_value()) {
      set_strike_value(from.strike_value());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_time_unit()) {
      set_time_unit(from.time_unit());
    }
    if (from.has_unit_of_measure()) {
      set_unit_of_measure(from.unit_of_measure());
    }
    if (from.has_cap_price()) {
      set_cap_price(from.cap_price());
    }
    if (from.has_cap_price_exponent()) {
      set_cap_price_exponent(from.cap_price_exponent());
    }
    if (from.has_exercise_style()) {
      set_exercise_style(from.exercise_style());
    }
    if (from.has_flex_product_eligibility_indicator()) {
      set_flex_product_eligibility_indicator(from.flex_product_eligibility_indicator());
    }
    if (from.has_flexible_indicator()) {
      set_flexible_indicator(from.flexible_indicator());
    }
    if (from.has_floor_price()) {
      set_floor_price(from.floor_price());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_floor_price_exponent()) {
      set_floor_price_exponent(from.floor_price_exponent());
    }
    if (from.has_list_method()) {
      set_list_method(from.list_method());
    }
    if (from.has_min_price_increment_amount()) {
      set_min_price_increment_amount(from.min_price_increment_amount());
    }
    if (from.has_min_price_increment_amount_exponent()) {
      set_min_price_increment_amount_exponent(from.min_price_increment_amount_exponent());
    }
    if (from.has_opt_payout_amount()) {
      set_opt_payout_amount(from.opt_payout_amount());
    }
    if (from.has_opt_payout_amount_exponent()) {
      set_opt_payout_amount_exponent(from.opt_payout_amount_exponent());
    }
    if (from.has_price_quote_method()) {
      set_price_quote_method(from.price_quote_method());
    }
    if (from.has_price_unit_of_measure()) {
      set_price_unit_of_measure(from.price_unit_of_measure());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_price_unit_of_measure_qty()) {
      set_price_unit_of_measure_qty(from.price_unit_of_measure_qty());
    }
    if (from.has_price_unit_of_measure_qty_exponent()) {
      set_price_unit_of_measure_qty_exponent(from.price_unit_of_measure_qty_exponent());
    }
    if (from.has_product_complex()) {
      set_product_complex(from.product_complex());
    }
    if (from.has_security_group()) {
      set_security_group(from.security_group());
    }
    if (from.has_security_xml()) {
      mutable_security_xml()->::Common::SecurityXml::MergeFrom(from.security_xml());
    }
    if (from.has_settl_method()) {
      set_settl_method(from.settl_method());
    }
    if (from.has_unit_of_measure_qty()) {
      set_unit_of_measure_qty(from.unit_of_measure_qty());
    }
    if (from.has_unit_of_measure_qty_exponent()) {
      set_unit_of_measure_qty_exponent(from.unit_of_measure_qty_exponent());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_valuation_method()) {
      set_valuation_method(from.valuation_method());
    }
    if (from.has_contract_multiplier_unit()) {
      set_contract_multiplier_unit(from.contract_multiplier_unit());
    }
    if (from.has_flow_schedule_type()) {
      set_flow_schedule_type(from.flow_schedule_type());
    }
    if (from.has_attachment_point()) {
      set_attachment_point(from.attachment_point());
    }
    if (from.has_attachment_point_exponent()) {
      set_attachment_point_exponent(from.attachment_point_exponent());
    }
    if (from.has_detachment_point()) {
      set_detachment_point(from.detachment_point());
    }
    if (from.has_detachment_point_exponent()) {
      set_detachment_point_exponent(from.detachment_point_exponent());
    }
    if (from.has_notional_percentage_outstanding()) {
      set_notional_percentage_outstanding(from.notional_percentage_outstanding());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_notional_percentage_outstanding_exponent()) {
      set_notional_percentage_outstanding_exponent(from.notional_percentage_outstanding_exponent());
    }
    if (from.has_original_notional_percentage_outstanding()) {
      set_original_notional_percentage_outstanding(from.original_notional_percentage_outstanding());
    }
    if (from.has_original_notional_percentage_outstanding_exponent()) {
      set_original_notional_percentage_outstanding_exponent(from.original_notional_percentage_outstanding_exponent());
    }
    if (from.has_restructuring_type()) {
      set_restructuring_type(from.restructuring_type());
    }
    if (from.has_seniority()) {
      set_seniority(from.seniority());
    }
    if (from.has_opt_payout_type()) {
      set_opt_payout_type(from.opt_payout_type());
    }
    if (from.has_strike_price_boundary_method()) {
      set_strike_price_boundary_method(from.strike_price_boundary_method());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_strike_price_boundary_precision()) {
      set_strike_price_boundary_precision(from.strike_price_boundary_precision());
    }
    if (from.has_strike_price_boundary_precision_exponent()) {
      set_strike_price_boundary_precision_exponent(from.strike_price_boundary_precision_exponent());
    }
    if (from.has_strike_price_determination_method()) {
      set_strike_price_determination_method(from.strike_price_determination_method());
    }
    if (from.has_underlying_price_determination_method()) {
      set_underlying_price_determination_method(from.underlying_price_determination_method());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instrument::CopyFrom(const Instrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instrument::IsInitialized() const {

  return true;
}

void Instrument::Swap(Instrument* other) {
  if (other != this) {
    std::swap(cfi_code_, other->cfi_code_);
    std::swap(contract_multiplier_, other->contract_multiplier_);
    std::swap(country_of_issue_, other->country_of_issue_);
    std::swap(coupon_payment_date_, other->coupon_payment_date_);
    std::swap(coupon_rate_, other->coupon_rate_);
    std::swap(coupon_rate_exponent_, other->coupon_rate_exponent_);
    std::swap(credit_rating_, other->credit_rating_);
    std::swap(encoded_issuer_, other->encoded_issuer_);
    std::swap(encoded_issuer_len_, other->encoded_issuer_len_);
    std::swap(encoded_security_desc_, other->encoded_security_desc_);
    std::swap(encoded_security_desc_len_, other->encoded_security_desc_len_);
    std::swap(factor_, other->factor_);
    std::swap(instr_registry_, other->instr_registry_);
    std::swap(issue_date_, other->issue_date_);
    std::swap(issuer_, other->issuer_);
    std::swap(locale_of_issue_, other->locale_of_issue_);
    std::swap(maturity_date_, other->maturity_date_);
    std::swap(maturity_month_year_, other->maturity_month_year_);
    std::swap(opt_attribute_, other->opt_attribute_);
    std::swap(product_, other->product_);
    std::swap(redemption_date_, other->redemption_date_);
    std::swap(repo_collateral_security_type_, other->repo_collateral_security_type_);
    std::swap(repurchase_rate_, other->repurchase_rate_);
    std::swap(repurchase_rate_exponent_, other->repurchase_rate_exponent_);
    std::swap(repurchase_term_, other->repurchase_term_);
    std::swap(security_desc_, other->security_desc_);
    std::swap(security_exchange_, other->security_exchange_);
    std::swap(security_id_, other->security_id_);
    std::swap(security_id_source_, other->security_id_source_);
    std::swap(security_type_, other->security_type_);
    std::swap(state_or_province_of_issue_, other->state_or_province_of_issue_);
    std::swap(strike_price_, other->strike_price_);
    std::swap(strike_price_exponent_, other->strike_price_exponent_);
    std::swap(symbol_, other->symbol_);
    std::swap(symbol_sfx_, other->symbol_sfx_);
    std::swap(cp_program_, other->cp_program_);
    std::swap(cp_reg_type_, other->cp_reg_type_);
    std::swap(contract_settl_month_, other->contract_settl_month_);
    std::swap(dated_date_, other->dated_date_);
    evnt_grp_.Swap(&other->evnt_grp_);
    std::swap(instrmt_assignment_method_, other->instrmt_assignment_method_);
    instrument_parties_.Swap(&other->instrument_parties_);
    std::swap(interest_accrual_date_, other->interest_accrual_date_);
    std::swap(maturity_time_, other->maturity_time_);
    std::swap(min_price_increment_, other->min_price_increment_);
    std::swap(nt_position_limit_, other->nt_position_limit_);
    std::swap(pool_, other->pool_);
    std::swap(position_limit_, other->position_limit_);
    std::swap(put_or_call_, other->put_or_call_);
    sec_alt_id_grp_.Swap(&other->sec_alt_id_grp_);
    std::swap(security_status_, other->security_status_);
    std::swap(security_sub_type_, other->security_sub_type_);
    std::swap(settle_on_open_flag_, other->settle_on_open_flag_);
    std::swap(strike_currency_, other->strike_currency_);
    std::swap(strike_multiplier_, other->strike_multiplier_);
    std::swap(strike_value_, other->strike_value_);
    std::swap(time_unit_, other->time_unit_);
    std::swap(unit_of_measure_, other->unit_of_measure_);
    std::swap(cap_price_, other->cap_price_);
    std::swap(cap_price_exponent_, other->cap_price_exponent_);
    std::swap(exercise_style_, other->exercise_style_);
    std::swap(flex_product_eligibility_indicator_, other->flex_product_eligibility_indicator_);
    std::swap(flexible_indicator_, other->flexible_indicator_);
    std::swap(floor_price_, other->floor_price_);
    std::swap(floor_price_exponent_, other->floor_price_exponent_);
    std::swap(list_method_, other->list_method_);
    std::swap(min_price_increment_amount_, other->min_price_increment_amount_);
    std::swap(min_price_increment_amount_exponent_, other->min_price_increment_amount_exponent_);
    std::swap(opt_payout_amount_, other->opt_payout_amount_);
    std::swap(opt_payout_amount_exponent_, other->opt_payout_amount_exponent_);
    std::swap(price_quote_method_, other->price_quote_method_);
    std::swap(price_unit_of_measure_, other->price_unit_of_measure_);
    std::swap(price_unit_of_measure_qty_, other->price_unit_of_measure_qty_);
    std::swap(price_unit_of_measure_qty_exponent_, other->price_unit_of_measure_qty_exponent_);
    std::swap(product_complex_, other->product_complex_);
    std::swap(security_group_, other->security_group_);
    std::swap(security_xml_, other->security_xml_);
    std::swap(settl_method_, other->settl_method_);
    std::swap(unit_of_measure_qty_, other->unit_of_measure_qty_);
    std::swap(unit_of_measure_qty_exponent_, other->unit_of_measure_qty_exponent_);
    std::swap(valuation_method_, other->valuation_method_);
    std::swap(contract_multiplier_unit_, other->contract_multiplier_unit_);
    std::swap(flow_schedule_type_, other->flow_schedule_type_);
    std::swap(attachment_point_, other->attachment_point_);
    std::swap(attachment_point_exponent_, other->attachment_point_exponent_);
    std::swap(detachment_point_, other->detachment_point_);
    std::swap(detachment_point_exponent_, other->detachment_point_exponent_);
    std::swap(notional_percentage_outstanding_, other->notional_percentage_outstanding_);
    std::swap(notional_percentage_outstanding_exponent_, other->notional_percentage_outstanding_exponent_);
    std::swap(original_notional_percentage_outstanding_, other->original_notional_percentage_outstanding_);
    std::swap(original_notional_percentage_outstanding_exponent_, other->original_notional_percentage_outstanding_exponent_);
    std::swap(restructuring_type_, other->restructuring_type_);
    std::swap(seniority_, other->seniority_);
    complex_events_.Swap(&other->complex_events_);
    std::swap(opt_payout_type_, other->opt_payout_type_);
    std::swap(strike_price_boundary_method_, other->strike_price_boundary_method_);
    std::swap(strike_price_boundary_precision_, other->strike_price_boundary_precision_);
    std::swap(strike_price_boundary_precision_exponent_, other->strike_price_boundary_precision_exponent_);
    std::swap(strike_price_determination_method_, other->strike_price_determination_method_);
    std::swap(underlying_price_determination_method_, other->underlying_price_determination_method_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instrument_descriptor_;
  metadata.reflection = Instrument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinancingDetails::kAgreementCurrencyFieldNumber;
const int FinancingDetails::kAgreementDateFieldNumber;
const int FinancingDetails::kAgreementDescFieldNumber;
const int FinancingDetails::kAgreementIdFieldNumber;
const int FinancingDetails::kDeliveryTypeFieldNumber;
const int FinancingDetails::kEndDateFieldNumber;
const int FinancingDetails::kMarginRatioFieldNumber;
const int FinancingDetails::kMarginRatioExponentFieldNumber;
const int FinancingDetails::kStartDateFieldNumber;
const int FinancingDetails::kTerminationTypeFieldNumber;
#endif  // !_MSC_VER

FinancingDetails::FinancingDetails()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinancingDetails::InitAsDefaultInstance() {
}

FinancingDetails::FinancingDetails(const FinancingDetails& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinancingDetails::SharedCtor() {
  _cached_size_ = 0;
  agreement_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agreement_date_ = 0;
  agreement_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  agreement_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  delivery_type_ = 0;
  end_date_ = 0;
  margin_ratio_ = GOOGLE_LONGLONG(0);
  margin_ratio_exponent_ = 0;
  start_date_ = 0;
  termination_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinancingDetails::~FinancingDetails() {
  SharedDtor();
}

void FinancingDetails::SharedDtor() {
  if (agreement_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete agreement_currency_;
  }
  if (agreement_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete agreement_desc_;
  }
  if (agreement_id_ != &::google::protobuf::internal::kEmptyString) {
    delete agreement_id_;
  }
  if (this != default_instance_) {
  }
}

void FinancingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinancingDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinancingDetails_descriptor_;
}

const FinancingDetails& FinancingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

FinancingDetails* FinancingDetails::default_instance_ = NULL;

FinancingDetails* FinancingDetails::New() const {
  return new FinancingDetails;
}

void FinancingDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_agreement_currency()) {
      if (agreement_currency_ != &::google::protobuf::internal::kEmptyString) {
        agreement_currency_->clear();
      }
    }
    agreement_date_ = 0;
    if (has_agreement_desc()) {
      if (agreement_desc_ != &::google::protobuf::internal::kEmptyString) {
        agreement_desc_->clear();
      }
    }
    if (has_agreement_id()) {
      if (agreement_id_ != &::google::protobuf::internal::kEmptyString) {
        agreement_id_->clear();
      }
    }
    delivery_type_ = 0;
    end_date_ = 0;
    margin_ratio_ = GOOGLE_LONGLONG(0);
    margin_ratio_exponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    start_date_ = 0;
    termination_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinancingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string agreement_currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agreement_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agreement_currency().data(), this->agreement_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_agreement_date;
        break;
      }

      // optional sfixed32 agreement_date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_agreement_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &agreement_date_)));
          set_has_agreement_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_agreement_desc;
        break;
      }

      // optional string agreement_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agreement_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agreement_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agreement_desc().data(), this->agreement_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_agreement_id;
        break;
      }

      // optional string agreement_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agreement_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agreement_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agreement_id().data(), this->agreement_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_delivery_type;
        break;
      }

      // optional .Common.DeliveryTypeEnum delivery_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delivery_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DeliveryTypeEnum_IsValid(value)) {
            set_delivery_type(static_cast< ::Common::DeliveryTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_end_date;
        break;
      }

      // optional sfixed32 end_date = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_date_)));
          set_has_end_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_margin_ratio;
        break;
      }

      // optional sfixed64 margin_ratio = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_margin_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &margin_ratio_)));
          set_has_margin_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_margin_ratio_exponent;
        break;
      }

      // optional sfixed32 margin_ratio_exponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_ratio_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &margin_ratio_exponent_)));
          set_has_margin_ratio_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_start_date;
        break;
      }

      // optional sfixed32 start_date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_date_)));
          set_has_start_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_termination_type;
        break;
      }

      // optional .Common.TerminationTypeEnum termination_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_termination_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TerminationTypeEnum_IsValid(value)) {
            set_termination_type(static_cast< ::Common::TerminationTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinancingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string agreement_currency = 1;
  if (has_agreement_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_currency().data(), this->agreement_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->agreement_currency(), output);
  }

  // optional sfixed32 agreement_date = 2;
  if (has_agreement_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->agreement_date(), output);
  }

  // optional string agreement_desc = 3;
  if (has_agreement_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_desc().data(), this->agreement_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->agreement_desc(), output);
  }

  // optional string agreement_id = 4;
  if (has_agreement_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_id().data(), this->agreement_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->agreement_id(), output);
  }

  // optional .Common.DeliveryTypeEnum delivery_type = 5;
  if (has_delivery_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->delivery_type(), output);
  }

  // optional sfixed32 end_date = 6;
  if (has_end_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->end_date(), output);
  }

  // optional sfixed64 margin_ratio = 7;
  if (has_margin_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->margin_ratio(), output);
  }

  // optional sfixed32 margin_ratio_exponent = 8;
  if (has_margin_ratio_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->margin_ratio_exponent(), output);
  }

  // optional sfixed32 start_date = 9;
  if (has_start_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->start_date(), output);
  }

  // optional .Common.TerminationTypeEnum termination_type = 10;
  if (has_termination_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->termination_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinancingDetails::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string agreement_currency = 1;
  if (has_agreement_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_currency().data(), this->agreement_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->agreement_currency(), target);
  }

  // optional sfixed32 agreement_date = 2;
  if (has_agreement_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->agreement_date(), target);
  }

  // optional string agreement_desc = 3;
  if (has_agreement_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_desc().data(), this->agreement_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->agreement_desc(), target);
  }

  // optional string agreement_id = 4;
  if (has_agreement_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agreement_id().data(), this->agreement_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->agreement_id(), target);
  }

  // optional .Common.DeliveryTypeEnum delivery_type = 5;
  if (has_delivery_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->delivery_type(), target);
  }

  // optional sfixed32 end_date = 6;
  if (has_end_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->end_date(), target);
  }

  // optional sfixed64 margin_ratio = 7;
  if (has_margin_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->margin_ratio(), target);
  }

  // optional sfixed32 margin_ratio_exponent = 8;
  if (has_margin_ratio_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->margin_ratio_exponent(), target);
  }

  // optional sfixed32 start_date = 9;
  if (has_start_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->start_date(), target);
  }

  // optional .Common.TerminationTypeEnum termination_type = 10;
  if (has_termination_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->termination_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinancingDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string agreement_currency = 1;
    if (has_agreement_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agreement_currency());
    }

    // optional sfixed32 agreement_date = 2;
    if (has_agreement_date()) {
      total_size += 1 + 4;
    }

    // optional string agreement_desc = 3;
    if (has_agreement_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agreement_desc());
    }

    // optional string agreement_id = 4;
    if (has_agreement_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agreement_id());
    }

    // optional .Common.DeliveryTypeEnum delivery_type = 5;
    if (has_delivery_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->delivery_type());
    }

    // optional sfixed32 end_date = 6;
    if (has_end_date()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 margin_ratio = 7;
    if (has_margin_ratio()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 margin_ratio_exponent = 8;
    if (has_margin_ratio_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 start_date = 9;
    if (has_start_date()) {
      total_size += 1 + 4;
    }

    // optional .Common.TerminationTypeEnum termination_type = 10;
    if (has_termination_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->termination_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinancingDetails::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinancingDetails* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinancingDetails*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinancingDetails::MergeFrom(const FinancingDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agreement_currency()) {
      set_agreement_currency(from.agreement_currency());
    }
    if (from.has_agreement_date()) {
      set_agreement_date(from.agreement_date());
    }
    if (from.has_agreement_desc()) {
      set_agreement_desc(from.agreement_desc());
    }
    if (from.has_agreement_id()) {
      set_agreement_id(from.agreement_id());
    }
    if (from.has_delivery_type()) {
      set_delivery_type(from.delivery_type());
    }
    if (from.has_end_date()) {
      set_end_date(from.end_date());
    }
    if (from.has_margin_ratio()) {
      set_margin_ratio(from.margin_ratio());
    }
    if (from.has_margin_ratio_exponent()) {
      set_margin_ratio_exponent(from.margin_ratio_exponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_start_date()) {
      set_start_date(from.start_date());
    }
    if (from.has_termination_type()) {
      set_termination_type(from.termination_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinancingDetails::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinancingDetails::CopyFrom(const FinancingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinancingDetails::IsInitialized() const {

  return true;
}

void FinancingDetails::Swap(FinancingDetails* other) {
  if (other != this) {
    std::swap(agreement_currency_, other->agreement_currency_);
    std::swap(agreement_date_, other->agreement_date_);
    std::swap(agreement_desc_, other->agreement_desc_);
    std::swap(agreement_id_, other->agreement_id_);
    std::swap(delivery_type_, other->delivery_type_);
    std::swap(end_date_, other->end_date_);
    std::swap(margin_ratio_, other->margin_ratio_);
    std::swap(margin_ratio_exponent_, other->margin_ratio_exponent_);
    std::swap(start_date_, other->start_date_);
    std::swap(termination_type_, other->termination_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinancingDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinancingDetails_descriptor_;
  metadata.reflection = FinancingDetails_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndSecAltIdGrp::kUnderlyingSecurityAltIdFieldNumber;
const int UndSecAltIdGrp::kUnderlyingSecurityAltIdSourceFieldNumber;
#endif  // !_MSC_VER

UndSecAltIdGrp::UndSecAltIdGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndSecAltIdGrp::InitAsDefaultInstance() {
}

UndSecAltIdGrp::UndSecAltIdGrp(const UndSecAltIdGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndSecAltIdGrp::SharedCtor() {
  _cached_size_ = 0;
  underlying_security_alt_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_security_alt_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndSecAltIdGrp::~UndSecAltIdGrp() {
  SharedDtor();
}

void UndSecAltIdGrp::SharedDtor() {
  if (underlying_security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_alt_id_;
  }
  if (underlying_security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_alt_id_source_;
  }
  if (this != default_instance_) {
  }
}

void UndSecAltIdGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndSecAltIdGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndSecAltIdGrp_descriptor_;
}

const UndSecAltIdGrp& UndSecAltIdGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UndSecAltIdGrp* UndSecAltIdGrp::default_instance_ = NULL;

UndSecAltIdGrp* UndSecAltIdGrp::New() const {
  return new UndSecAltIdGrp;
}

void UndSecAltIdGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_underlying_security_alt_id()) {
      if (underlying_security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_alt_id_->clear();
      }
    }
    if (has_underlying_security_alt_id_source()) {
      if (underlying_security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_alt_id_source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndSecAltIdGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string underlying_security_alt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_alt_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_alt_id().data(), this->underlying_security_alt_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_underlying_security_alt_id_source;
        break;
      }

      // optional string underlying_security_alt_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_alt_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_alt_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_alt_id_source().data(), this->underlying_security_alt_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndSecAltIdGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string underlying_security_alt_id = 1;
  if (has_underlying_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_alt_id().data(), this->underlying_security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->underlying_security_alt_id(), output);
  }

  // optional string underlying_security_alt_id_source = 2;
  if (has_underlying_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_alt_id_source().data(), this->underlying_security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->underlying_security_alt_id_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndSecAltIdGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string underlying_security_alt_id = 1;
  if (has_underlying_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_alt_id().data(), this->underlying_security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->underlying_security_alt_id(), target);
  }

  // optional string underlying_security_alt_id_source = 2;
  if (has_underlying_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_alt_id_source().data(), this->underlying_security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlying_security_alt_id_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndSecAltIdGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string underlying_security_alt_id = 1;
    if (has_underlying_security_alt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_alt_id());
    }

    // optional string underlying_security_alt_id_source = 2;
    if (has_underlying_security_alt_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_alt_id_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndSecAltIdGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndSecAltIdGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndSecAltIdGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndSecAltIdGrp::MergeFrom(const UndSecAltIdGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_security_alt_id()) {
      set_underlying_security_alt_id(from.underlying_security_alt_id());
    }
    if (from.has_underlying_security_alt_id_source()) {
      set_underlying_security_alt_id_source(from.underlying_security_alt_id_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndSecAltIdGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndSecAltIdGrp::CopyFrom(const UndSecAltIdGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndSecAltIdGrp::IsInitialized() const {

  return true;
}

void UndSecAltIdGrp::Swap(UndSecAltIdGrp* other) {
  if (other != this) {
    std::swap(underlying_security_alt_id_, other->underlying_security_alt_id_);
    std::swap(underlying_security_alt_id_source_, other->underlying_security_alt_id_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndSecAltIdGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndSecAltIdGrp_descriptor_;
  metadata.reflection = UndSecAltIdGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnderlyingStipulations::kUnderlyingStipTypeFieldNumber;
const int UnderlyingStipulations::kUnderlyingStipValueFieldNumber;
#endif  // !_MSC_VER

UnderlyingStipulations::UnderlyingStipulations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnderlyingStipulations::InitAsDefaultInstance() {
}

UnderlyingStipulations::UnderlyingStipulations(const UnderlyingStipulations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnderlyingStipulations::SharedCtor() {
  _cached_size_ = 0;
  underlying_stip_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_stip_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnderlyingStipulations::~UnderlyingStipulations() {
  SharedDtor();
}

void UnderlyingStipulations::SharedDtor() {
  if (underlying_stip_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_stip_type_;
  }
  if (underlying_stip_value_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_stip_value_;
  }
  if (this != default_instance_) {
  }
}

void UnderlyingStipulations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnderlyingStipulations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingStipulations_descriptor_;
}

const UnderlyingStipulations& UnderlyingStipulations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UnderlyingStipulations* UnderlyingStipulations::default_instance_ = NULL;

UnderlyingStipulations* UnderlyingStipulations::New() const {
  return new UnderlyingStipulations;
}

void UnderlyingStipulations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_underlying_stip_type()) {
      if (underlying_stip_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_stip_type_->clear();
      }
    }
    if (has_underlying_stip_value()) {
      if (underlying_stip_value_ != &::google::protobuf::internal::kEmptyString) {
        underlying_stip_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnderlyingStipulations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string underlying_stip_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_stip_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_stip_type().data(), this->underlying_stip_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_underlying_stip_value;
        break;
      }

      // optional string underlying_stip_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_stip_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_stip_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_stip_value().data(), this->underlying_stip_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnderlyingStipulations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string underlying_stip_type = 1;
  if (has_underlying_stip_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_stip_type().data(), this->underlying_stip_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->underlying_stip_type(), output);
  }

  // optional string underlying_stip_value = 2;
  if (has_underlying_stip_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_stip_value().data(), this->underlying_stip_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->underlying_stip_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnderlyingStipulations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string underlying_stip_type = 1;
  if (has_underlying_stip_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_stip_type().data(), this->underlying_stip_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->underlying_stip_type(), target);
  }

  // optional string underlying_stip_value = 2;
  if (has_underlying_stip_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_stip_value().data(), this->underlying_stip_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlying_stip_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnderlyingStipulations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string underlying_stip_type = 1;
    if (has_underlying_stip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_stip_type());
    }

    // optional string underlying_stip_value = 2;
    if (has_underlying_stip_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_stip_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnderlyingStipulations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnderlyingStipulations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnderlyingStipulations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnderlyingStipulations::MergeFrom(const UnderlyingStipulations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_stip_type()) {
      set_underlying_stip_type(from.underlying_stip_type());
    }
    if (from.has_underlying_stip_value()) {
      set_underlying_stip_value(from.underlying_stip_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnderlyingStipulations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingStipulations::CopyFrom(const UnderlyingStipulations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingStipulations::IsInitialized() const {

  return true;
}

void UnderlyingStipulations::Swap(UnderlyingStipulations* other) {
  if (other != this) {
    std::swap(underlying_stip_type_, other->underlying_stip_type_);
    std::swap(underlying_stip_value_, other->underlying_stip_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnderlyingStipulations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnderlyingStipulations_descriptor_;
  metadata.reflection = UnderlyingStipulations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndlyInstrumentPtysSubGrp::kUnderlyingInstrumentPartySubIdFieldNumber;
const int UndlyInstrumentPtysSubGrp::kUnderlyingInstrumentPartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

UndlyInstrumentPtysSubGrp::UndlyInstrumentPtysSubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndlyInstrumentPtysSubGrp::InitAsDefaultInstance() {
}

UndlyInstrumentPtysSubGrp::UndlyInstrumentPtysSubGrp(const UndlyInstrumentPtysSubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndlyInstrumentPtysSubGrp::SharedCtor() {
  _cached_size_ = 0;
  underlying_instrument_party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_instrument_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndlyInstrumentPtysSubGrp::~UndlyInstrumentPtysSubGrp() {
  SharedDtor();
}

void UndlyInstrumentPtysSubGrp::SharedDtor() {
  if (underlying_instrument_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_instrument_party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void UndlyInstrumentPtysSubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndlyInstrumentPtysSubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndlyInstrumentPtysSubGrp_descriptor_;
}

const UndlyInstrumentPtysSubGrp& UndlyInstrumentPtysSubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UndlyInstrumentPtysSubGrp* UndlyInstrumentPtysSubGrp::default_instance_ = NULL;

UndlyInstrumentPtysSubGrp* UndlyInstrumentPtysSubGrp::New() const {
  return new UndlyInstrumentPtysSubGrp;
}

void UndlyInstrumentPtysSubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_underlying_instrument_party_sub_id()) {
      if (underlying_instrument_party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        underlying_instrument_party_sub_id_->clear();
      }
    }
    underlying_instrument_party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndlyInstrumentPtysSubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string underlying_instrument_party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_instrument_party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_instrument_party_sub_id().data(), this->underlying_instrument_party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_underlying_instrument_party_sub_id_type;
        break;
      }

      // optional sfixed64 underlying_instrument_party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_instrument_party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_instrument_party_sub_id_type_)));
          set_has_underlying_instrument_party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndlyInstrumentPtysSubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string underlying_instrument_party_sub_id = 1;
  if (has_underlying_instrument_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_sub_id().data(), this->underlying_instrument_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->underlying_instrument_party_sub_id(), output);
  }

  // optional sfixed64 underlying_instrument_party_sub_id_type = 2;
  if (has_underlying_instrument_party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->underlying_instrument_party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndlyInstrumentPtysSubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string underlying_instrument_party_sub_id = 1;
  if (has_underlying_instrument_party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_sub_id().data(), this->underlying_instrument_party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->underlying_instrument_party_sub_id(), target);
  }

  // optional sfixed64 underlying_instrument_party_sub_id_type = 2;
  if (has_underlying_instrument_party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->underlying_instrument_party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndlyInstrumentPtysSubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string underlying_instrument_party_sub_id = 1;
    if (has_underlying_instrument_party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_instrument_party_sub_id());
    }

    // optional sfixed64 underlying_instrument_party_sub_id_type = 2;
    if (has_underlying_instrument_party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndlyInstrumentPtysSubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndlyInstrumentPtysSubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndlyInstrumentPtysSubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndlyInstrumentPtysSubGrp::MergeFrom(const UndlyInstrumentPtysSubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_instrument_party_sub_id()) {
      set_underlying_instrument_party_sub_id(from.underlying_instrument_party_sub_id());
    }
    if (from.has_underlying_instrument_party_sub_id_type()) {
      set_underlying_instrument_party_sub_id_type(from.underlying_instrument_party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndlyInstrumentPtysSubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndlyInstrumentPtysSubGrp::CopyFrom(const UndlyInstrumentPtysSubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndlyInstrumentPtysSubGrp::IsInitialized() const {

  return true;
}

void UndlyInstrumentPtysSubGrp::Swap(UndlyInstrumentPtysSubGrp* other) {
  if (other != this) {
    std::swap(underlying_instrument_party_sub_id_, other->underlying_instrument_party_sub_id_);
    std::swap(underlying_instrument_party_sub_id_type_, other->underlying_instrument_party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndlyInstrumentPtysSubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndlyInstrumentPtysSubGrp_descriptor_;
  metadata.reflection = UndlyInstrumentPtysSubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndlyInstrumentParties::kUnderlyingInstrumentPartyIdFieldNumber;
const int UndlyInstrumentParties::kUnderlyingInstrumentPartyIdSourceFieldNumber;
const int UndlyInstrumentParties::kUnderlyingInstrumentPartyRoleFieldNumber;
const int UndlyInstrumentParties::kUndlyInstrumentPtysSubGrpFieldNumber;
#endif  // !_MSC_VER

UndlyInstrumentParties::UndlyInstrumentParties()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndlyInstrumentParties::InitAsDefaultInstance() {
}

UndlyInstrumentParties::UndlyInstrumentParties(const UndlyInstrumentParties& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndlyInstrumentParties::SharedCtor() {
  _cached_size_ = 0;
  underlying_instrument_party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_instrument_party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_instrument_party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndlyInstrumentParties::~UndlyInstrumentParties() {
  SharedDtor();
}

void UndlyInstrumentParties::SharedDtor() {
  if (underlying_instrument_party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_instrument_party_id_;
  }
  if (underlying_instrument_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_instrument_party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void UndlyInstrumentParties::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndlyInstrumentParties::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndlyInstrumentParties_descriptor_;
}

const UndlyInstrumentParties& UndlyInstrumentParties::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UndlyInstrumentParties* UndlyInstrumentParties::default_instance_ = NULL;

UndlyInstrumentParties* UndlyInstrumentParties::New() const {
  return new UndlyInstrumentParties;
}

void UndlyInstrumentParties::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_underlying_instrument_party_id()) {
      if (underlying_instrument_party_id_ != &::google::protobuf::internal::kEmptyString) {
        underlying_instrument_party_id_->clear();
      }
    }
    if (has_underlying_instrument_party_id_source()) {
      if (underlying_instrument_party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        underlying_instrument_party_id_source_->clear();
      }
    }
    underlying_instrument_party_role_ = GOOGLE_LONGLONG(0);
  }
  undly_instrument_ptys_sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndlyInstrumentParties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string underlying_instrument_party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_instrument_party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_instrument_party_id().data(), this->underlying_instrument_party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_underlying_instrument_party_id_source;
        break;
      }

      // optional string underlying_instrument_party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_instrument_party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_instrument_party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_instrument_party_id_source().data(), this->underlying_instrument_party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_underlying_instrument_party_role;
        break;
      }

      // optional sfixed64 underlying_instrument_party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_instrument_party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_instrument_party_role_)));
          set_has_underlying_instrument_party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undly_instrument_ptys_sub_grp;
        break;
      }

      // repeated .Common.UndlyInstrumentPtysSubGrp undly_instrument_ptys_sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undly_instrument_ptys_sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undly_instrument_ptys_sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_undly_instrument_ptys_sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndlyInstrumentParties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string underlying_instrument_party_id = 1;
  if (has_underlying_instrument_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_id().data(), this->underlying_instrument_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->underlying_instrument_party_id(), output);
  }

  // optional string underlying_instrument_party_id_source = 2;
  if (has_underlying_instrument_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_id_source().data(), this->underlying_instrument_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->underlying_instrument_party_id_source(), output);
  }

  // optional sfixed64 underlying_instrument_party_role = 3;
  if (has_underlying_instrument_party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->underlying_instrument_party_role(), output);
  }

  // repeated .Common.UndlyInstrumentPtysSubGrp undly_instrument_ptys_sub_grp = 4;
  for (int i = 0; i < this->undly_instrument_ptys_sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->undly_instrument_ptys_sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndlyInstrumentParties::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string underlying_instrument_party_id = 1;
  if (has_underlying_instrument_party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_id().data(), this->underlying_instrument_party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->underlying_instrument_party_id(), target);
  }

  // optional string underlying_instrument_party_id_source = 2;
  if (has_underlying_instrument_party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instrument_party_id_source().data(), this->underlying_instrument_party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->underlying_instrument_party_id_source(), target);
  }

  // optional sfixed64 underlying_instrument_party_role = 3;
  if (has_underlying_instrument_party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->underlying_instrument_party_role(), target);
  }

  // repeated .Common.UndlyInstrumentPtysSubGrp undly_instrument_ptys_sub_grp = 4;
  for (int i = 0; i < this->undly_instrument_ptys_sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->undly_instrument_ptys_sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndlyInstrumentParties::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string underlying_instrument_party_id = 1;
    if (has_underlying_instrument_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_instrument_party_id());
    }

    // optional string underlying_instrument_party_id_source = 2;
    if (has_underlying_instrument_party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_instrument_party_id_source());
    }

    // optional sfixed64 underlying_instrument_party_role = 3;
    if (has_underlying_instrument_party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.UndlyInstrumentPtysSubGrp undly_instrument_ptys_sub_grp = 4;
  total_size += 1 * this->undly_instrument_ptys_sub_grp_size();
  for (int i = 0; i < this->undly_instrument_ptys_sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undly_instrument_ptys_sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndlyInstrumentParties::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndlyInstrumentParties* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndlyInstrumentParties*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndlyInstrumentParties::MergeFrom(const UndlyInstrumentParties& from) {
  GOOGLE_CHECK_NE(&from, this);
  undly_instrument_ptys_sub_grp_.MergeFrom(from.undly_instrument_ptys_sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_instrument_party_id()) {
      set_underlying_instrument_party_id(from.underlying_instrument_party_id());
    }
    if (from.has_underlying_instrument_party_id_source()) {
      set_underlying_instrument_party_id_source(from.underlying_instrument_party_id_source());
    }
    if (from.has_underlying_instrument_party_role()) {
      set_underlying_instrument_party_role(from.underlying_instrument_party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndlyInstrumentParties::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndlyInstrumentParties::CopyFrom(const UndlyInstrumentParties& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndlyInstrumentParties::IsInitialized() const {

  return true;
}

void UndlyInstrumentParties::Swap(UndlyInstrumentParties* other) {
  if (other != this) {
    std::swap(underlying_instrument_party_id_, other->underlying_instrument_party_id_);
    std::swap(underlying_instrument_party_id_source_, other->underlying_instrument_party_id_source_);
    std::swap(underlying_instrument_party_role_, other->underlying_instrument_party_role_);
    undly_instrument_ptys_sub_grp_.Swap(&other->undly_instrument_ptys_sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndlyInstrumentParties::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndlyInstrumentParties_descriptor_;
  metadata.reflection = UndlyInstrumentParties_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnderlyingFlowScheduleTypeUnion::kUnderlyingFlowScheduleTypeFieldNumber;
const int UnderlyingFlowScheduleTypeUnion::kUnderlyingFlowScheduleTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

UnderlyingFlowScheduleTypeUnion::UnderlyingFlowScheduleTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnderlyingFlowScheduleTypeUnion::InitAsDefaultInstance() {
}

UnderlyingFlowScheduleTypeUnion::UnderlyingFlowScheduleTypeUnion(const UnderlyingFlowScheduleTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnderlyingFlowScheduleTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  underlying_flow_schedule_type_ = GOOGLE_LONGLONG(0);
  underlying_flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnderlyingFlowScheduleTypeUnion::~UnderlyingFlowScheduleTypeUnion() {
  SharedDtor();
}

void UnderlyingFlowScheduleTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnderlyingFlowScheduleTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnderlyingFlowScheduleTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingFlowScheduleTypeUnion_descriptor_;
}

const UnderlyingFlowScheduleTypeUnion& UnderlyingFlowScheduleTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UnderlyingFlowScheduleTypeUnion* UnderlyingFlowScheduleTypeUnion::default_instance_ = NULL;

UnderlyingFlowScheduleTypeUnion* UnderlyingFlowScheduleTypeUnion::New() const {
  return new UnderlyingFlowScheduleTypeUnion;
}

void UnderlyingFlowScheduleTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    underlying_flow_schedule_type_ = GOOGLE_LONGLONG(0);
    underlying_flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnderlyingFlowScheduleTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 underlying_flow_schedule_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_flow_schedule_type_)));
          set_has_underlying_flow_schedule_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_underlying_flow_schedule_type_sfixed64;
        break;
      }

      // optional sfixed64 underlying_flow_schedule_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_flow_schedule_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_flow_schedule_type_sfixed64_)));
          set_has_underlying_flow_schedule_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnderlyingFlowScheduleTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 underlying_flow_schedule_type = 1;
  if (has_underlying_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->underlying_flow_schedule_type(), output);
  }

  // optional sfixed64 underlying_flow_schedule_type_sfixed64 = 2;
  if (has_underlying_flow_schedule_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->underlying_flow_schedule_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnderlyingFlowScheduleTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 underlying_flow_schedule_type = 1;
  if (has_underlying_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->underlying_flow_schedule_type(), target);
  }

  // optional sfixed64 underlying_flow_schedule_type_sfixed64 = 2;
  if (has_underlying_flow_schedule_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->underlying_flow_schedule_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnderlyingFlowScheduleTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 underlying_flow_schedule_type = 1;
    if (has_underlying_flow_schedule_type()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 underlying_flow_schedule_type_sfixed64 = 2;
    if (has_underlying_flow_schedule_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnderlyingFlowScheduleTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnderlyingFlowScheduleTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnderlyingFlowScheduleTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnderlyingFlowScheduleTypeUnion::MergeFrom(const UnderlyingFlowScheduleTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_flow_schedule_type()) {
      set_underlying_flow_schedule_type(from.underlying_flow_schedule_type());
    }
    if (from.has_underlying_flow_schedule_type_sfixed64()) {
      set_underlying_flow_schedule_type_sfixed64(from.underlying_flow_schedule_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnderlyingFlowScheduleTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingFlowScheduleTypeUnion::CopyFrom(const UnderlyingFlowScheduleTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingFlowScheduleTypeUnion::IsInitialized() const {

  return true;
}

void UnderlyingFlowScheduleTypeUnion::Swap(UnderlyingFlowScheduleTypeUnion* other) {
  if (other != this) {
    std::swap(underlying_flow_schedule_type_, other->underlying_flow_schedule_type_);
    std::swap(underlying_flow_schedule_type_sfixed64_, other->underlying_flow_schedule_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnderlyingFlowScheduleTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnderlyingFlowScheduleTypeUnion_descriptor_;
  metadata.reflection = UnderlyingFlowScheduleTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnderlyingInstrument::kEncodedUnderlyingIssuerFieldNumber;
const int UnderlyingInstrument::kEncodedUnderlyingIssuerLenFieldNumber;
const int UnderlyingInstrument::kEncodedUnderlyingSecurityDescFieldNumber;
const int UnderlyingInstrument::kEncodedUnderlyingSecurityDescLenFieldNumber;
const int UnderlyingInstrument::kUnderlyingCfiCodeFieldNumber;
const int UnderlyingInstrument::kUnderlyingContractMultiplierFieldNumber;
const int UnderlyingInstrument::kUnderlyingCountryOfIssueFieldNumber;
const int UnderlyingInstrument::kUnderlyingCouponPaymentDateFieldNumber;
const int UnderlyingInstrument::kUnderlyingCouponRateFieldNumber;
const int UnderlyingInstrument::kUnderlyingCouponRateExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingCreditRatingFieldNumber;
const int UnderlyingInstrument::kUnderlyingFactorFieldNumber;
const int UnderlyingInstrument::kUnderlyingInstrRegistryFieldNumber;
const int UnderlyingInstrument::kUnderlyingIssueDateFieldNumber;
const int UnderlyingInstrument::kUnderlyingIssuerFieldNumber;
const int UnderlyingInstrument::kUnderlyingLocaleOfIssueFieldNumber;
const int UnderlyingInstrument::kUnderlyingMaturityDateFieldNumber;
const int UnderlyingInstrument::kUnderlyingMaturityMonthYearFieldNumber;
const int UnderlyingInstrument::kUnderlyingOptAttributeFieldNumber;
const int UnderlyingInstrument::kUnderlyingProductFieldNumber;
const int UnderlyingInstrument::kUnderlyingPutOrCallFieldNumber;
const int UnderlyingInstrument::kUnderlyingRedemptionDateFieldNumber;
const int UnderlyingInstrument::kUnderlyingRepoCollateralSecurityTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingRepurchaseRateFieldNumber;
const int UnderlyingInstrument::kUnderlyingRepurchaseRateExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingRepurchaseTermFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecurityDescFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecurityExchangeFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecurityIdFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecurityIdSourceFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecurityTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingStateOrProvinceOfIssueFieldNumber;
const int UnderlyingInstrument::kUnderlyingStrikePriceFieldNumber;
const int UnderlyingInstrument::kUnderlyingStrikePriceExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingSymbolFieldNumber;
const int UnderlyingInstrument::kUnderlyingSymbolSfxFieldNumber;
const int UnderlyingInstrument::kUndSecAltIdGrpFieldNumber;
const int UnderlyingInstrument::kUnderlyingAdjustedQuantityFieldNumber;
const int UnderlyingInstrument::kUnderlyingAdjustedQuantityExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingAllocationPercentFieldNumber;
const int UnderlyingInstrument::kUnderlyingAllocationPercentExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingCpProgramFieldNumber;
const int UnderlyingInstrument::kUnderlyingCpRegTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingCapValueFieldNumber;
const int UnderlyingInstrument::kUnderlyingCapValueExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingCashAmountFieldNumber;
const int UnderlyingInstrument::kUnderlyingCashAmountExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingCashTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingCurrencyFieldNumber;
const int UnderlyingInstrument::kUnderlyingCurrentValueFieldNumber;
const int UnderlyingInstrument::kUnderlyingCurrentValueExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingDirtyPriceFieldNumber;
const int UnderlyingInstrument::kUnderlyingDirtyPriceExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingEndPriceFieldNumber;
const int UnderlyingInstrument::kUnderlyingEndPriceExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingEndValueFieldNumber;
const int UnderlyingInstrument::kUnderlyingEndValueExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingFxRateFieldNumber;
const int UnderlyingInstrument::kUnderlyingFxRateCalcFieldNumber;
const int UnderlyingInstrument::kUnderlyingPxFieldNumber;
const int UnderlyingInstrument::kUnderlyingPxExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingQtyFieldNumber;
const int UnderlyingInstrument::kUnderlyingQtyExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingSecuritySubTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingSettlMethodFieldNumber;
const int UnderlyingInstrument::kUnderlyingSettlementTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingStartValueFieldNumber;
const int UnderlyingInstrument::kUnderlyingStartValueExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingStipulationsFieldNumber;
const int UnderlyingInstrument::kUnderlyingStrikeCurrencyFieldNumber;
const int UnderlyingInstrument::kUnderlyingTimeUnitFieldNumber;
const int UnderlyingInstrument::kUnderlyingUnitOfMeasureFieldNumber;
const int UnderlyingInstrument::kUndlyInstrumentPartiesFieldNumber;
const int UnderlyingInstrument::kUnderlyingExerciseStyleFieldNumber;
const int UnderlyingInstrument::kUnderlyingMaturityTimeFieldNumber;
const int UnderlyingInstrument::kUnderlyingPriceUnitOfMeasureFieldNumber;
const int UnderlyingInstrument::kUnderlyingPriceUnitOfMeasureQtyFieldNumber;
const int UnderlyingInstrument::kUnderlyingPriceUnitOfMeasureQtyExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingUnitOfMeasureQtyFieldNumber;
const int UnderlyingInstrument::kUnderlyingUnitOfMeasureQtyExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingContractMultiplierUnitFieldNumber;
const int UnderlyingInstrument::kUnderlyingFlowScheduleTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingAttachmentPointFieldNumber;
const int UnderlyingInstrument::kUnderlyingAttachmentPointExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingDetachmentPointFieldNumber;
const int UnderlyingInstrument::kUnderlyingDetachmentPointExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingNotionalPercentageOutstandingFieldNumber;
const int UnderlyingInstrument::kUnderlyingNotionalPercentageOutstandingExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingOriginalNotionalPercentageOutstandingFieldNumber;
const int UnderlyingInstrument::kUnderlyingOriginalNotionalPercentageOutstandingExponentFieldNumber;
const int UnderlyingInstrument::kUnderlyingRestructuringTypeFieldNumber;
const int UnderlyingInstrument::kUnderlyingSeniorityFieldNumber;
#endif  // !_MSC_VER

UnderlyingInstrument::UnderlyingInstrument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnderlyingInstrument::InitAsDefaultInstance() {
}

UnderlyingInstrument::UnderlyingInstrument(const UnderlyingInstrument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnderlyingInstrument::SharedCtor() {
  _cached_size_ = 0;
  encoded_underlying_issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_underlying_issuer_len_ = 0u;
  encoded_underlying_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_underlying_security_desc_len_ = 0u;
  underlying_cfi_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_contract_multiplier_ = 0;
  underlying_country_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_coupon_payment_date_ = 0;
  underlying_coupon_rate_ = GOOGLE_LONGLONG(0);
  underlying_coupon_rate_exponent_ = 0;
  underlying_credit_rating_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_factor_ = 0;
  underlying_instr_registry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_issue_date_ = 0;
  underlying_issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_locale_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_maturity_date_ = 0;
  underlying_maturity_month_year_ = 0;
  underlying_opt_attribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_product_ = GOOGLE_LONGLONG(0);
  underlying_put_or_call_ = GOOGLE_LONGLONG(0);
  underlying_redemption_date_ = 0;
  underlying_repo_collateral_security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_repurchase_rate_ = GOOGLE_LONGLONG(0);
  underlying_repurchase_rate_exponent_ = 0;
  underlying_repurchase_term_ = GOOGLE_LONGLONG(0);
  underlying_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_security_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_security_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_state_or_province_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_strike_price_ = GOOGLE_LONGLONG(0);
  underlying_strike_price_exponent_ = 0;
  underlying_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_symbol_sfx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_adjusted_quantity_ = GOOGLE_LONGLONG(0);
  underlying_adjusted_quantity_exponent_ = 0;
  underlying_allocation_percent_ = GOOGLE_LONGLONG(0);
  underlying_allocation_percent_exponent_ = 0;
  underlying_cp_program_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_cp_reg_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_cap_value_ = GOOGLE_LONGLONG(0);
  underlying_cap_value_exponent_ = 0;
  underlying_cash_amount_ = GOOGLE_LONGLONG(0);
  underlying_cash_amount_exponent_ = 0;
  underlying_cash_type_ = 0;
  underlying_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_current_value_ = GOOGLE_LONGLONG(0);
  underlying_current_value_exponent_ = 0;
  underlying_dirty_price_ = GOOGLE_LONGLONG(0);
  underlying_dirty_price_exponent_ = 0;
  underlying_end_price_ = GOOGLE_LONGLONG(0);
  underlying_end_price_exponent_ = 0;
  underlying_end_value_ = GOOGLE_LONGLONG(0);
  underlying_end_value_exponent_ = 0;
  underlying_fx_rate_ = 0;
  underlying_fx_rate_calc_ = 0;
  underlying_px_ = GOOGLE_LONGLONG(0);
  underlying_px_exponent_ = 0;
  underlying_qty_ = GOOGLE_LONGLONG(0);
  underlying_qty_exponent_ = 0;
  underlying_security_sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_settl_method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_settlement_type_ = 0;
  underlying_start_value_ = GOOGLE_LONGLONG(0);
  underlying_start_value_exponent_ = 0;
  underlying_strike_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_time_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_unit_of_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_exercise_style_ = GOOGLE_LONGLONG(0);
  underlying_maturity_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_price_unit_of_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  underlying_price_unit_of_measure_qty_exponent_ = 0;
  underlying_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  underlying_unit_of_measure_qty_exponent_ = 0;
  underlying_contract_multiplier_unit_ = GOOGLE_LONGLONG(0);
  underlying_flow_schedule_type_ = GOOGLE_LONGLONG(0);
  underlying_attachment_point_ = GOOGLE_LONGLONG(0);
  underlying_attachment_point_exponent_ = 0;
  underlying_detachment_point_ = GOOGLE_LONGLONG(0);
  underlying_detachment_point_exponent_ = 0;
  underlying_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
  underlying_notional_percentage_outstanding_exponent_ = 0;
  underlying_original_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
  underlying_original_notional_percentage_outstanding_exponent_ = 0;
  underlying_restructuring_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  underlying_seniority_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnderlyingInstrument::~UnderlyingInstrument() {
  SharedDtor();
}

void UnderlyingInstrument::SharedDtor() {
  if (encoded_underlying_issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_underlying_issuer_;
  }
  if (encoded_underlying_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_underlying_security_desc_;
  }
  if (underlying_cfi_code_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_cfi_code_;
  }
  if (underlying_country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_country_of_issue_;
  }
  if (underlying_credit_rating_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_credit_rating_;
  }
  if (underlying_instr_registry_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_instr_registry_;
  }
  if (underlying_issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_issuer_;
  }
  if (underlying_locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_locale_of_issue_;
  }
  if (underlying_opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_opt_attribute_;
  }
  if (underlying_repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_repo_collateral_security_type_;
  }
  if (underlying_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_desc_;
  }
  if (underlying_security_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_exchange_;
  }
  if (underlying_security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_id_;
  }
  if (underlying_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_id_source_;
  }
  if (underlying_security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_type_;
  }
  if (underlying_state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_state_or_province_of_issue_;
  }
  if (underlying_symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_symbol_;
  }
  if (underlying_symbol_sfx_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_symbol_sfx_;
  }
  if (underlying_cp_program_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_cp_program_;
  }
  if (underlying_cp_reg_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_cp_reg_type_;
  }
  if (underlying_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_currency_;
  }
  if (underlying_security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_security_sub_type_;
  }
  if (underlying_settl_method_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_settl_method_;
  }
  if (underlying_strike_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_strike_currency_;
  }
  if (underlying_time_unit_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_time_unit_;
  }
  if (underlying_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_unit_of_measure_;
  }
  if (underlying_maturity_time_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_maturity_time_;
  }
  if (underlying_price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_price_unit_of_measure_;
  }
  if (underlying_restructuring_type_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_restructuring_type_;
  }
  if (underlying_seniority_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_seniority_;
  }
  if (this != default_instance_) {
  }
}

void UnderlyingInstrument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnderlyingInstrument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderlyingInstrument_descriptor_;
}

const UnderlyingInstrument& UnderlyingInstrument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UnderlyingInstrument* UnderlyingInstrument::default_instance_ = NULL;

UnderlyingInstrument* UnderlyingInstrument::New() const {
  return new UnderlyingInstrument;
}

void UnderlyingInstrument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encoded_underlying_issuer()) {
      if (encoded_underlying_issuer_ != &::google::protobuf::internal::kEmptyString) {
        encoded_underlying_issuer_->clear();
      }
    }
    encoded_underlying_issuer_len_ = 0u;
    if (has_encoded_underlying_security_desc()) {
      if (encoded_underlying_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        encoded_underlying_security_desc_->clear();
      }
    }
    encoded_underlying_security_desc_len_ = 0u;
    if (has_underlying_cfi_code()) {
      if (underlying_cfi_code_ != &::google::protobuf::internal::kEmptyString) {
        underlying_cfi_code_->clear();
      }
    }
    underlying_contract_multiplier_ = 0;
    if (has_underlying_country_of_issue()) {
      if (underlying_country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        underlying_country_of_issue_->clear();
      }
    }
    underlying_coupon_payment_date_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    underlying_coupon_rate_ = GOOGLE_LONGLONG(0);
    underlying_coupon_rate_exponent_ = 0;
    if (has_underlying_credit_rating()) {
      if (underlying_credit_rating_ != &::google::protobuf::internal::kEmptyString) {
        underlying_credit_rating_->clear();
      }
    }
    underlying_factor_ = 0;
    if (has_underlying_instr_registry()) {
      if (underlying_instr_registry_ != &::google::protobuf::internal::kEmptyString) {
        underlying_instr_registry_->clear();
      }
    }
    underlying_issue_date_ = 0;
    if (has_underlying_issuer()) {
      if (underlying_issuer_ != &::google::protobuf::internal::kEmptyString) {
        underlying_issuer_->clear();
      }
    }
    if (has_underlying_locale_of_issue()) {
      if (underlying_locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        underlying_locale_of_issue_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    underlying_maturity_date_ = 0;
    underlying_maturity_month_year_ = 0;
    if (has_underlying_opt_attribute()) {
      if (underlying_opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
        underlying_opt_attribute_->clear();
      }
    }
    underlying_product_ = GOOGLE_LONGLONG(0);
    underlying_put_or_call_ = GOOGLE_LONGLONG(0);
    underlying_redemption_date_ = 0;
    if (has_underlying_repo_collateral_security_type()) {
      if (underlying_repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_repo_collateral_security_type_->clear();
      }
    }
    underlying_repurchase_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    underlying_repurchase_rate_exponent_ = 0;
    underlying_repurchase_term_ = GOOGLE_LONGLONG(0);
    if (has_underlying_security_desc()) {
      if (underlying_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_desc_->clear();
      }
    }
    if (has_underlying_security_exchange()) {
      if (underlying_security_exchange_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_exchange_->clear();
      }
    }
    if (has_underlying_security_id()) {
      if (underlying_security_id_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_id_->clear();
      }
    }
    if (has_underlying_security_id_source()) {
      if (underlying_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_id_source_->clear();
      }
    }
    if (has_underlying_security_type()) {
      if (underlying_security_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_type_->clear();
      }
    }
    if (has_underlying_state_or_province_of_issue()) {
      if (underlying_state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        underlying_state_or_province_of_issue_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    underlying_strike_price_ = GOOGLE_LONGLONG(0);
    underlying_strike_price_exponent_ = 0;
    if (has_underlying_symbol()) {
      if (underlying_symbol_ != &::google::protobuf::internal::kEmptyString) {
        underlying_symbol_->clear();
      }
    }
    if (has_underlying_symbol_sfx()) {
      if (underlying_symbol_sfx_ != &::google::protobuf::internal::kEmptyString) {
        underlying_symbol_sfx_->clear();
      }
    }
    underlying_adjusted_quantity_ = GOOGLE_LONGLONG(0);
    underlying_adjusted_quantity_exponent_ = 0;
    underlying_allocation_percent_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    underlying_allocation_percent_exponent_ = 0;
    if (has_underlying_cp_program()) {
      if (underlying_cp_program_ != &::google::protobuf::internal::kEmptyString) {
        underlying_cp_program_->clear();
      }
    }
    if (has_underlying_cp_reg_type()) {
      if (underlying_cp_reg_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_cp_reg_type_->clear();
      }
    }
    underlying_cap_value_ = GOOGLE_LONGLONG(0);
    underlying_cap_value_exponent_ = 0;
    underlying_cash_amount_ = GOOGLE_LONGLONG(0);
    underlying_cash_amount_exponent_ = 0;
    underlying_cash_type_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_underlying_currency()) {
      if (underlying_currency_ != &::google::protobuf::internal::kEmptyString) {
        underlying_currency_->clear();
      }
    }
    underlying_current_value_ = GOOGLE_LONGLONG(0);
    underlying_current_value_exponent_ = 0;
    underlying_dirty_price_ = GOOGLE_LONGLONG(0);
    underlying_dirty_price_exponent_ = 0;
    underlying_end_price_ = GOOGLE_LONGLONG(0);
    underlying_end_price_exponent_ = 0;
    underlying_end_value_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    underlying_end_value_exponent_ = 0;
    underlying_fx_rate_ = 0;
    underlying_fx_rate_calc_ = 0;
    underlying_px_ = GOOGLE_LONGLONG(0);
    underlying_px_exponent_ = 0;
    underlying_qty_ = GOOGLE_LONGLONG(0);
    underlying_qty_exponent_ = 0;
    if (has_underlying_security_sub_type()) {
      if (underlying_security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_security_sub_type_->clear();
      }
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (has_underlying_settl_method()) {
      if (underlying_settl_method_ != &::google::protobuf::internal::kEmptyString) {
        underlying_settl_method_->clear();
      }
    }
    underlying_settlement_type_ = 0;
    underlying_start_value_ = GOOGLE_LONGLONG(0);
    underlying_start_value_exponent_ = 0;
    if (has_underlying_strike_currency()) {
      if (underlying_strike_currency_ != &::google::protobuf::internal::kEmptyString) {
        underlying_strike_currency_->clear();
      }
    }
    if (has_underlying_time_unit()) {
      if (underlying_time_unit_ != &::google::protobuf::internal::kEmptyString) {
        underlying_time_unit_->clear();
      }
    }
    if (has_underlying_unit_of_measure()) {
      if (underlying_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
        underlying_unit_of_measure_->clear();
      }
    }
  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    underlying_exercise_style_ = GOOGLE_LONGLONG(0);
    if (has_underlying_maturity_time()) {
      if (underlying_maturity_time_ != &::google::protobuf::internal::kEmptyString) {
        underlying_maturity_time_->clear();
      }
    }
    if (has_underlying_price_unit_of_measure()) {
      if (underlying_price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
        underlying_price_unit_of_measure_->clear();
      }
    }
    underlying_price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    underlying_price_unit_of_measure_qty_exponent_ = 0;
    underlying_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    underlying_unit_of_measure_qty_exponent_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    underlying_contract_multiplier_unit_ = GOOGLE_LONGLONG(0);
    underlying_flow_schedule_type_ = GOOGLE_LONGLONG(0);
    underlying_attachment_point_ = GOOGLE_LONGLONG(0);
    underlying_attachment_point_exponent_ = 0;
    underlying_detachment_point_ = GOOGLE_LONGLONG(0);
    underlying_detachment_point_exponent_ = 0;
    underlying_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
    underlying_notional_percentage_outstanding_exponent_ = 0;
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    underlying_original_notional_percentage_outstanding_ = GOOGLE_LONGLONG(0);
    underlying_original_notional_percentage_outstanding_exponent_ = 0;
    if (has_underlying_restructuring_type()) {
      if (underlying_restructuring_type_ != &::google::protobuf::internal::kEmptyString) {
        underlying_restructuring_type_->clear();
      }
    }
    if (has_underlying_seniority()) {
      if (underlying_seniority_ != &::google::protobuf::internal::kEmptyString) {
        underlying_seniority_->clear();
      }
    }
  }
  und_sec_alt_id_grp_.Clear();
  underlying_stipulations_.Clear();
  undly_instrument_parties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnderlyingInstrument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encoded_underlying_issuer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_underlying_issuer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_encoded_underlying_issuer_len;
        break;
      }

      // optional fixed32 encoded_underlying_issuer_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_underlying_issuer_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_underlying_issuer_len_)));
          set_has_encoded_underlying_issuer_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encoded_underlying_security_desc;
        break;
      }

      // optional bytes encoded_underlying_security_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_underlying_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_underlying_security_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_encoded_underlying_security_desc_len;
        break;
      }

      // optional fixed32 encoded_underlying_security_desc_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_underlying_security_desc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_underlying_security_desc_len_)));
          set_has_encoded_underlying_security_desc_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_underlying_cfi_code;
        break;
      }

      // optional string underlying_cfi_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_cfi_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_cfi_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_cfi_code().data(), this->underlying_cfi_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_underlying_contract_multiplier;
        break;
      }

      // optional double underlying_contract_multiplier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_contract_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_contract_multiplier_)));
          set_has_underlying_contract_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_underlying_country_of_issue;
        break;
      }

      // optional string underlying_country_of_issue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_country_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_country_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_country_of_issue().data(), this->underlying_country_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_underlying_coupon_payment_date;
        break;
      }

      // optional sfixed32 underlying_coupon_payment_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_coupon_payment_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_coupon_payment_date_)));
          set_has_underlying_coupon_payment_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_underlying_coupon_rate;
        break;
      }

      // optional sfixed64 underlying_coupon_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_coupon_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_coupon_rate_)));
          set_has_underlying_coupon_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_underlying_coupon_rate_exponent;
        break;
      }

      // optional sfixed32 underlying_coupon_rate_exponent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_coupon_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_coupon_rate_exponent_)));
          set_has_underlying_coupon_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_underlying_credit_rating;
        break;
      }

      // optional string underlying_credit_rating = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_credit_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_credit_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_credit_rating().data(), this->underlying_credit_rating().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_underlying_factor;
        break;
      }

      // optional double underlying_factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_factor_)));
          set_has_underlying_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_underlying_instr_registry;
        break;
      }

      // optional string underlying_instr_registry = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_instr_registry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_instr_registry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_instr_registry().data(), this->underlying_instr_registry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_underlying_issue_date;
        break;
      }

      // optional sfixed32 underlying_issue_date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_issue_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_issue_date_)));
          set_has_underlying_issue_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_underlying_issuer;
        break;
      }

      // optional string underlying_issuer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_issuer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_issuer().data(), this->underlying_issuer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_underlying_locale_of_issue;
        break;
      }

      // optional string underlying_locale_of_issue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_locale_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_locale_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_locale_of_issue().data(), this->underlying_locale_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_underlying_maturity_date;
        break;
      }

      // optional sfixed32 underlying_maturity_date = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_maturity_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_maturity_date_)));
          set_has_underlying_maturity_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_underlying_maturity_month_year;
        break;
      }

      // optional sfixed32 underlying_maturity_month_year = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_maturity_month_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_maturity_month_year_)));
          set_has_underlying_maturity_month_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_underlying_opt_attribute;
        break;
      }

      // optional string underlying_opt_attribute = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_opt_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_opt_attribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_opt_attribute().data(), this->underlying_opt_attribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_underlying_product;
        break;
      }

      // optional sfixed64 underlying_product = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_product:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_product_)));
          set_has_underlying_product();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_underlying_put_or_call;
        break;
      }

      // optional sfixed64 underlying_put_or_call = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_put_or_call:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_put_or_call_)));
          set_has_underlying_put_or_call();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_underlying_redemption_date;
        break;
      }

      // optional sfixed32 underlying_redemption_date = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_redemption_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_redemption_date_)));
          set_has_underlying_redemption_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_underlying_repo_collateral_security_type;
        break;
      }

      // optional string underlying_repo_collateral_security_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_repo_collateral_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_repo_collateral_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_repo_collateral_security_type().data(), this->underlying_repo_collateral_security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_underlying_repurchase_rate;
        break;
      }

      // optional sfixed64 underlying_repurchase_rate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_repurchase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_repurchase_rate_)));
          set_has_underlying_repurchase_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_underlying_repurchase_rate_exponent;
        break;
      }

      // optional sfixed32 underlying_repurchase_rate_exponent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_repurchase_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_repurchase_rate_exponent_)));
          set_has_underlying_repurchase_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_underlying_repurchase_term;
        break;
      }

      // optional sfixed64 underlying_repurchase_term = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_repurchase_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_repurchase_term_)));
          set_has_underlying_repurchase_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_underlying_security_desc;
        break;
      }

      // optional string underlying_security_desc = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_desc().data(), this->underlying_security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_underlying_security_exchange;
        break;
      }

      // optional string underlying_security_exchange = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_exchange().data(), this->underlying_security_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_underlying_security_id;
        break;
      }

      // optional string underlying_security_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_id().data(), this->underlying_security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_underlying_security_id_source;
        break;
      }

      // optional string underlying_security_id_source = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_id_source().data(), this->underlying_security_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_underlying_security_type;
        break;
      }

      // optional string underlying_security_type = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_type().data(), this->underlying_security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_underlying_state_or_province_of_issue;
        break;
      }

      // optional string underlying_state_or_province_of_issue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_state_or_province_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_state_or_province_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_state_or_province_of_issue().data(), this->underlying_state_or_province_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_underlying_strike_price;
        break;
      }

      // optional sfixed64 underlying_strike_price = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_strike_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_strike_price_)));
          set_has_underlying_strike_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_underlying_strike_price_exponent;
        break;
      }

      // optional sfixed32 underlying_strike_price_exponent = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_strike_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_strike_price_exponent_)));
          set_has_underlying_strike_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_underlying_symbol;
        break;
      }

      // optional string underlying_symbol = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_symbol().data(), this->underlying_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_underlying_symbol_sfx;
        break;
      }

      // optional string underlying_symbol_sfx = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_symbol_sfx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_symbol_sfx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_symbol_sfx().data(), this->underlying_symbol_sfx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_und_sec_alt_id_grp;
        break;
      }

      // repeated .Common.UndSecAltIdGrp und_sec_alt_id_grp = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_sec_alt_id_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_sec_alt_id_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_und_sec_alt_id_grp;
        if (input->ExpectTag(305)) goto parse_underlying_adjusted_quantity;
        break;
      }

      // optional sfixed64 underlying_adjusted_quantity = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_adjusted_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_adjusted_quantity_)));
          set_has_underlying_adjusted_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_underlying_adjusted_quantity_exponent;
        break;
      }

      // optional sfixed32 underlying_adjusted_quantity_exponent = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_adjusted_quantity_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_adjusted_quantity_exponent_)));
          set_has_underlying_adjusted_quantity_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_underlying_allocation_percent;
        break;
      }

      // optional sfixed64 underlying_allocation_percent = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_allocation_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_allocation_percent_)));
          set_has_underlying_allocation_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_underlying_allocation_percent_exponent;
        break;
      }

      // optional sfixed32 underlying_allocation_percent_exponent = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_allocation_percent_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_allocation_percent_exponent_)));
          set_has_underlying_allocation_percent_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_underlying_cp_program;
        break;
      }

      // optional string underlying_cp_program = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_cp_program:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_cp_program()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_cp_program().data(), this->underlying_cp_program().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_underlying_cp_reg_type;
        break;
      }

      // optional string underlying_cp_reg_type = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_cp_reg_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_cp_reg_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_cp_reg_type().data(), this->underlying_cp_reg_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_underlying_cap_value;
        break;
      }

      // optional sfixed64 underlying_cap_value = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_cap_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_cap_value_)));
          set_has_underlying_cap_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_underlying_cap_value_exponent;
        break;
      }

      // optional sfixed32 underlying_cap_value_exponent = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_cap_value_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_cap_value_exponent_)));
          set_has_underlying_cap_value_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_underlying_cash_amount;
        break;
      }

      // optional sfixed64 underlying_cash_amount = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_cash_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_cash_amount_)));
          set_has_underlying_cash_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(381)) goto parse_underlying_cash_amount_exponent;
        break;
      }

      // optional sfixed32 underlying_cash_amount_exponent = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_cash_amount_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_cash_amount_exponent_)));
          set_has_underlying_cash_amount_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_underlying_cash_type;
        break;
      }

      // optional .Common.UnderlyingCashTypeEnum underlying_cash_type = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underlying_cash_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::UnderlyingCashTypeEnum_IsValid(value)) {
            set_underlying_cash_type(static_cast< ::Common::UnderlyingCashTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(48, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_underlying_currency;
        break;
      }

      // optional string underlying_currency = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_currency().data(), this->underlying_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_underlying_current_value;
        break;
      }

      // optional sfixed64 underlying_current_value = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_current_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_current_value_)));
          set_has_underlying_current_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(413)) goto parse_underlying_current_value_exponent;
        break;
      }

      // optional sfixed32 underlying_current_value_exponent = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_current_value_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_current_value_exponent_)));
          set_has_underlying_current_value_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(417)) goto parse_underlying_dirty_price;
        break;
      }

      // optional sfixed64 underlying_dirty_price = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_dirty_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_dirty_price_)));
          set_has_underlying_dirty_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(429)) goto parse_underlying_dirty_price_exponent;
        break;
      }

      // optional sfixed32 underlying_dirty_price_exponent = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_dirty_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_dirty_price_exponent_)));
          set_has_underlying_dirty_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(433)) goto parse_underlying_end_price;
        break;
      }

      // optional sfixed64 underlying_end_price = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_end_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_end_price_)));
          set_has_underlying_end_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_underlying_end_price_exponent;
        break;
      }

      // optional sfixed32 underlying_end_price_exponent = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_end_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_end_price_exponent_)));
          set_has_underlying_end_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_underlying_end_value;
        break;
      }

      // optional sfixed64 underlying_end_value = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_end_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_end_value_)));
          set_has_underlying_end_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(461)) goto parse_underlying_end_value_exponent;
        break;
      }

      // optional sfixed32 underlying_end_value_exponent = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_end_value_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_end_value_exponent_)));
          set_has_underlying_end_value_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(465)) goto parse_underlying_fx_rate;
        break;
      }

      // optional double underlying_fx_rate = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_fx_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &underlying_fx_rate_)));
          set_has_underlying_fx_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_underlying_fx_rate_calc;
        break;
      }

      // optional .Common.UnderlyingFxRateCalcEnum underlying_fx_rate_calc = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underlying_fx_rate_calc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::UnderlyingFxRateCalcEnum_IsValid(value)) {
            set_underlying_fx_rate_calc(static_cast< ::Common::UnderlyingFxRateCalcEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(481)) goto parse_underlying_px;
        break;
      }

      // optional sfixed64 underlying_px = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_px_)));
          set_has_underlying_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_underlying_px_exponent;
        break;
      }

      // optional sfixed32 underlying_px_exponent = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_px_exponent_)));
          set_has_underlying_px_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(497)) goto parse_underlying_qty;
        break;
      }

      // optional sfixed64 underlying_qty = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_qty_)));
          set_has_underlying_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_underlying_qty_exponent;
        break;
      }

      // optional sfixed32 underlying_qty_exponent = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_qty_exponent_)));
          set_has_underlying_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(514)) goto parse_underlying_security_sub_type;
        break;
      }

      // optional string underlying_security_sub_type = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_security_sub_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_security_sub_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_security_sub_type().data(), this->underlying_security_sub_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(522)) goto parse_underlying_settl_method;
        break;
      }

      // optional string underlying_settl_method = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_settl_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_settl_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_settl_method().data(), this->underlying_settl_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_underlying_settlement_type;
        break;
      }

      // optional .Common.UnderlyingSettlementTypeEnum underlying_settlement_type = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_underlying_settlement_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::UnderlyingSettlementTypeEnum_IsValid(value)) {
            set_underlying_settlement_type(static_cast< ::Common::UnderlyingSettlementTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(66, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(537)) goto parse_underlying_start_value;
        break;
      }

      // optional sfixed64 underlying_start_value = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_start_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_start_value_)));
          set_has_underlying_start_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(549)) goto parse_underlying_start_value_exponent;
        break;
      }

      // optional sfixed32 underlying_start_value_exponent = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_start_value_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_start_value_exponent_)));
          set_has_underlying_start_value_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_underlying_stipulations;
        break;
      }

      // repeated .Common.UnderlyingStipulations underlying_stipulations = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_underlying_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(554)) goto parse_underlying_stipulations;
        if (input->ExpectTag(562)) goto parse_underlying_strike_currency;
        break;
      }

      // optional string underlying_strike_currency = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_strike_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_strike_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_strike_currency().data(), this->underlying_strike_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_underlying_time_unit;
        break;
      }

      // optional string underlying_time_unit = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_time_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_time_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_time_unit().data(), this->underlying_time_unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_underlying_unit_of_measure;
        break;
      }

      // optional string underlying_unit_of_measure = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_unit_of_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_unit_of_measure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_unit_of_measure().data(), this->underlying_unit_of_measure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_undly_instrument_parties;
        break;
      }

      // repeated .Common.UndlyInstrumentParties undly_instrument_parties = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_undly_instrument_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_undly_instrument_parties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_undly_instrument_parties;
        if (input->ExpectTag(593)) goto parse_underlying_exercise_style;
        break;
      }

      // optional sfixed64 underlying_exercise_style = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_exercise_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_exercise_style_)));
          set_has_underlying_exercise_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_underlying_maturity_time;
        break;
      }

      // optional string underlying_maturity_time = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_maturity_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_maturity_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_maturity_time().data(), this->underlying_maturity_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_underlying_price_unit_of_measure;
        break;
      }

      // optional string underlying_price_unit_of_measure = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_price_unit_of_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_price_unit_of_measure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_price_unit_of_measure().data(), this->underlying_price_unit_of_measure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(617)) goto parse_underlying_price_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 underlying_price_unit_of_measure_qty = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_price_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_price_unit_of_measure_qty_)));
          set_has_underlying_price_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(629)) goto parse_underlying_price_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 underlying_price_unit_of_measure_qty_exponent = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_price_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_price_unit_of_measure_qty_exponent_)));
          set_has_underlying_price_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(633)) goto parse_underlying_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 underlying_unit_of_measure_qty = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_unit_of_measure_qty_)));
          set_has_underlying_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(645)) goto parse_underlying_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 underlying_unit_of_measure_qty_exponent = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_unit_of_measure_qty_exponent_)));
          set_has_underlying_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(649)) goto parse_underlying_contract_multiplier_unit;
        break;
      }

      // optional sfixed64 underlying_contract_multiplier_unit = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_contract_multiplier_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_contract_multiplier_unit_)));
          set_has_underlying_contract_multiplier_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(657)) goto parse_underlying_flow_schedule_type;
        break;
      }

      // optional sfixed64 underlying_flow_schedule_type = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_flow_schedule_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_flow_schedule_type_)));
          set_has_underlying_flow_schedule_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(665)) goto parse_underlying_attachment_point;
        break;
      }

      // optional sfixed64 underlying_attachment_point = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_attachment_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_attachment_point_)));
          set_has_underlying_attachment_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(677)) goto parse_underlying_attachment_point_exponent;
        break;
      }

      // optional sfixed32 underlying_attachment_point_exponent = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_attachment_point_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_attachment_point_exponent_)));
          set_has_underlying_attachment_point_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(681)) goto parse_underlying_detachment_point;
        break;
      }

      // optional sfixed64 underlying_detachment_point = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_detachment_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_detachment_point_)));
          set_has_underlying_detachment_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(693)) goto parse_underlying_detachment_point_exponent;
        break;
      }

      // optional sfixed32 underlying_detachment_point_exponent = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_detachment_point_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_detachment_point_exponent_)));
          set_has_underlying_detachment_point_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(697)) goto parse_underlying_notional_percentage_outstanding;
        break;
      }

      // optional sfixed64 underlying_notional_percentage_outstanding = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_notional_percentage_outstanding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_notional_percentage_outstanding_)));
          set_has_underlying_notional_percentage_outstanding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(709)) goto parse_underlying_notional_percentage_outstanding_exponent;
        break;
      }

      // optional sfixed32 underlying_notional_percentage_outstanding_exponent = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_notional_percentage_outstanding_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_notional_percentage_outstanding_exponent_)));
          set_has_underlying_notional_percentage_outstanding_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(713)) goto parse_underlying_original_notional_percentage_outstanding;
        break;
      }

      // optional sfixed64 underlying_original_notional_percentage_outstanding = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_underlying_original_notional_percentage_outstanding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_original_notional_percentage_outstanding_)));
          set_has_underlying_original_notional_percentage_outstanding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(725)) goto parse_underlying_original_notional_percentage_outstanding_exponent;
        break;
      }

      // optional sfixed32 underlying_original_notional_percentage_outstanding_exponent = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_underlying_original_notional_percentage_outstanding_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_original_notional_percentage_outstanding_exponent_)));
          set_has_underlying_original_notional_percentage_outstanding_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(730)) goto parse_underlying_restructuring_type;
        break;
      }

      // optional string underlying_restructuring_type = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_restructuring_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_restructuring_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_restructuring_type().data(), this->underlying_restructuring_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(738)) goto parse_underlying_seniority;
        break;
      }

      // optional string underlying_seniority = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying_seniority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying_seniority()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying_seniority().data(), this->underlying_seniority().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnderlyingInstrument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes encoded_underlying_issuer = 1;
  if (has_encoded_underlying_issuer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encoded_underlying_issuer(), output);
  }

  // optional fixed32 encoded_underlying_issuer_len = 2;
  if (has_encoded_underlying_issuer_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->encoded_underlying_issuer_len(), output);
  }

  // optional bytes encoded_underlying_security_desc = 3;
  if (has_encoded_underlying_security_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encoded_underlying_security_desc(), output);
  }

  // optional fixed32 encoded_underlying_security_desc_len = 4;
  if (has_encoded_underlying_security_desc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->encoded_underlying_security_desc_len(), output);
  }

  // optional string underlying_cfi_code = 5;
  if (has_underlying_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cfi_code().data(), this->underlying_cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->underlying_cfi_code(), output);
  }

  // optional double underlying_contract_multiplier = 6;
  if (has_underlying_contract_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->underlying_contract_multiplier(), output);
  }

  // optional string underlying_country_of_issue = 7;
  if (has_underlying_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_country_of_issue().data(), this->underlying_country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->underlying_country_of_issue(), output);
  }

  // optional sfixed32 underlying_coupon_payment_date = 8;
  if (has_underlying_coupon_payment_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->underlying_coupon_payment_date(), output);
  }

  // optional sfixed64 underlying_coupon_rate = 9;
  if (has_underlying_coupon_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->underlying_coupon_rate(), output);
  }

  // optional sfixed32 underlying_coupon_rate_exponent = 10;
  if (has_underlying_coupon_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->underlying_coupon_rate_exponent(), output);
  }

  // optional string underlying_credit_rating = 11;
  if (has_underlying_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_credit_rating().data(), this->underlying_credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->underlying_credit_rating(), output);
  }

  // optional double underlying_factor = 12;
  if (has_underlying_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->underlying_factor(), output);
  }

  // optional string underlying_instr_registry = 13;
  if (has_underlying_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instr_registry().data(), this->underlying_instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->underlying_instr_registry(), output);
  }

  // optional sfixed32 underlying_issue_date = 14;
  if (has_underlying_issue_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->underlying_issue_date(), output);
  }

  // optional string underlying_issuer = 15;
  if (has_underlying_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_issuer().data(), this->underlying_issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->underlying_issuer(), output);
  }

  // optional string underlying_locale_of_issue = 16;
  if (has_underlying_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_locale_of_issue().data(), this->underlying_locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->underlying_locale_of_issue(), output);
  }

  // optional sfixed32 underlying_maturity_date = 17;
  if (has_underlying_maturity_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->underlying_maturity_date(), output);
  }

  // optional sfixed32 underlying_maturity_month_year = 18;
  if (has_underlying_maturity_month_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->underlying_maturity_month_year(), output);
  }

  // optional string underlying_opt_attribute = 19;
  if (has_underlying_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_opt_attribute().data(), this->underlying_opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->underlying_opt_attribute(), output);
  }

  // optional sfixed64 underlying_product = 20;
  if (has_underlying_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(20, this->underlying_product(), output);
  }

  // optional sfixed64 underlying_put_or_call = 21;
  if (has_underlying_put_or_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->underlying_put_or_call(), output);
  }

  // optional sfixed32 underlying_redemption_date = 22;
  if (has_underlying_redemption_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(22, this->underlying_redemption_date(), output);
  }

  // optional string underlying_repo_collateral_security_type = 23;
  if (has_underlying_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_repo_collateral_security_type().data(), this->underlying_repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->underlying_repo_collateral_security_type(), output);
  }

  // optional sfixed64 underlying_repurchase_rate = 24;
  if (has_underlying_repurchase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(24, this->underlying_repurchase_rate(), output);
  }

  // optional sfixed32 underlying_repurchase_rate_exponent = 25;
  if (has_underlying_repurchase_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(25, this->underlying_repurchase_rate_exponent(), output);
  }

  // optional sfixed64 underlying_repurchase_term = 26;
  if (has_underlying_repurchase_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(26, this->underlying_repurchase_term(), output);
  }

  // optional string underlying_security_desc = 27;
  if (has_underlying_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_desc().data(), this->underlying_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->underlying_security_desc(), output);
  }

  // optional string underlying_security_exchange = 28;
  if (has_underlying_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_exchange().data(), this->underlying_security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->underlying_security_exchange(), output);
  }

  // optional string underlying_security_id = 29;
  if (has_underlying_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_id().data(), this->underlying_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->underlying_security_id(), output);
  }

  // optional string underlying_security_id_source = 30;
  if (has_underlying_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_id_source().data(), this->underlying_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->underlying_security_id_source(), output);
  }

  // optional string underlying_security_type = 31;
  if (has_underlying_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_type().data(), this->underlying_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->underlying_security_type(), output);
  }

  // optional string underlying_state_or_province_of_issue = 32;
  if (has_underlying_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_state_or_province_of_issue().data(), this->underlying_state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->underlying_state_or_province_of_issue(), output);
  }

  // optional sfixed64 underlying_strike_price = 33;
  if (has_underlying_strike_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(33, this->underlying_strike_price(), output);
  }

  // optional sfixed32 underlying_strike_price_exponent = 34;
  if (has_underlying_strike_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(34, this->underlying_strike_price_exponent(), output);
  }

  // optional string underlying_symbol = 35;
  if (has_underlying_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_symbol().data(), this->underlying_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->underlying_symbol(), output);
  }

  // optional string underlying_symbol_sfx = 36;
  if (has_underlying_symbol_sfx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_symbol_sfx().data(), this->underlying_symbol_sfx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->underlying_symbol_sfx(), output);
  }

  // repeated .Common.UndSecAltIdGrp und_sec_alt_id_grp = 37;
  for (int i = 0; i < this->und_sec_alt_id_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->und_sec_alt_id_grp(i), output);
  }

  // optional sfixed64 underlying_adjusted_quantity = 38;
  if (has_underlying_adjusted_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(38, this->underlying_adjusted_quantity(), output);
  }

  // optional sfixed32 underlying_adjusted_quantity_exponent = 39;
  if (has_underlying_adjusted_quantity_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(39, this->underlying_adjusted_quantity_exponent(), output);
  }

  // optional sfixed64 underlying_allocation_percent = 40;
  if (has_underlying_allocation_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(40, this->underlying_allocation_percent(), output);
  }

  // optional sfixed32 underlying_allocation_percent_exponent = 41;
  if (has_underlying_allocation_percent_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(41, this->underlying_allocation_percent_exponent(), output);
  }

  // optional string underlying_cp_program = 42;
  if (has_underlying_cp_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cp_program().data(), this->underlying_cp_program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->underlying_cp_program(), output);
  }

  // optional string underlying_cp_reg_type = 43;
  if (has_underlying_cp_reg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cp_reg_type().data(), this->underlying_cp_reg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->underlying_cp_reg_type(), output);
  }

  // optional sfixed64 underlying_cap_value = 44;
  if (has_underlying_cap_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(44, this->underlying_cap_value(), output);
  }

  // optional sfixed32 underlying_cap_value_exponent = 45;
  if (has_underlying_cap_value_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(45, this->underlying_cap_value_exponent(), output);
  }

  // optional sfixed64 underlying_cash_amount = 46;
  if (has_underlying_cash_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(46, this->underlying_cash_amount(), output);
  }

  // optional sfixed32 underlying_cash_amount_exponent = 47;
  if (has_underlying_cash_amount_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(47, this->underlying_cash_amount_exponent(), output);
  }

  // optional .Common.UnderlyingCashTypeEnum underlying_cash_type = 48;
  if (has_underlying_cash_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      48, this->underlying_cash_type(), output);
  }

  // optional string underlying_currency = 49;
  if (has_underlying_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_currency().data(), this->underlying_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->underlying_currency(), output);
  }

  // optional sfixed64 underlying_current_value = 50;
  if (has_underlying_current_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(50, this->underlying_current_value(), output);
  }

  // optional sfixed32 underlying_current_value_exponent = 51;
  if (has_underlying_current_value_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(51, this->underlying_current_value_exponent(), output);
  }

  // optional sfixed64 underlying_dirty_price = 52;
  if (has_underlying_dirty_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(52, this->underlying_dirty_price(), output);
  }

  // optional sfixed32 underlying_dirty_price_exponent = 53;
  if (has_underlying_dirty_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(53, this->underlying_dirty_price_exponent(), output);
  }

  // optional sfixed64 underlying_end_price = 54;
  if (has_underlying_end_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(54, this->underlying_end_price(), output);
  }

  // optional sfixed32 underlying_end_price_exponent = 55;
  if (has_underlying_end_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(55, this->underlying_end_price_exponent(), output);
  }

  // optional sfixed64 underlying_end_value = 56;
  if (has_underlying_end_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(56, this->underlying_end_value(), output);
  }

  // optional sfixed32 underlying_end_value_exponent = 57;
  if (has_underlying_end_value_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(57, this->underlying_end_value_exponent(), output);
  }

  // optional double underlying_fx_rate = 58;
  if (has_underlying_fx_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->underlying_fx_rate(), output);
  }

  // optional .Common.UnderlyingFxRateCalcEnum underlying_fx_rate_calc = 59;
  if (has_underlying_fx_rate_calc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->underlying_fx_rate_calc(), output);
  }

  // optional sfixed64 underlying_px = 60;
  if (has_underlying_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(60, this->underlying_px(), output);
  }

  // optional sfixed32 underlying_px_exponent = 61;
  if (has_underlying_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(61, this->underlying_px_exponent(), output);
  }

  // optional sfixed64 underlying_qty = 62;
  if (has_underlying_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(62, this->underlying_qty(), output);
  }

  // optional sfixed32 underlying_qty_exponent = 63;
  if (has_underlying_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(63, this->underlying_qty_exponent(), output);
  }

  // optional string underlying_security_sub_type = 64;
  if (has_underlying_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_sub_type().data(), this->underlying_security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      64, this->underlying_security_sub_type(), output);
  }

  // optional string underlying_settl_method = 65;
  if (has_underlying_settl_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_settl_method().data(), this->underlying_settl_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      65, this->underlying_settl_method(), output);
  }

  // optional .Common.UnderlyingSettlementTypeEnum underlying_settlement_type = 66;
  if (has_underlying_settlement_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      66, this->underlying_settlement_type(), output);
  }

  // optional sfixed64 underlying_start_value = 67;
  if (has_underlying_start_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(67, this->underlying_start_value(), output);
  }

  // optional sfixed32 underlying_start_value_exponent = 68;
  if (has_underlying_start_value_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(68, this->underlying_start_value_exponent(), output);
  }

  // repeated .Common.UnderlyingStipulations underlying_stipulations = 69;
  for (int i = 0; i < this->underlying_stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->underlying_stipulations(i), output);
  }

  // optional string underlying_strike_currency = 70;
  if (has_underlying_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_strike_currency().data(), this->underlying_strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      70, this->underlying_strike_currency(), output);
  }

  // optional string underlying_time_unit = 71;
  if (has_underlying_time_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_time_unit().data(), this->underlying_time_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      71, this->underlying_time_unit(), output);
  }

  // optional string underlying_unit_of_measure = 72;
  if (has_underlying_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_unit_of_measure().data(), this->underlying_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      72, this->underlying_unit_of_measure(), output);
  }

  // repeated .Common.UndlyInstrumentParties undly_instrument_parties = 73;
  for (int i = 0; i < this->undly_instrument_parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->undly_instrument_parties(i), output);
  }

  // optional sfixed64 underlying_exercise_style = 74;
  if (has_underlying_exercise_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(74, this->underlying_exercise_style(), output);
  }

  // optional string underlying_maturity_time = 75;
  if (has_underlying_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_maturity_time().data(), this->underlying_maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      75, this->underlying_maturity_time(), output);
  }

  // optional string underlying_price_unit_of_measure = 76;
  if (has_underlying_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_price_unit_of_measure().data(), this->underlying_price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      76, this->underlying_price_unit_of_measure(), output);
  }

  // optional sfixed64 underlying_price_unit_of_measure_qty = 77;
  if (has_underlying_price_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(77, this->underlying_price_unit_of_measure_qty(), output);
  }

  // optional sfixed32 underlying_price_unit_of_measure_qty_exponent = 78;
  if (has_underlying_price_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(78, this->underlying_price_unit_of_measure_qty_exponent(), output);
  }

  // optional sfixed64 underlying_unit_of_measure_qty = 79;
  if (has_underlying_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(79, this->underlying_unit_of_measure_qty(), output);
  }

  // optional sfixed32 underlying_unit_of_measure_qty_exponent = 80;
  if (has_underlying_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(80, this->underlying_unit_of_measure_qty_exponent(), output);
  }

  // optional sfixed64 underlying_contract_multiplier_unit = 81;
  if (has_underlying_contract_multiplier_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(81, this->underlying_contract_multiplier_unit(), output);
  }

  // optional sfixed64 underlying_flow_schedule_type = 82;
  if (has_underlying_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(82, this->underlying_flow_schedule_type(), output);
  }

  // optional sfixed64 underlying_attachment_point = 83;
  if (has_underlying_attachment_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(83, this->underlying_attachment_point(), output);
  }

  // optional sfixed32 underlying_attachment_point_exponent = 84;
  if (has_underlying_attachment_point_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(84, this->underlying_attachment_point_exponent(), output);
  }

  // optional sfixed64 underlying_detachment_point = 85;
  if (has_underlying_detachment_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(85, this->underlying_detachment_point(), output);
  }

  // optional sfixed32 underlying_detachment_point_exponent = 86;
  if (has_underlying_detachment_point_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(86, this->underlying_detachment_point_exponent(), output);
  }

  // optional sfixed64 underlying_notional_percentage_outstanding = 87;
  if (has_underlying_notional_percentage_outstanding()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(87, this->underlying_notional_percentage_outstanding(), output);
  }

  // optional sfixed32 underlying_notional_percentage_outstanding_exponent = 88;
  if (has_underlying_notional_percentage_outstanding_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(88, this->underlying_notional_percentage_outstanding_exponent(), output);
  }

  // optional sfixed64 underlying_original_notional_percentage_outstanding = 89;
  if (has_underlying_original_notional_percentage_outstanding()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(89, this->underlying_original_notional_percentage_outstanding(), output);
  }

  // optional sfixed32 underlying_original_notional_percentage_outstanding_exponent = 90;
  if (has_underlying_original_notional_percentage_outstanding_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(90, this->underlying_original_notional_percentage_outstanding_exponent(), output);
  }

  // optional string underlying_restructuring_type = 91;
  if (has_underlying_restructuring_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_restructuring_type().data(), this->underlying_restructuring_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      91, this->underlying_restructuring_type(), output);
  }

  // optional string underlying_seniority = 92;
  if (has_underlying_seniority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_seniority().data(), this->underlying_seniority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      92, this->underlying_seniority(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnderlyingInstrument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes encoded_underlying_issuer = 1;
  if (has_encoded_underlying_issuer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encoded_underlying_issuer(), target);
  }

  // optional fixed32 encoded_underlying_issuer_len = 2;
  if (has_encoded_underlying_issuer_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->encoded_underlying_issuer_len(), target);
  }

  // optional bytes encoded_underlying_security_desc = 3;
  if (has_encoded_underlying_security_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_underlying_security_desc(), target);
  }

  // optional fixed32 encoded_underlying_security_desc_len = 4;
  if (has_encoded_underlying_security_desc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->encoded_underlying_security_desc_len(), target);
  }

  // optional string underlying_cfi_code = 5;
  if (has_underlying_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cfi_code().data(), this->underlying_cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->underlying_cfi_code(), target);
  }

  // optional double underlying_contract_multiplier = 6;
  if (has_underlying_contract_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->underlying_contract_multiplier(), target);
  }

  // optional string underlying_country_of_issue = 7;
  if (has_underlying_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_country_of_issue().data(), this->underlying_country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->underlying_country_of_issue(), target);
  }

  // optional sfixed32 underlying_coupon_payment_date = 8;
  if (has_underlying_coupon_payment_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->underlying_coupon_payment_date(), target);
  }

  // optional sfixed64 underlying_coupon_rate = 9;
  if (has_underlying_coupon_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->underlying_coupon_rate(), target);
  }

  // optional sfixed32 underlying_coupon_rate_exponent = 10;
  if (has_underlying_coupon_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->underlying_coupon_rate_exponent(), target);
  }

  // optional string underlying_credit_rating = 11;
  if (has_underlying_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_credit_rating().data(), this->underlying_credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->underlying_credit_rating(), target);
  }

  // optional double underlying_factor = 12;
  if (has_underlying_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->underlying_factor(), target);
  }

  // optional string underlying_instr_registry = 13;
  if (has_underlying_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_instr_registry().data(), this->underlying_instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->underlying_instr_registry(), target);
  }

  // optional sfixed32 underlying_issue_date = 14;
  if (has_underlying_issue_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->underlying_issue_date(), target);
  }

  // optional string underlying_issuer = 15;
  if (has_underlying_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_issuer().data(), this->underlying_issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->underlying_issuer(), target);
  }

  // optional string underlying_locale_of_issue = 16;
  if (has_underlying_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_locale_of_issue().data(), this->underlying_locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->underlying_locale_of_issue(), target);
  }

  // optional sfixed32 underlying_maturity_date = 17;
  if (has_underlying_maturity_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->underlying_maturity_date(), target);
  }

  // optional sfixed32 underlying_maturity_month_year = 18;
  if (has_underlying_maturity_month_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->underlying_maturity_month_year(), target);
  }

  // optional string underlying_opt_attribute = 19;
  if (has_underlying_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_opt_attribute().data(), this->underlying_opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->underlying_opt_attribute(), target);
  }

  // optional sfixed64 underlying_product = 20;
  if (has_underlying_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(20, this->underlying_product(), target);
  }

  // optional sfixed64 underlying_put_or_call = 21;
  if (has_underlying_put_or_call()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->underlying_put_or_call(), target);
  }

  // optional sfixed32 underlying_redemption_date = 22;
  if (has_underlying_redemption_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(22, this->underlying_redemption_date(), target);
  }

  // optional string underlying_repo_collateral_security_type = 23;
  if (has_underlying_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_repo_collateral_security_type().data(), this->underlying_repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->underlying_repo_collateral_security_type(), target);
  }

  // optional sfixed64 underlying_repurchase_rate = 24;
  if (has_underlying_repurchase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(24, this->underlying_repurchase_rate(), target);
  }

  // optional sfixed32 underlying_repurchase_rate_exponent = 25;
  if (has_underlying_repurchase_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(25, this->underlying_repurchase_rate_exponent(), target);
  }

  // optional sfixed64 underlying_repurchase_term = 26;
  if (has_underlying_repurchase_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(26, this->underlying_repurchase_term(), target);
  }

  // optional string underlying_security_desc = 27;
  if (has_underlying_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_desc().data(), this->underlying_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->underlying_security_desc(), target);
  }

  // optional string underlying_security_exchange = 28;
  if (has_underlying_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_exchange().data(), this->underlying_security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->underlying_security_exchange(), target);
  }

  // optional string underlying_security_id = 29;
  if (has_underlying_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_id().data(), this->underlying_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->underlying_security_id(), target);
  }

  // optional string underlying_security_id_source = 30;
  if (has_underlying_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_id_source().data(), this->underlying_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->underlying_security_id_source(), target);
  }

  // optional string underlying_security_type = 31;
  if (has_underlying_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_type().data(), this->underlying_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->underlying_security_type(), target);
  }

  // optional string underlying_state_or_province_of_issue = 32;
  if (has_underlying_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_state_or_province_of_issue().data(), this->underlying_state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->underlying_state_or_province_of_issue(), target);
  }

  // optional sfixed64 underlying_strike_price = 33;
  if (has_underlying_strike_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(33, this->underlying_strike_price(), target);
  }

  // optional sfixed32 underlying_strike_price_exponent = 34;
  if (has_underlying_strike_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(34, this->underlying_strike_price_exponent(), target);
  }

  // optional string underlying_symbol = 35;
  if (has_underlying_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_symbol().data(), this->underlying_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->underlying_symbol(), target);
  }

  // optional string underlying_symbol_sfx = 36;
  if (has_underlying_symbol_sfx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_symbol_sfx().data(), this->underlying_symbol_sfx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->underlying_symbol_sfx(), target);
  }

  // repeated .Common.UndSecAltIdGrp und_sec_alt_id_grp = 37;
  for (int i = 0; i < this->und_sec_alt_id_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->und_sec_alt_id_grp(i), target);
  }

  // optional sfixed64 underlying_adjusted_quantity = 38;
  if (has_underlying_adjusted_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(38, this->underlying_adjusted_quantity(), target);
  }

  // optional sfixed32 underlying_adjusted_quantity_exponent = 39;
  if (has_underlying_adjusted_quantity_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(39, this->underlying_adjusted_quantity_exponent(), target);
  }

  // optional sfixed64 underlying_allocation_percent = 40;
  if (has_underlying_allocation_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(40, this->underlying_allocation_percent(), target);
  }

  // optional sfixed32 underlying_allocation_percent_exponent = 41;
  if (has_underlying_allocation_percent_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(41, this->underlying_allocation_percent_exponent(), target);
  }

  // optional string underlying_cp_program = 42;
  if (has_underlying_cp_program()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cp_program().data(), this->underlying_cp_program().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->underlying_cp_program(), target);
  }

  // optional string underlying_cp_reg_type = 43;
  if (has_underlying_cp_reg_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_cp_reg_type().data(), this->underlying_cp_reg_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->underlying_cp_reg_type(), target);
  }

  // optional sfixed64 underlying_cap_value = 44;
  if (has_underlying_cap_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(44, this->underlying_cap_value(), target);
  }

  // optional sfixed32 underlying_cap_value_exponent = 45;
  if (has_underlying_cap_value_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(45, this->underlying_cap_value_exponent(), target);
  }

  // optional sfixed64 underlying_cash_amount = 46;
  if (has_underlying_cash_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(46, this->underlying_cash_amount(), target);
  }

  // optional sfixed32 underlying_cash_amount_exponent = 47;
  if (has_underlying_cash_amount_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(47, this->underlying_cash_amount_exponent(), target);
  }

  // optional .Common.UnderlyingCashTypeEnum underlying_cash_type = 48;
  if (has_underlying_cash_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      48, this->underlying_cash_type(), target);
  }

  // optional string underlying_currency = 49;
  if (has_underlying_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_currency().data(), this->underlying_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->underlying_currency(), target);
  }

  // optional sfixed64 underlying_current_value = 50;
  if (has_underlying_current_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(50, this->underlying_current_value(), target);
  }

  // optional sfixed32 underlying_current_value_exponent = 51;
  if (has_underlying_current_value_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(51, this->underlying_current_value_exponent(), target);
  }

  // optional sfixed64 underlying_dirty_price = 52;
  if (has_underlying_dirty_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(52, this->underlying_dirty_price(), target);
  }

  // optional sfixed32 underlying_dirty_price_exponent = 53;
  if (has_underlying_dirty_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(53, this->underlying_dirty_price_exponent(), target);
  }

  // optional sfixed64 underlying_end_price = 54;
  if (has_underlying_end_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(54, this->underlying_end_price(), target);
  }

  // optional sfixed32 underlying_end_price_exponent = 55;
  if (has_underlying_end_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(55, this->underlying_end_price_exponent(), target);
  }

  // optional sfixed64 underlying_end_value = 56;
  if (has_underlying_end_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(56, this->underlying_end_value(), target);
  }

  // optional sfixed32 underlying_end_value_exponent = 57;
  if (has_underlying_end_value_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(57, this->underlying_end_value_exponent(), target);
  }

  // optional double underlying_fx_rate = 58;
  if (has_underlying_fx_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->underlying_fx_rate(), target);
  }

  // optional .Common.UnderlyingFxRateCalcEnum underlying_fx_rate_calc = 59;
  if (has_underlying_fx_rate_calc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->underlying_fx_rate_calc(), target);
  }

  // optional sfixed64 underlying_px = 60;
  if (has_underlying_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(60, this->underlying_px(), target);
  }

  // optional sfixed32 underlying_px_exponent = 61;
  if (has_underlying_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(61, this->underlying_px_exponent(), target);
  }

  // optional sfixed64 underlying_qty = 62;
  if (has_underlying_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(62, this->underlying_qty(), target);
  }

  // optional sfixed32 underlying_qty_exponent = 63;
  if (has_underlying_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(63, this->underlying_qty_exponent(), target);
  }

  // optional string underlying_security_sub_type = 64;
  if (has_underlying_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_security_sub_type().data(), this->underlying_security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        64, this->underlying_security_sub_type(), target);
  }

  // optional string underlying_settl_method = 65;
  if (has_underlying_settl_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_settl_method().data(), this->underlying_settl_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->underlying_settl_method(), target);
  }

  // optional .Common.UnderlyingSettlementTypeEnum underlying_settlement_type = 66;
  if (has_underlying_settlement_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      66, this->underlying_settlement_type(), target);
  }

  // optional sfixed64 underlying_start_value = 67;
  if (has_underlying_start_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(67, this->underlying_start_value(), target);
  }

  // optional sfixed32 underlying_start_value_exponent = 68;
  if (has_underlying_start_value_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(68, this->underlying_start_value_exponent(), target);
  }

  // repeated .Common.UnderlyingStipulations underlying_stipulations = 69;
  for (int i = 0; i < this->underlying_stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->underlying_stipulations(i), target);
  }

  // optional string underlying_strike_currency = 70;
  if (has_underlying_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_strike_currency().data(), this->underlying_strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        70, this->underlying_strike_currency(), target);
  }

  // optional string underlying_time_unit = 71;
  if (has_underlying_time_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_time_unit().data(), this->underlying_time_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        71, this->underlying_time_unit(), target);
  }

  // optional string underlying_unit_of_measure = 72;
  if (has_underlying_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_unit_of_measure().data(), this->underlying_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->underlying_unit_of_measure(), target);
  }

  // repeated .Common.UndlyInstrumentParties undly_instrument_parties = 73;
  for (int i = 0; i < this->undly_instrument_parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->undly_instrument_parties(i), target);
  }

  // optional sfixed64 underlying_exercise_style = 74;
  if (has_underlying_exercise_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(74, this->underlying_exercise_style(), target);
  }

  // optional string underlying_maturity_time = 75;
  if (has_underlying_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_maturity_time().data(), this->underlying_maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->underlying_maturity_time(), target);
  }

  // optional string underlying_price_unit_of_measure = 76;
  if (has_underlying_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_price_unit_of_measure().data(), this->underlying_price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        76, this->underlying_price_unit_of_measure(), target);
  }

  // optional sfixed64 underlying_price_unit_of_measure_qty = 77;
  if (has_underlying_price_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(77, this->underlying_price_unit_of_measure_qty(), target);
  }

  // optional sfixed32 underlying_price_unit_of_measure_qty_exponent = 78;
  if (has_underlying_price_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(78, this->underlying_price_unit_of_measure_qty_exponent(), target);
  }

  // optional sfixed64 underlying_unit_of_measure_qty = 79;
  if (has_underlying_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(79, this->underlying_unit_of_measure_qty(), target);
  }

  // optional sfixed32 underlying_unit_of_measure_qty_exponent = 80;
  if (has_underlying_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(80, this->underlying_unit_of_measure_qty_exponent(), target);
  }

  // optional sfixed64 underlying_contract_multiplier_unit = 81;
  if (has_underlying_contract_multiplier_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(81, this->underlying_contract_multiplier_unit(), target);
  }

  // optional sfixed64 underlying_flow_schedule_type = 82;
  if (has_underlying_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(82, this->underlying_flow_schedule_type(), target);
  }

  // optional sfixed64 underlying_attachment_point = 83;
  if (has_underlying_attachment_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(83, this->underlying_attachment_point(), target);
  }

  // optional sfixed32 underlying_attachment_point_exponent = 84;
  if (has_underlying_attachment_point_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(84, this->underlying_attachment_point_exponent(), target);
  }

  // optional sfixed64 underlying_detachment_point = 85;
  if (has_underlying_detachment_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(85, this->underlying_detachment_point(), target);
  }

  // optional sfixed32 underlying_detachment_point_exponent = 86;
  if (has_underlying_detachment_point_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(86, this->underlying_detachment_point_exponent(), target);
  }

  // optional sfixed64 underlying_notional_percentage_outstanding = 87;
  if (has_underlying_notional_percentage_outstanding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(87, this->underlying_notional_percentage_outstanding(), target);
  }

  // optional sfixed32 underlying_notional_percentage_outstanding_exponent = 88;
  if (has_underlying_notional_percentage_outstanding_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(88, this->underlying_notional_percentage_outstanding_exponent(), target);
  }

  // optional sfixed64 underlying_original_notional_percentage_outstanding = 89;
  if (has_underlying_original_notional_percentage_outstanding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(89, this->underlying_original_notional_percentage_outstanding(), target);
  }

  // optional sfixed32 underlying_original_notional_percentage_outstanding_exponent = 90;
  if (has_underlying_original_notional_percentage_outstanding_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(90, this->underlying_original_notional_percentage_outstanding_exponent(), target);
  }

  // optional string underlying_restructuring_type = 91;
  if (has_underlying_restructuring_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_restructuring_type().data(), this->underlying_restructuring_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->underlying_restructuring_type(), target);
  }

  // optional string underlying_seniority = 92;
  if (has_underlying_seniority()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying_seniority().data(), this->underlying_seniority().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        92, this->underlying_seniority(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnderlyingInstrument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes encoded_underlying_issuer = 1;
    if (has_encoded_underlying_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_underlying_issuer());
    }

    // optional fixed32 encoded_underlying_issuer_len = 2;
    if (has_encoded_underlying_issuer_len()) {
      total_size += 1 + 4;
    }

    // optional bytes encoded_underlying_security_desc = 3;
    if (has_encoded_underlying_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_underlying_security_desc());
    }

    // optional fixed32 encoded_underlying_security_desc_len = 4;
    if (has_encoded_underlying_security_desc_len()) {
      total_size += 1 + 4;
    }

    // optional string underlying_cfi_code = 5;
    if (has_underlying_cfi_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_cfi_code());
    }

    // optional double underlying_contract_multiplier = 6;
    if (has_underlying_contract_multiplier()) {
      total_size += 1 + 8;
    }

    // optional string underlying_country_of_issue = 7;
    if (has_underlying_country_of_issue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_country_of_issue());
    }

    // optional sfixed32 underlying_coupon_payment_date = 8;
    if (has_underlying_coupon_payment_date()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed64 underlying_coupon_rate = 9;
    if (has_underlying_coupon_rate()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 underlying_coupon_rate_exponent = 10;
    if (has_underlying_coupon_rate_exponent()) {
      total_size += 1 + 4;
    }

    // optional string underlying_credit_rating = 11;
    if (has_underlying_credit_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_credit_rating());
    }

    // optional double underlying_factor = 12;
    if (has_underlying_factor()) {
      total_size += 1 + 8;
    }

    // optional string underlying_instr_registry = 13;
    if (has_underlying_instr_registry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_instr_registry());
    }

    // optional sfixed32 underlying_issue_date = 14;
    if (has_underlying_issue_date()) {
      total_size += 1 + 4;
    }

    // optional string underlying_issuer = 15;
    if (has_underlying_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_issuer());
    }

    // optional string underlying_locale_of_issue = 16;
    if (has_underlying_locale_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_locale_of_issue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed32 underlying_maturity_date = 17;
    if (has_underlying_maturity_date()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 underlying_maturity_month_year = 18;
    if (has_underlying_maturity_month_year()) {
      total_size += 2 + 4;
    }

    // optional string underlying_opt_attribute = 19;
    if (has_underlying_opt_attribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_opt_attribute());
    }

    // optional sfixed64 underlying_product = 20;
    if (has_underlying_product()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 underlying_put_or_call = 21;
    if (has_underlying_put_or_call()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_redemption_date = 22;
    if (has_underlying_redemption_date()) {
      total_size += 2 + 4;
    }

    // optional string underlying_repo_collateral_security_type = 23;
    if (has_underlying_repo_collateral_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_repo_collateral_security_type());
    }

    // optional sfixed64 underlying_repurchase_rate = 24;
    if (has_underlying_repurchase_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed32 underlying_repurchase_rate_exponent = 25;
    if (has_underlying_repurchase_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_repurchase_term = 26;
    if (has_underlying_repurchase_term()) {
      total_size += 2 + 8;
    }

    // optional string underlying_security_desc = 27;
    if (has_underlying_security_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_desc());
    }

    // optional string underlying_security_exchange = 28;
    if (has_underlying_security_exchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_exchange());
    }

    // optional string underlying_security_id = 29;
    if (has_underlying_security_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_id());
    }

    // optional string underlying_security_id_source = 30;
    if (has_underlying_security_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_id_source());
    }

    // optional string underlying_security_type = 31;
    if (has_underlying_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_type());
    }

    // optional string underlying_state_or_province_of_issue = 32;
    if (has_underlying_state_or_province_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_state_or_province_of_issue());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sfixed64 underlying_strike_price = 33;
    if (has_underlying_strike_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_strike_price_exponent = 34;
    if (has_underlying_strike_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional string underlying_symbol = 35;
    if (has_underlying_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_symbol());
    }

    // optional string underlying_symbol_sfx = 36;
    if (has_underlying_symbol_sfx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_symbol_sfx());
    }

    // optional sfixed64 underlying_adjusted_quantity = 38;
    if (has_underlying_adjusted_quantity()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_adjusted_quantity_exponent = 39;
    if (has_underlying_adjusted_quantity_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_allocation_percent = 40;
    if (has_underlying_allocation_percent()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional sfixed32 underlying_allocation_percent_exponent = 41;
    if (has_underlying_allocation_percent_exponent()) {
      total_size += 2 + 4;
    }

    // optional string underlying_cp_program = 42;
    if (has_underlying_cp_program()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_cp_program());
    }

    // optional string underlying_cp_reg_type = 43;
    if (has_underlying_cp_reg_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_cp_reg_type());
    }

    // optional sfixed64 underlying_cap_value = 44;
    if (has_underlying_cap_value()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_cap_value_exponent = 45;
    if (has_underlying_cap_value_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_cash_amount = 46;
    if (has_underlying_cash_amount()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_cash_amount_exponent = 47;
    if (has_underlying_cash_amount_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.UnderlyingCashTypeEnum underlying_cash_type = 48;
    if (has_underlying_cash_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underlying_cash_type());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string underlying_currency = 49;
    if (has_underlying_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_currency());
    }

    // optional sfixed64 underlying_current_value = 50;
    if (has_underlying_current_value()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_current_value_exponent = 51;
    if (has_underlying_current_value_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_dirty_price = 52;
    if (has_underlying_dirty_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_dirty_price_exponent = 53;
    if (has_underlying_dirty_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_end_price = 54;
    if (has_underlying_end_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_end_price_exponent = 55;
    if (has_underlying_end_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_end_value = 56;
    if (has_underlying_end_value()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional sfixed32 underlying_end_value_exponent = 57;
    if (has_underlying_end_value_exponent()) {
      total_size += 2 + 4;
    }

    // optional double underlying_fx_rate = 58;
    if (has_underlying_fx_rate()) {
      total_size += 2 + 8;
    }

    // optional .Common.UnderlyingFxRateCalcEnum underlying_fx_rate_calc = 59;
    if (has_underlying_fx_rate_calc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underlying_fx_rate_calc());
    }

    // optional sfixed64 underlying_px = 60;
    if (has_underlying_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_px_exponent = 61;
    if (has_underlying_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_qty = 62;
    if (has_underlying_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_qty_exponent = 63;
    if (has_underlying_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional string underlying_security_sub_type = 64;
    if (has_underlying_security_sub_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_security_sub_type());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional string underlying_settl_method = 65;
    if (has_underlying_settl_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_settl_method());
    }

    // optional .Common.UnderlyingSettlementTypeEnum underlying_settlement_type = 66;
    if (has_underlying_settlement_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->underlying_settlement_type());
    }

    // optional sfixed64 underlying_start_value = 67;
    if (has_underlying_start_value()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_start_value_exponent = 68;
    if (has_underlying_start_value_exponent()) {
      total_size += 2 + 4;
    }

    // optional string underlying_strike_currency = 70;
    if (has_underlying_strike_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_strike_currency());
    }

    // optional string underlying_time_unit = 71;
    if (has_underlying_time_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_time_unit());
    }

    // optional string underlying_unit_of_measure = 72;
    if (has_underlying_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_unit_of_measure());
    }

  }
  if (_has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    // optional sfixed64 underlying_exercise_style = 74;
    if (has_underlying_exercise_style()) {
      total_size += 2 + 8;
    }

    // optional string underlying_maturity_time = 75;
    if (has_underlying_maturity_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_maturity_time());
    }

    // optional string underlying_price_unit_of_measure = 76;
    if (has_underlying_price_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_price_unit_of_measure());
    }

    // optional sfixed64 underlying_price_unit_of_measure_qty = 77;
    if (has_underlying_price_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_price_unit_of_measure_qty_exponent = 78;
    if (has_underlying_price_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_unit_of_measure_qty = 79;
    if (has_underlying_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_unit_of_measure_qty_exponent = 80;
    if (has_underlying_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional sfixed64 underlying_contract_multiplier_unit = 81;
    if (has_underlying_contract_multiplier_unit()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 underlying_flow_schedule_type = 82;
    if (has_underlying_flow_schedule_type()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 underlying_attachment_point = 83;
    if (has_underlying_attachment_point()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_attachment_point_exponent = 84;
    if (has_underlying_attachment_point_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_detachment_point = 85;
    if (has_underlying_detachment_point()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_detachment_point_exponent = 86;
    if (has_underlying_detachment_point_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_notional_percentage_outstanding = 87;
    if (has_underlying_notional_percentage_outstanding()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_notional_percentage_outstanding_exponent = 88;
    if (has_underlying_notional_percentage_outstanding_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional sfixed64 underlying_original_notional_percentage_outstanding = 89;
    if (has_underlying_original_notional_percentage_outstanding()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_original_notional_percentage_outstanding_exponent = 90;
    if (has_underlying_original_notional_percentage_outstanding_exponent()) {
      total_size += 2 + 4;
    }

    // optional string underlying_restructuring_type = 91;
    if (has_underlying_restructuring_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_restructuring_type());
    }

    // optional string underlying_seniority = 92;
    if (has_underlying_seniority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying_seniority());
    }

  }
  // repeated .Common.UndSecAltIdGrp und_sec_alt_id_grp = 37;
  total_size += 2 * this->und_sec_alt_id_grp_size();
  for (int i = 0; i < this->und_sec_alt_id_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_sec_alt_id_grp(i));
  }

  // repeated .Common.UnderlyingStipulations underlying_stipulations = 69;
  total_size += 2 * this->underlying_stipulations_size();
  for (int i = 0; i < this->underlying_stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->underlying_stipulations(i));
  }

  // repeated .Common.UndlyInstrumentParties undly_instrument_parties = 73;
  total_size += 2 * this->undly_instrument_parties_size();
  for (int i = 0; i < this->undly_instrument_parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->undly_instrument_parties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnderlyingInstrument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnderlyingInstrument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnderlyingInstrument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnderlyingInstrument::MergeFrom(const UnderlyingInstrument& from) {
  GOOGLE_CHECK_NE(&from, this);
  und_sec_alt_id_grp_.MergeFrom(from.und_sec_alt_id_grp_);
  underlying_stipulations_.MergeFrom(from.underlying_stipulations_);
  undly_instrument_parties_.MergeFrom(from.undly_instrument_parties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoded_underlying_issuer()) {
      set_encoded_underlying_issuer(from.encoded_underlying_issuer());
    }
    if (from.has_encoded_underlying_issuer_len()) {
      set_encoded_underlying_issuer_len(from.encoded_underlying_issuer_len());
    }
    if (from.has_encoded_underlying_security_desc()) {
      set_encoded_underlying_security_desc(from.encoded_underlying_security_desc());
    }
    if (from.has_encoded_underlying_security_desc_len()) {
      set_encoded_underlying_security_desc_len(from.encoded_underlying_security_desc_len());
    }
    if (from.has_underlying_cfi_code()) {
      set_underlying_cfi_code(from.underlying_cfi_code());
    }
    if (from.has_underlying_contract_multiplier()) {
      set_underlying_contract_multiplier(from.underlying_contract_multiplier());
    }
    if (from.has_underlying_country_of_issue()) {
      set_underlying_country_of_issue(from.underlying_country_of_issue());
    }
    if (from.has_underlying_coupon_payment_date()) {
      set_underlying_coupon_payment_date(from.underlying_coupon_payment_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_underlying_coupon_rate()) {
      set_underlying_coupon_rate(from.underlying_coupon_rate());
    }
    if (from.has_underlying_coupon_rate_exponent()) {
      set_underlying_coupon_rate_exponent(from.underlying_coupon_rate_exponent());
    }
    if (from.has_underlying_credit_rating()) {
      set_underlying_credit_rating(from.underlying_credit_rating());
    }
    if (from.has_underlying_factor()) {
      set_underlying_factor(from.underlying_factor());
    }
    if (from.has_underlying_instr_registry()) {
      set_underlying_instr_registry(from.underlying_instr_registry());
    }
    if (from.has_underlying_issue_date()) {
      set_underlying_issue_date(from.underlying_issue_date());
    }
    if (from.has_underlying_issuer()) {
      set_underlying_issuer(from.underlying_issuer());
    }
    if (from.has_underlying_locale_of_issue()) {
      set_underlying_locale_of_issue(from.underlying_locale_of_issue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_underlying_maturity_date()) {
      set_underlying_maturity_date(from.underlying_maturity_date());
    }
    if (from.has_underlying_maturity_month_year()) {
      set_underlying_maturity_month_year(from.underlying_maturity_month_year());
    }
    if (from.has_underlying_opt_attribute()) {
      set_underlying_opt_attribute(from.underlying_opt_attribute());
    }
    if (from.has_underlying_product()) {
      set_underlying_product(from.underlying_product());
    }
    if (from.has_underlying_put_or_call()) {
      set_underlying_put_or_call(from.underlying_put_or_call());
    }
    if (from.has_underlying_redemption_date()) {
      set_underlying_redemption_date(from.underlying_redemption_date());
    }
    if (from.has_underlying_repo_collateral_security_type()) {
      set_underlying_repo_collateral_security_type(from.underlying_repo_collateral_security_type());
    }
    if (from.has_underlying_repurchase_rate()) {
      set_underlying_repurchase_rate(from.underlying_repurchase_rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_underlying_repurchase_rate_exponent()) {
      set_underlying_repurchase_rate_exponent(from.underlying_repurchase_rate_exponent());
    }
    if (from.has_underlying_repurchase_term()) {
      set_underlying_repurchase_term(from.underlying_repurchase_term());
    }
    if (from.has_underlying_security_desc()) {
      set_underlying_security_desc(from.underlying_security_desc());
    }
    if (from.has_underlying_security_exchange()) {
      set_underlying_security_exchange(from.underlying_security_exchange());
    }
    if (from.has_underlying_security_id()) {
      set_underlying_security_id(from.underlying_security_id());
    }
    if (from.has_underlying_security_id_source()) {
      set_underlying_security_id_source(from.underlying_security_id_source());
    }
    if (from.has_underlying_security_type()) {
      set_underlying_security_type(from.underlying_security_type());
    }
    if (from.has_underlying_state_or_province_of_issue()) {
      set_underlying_state_or_province_of_issue(from.underlying_state_or_province_of_issue());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_underlying_strike_price()) {
      set_underlying_strike_price(from.underlying_strike_price());
    }
    if (from.has_underlying_strike_price_exponent()) {
      set_underlying_strike_price_exponent(from.underlying_strike_price_exponent());
    }
    if (from.has_underlying_symbol()) {
      set_underlying_symbol(from.underlying_symbol());
    }
    if (from.has_underlying_symbol_sfx()) {
      set_underlying_symbol_sfx(from.underlying_symbol_sfx());
    }
    if (from.has_underlying_adjusted_quantity()) {
      set_underlying_adjusted_quantity(from.underlying_adjusted_quantity());
    }
    if (from.has_underlying_adjusted_quantity_exponent()) {
      set_underlying_adjusted_quantity_exponent(from.underlying_adjusted_quantity_exponent());
    }
    if (from.has_underlying_allocation_percent()) {
      set_underlying_allocation_percent(from.underlying_allocation_percent());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_underlying_allocation_percent_exponent()) {
      set_underlying_allocation_percent_exponent(from.underlying_allocation_percent_exponent());
    }
    if (from.has_underlying_cp_program()) {
      set_underlying_cp_program(from.underlying_cp_program());
    }
    if (from.has_underlying_cp_reg_type()) {
      set_underlying_cp_reg_type(from.underlying_cp_reg_type());
    }
    if (from.has_underlying_cap_value()) {
      set_underlying_cap_value(from.underlying_cap_value());
    }
    if (from.has_underlying_cap_value_exponent()) {
      set_underlying_cap_value_exponent(from.underlying_cap_value_exponent());
    }
    if (from.has_underlying_cash_amount()) {
      set_underlying_cash_amount(from.underlying_cash_amount());
    }
    if (from.has_underlying_cash_amount_exponent()) {
      set_underlying_cash_amount_exponent(from.underlying_cash_amount_exponent());
    }
    if (from.has_underlying_cash_type()) {
      set_underlying_cash_type(from.underlying_cash_type());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_underlying_currency()) {
      set_underlying_currency(from.underlying_currency());
    }
    if (from.has_underlying_current_value()) {
      set_underlying_current_value(from.underlying_current_value());
    }
    if (from.has_underlying_current_value_exponent()) {
      set_underlying_current_value_exponent(from.underlying_current_value_exponent());
    }
    if (from.has_underlying_dirty_price()) {
      set_underlying_dirty_price(from.underlying_dirty_price());
    }
    if (from.has_underlying_dirty_price_exponent()) {
      set_underlying_dirty_price_exponent(from.underlying_dirty_price_exponent());
    }
    if (from.has_underlying_end_price()) {
      set_underlying_end_price(from.underlying_end_price());
    }
    if (from.has_underlying_end_price_exponent()) {
      set_underlying_end_price_exponent(from.underlying_end_price_exponent());
    }
    if (from.has_underlying_end_value()) {
      set_underlying_end_value(from.underlying_end_value());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_underlying_end_value_exponent()) {
      set_underlying_end_value_exponent(from.underlying_end_value_exponent());
    }
    if (from.has_underlying_fx_rate()) {
      set_underlying_fx_rate(from.underlying_fx_rate());
    }
    if (from.has_underlying_fx_rate_calc()) {
      set_underlying_fx_rate_calc(from.underlying_fx_rate_calc());
    }
    if (from.has_underlying_px()) {
      set_underlying_px(from.underlying_px());
    }
    if (from.has_underlying_px_exponent()) {
      set_underlying_px_exponent(from.underlying_px_exponent());
    }
    if (from.has_underlying_qty()) {
      set_underlying_qty(from.underlying_qty());
    }
    if (from.has_underlying_qty_exponent()) {
      set_underlying_qty_exponent(from.underlying_qty_exponent());
    }
    if (from.has_underlying_security_sub_type()) {
      set_underlying_security_sub_type(from.underlying_security_sub_type());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_underlying_settl_method()) {
      set_underlying_settl_method(from.underlying_settl_method());
    }
    if (from.has_underlying_settlement_type()) {
      set_underlying_settlement_type(from.underlying_settlement_type());
    }
    if (from.has_underlying_start_value()) {
      set_underlying_start_value(from.underlying_start_value());
    }
    if (from.has_underlying_start_value_exponent()) {
      set_underlying_start_value_exponent(from.underlying_start_value_exponent());
    }
    if (from.has_underlying_strike_currency()) {
      set_underlying_strike_currency(from.underlying_strike_currency());
    }
    if (from.has_underlying_time_unit()) {
      set_underlying_time_unit(from.underlying_time_unit());
    }
    if (from.has_underlying_unit_of_measure()) {
      set_underlying_unit_of_measure(from.underlying_unit_of_measure());
    }
  }
  if (from._has_bits_[73 / 32] & (0xffu << (73 % 32))) {
    if (from.has_underlying_exercise_style()) {
      set_underlying_exercise_style(from.underlying_exercise_style());
    }
    if (from.has_underlying_maturity_time()) {
      set_underlying_maturity_time(from.underlying_maturity_time());
    }
    if (from.has_underlying_price_unit_of_measure()) {
      set_underlying_price_unit_of_measure(from.underlying_price_unit_of_measure());
    }
    if (from.has_underlying_price_unit_of_measure_qty()) {
      set_underlying_price_unit_of_measure_qty(from.underlying_price_unit_of_measure_qty());
    }
    if (from.has_underlying_price_unit_of_measure_qty_exponent()) {
      set_underlying_price_unit_of_measure_qty_exponent(from.underlying_price_unit_of_measure_qty_exponent());
    }
    if (from.has_underlying_unit_of_measure_qty()) {
      set_underlying_unit_of_measure_qty(from.underlying_unit_of_measure_qty());
    }
    if (from.has_underlying_unit_of_measure_qty_exponent()) {
      set_underlying_unit_of_measure_qty_exponent(from.underlying_unit_of_measure_qty_exponent());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_underlying_contract_multiplier_unit()) {
      set_underlying_contract_multiplier_unit(from.underlying_contract_multiplier_unit());
    }
    if (from.has_underlying_flow_schedule_type()) {
      set_underlying_flow_schedule_type(from.underlying_flow_schedule_type());
    }
    if (from.has_underlying_attachment_point()) {
      set_underlying_attachment_point(from.underlying_attachment_point());
    }
    if (from.has_underlying_attachment_point_exponent()) {
      set_underlying_attachment_point_exponent(from.underlying_attachment_point_exponent());
    }
    if (from.has_underlying_detachment_point()) {
      set_underlying_detachment_point(from.underlying_detachment_point());
    }
    if (from.has_underlying_detachment_point_exponent()) {
      set_underlying_detachment_point_exponent(from.underlying_detachment_point_exponent());
    }
    if (from.has_underlying_notional_percentage_outstanding()) {
      set_underlying_notional_percentage_outstanding(from.underlying_notional_percentage_outstanding());
    }
    if (from.has_underlying_notional_percentage_outstanding_exponent()) {
      set_underlying_notional_percentage_outstanding_exponent(from.underlying_notional_percentage_outstanding_exponent());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_underlying_original_notional_percentage_outstanding()) {
      set_underlying_original_notional_percentage_outstanding(from.underlying_original_notional_percentage_outstanding());
    }
    if (from.has_underlying_original_notional_percentage_outstanding_exponent()) {
      set_underlying_original_notional_percentage_outstanding_exponent(from.underlying_original_notional_percentage_outstanding_exponent());
    }
    if (from.has_underlying_restructuring_type()) {
      set_underlying_restructuring_type(from.underlying_restructuring_type());
    }
    if (from.has_underlying_seniority()) {
      set_underlying_seniority(from.underlying_seniority());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnderlyingInstrument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderlyingInstrument::CopyFrom(const UnderlyingInstrument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderlyingInstrument::IsInitialized() const {

  return true;
}

void UnderlyingInstrument::Swap(UnderlyingInstrument* other) {
  if (other != this) {
    std::swap(encoded_underlying_issuer_, other->encoded_underlying_issuer_);
    std::swap(encoded_underlying_issuer_len_, other->encoded_underlying_issuer_len_);
    std::swap(encoded_underlying_security_desc_, other->encoded_underlying_security_desc_);
    std::swap(encoded_underlying_security_desc_len_, other->encoded_underlying_security_desc_len_);
    std::swap(underlying_cfi_code_, other->underlying_cfi_code_);
    std::swap(underlying_contract_multiplier_, other->underlying_contract_multiplier_);
    std::swap(underlying_country_of_issue_, other->underlying_country_of_issue_);
    std::swap(underlying_coupon_payment_date_, other->underlying_coupon_payment_date_);
    std::swap(underlying_coupon_rate_, other->underlying_coupon_rate_);
    std::swap(underlying_coupon_rate_exponent_, other->underlying_coupon_rate_exponent_);
    std::swap(underlying_credit_rating_, other->underlying_credit_rating_);
    std::swap(underlying_factor_, other->underlying_factor_);
    std::swap(underlying_instr_registry_, other->underlying_instr_registry_);
    std::swap(underlying_issue_date_, other->underlying_issue_date_);
    std::swap(underlying_issuer_, other->underlying_issuer_);
    std::swap(underlying_locale_of_issue_, other->underlying_locale_of_issue_);
    std::swap(underlying_maturity_date_, other->underlying_maturity_date_);
    std::swap(underlying_maturity_month_year_, other->underlying_maturity_month_year_);
    std::swap(underlying_opt_attribute_, other->underlying_opt_attribute_);
    std::swap(underlying_product_, other->underlying_product_);
    std::swap(underlying_put_or_call_, other->underlying_put_or_call_);
    std::swap(underlying_redemption_date_, other->underlying_redemption_date_);
    std::swap(underlying_repo_collateral_security_type_, other->underlying_repo_collateral_security_type_);
    std::swap(underlying_repurchase_rate_, other->underlying_repurchase_rate_);
    std::swap(underlying_repurchase_rate_exponent_, other->underlying_repurchase_rate_exponent_);
    std::swap(underlying_repurchase_term_, other->underlying_repurchase_term_);
    std::swap(underlying_security_desc_, other->underlying_security_desc_);
    std::swap(underlying_security_exchange_, other->underlying_security_exchange_);
    std::swap(underlying_security_id_, other->underlying_security_id_);
    std::swap(underlying_security_id_source_, other->underlying_security_id_source_);
    std::swap(underlying_security_type_, other->underlying_security_type_);
    std::swap(underlying_state_or_province_of_issue_, other->underlying_state_or_province_of_issue_);
    std::swap(underlying_strike_price_, other->underlying_strike_price_);
    std::swap(underlying_strike_price_exponent_, other->underlying_strike_price_exponent_);
    std::swap(underlying_symbol_, other->underlying_symbol_);
    std::swap(underlying_symbol_sfx_, other->underlying_symbol_sfx_);
    und_sec_alt_id_grp_.Swap(&other->und_sec_alt_id_grp_);
    std::swap(underlying_adjusted_quantity_, other->underlying_adjusted_quantity_);
    std::swap(underlying_adjusted_quantity_exponent_, other->underlying_adjusted_quantity_exponent_);
    std::swap(underlying_allocation_percent_, other->underlying_allocation_percent_);
    std::swap(underlying_allocation_percent_exponent_, other->underlying_allocation_percent_exponent_);
    std::swap(underlying_cp_program_, other->underlying_cp_program_);
    std::swap(underlying_cp_reg_type_, other->underlying_cp_reg_type_);
    std::swap(underlying_cap_value_, other->underlying_cap_value_);
    std::swap(underlying_cap_value_exponent_, other->underlying_cap_value_exponent_);
    std::swap(underlying_cash_amount_, other->underlying_cash_amount_);
    std::swap(underlying_cash_amount_exponent_, other->underlying_cash_amount_exponent_);
    std::swap(underlying_cash_type_, other->underlying_cash_type_);
    std::swap(underlying_currency_, other->underlying_currency_);
    std::swap(underlying_current_value_, other->underlying_current_value_);
    std::swap(underlying_current_value_exponent_, other->underlying_current_value_exponent_);
    std::swap(underlying_dirty_price_, other->underlying_dirty_price_);
    std::swap(underlying_dirty_price_exponent_, other->underlying_dirty_price_exponent_);
    std::swap(underlying_end_price_, other->underlying_end_price_);
    std::swap(underlying_end_price_exponent_, other->underlying_end_price_exponent_);
    std::swap(underlying_end_value_, other->underlying_end_value_);
    std::swap(underlying_end_value_exponent_, other->underlying_end_value_exponent_);
    std::swap(underlying_fx_rate_, other->underlying_fx_rate_);
    std::swap(underlying_fx_rate_calc_, other->underlying_fx_rate_calc_);
    std::swap(underlying_px_, other->underlying_px_);
    std::swap(underlying_px_exponent_, other->underlying_px_exponent_);
    std::swap(underlying_qty_, other->underlying_qty_);
    std::swap(underlying_qty_exponent_, other->underlying_qty_exponent_);
    std::swap(underlying_security_sub_type_, other->underlying_security_sub_type_);
    std::swap(underlying_settl_method_, other->underlying_settl_method_);
    std::swap(underlying_settlement_type_, other->underlying_settlement_type_);
    std::swap(underlying_start_value_, other->underlying_start_value_);
    std::swap(underlying_start_value_exponent_, other->underlying_start_value_exponent_);
    underlying_stipulations_.Swap(&other->underlying_stipulations_);
    std::swap(underlying_strike_currency_, other->underlying_strike_currency_);
    std::swap(underlying_time_unit_, other->underlying_time_unit_);
    std::swap(underlying_unit_of_measure_, other->underlying_unit_of_measure_);
    undly_instrument_parties_.Swap(&other->undly_instrument_parties_);
    std::swap(underlying_exercise_style_, other->underlying_exercise_style_);
    std::swap(underlying_maturity_time_, other->underlying_maturity_time_);
    std::swap(underlying_price_unit_of_measure_, other->underlying_price_unit_of_measure_);
    std::swap(underlying_price_unit_of_measure_qty_, other->underlying_price_unit_of_measure_qty_);
    std::swap(underlying_price_unit_of_measure_qty_exponent_, other->underlying_price_unit_of_measure_qty_exponent_);
    std::swap(underlying_unit_of_measure_qty_, other->underlying_unit_of_measure_qty_);
    std::swap(underlying_unit_of_measure_qty_exponent_, other->underlying_unit_of_measure_qty_exponent_);
    std::swap(underlying_contract_multiplier_unit_, other->underlying_contract_multiplier_unit_);
    std::swap(underlying_flow_schedule_type_, other->underlying_flow_schedule_type_);
    std::swap(underlying_attachment_point_, other->underlying_attachment_point_);
    std::swap(underlying_attachment_point_exponent_, other->underlying_attachment_point_exponent_);
    std::swap(underlying_detachment_point_, other->underlying_detachment_point_);
    std::swap(underlying_detachment_point_exponent_, other->underlying_detachment_point_exponent_);
    std::swap(underlying_notional_percentage_outstanding_, other->underlying_notional_percentage_outstanding_);
    std::swap(underlying_notional_percentage_outstanding_exponent_, other->underlying_notional_percentage_outstanding_exponent_);
    std::swap(underlying_original_notional_percentage_outstanding_, other->underlying_original_notional_percentage_outstanding_);
    std::swap(underlying_original_notional_percentage_outstanding_exponent_, other->underlying_original_notional_percentage_outstanding_exponent_);
    std::swap(underlying_restructuring_type_, other->underlying_restructuring_type_);
    std::swap(underlying_seniority_, other->underlying_seniority_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnderlyingInstrument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnderlyingInstrument_descriptor_;
  metadata.reflection = UnderlyingInstrument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UndInstrmtGrp::kUnderlyingInstrumentFieldNumber;
#endif  // !_MSC_VER

UndInstrmtGrp::UndInstrmtGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UndInstrmtGrp::InitAsDefaultInstance() {
  underlying_instrument_ = const_cast< ::Common::UnderlyingInstrument*>(&::Common::UnderlyingInstrument::default_instance());
}

UndInstrmtGrp::UndInstrmtGrp(const UndInstrmtGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UndInstrmtGrp::SharedCtor() {
  _cached_size_ = 0;
  underlying_instrument_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UndInstrmtGrp::~UndInstrmtGrp() {
  SharedDtor();
}

void UndInstrmtGrp::SharedDtor() {
  if (this != default_instance_) {
    delete underlying_instrument_;
  }
}

void UndInstrmtGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndInstrmtGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UndInstrmtGrp_descriptor_;
}

const UndInstrmtGrp& UndInstrmtGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

UndInstrmtGrp* UndInstrmtGrp::default_instance_ = NULL;

UndInstrmtGrp* UndInstrmtGrp::New() const {
  return new UndInstrmtGrp;
}

void UndInstrmtGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_underlying_instrument()) {
      if (underlying_instrument_ != NULL) underlying_instrument_->::Common::UnderlyingInstrument::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UndInstrmtGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.UnderlyingInstrument underlying_instrument = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_underlying_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UndInstrmtGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.UnderlyingInstrument underlying_instrument = 1;
  if (has_underlying_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->underlying_instrument(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UndInstrmtGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.UnderlyingInstrument underlying_instrument = 1;
  if (has_underlying_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->underlying_instrument(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UndInstrmtGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.UnderlyingInstrument underlying_instrument = 1;
    if (has_underlying_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->underlying_instrument());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndInstrmtGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UndInstrmtGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UndInstrmtGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UndInstrmtGrp::MergeFrom(const UndInstrmtGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_underlying_instrument()) {
      mutable_underlying_instrument()->::Common::UnderlyingInstrument::MergeFrom(from.underlying_instrument());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UndInstrmtGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndInstrmtGrp::CopyFrom(const UndInstrmtGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndInstrmtGrp::IsInitialized() const {

  return true;
}

void UndInstrmtGrp::Swap(UndInstrmtGrp* other) {
  if (other != this) {
    std::swap(underlying_instrument_, other->underlying_instrument_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UndInstrmtGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UndInstrmtGrp_descriptor_;
  metadata.reflection = UndInstrmtGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Stipulations::kStipulationTypeFieldNumber;
const int Stipulations::kStipulationValueFieldNumber;
#endif  // !_MSC_VER

Stipulations::Stipulations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stipulations::InitAsDefaultInstance() {
}

Stipulations::Stipulations(const Stipulations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stipulations::SharedCtor() {
  _cached_size_ = 0;
  stipulation_type_ = 0;
  stipulation_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stipulations::~Stipulations() {
  SharedDtor();
}

void Stipulations::SharedDtor() {
  if (stipulation_value_ != &::google::protobuf::internal::kEmptyString) {
    delete stipulation_value_;
  }
  if (this != default_instance_) {
  }
}

void Stipulations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stipulations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stipulations_descriptor_;
}

const Stipulations& Stipulations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

Stipulations* Stipulations::default_instance_ = NULL;

Stipulations* Stipulations::New() const {
  return new Stipulations;
}

void Stipulations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stipulation_type_ = 0;
    if (has_stipulation_value()) {
      if (stipulation_value_ != &::google::protobuf::internal::kEmptyString) {
        stipulation_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stipulations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.StipulationTypeEnum stipulation_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::StipulationTypeEnum_IsValid(value)) {
            set_stipulation_type(static_cast< ::Common::StipulationTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stipulation_value;
        break;
      }

      // optional string stipulation_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulation_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stipulation_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stipulation_value().data(), this->stipulation_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stipulations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.StipulationTypeEnum stipulation_type = 1;
  if (has_stipulation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stipulation_type(), output);
  }

  // optional string stipulation_value = 2;
  if (has_stipulation_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stipulation_value().data(), this->stipulation_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stipulation_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stipulations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.StipulationTypeEnum stipulation_type = 1;
  if (has_stipulation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stipulation_type(), target);
  }

  // optional string stipulation_value = 2;
  if (has_stipulation_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stipulation_value().data(), this->stipulation_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stipulation_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stipulations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.StipulationTypeEnum stipulation_type = 1;
    if (has_stipulation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stipulation_type());
    }

    // optional string stipulation_value = 2;
    if (has_stipulation_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stipulation_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stipulations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stipulations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stipulations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stipulations::MergeFrom(const Stipulations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stipulation_type()) {
      set_stipulation_type(from.stipulation_type());
    }
    if (from.has_stipulation_value()) {
      set_stipulation_value(from.stipulation_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stipulations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stipulations::CopyFrom(const Stipulations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stipulations::IsInitialized() const {

  return true;
}

void Stipulations::Swap(Stipulations* other) {
  if (other != this) {
    std::swap(stipulation_type_, other->stipulation_type_);
    std::swap(stipulation_value_, other->stipulation_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stipulations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stipulations_descriptor_;
  metadata.reflection = Stipulations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderQtyData::kCashOrderQtyFieldNumber;
const int OrderQtyData::kCashOrderQtyExponentFieldNumber;
const int OrderQtyData::kOrderPercentFieldNumber;
const int OrderQtyData::kOrderPercentExponentFieldNumber;
const int OrderQtyData::kOrderQtyFieldNumber;
const int OrderQtyData::kOrderQtyExponentFieldNumber;
const int OrderQtyData::kRoundingDirectionFieldNumber;
const int OrderQtyData::kRoundingModulusFieldNumber;
#endif  // !_MSC_VER

OrderQtyData::OrderQtyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderQtyData::InitAsDefaultInstance() {
}

OrderQtyData::OrderQtyData(const OrderQtyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderQtyData::SharedCtor() {
  _cached_size_ = 0;
  cash_order_qty_ = GOOGLE_LONGLONG(0);
  cash_order_qty_exponent_ = 0;
  order_percent_ = GOOGLE_LONGLONG(0);
  order_percent_exponent_ = 0;
  order_qty_ = GOOGLE_LONGLONG(0);
  order_qty_exponent_ = 0;
  rounding_direction_ = 0;
  rounding_modulus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderQtyData::~OrderQtyData() {
  SharedDtor();
}

void OrderQtyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderQtyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderQtyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderQtyData_descriptor_;
}

const OrderQtyData& OrderQtyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OrderQtyData* OrderQtyData::default_instance_ = NULL;

OrderQtyData* OrderQtyData::New() const {
  return new OrderQtyData;
}

void OrderQtyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cash_order_qty_ = GOOGLE_LONGLONG(0);
    cash_order_qty_exponent_ = 0;
    order_percent_ = GOOGLE_LONGLONG(0);
    order_percent_exponent_ = 0;
    order_qty_ = GOOGLE_LONGLONG(0);
    order_qty_exponent_ = 0;
    rounding_direction_ = 0;
    rounding_modulus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderQtyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 cash_order_qty = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cash_order_qty_)));
          set_has_cash_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cash_order_qty_exponent;
        break;
      }

      // optional sfixed32 cash_order_qty_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cash_order_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cash_order_qty_exponent_)));
          set_has_cash_order_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_order_percent;
        break;
      }

      // optional sfixed64 order_percent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &order_percent_)));
          set_has_order_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_order_percent_exponent;
        break;
      }

      // optional sfixed32 order_percent_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order_percent_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_percent_exponent_)));
          set_has_order_percent_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_order_qty;
        break;
      }

      // optional sfixed64 order_qty = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &order_qty_)));
          set_has_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_order_qty_exponent;
        break;
      }

      // optional sfixed32 order_qty_exponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_order_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_qty_exponent_)));
          set_has_order_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rounding_direction;
        break;
      }

      // optional .Common.RoundingDirectionEnum rounding_direction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rounding_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::RoundingDirectionEnum_IsValid(value)) {
            set_rounding_direction(static_cast< ::Common::RoundingDirectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_rounding_modulus;
        break;
      }

      // optional double rounding_modulus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rounding_modulus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rounding_modulus_)));
          set_has_rounding_modulus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderQtyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 cash_order_qty = 1;
  if (has_cash_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->cash_order_qty(), output);
  }

  // optional sfixed32 cash_order_qty_exponent = 2;
  if (has_cash_order_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->cash_order_qty_exponent(), output);
  }

  // optional sfixed64 order_percent = 3;
  if (has_order_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->order_percent(), output);
  }

  // optional sfixed32 order_percent_exponent = 4;
  if (has_order_percent_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->order_percent_exponent(), output);
  }

  // optional sfixed64 order_qty = 5;
  if (has_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->order_qty(), output);
  }

  // optional sfixed32 order_qty_exponent = 6;
  if (has_order_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->order_qty_exponent(), output);
  }

  // optional .Common.RoundingDirectionEnum rounding_direction = 7;
  if (has_rounding_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rounding_direction(), output);
  }

  // optional double rounding_modulus = 8;
  if (has_rounding_modulus()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rounding_modulus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderQtyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 cash_order_qty = 1;
  if (has_cash_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->cash_order_qty(), target);
  }

  // optional sfixed32 cash_order_qty_exponent = 2;
  if (has_cash_order_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->cash_order_qty_exponent(), target);
  }

  // optional sfixed64 order_percent = 3;
  if (has_order_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->order_percent(), target);
  }

  // optional sfixed32 order_percent_exponent = 4;
  if (has_order_percent_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->order_percent_exponent(), target);
  }

  // optional sfixed64 order_qty = 5;
  if (has_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->order_qty(), target);
  }

  // optional sfixed32 order_qty_exponent = 6;
  if (has_order_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->order_qty_exponent(), target);
  }

  // optional .Common.RoundingDirectionEnum rounding_direction = 7;
  if (has_rounding_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rounding_direction(), target);
  }

  // optional double rounding_modulus = 8;
  if (has_rounding_modulus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rounding_modulus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderQtyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 cash_order_qty = 1;
    if (has_cash_order_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 cash_order_qty_exponent = 2;
    if (has_cash_order_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 order_percent = 3;
    if (has_order_percent()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 order_percent_exponent = 4;
    if (has_order_percent_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 order_qty = 5;
    if (has_order_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 order_qty_exponent = 6;
    if (has_order_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.RoundingDirectionEnum rounding_direction = 7;
    if (has_rounding_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rounding_direction());
    }

    // optional double rounding_modulus = 8;
    if (has_rounding_modulus()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderQtyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderQtyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderQtyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderQtyData::MergeFrom(const OrderQtyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash_order_qty()) {
      set_cash_order_qty(from.cash_order_qty());
    }
    if (from.has_cash_order_qty_exponent()) {
      set_cash_order_qty_exponent(from.cash_order_qty_exponent());
    }
    if (from.has_order_percent()) {
      set_order_percent(from.order_percent());
    }
    if (from.has_order_percent_exponent()) {
      set_order_percent_exponent(from.order_percent_exponent());
    }
    if (from.has_order_qty()) {
      set_order_qty(from.order_qty());
    }
    if (from.has_order_qty_exponent()) {
      set_order_qty_exponent(from.order_qty_exponent());
    }
    if (from.has_rounding_direction()) {
      set_rounding_direction(from.rounding_direction());
    }
    if (from.has_rounding_modulus()) {
      set_rounding_modulus(from.rounding_modulus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderQtyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderQtyData::CopyFrom(const OrderQtyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderQtyData::IsInitialized() const {

  return true;
}

void OrderQtyData::Swap(OrderQtyData* other) {
  if (other != this) {
    std::swap(cash_order_qty_, other->cash_order_qty_);
    std::swap(cash_order_qty_exponent_, other->cash_order_qty_exponent_);
    std::swap(order_percent_, other->order_percent_);
    std::swap(order_percent_exponent_, other->order_percent_exponent_);
    std::swap(order_qty_, other->order_qty_);
    std::swap(order_qty_exponent_, other->order_qty_exponent_);
    std::swap(rounding_direction_, other->rounding_direction_);
    std::swap(rounding_modulus_, other->rounding_modulus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderQtyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderQtyData_descriptor_;
  metadata.reflection = OrderQtyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TriggeringInstruction::kTriggerActionFieldNumber;
const int TriggeringInstruction::kTriggerNewPriceFieldNumber;
const int TriggeringInstruction::kTriggerNewPriceExponentFieldNumber;
const int TriggeringInstruction::kTriggerNewQtyFieldNumber;
const int TriggeringInstruction::kTriggerNewQtyExponentFieldNumber;
const int TriggeringInstruction::kTriggerOrderTypeFieldNumber;
const int TriggeringInstruction::kTriggerPriceFieldNumber;
const int TriggeringInstruction::kTriggerPriceExponentFieldNumber;
const int TriggeringInstruction::kTriggerPriceDirectionFieldNumber;
const int TriggeringInstruction::kTriggerPriceTypeFieldNumber;
const int TriggeringInstruction::kTriggerPriceTypeScopeFieldNumber;
const int TriggeringInstruction::kTriggerSecurityDescFieldNumber;
const int TriggeringInstruction::kTriggerSecurityIdFieldNumber;
const int TriggeringInstruction::kTriggerSecurityIdSourceFieldNumber;
const int TriggeringInstruction::kTriggerSymbolFieldNumber;
const int TriggeringInstruction::kTriggerTradingSessionIdFieldNumber;
const int TriggeringInstruction::kTriggerTradingSessionSubIdFieldNumber;
const int TriggeringInstruction::kTriggerTypeFieldNumber;
#endif  // !_MSC_VER

TriggeringInstruction::TriggeringInstruction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TriggeringInstruction::InitAsDefaultInstance() {
}

TriggeringInstruction::TriggeringInstruction(const TriggeringInstruction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TriggeringInstruction::SharedCtor() {
  _cached_size_ = 0;
  trigger_action_ = 0;
  trigger_new_price_ = GOOGLE_LONGLONG(0);
  trigger_new_price_exponent_ = 0;
  trigger_new_qty_ = GOOGLE_LONGLONG(0);
  trigger_new_qty_exponent_ = 0;
  trigger_order_type_ = 0;
  trigger_price_ = GOOGLE_LONGLONG(0);
  trigger_price_exponent_ = 0;
  trigger_price_direction_ = 0;
  trigger_price_type_ = 0;
  trigger_price_type_scope_ = 0;
  trigger_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_security_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_trading_session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_trading_session_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigger_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TriggeringInstruction::~TriggeringInstruction() {
  SharedDtor();
}

void TriggeringInstruction::SharedDtor() {
  if (trigger_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_security_desc_;
  }
  if (trigger_security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_security_id_;
  }
  if (trigger_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_security_id_source_;
  }
  if (trigger_symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_symbol_;
  }
  if (trigger_trading_session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_trading_session_id_;
  }
  if (trigger_trading_session_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete trigger_trading_session_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void TriggeringInstruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TriggeringInstruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TriggeringInstruction_descriptor_;
}

const TriggeringInstruction& TriggeringInstruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TriggeringInstruction* TriggeringInstruction::default_instance_ = NULL;

TriggeringInstruction* TriggeringInstruction::New() const {
  return new TriggeringInstruction;
}

void TriggeringInstruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trigger_action_ = 0;
    trigger_new_price_ = GOOGLE_LONGLONG(0);
    trigger_new_price_exponent_ = 0;
    trigger_new_qty_ = GOOGLE_LONGLONG(0);
    trigger_new_qty_exponent_ = 0;
    trigger_order_type_ = 0;
    trigger_price_ = GOOGLE_LONGLONG(0);
    trigger_price_exponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    trigger_price_direction_ = 0;
    trigger_price_type_ = 0;
    trigger_price_type_scope_ = 0;
    if (has_trigger_security_desc()) {
      if (trigger_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        trigger_security_desc_->clear();
      }
    }
    if (has_trigger_security_id()) {
      if (trigger_security_id_ != &::google::protobuf::internal::kEmptyString) {
        trigger_security_id_->clear();
      }
    }
    if (has_trigger_security_id_source()) {
      if (trigger_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
        trigger_security_id_source_->clear();
      }
    }
    if (has_trigger_symbol()) {
      if (trigger_symbol_ != &::google::protobuf::internal::kEmptyString) {
        trigger_symbol_->clear();
      }
    }
    if (has_trigger_trading_session_id()) {
      if (trigger_trading_session_id_ != &::google::protobuf::internal::kEmptyString) {
        trigger_trading_session_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_trigger_trading_session_sub_id()) {
      if (trigger_trading_session_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        trigger_trading_session_sub_id_->clear();
      }
    }
    trigger_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TriggeringInstruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TriggerActionEnum trigger_action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerActionEnum_IsValid(value)) {
            set_trigger_action(static_cast< ::Common::TriggerActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_trigger_new_price;
        break;
      }

      // optional sfixed64 trigger_new_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trigger_new_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trigger_new_price_)));
          set_has_trigger_new_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_trigger_new_price_exponent;
        break;
      }

      // optional sfixed32 trigger_new_price_exponent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trigger_new_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trigger_new_price_exponent_)));
          set_has_trigger_new_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_trigger_new_qty;
        break;
      }

      // optional sfixed64 trigger_new_qty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trigger_new_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trigger_new_qty_)));
          set_has_trigger_new_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_trigger_new_qty_exponent;
        break;
      }

      // optional sfixed32 trigger_new_qty_exponent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trigger_new_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trigger_new_qty_exponent_)));
          set_has_trigger_new_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trigger_order_type;
        break;
      }

      // optional .Common.TriggerOrderTypeEnum trigger_order_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_order_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerOrderTypeEnum_IsValid(value)) {
            set_trigger_order_type(static_cast< ::Common::TriggerOrderTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_trigger_price;
        break;
      }

      // optional sfixed64 trigger_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trigger_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trigger_price_)));
          set_has_trigger_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_trigger_price_exponent;
        break;
      }

      // optional sfixed32 trigger_price_exponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trigger_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trigger_price_exponent_)));
          set_has_trigger_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_trigger_price_direction;
        break;
      }

      // optional .Common.TriggerPriceDirectionEnum trigger_price_direction = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_price_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerPriceDirectionEnum_IsValid(value)) {
            set_trigger_price_direction(static_cast< ::Common::TriggerPriceDirectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_trigger_price_type;
        break;
      }

      // optional .Common.TriggerPriceTypeEnum trigger_price_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerPriceTypeEnum_IsValid(value)) {
            set_trigger_price_type(static_cast< ::Common::TriggerPriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_trigger_price_type_scope;
        break;
      }

      // optional .Common.TriggerPriceTypeScopeEnum trigger_price_type_scope = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_price_type_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerPriceTypeScopeEnum_IsValid(value)) {
            set_trigger_price_type_scope(static_cast< ::Common::TriggerPriceTypeScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trigger_security_desc;
        break;
      }

      // optional string trigger_security_desc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_security_desc().data(), this->trigger_security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_trigger_security_id;
        break;
      }

      // optional string trigger_security_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_security_id().data(), this->trigger_security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_trigger_security_id_source;
        break;
      }

      // optional string trigger_security_id_source = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_security_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_security_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_security_id_source().data(), this->trigger_security_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_trigger_symbol;
        break;
      }

      // optional string trigger_symbol = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_symbol().data(), this->trigger_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_trigger_trading_session_id;
        break;
      }

      // optional string trigger_trading_session_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_trading_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_trading_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_trading_session_id().data(), this->trigger_trading_session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_trigger_trading_session_sub_id;
        break;
      }

      // optional string trigger_trading_session_sub_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_trading_session_sub_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trigger_trading_session_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trigger_trading_session_sub_id().data(), this->trigger_trading_session_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_trigger_type;
        break;
      }

      // optional .Common.TriggerTypeEnum trigger_type = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigger_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TriggerTypeEnum_IsValid(value)) {
            set_trigger_type(static_cast< ::Common::TriggerTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TriggeringInstruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TriggerActionEnum trigger_action = 1;
  if (has_trigger_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trigger_action(), output);
  }

  // optional sfixed64 trigger_new_price = 2;
  if (has_trigger_new_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->trigger_new_price(), output);
  }

  // optional sfixed32 trigger_new_price_exponent = 3;
  if (has_trigger_new_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->trigger_new_price_exponent(), output);
  }

  // optional sfixed64 trigger_new_qty = 4;
  if (has_trigger_new_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->trigger_new_qty(), output);
  }

  // optional sfixed32 trigger_new_qty_exponent = 5;
  if (has_trigger_new_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->trigger_new_qty_exponent(), output);
  }

  // optional .Common.TriggerOrderTypeEnum trigger_order_type = 6;
  if (has_trigger_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->trigger_order_type(), output);
  }

  // optional sfixed64 trigger_price = 7;
  if (has_trigger_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->trigger_price(), output);
  }

  // optional sfixed32 trigger_price_exponent = 8;
  if (has_trigger_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->trigger_price_exponent(), output);
  }

  // optional .Common.TriggerPriceDirectionEnum trigger_price_direction = 9;
  if (has_trigger_price_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->trigger_price_direction(), output);
  }

  // optional .Common.TriggerPriceTypeEnum trigger_price_type = 10;
  if (has_trigger_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->trigger_price_type(), output);
  }

  // optional .Common.TriggerPriceTypeScopeEnum trigger_price_type_scope = 11;
  if (has_trigger_price_type_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->trigger_price_type_scope(), output);
  }

  // optional string trigger_security_desc = 12;
  if (has_trigger_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_desc().data(), this->trigger_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->trigger_security_desc(), output);
  }

  // optional string trigger_security_id = 13;
  if (has_trigger_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_id().data(), this->trigger_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->trigger_security_id(), output);
  }

  // optional string trigger_security_id_source = 14;
  if (has_trigger_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_id_source().data(), this->trigger_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->trigger_security_id_source(), output);
  }

  // optional string trigger_symbol = 15;
  if (has_trigger_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_symbol().data(), this->trigger_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->trigger_symbol(), output);
  }

  // optional string trigger_trading_session_id = 16;
  if (has_trigger_trading_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_trading_session_id().data(), this->trigger_trading_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->trigger_trading_session_id(), output);
  }

  // optional string trigger_trading_session_sub_id = 17;
  if (has_trigger_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_trading_session_sub_id().data(), this->trigger_trading_session_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->trigger_trading_session_sub_id(), output);
  }

  // optional .Common.TriggerTypeEnum trigger_type = 18;
  if (has_trigger_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->trigger_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TriggeringInstruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TriggerActionEnum trigger_action = 1;
  if (has_trigger_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trigger_action(), target);
  }

  // optional sfixed64 trigger_new_price = 2;
  if (has_trigger_new_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->trigger_new_price(), target);
  }

  // optional sfixed32 trigger_new_price_exponent = 3;
  if (has_trigger_new_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->trigger_new_price_exponent(), target);
  }

  // optional sfixed64 trigger_new_qty = 4;
  if (has_trigger_new_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->trigger_new_qty(), target);
  }

  // optional sfixed32 trigger_new_qty_exponent = 5;
  if (has_trigger_new_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->trigger_new_qty_exponent(), target);
  }

  // optional .Common.TriggerOrderTypeEnum trigger_order_type = 6;
  if (has_trigger_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->trigger_order_type(), target);
  }

  // optional sfixed64 trigger_price = 7;
  if (has_trigger_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->trigger_price(), target);
  }

  // optional sfixed32 trigger_price_exponent = 8;
  if (has_trigger_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->trigger_price_exponent(), target);
  }

  // optional .Common.TriggerPriceDirectionEnum trigger_price_direction = 9;
  if (has_trigger_price_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->trigger_price_direction(), target);
  }

  // optional .Common.TriggerPriceTypeEnum trigger_price_type = 10;
  if (has_trigger_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->trigger_price_type(), target);
  }

  // optional .Common.TriggerPriceTypeScopeEnum trigger_price_type_scope = 11;
  if (has_trigger_price_type_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->trigger_price_type_scope(), target);
  }

  // optional string trigger_security_desc = 12;
  if (has_trigger_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_desc().data(), this->trigger_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->trigger_security_desc(), target);
  }

  // optional string trigger_security_id = 13;
  if (has_trigger_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_id().data(), this->trigger_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->trigger_security_id(), target);
  }

  // optional string trigger_security_id_source = 14;
  if (has_trigger_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_security_id_source().data(), this->trigger_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->trigger_security_id_source(), target);
  }

  // optional string trigger_symbol = 15;
  if (has_trigger_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_symbol().data(), this->trigger_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->trigger_symbol(), target);
  }

  // optional string trigger_trading_session_id = 16;
  if (has_trigger_trading_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_trading_session_id().data(), this->trigger_trading_session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->trigger_trading_session_id(), target);
  }

  // optional string trigger_trading_session_sub_id = 17;
  if (has_trigger_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trigger_trading_session_sub_id().data(), this->trigger_trading_session_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->trigger_trading_session_sub_id(), target);
  }

  // optional .Common.TriggerTypeEnum trigger_type = 18;
  if (has_trigger_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->trigger_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TriggeringInstruction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TriggerActionEnum trigger_action = 1;
    if (has_trigger_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_action());
    }

    // optional sfixed64 trigger_new_price = 2;
    if (has_trigger_new_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 trigger_new_price_exponent = 3;
    if (has_trigger_new_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 trigger_new_qty = 4;
    if (has_trigger_new_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 trigger_new_qty_exponent = 5;
    if (has_trigger_new_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.TriggerOrderTypeEnum trigger_order_type = 6;
    if (has_trigger_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_order_type());
    }

    // optional sfixed64 trigger_price = 7;
    if (has_trigger_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 trigger_price_exponent = 8;
    if (has_trigger_price_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.TriggerPriceDirectionEnum trigger_price_direction = 9;
    if (has_trigger_price_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_price_direction());
    }

    // optional .Common.TriggerPriceTypeEnum trigger_price_type = 10;
    if (has_trigger_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_price_type());
    }

    // optional .Common.TriggerPriceTypeScopeEnum trigger_price_type_scope = 11;
    if (has_trigger_price_type_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_price_type_scope());
    }

    // optional string trigger_security_desc = 12;
    if (has_trigger_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_security_desc());
    }

    // optional string trigger_security_id = 13;
    if (has_trigger_security_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_security_id());
    }

    // optional string trigger_security_id_source = 14;
    if (has_trigger_security_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_security_id_source());
    }

    // optional string trigger_symbol = 15;
    if (has_trigger_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_symbol());
    }

    // optional string trigger_trading_session_id = 16;
    if (has_trigger_trading_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_trading_session_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string trigger_trading_session_sub_id = 17;
    if (has_trigger_trading_session_sub_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trigger_trading_session_sub_id());
    }

    // optional .Common.TriggerTypeEnum trigger_type = 18;
    if (has_trigger_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trigger_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TriggeringInstruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TriggeringInstruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TriggeringInstruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TriggeringInstruction::MergeFrom(const TriggeringInstruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trigger_action()) {
      set_trigger_action(from.trigger_action());
    }
    if (from.has_trigger_new_price()) {
      set_trigger_new_price(from.trigger_new_price());
    }
    if (from.has_trigger_new_price_exponent()) {
      set_trigger_new_price_exponent(from.trigger_new_price_exponent());
    }
    if (from.has_trigger_new_qty()) {
      set_trigger_new_qty(from.trigger_new_qty());
    }
    if (from.has_trigger_new_qty_exponent()) {
      set_trigger_new_qty_exponent(from.trigger_new_qty_exponent());
    }
    if (from.has_trigger_order_type()) {
      set_trigger_order_type(from.trigger_order_type());
    }
    if (from.has_trigger_price()) {
      set_trigger_price(from.trigger_price());
    }
    if (from.has_trigger_price_exponent()) {
      set_trigger_price_exponent(from.trigger_price_exponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trigger_price_direction()) {
      set_trigger_price_direction(from.trigger_price_direction());
    }
    if (from.has_trigger_price_type()) {
      set_trigger_price_type(from.trigger_price_type());
    }
    if (from.has_trigger_price_type_scope()) {
      set_trigger_price_type_scope(from.trigger_price_type_scope());
    }
    if (from.has_trigger_security_desc()) {
      set_trigger_security_desc(from.trigger_security_desc());
    }
    if (from.has_trigger_security_id()) {
      set_trigger_security_id(from.trigger_security_id());
    }
    if (from.has_trigger_security_id_source()) {
      set_trigger_security_id_source(from.trigger_security_id_source());
    }
    if (from.has_trigger_symbol()) {
      set_trigger_symbol(from.trigger_symbol());
    }
    if (from.has_trigger_trading_session_id()) {
      set_trigger_trading_session_id(from.trigger_trading_session_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_trigger_trading_session_sub_id()) {
      set_trigger_trading_session_sub_id(from.trigger_trading_session_sub_id());
    }
    if (from.has_trigger_type()) {
      set_trigger_type(from.trigger_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TriggeringInstruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggeringInstruction::CopyFrom(const TriggeringInstruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggeringInstruction::IsInitialized() const {

  return true;
}

void TriggeringInstruction::Swap(TriggeringInstruction* other) {
  if (other != this) {
    std::swap(trigger_action_, other->trigger_action_);
    std::swap(trigger_new_price_, other->trigger_new_price_);
    std::swap(trigger_new_price_exponent_, other->trigger_new_price_exponent_);
    std::swap(trigger_new_qty_, other->trigger_new_qty_);
    std::swap(trigger_new_qty_exponent_, other->trigger_new_qty_exponent_);
    std::swap(trigger_order_type_, other->trigger_order_type_);
    std::swap(trigger_price_, other->trigger_price_);
    std::swap(trigger_price_exponent_, other->trigger_price_exponent_);
    std::swap(trigger_price_direction_, other->trigger_price_direction_);
    std::swap(trigger_price_type_, other->trigger_price_type_);
    std::swap(trigger_price_type_scope_, other->trigger_price_type_scope_);
    std::swap(trigger_security_desc_, other->trigger_security_desc_);
    std::swap(trigger_security_id_, other->trigger_security_id_);
    std::swap(trigger_security_id_source_, other->trigger_security_id_source_);
    std::swap(trigger_symbol_, other->trigger_symbol_);
    std::swap(trigger_trading_session_id_, other->trigger_trading_session_id_);
    std::swap(trigger_trading_session_sub_id_, other->trigger_trading_session_sub_id_);
    std::swap(trigger_type_, other->trigger_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TriggeringInstruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TriggeringInstruction_descriptor_;
  metadata.reflection = TriggeringInstruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpreadOrBenchmarkCurveData::kBenchmarkCurveCurrencyFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkCurveNameFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkCurvePointFieldNumber;
const int SpreadOrBenchmarkCurveData::kSpreadFieldNumber;
const int SpreadOrBenchmarkCurveData::kSpreadExponentFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkPriceFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkPriceExponentFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkPriceTypeFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkSecurityIdFieldNumber;
const int SpreadOrBenchmarkCurveData::kBenchmarkSecurityIdSourceFieldNumber;
#endif  // !_MSC_VER

SpreadOrBenchmarkCurveData::SpreadOrBenchmarkCurveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpreadOrBenchmarkCurveData::InitAsDefaultInstance() {
}

SpreadOrBenchmarkCurveData::SpreadOrBenchmarkCurveData(const SpreadOrBenchmarkCurveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpreadOrBenchmarkCurveData::SharedCtor() {
  _cached_size_ = 0;
  benchmark_curve_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  benchmark_curve_name_ = 0;
  benchmark_curve_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spread_ = GOOGLE_LONGLONG(0);
  spread_exponent_ = 0;
  benchmark_price_ = GOOGLE_LONGLONG(0);
  benchmark_price_exponent_ = 0;
  benchmark_price_type_ = GOOGLE_LONGLONG(0);
  benchmark_security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  benchmark_security_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpreadOrBenchmarkCurveData::~SpreadOrBenchmarkCurveData() {
  SharedDtor();
}

void SpreadOrBenchmarkCurveData::SharedDtor() {
  if (benchmark_curve_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete benchmark_curve_currency_;
  }
  if (benchmark_curve_point_ != &::google::protobuf::internal::kEmptyString) {
    delete benchmark_curve_point_;
  }
  if (benchmark_security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete benchmark_security_id_;
  }
  if (benchmark_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete benchmark_security_id_source_;
  }
  if (this != default_instance_) {
  }
}

void SpreadOrBenchmarkCurveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpreadOrBenchmarkCurveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpreadOrBenchmarkCurveData_descriptor_;
}

const SpreadOrBenchmarkCurveData& SpreadOrBenchmarkCurveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SpreadOrBenchmarkCurveData* SpreadOrBenchmarkCurveData::default_instance_ = NULL;

SpreadOrBenchmarkCurveData* SpreadOrBenchmarkCurveData::New() const {
  return new SpreadOrBenchmarkCurveData;
}

void SpreadOrBenchmarkCurveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_benchmark_curve_currency()) {
      if (benchmark_curve_currency_ != &::google::protobuf::internal::kEmptyString) {
        benchmark_curve_currency_->clear();
      }
    }
    benchmark_curve_name_ = 0;
    if (has_benchmark_curve_point()) {
      if (benchmark_curve_point_ != &::google::protobuf::internal::kEmptyString) {
        benchmark_curve_point_->clear();
      }
    }
    spread_ = GOOGLE_LONGLONG(0);
    spread_exponent_ = 0;
    benchmark_price_ = GOOGLE_LONGLONG(0);
    benchmark_price_exponent_ = 0;
    benchmark_price_type_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_benchmark_security_id()) {
      if (benchmark_security_id_ != &::google::protobuf::internal::kEmptyString) {
        benchmark_security_id_->clear();
      }
    }
    if (has_benchmark_security_id_source()) {
      if (benchmark_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
        benchmark_security_id_source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpreadOrBenchmarkCurveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string benchmark_curve_currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_benchmark_curve_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->benchmark_curve_currency().data(), this->benchmark_curve_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_benchmark_curve_name;
        break;
      }

      // optional .Common.BenchmarkCurveNameEnum benchmark_curve_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_benchmark_curve_name:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::BenchmarkCurveNameEnum_IsValid(value)) {
            set_benchmark_curve_name(static_cast< ::Common::BenchmarkCurveNameEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_benchmark_curve_point;
        break;
      }

      // optional string benchmark_curve_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_benchmark_curve_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_benchmark_curve_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->benchmark_curve_point().data(), this->benchmark_curve_point().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_spread;
        break;
      }

      // optional sfixed64 spread = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_spread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &spread_)));
          set_has_spread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_spread_exponent;
        break;
      }

      // optional sfixed32 spread_exponent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spread_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &spread_exponent_)));
          set_has_spread_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_benchmark_price;
        break;
      }

      // optional sfixed64 benchmark_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_benchmark_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &benchmark_price_)));
          set_has_benchmark_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_benchmark_price_exponent;
        break;
      }

      // optional sfixed32 benchmark_price_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_benchmark_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &benchmark_price_exponent_)));
          set_has_benchmark_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_benchmark_price_type;
        break;
      }

      // optional sfixed64 benchmark_price_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_benchmark_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &benchmark_price_type_)));
          set_has_benchmark_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_benchmark_security_id;
        break;
      }

      // optional string benchmark_security_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_benchmark_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_benchmark_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->benchmark_security_id().data(), this->benchmark_security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_benchmark_security_id_source;
        break;
      }

      // optional string benchmark_security_id_source = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_benchmark_security_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_benchmark_security_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->benchmark_security_id_source().data(), this->benchmark_security_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpreadOrBenchmarkCurveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string benchmark_curve_currency = 1;
  if (has_benchmark_curve_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_curve_currency().data(), this->benchmark_curve_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->benchmark_curve_currency(), output);
  }

  // optional .Common.BenchmarkCurveNameEnum benchmark_curve_name = 2;
  if (has_benchmark_curve_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->benchmark_curve_name(), output);
  }

  // optional string benchmark_curve_point = 3;
  if (has_benchmark_curve_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_curve_point().data(), this->benchmark_curve_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->benchmark_curve_point(), output);
  }

  // optional sfixed64 spread = 4;
  if (has_spread()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->spread(), output);
  }

  // optional sfixed32 spread_exponent = 5;
  if (has_spread_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->spread_exponent(), output);
  }

  // optional sfixed64 benchmark_price = 6;
  if (has_benchmark_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->benchmark_price(), output);
  }

  // optional sfixed32 benchmark_price_exponent = 7;
  if (has_benchmark_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->benchmark_price_exponent(), output);
  }

  // optional sfixed64 benchmark_price_type = 8;
  if (has_benchmark_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->benchmark_price_type(), output);
  }

  // optional string benchmark_security_id = 9;
  if (has_benchmark_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_security_id().data(), this->benchmark_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->benchmark_security_id(), output);
  }

  // optional string benchmark_security_id_source = 10;
  if (has_benchmark_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_security_id_source().data(), this->benchmark_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->benchmark_security_id_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpreadOrBenchmarkCurveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string benchmark_curve_currency = 1;
  if (has_benchmark_curve_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_curve_currency().data(), this->benchmark_curve_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->benchmark_curve_currency(), target);
  }

  // optional .Common.BenchmarkCurveNameEnum benchmark_curve_name = 2;
  if (has_benchmark_curve_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->benchmark_curve_name(), target);
  }

  // optional string benchmark_curve_point = 3;
  if (has_benchmark_curve_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_curve_point().data(), this->benchmark_curve_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->benchmark_curve_point(), target);
  }

  // optional sfixed64 spread = 4;
  if (has_spread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->spread(), target);
  }

  // optional sfixed32 spread_exponent = 5;
  if (has_spread_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->spread_exponent(), target);
  }

  // optional sfixed64 benchmark_price = 6;
  if (has_benchmark_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->benchmark_price(), target);
  }

  // optional sfixed32 benchmark_price_exponent = 7;
  if (has_benchmark_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->benchmark_price_exponent(), target);
  }

  // optional sfixed64 benchmark_price_type = 8;
  if (has_benchmark_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->benchmark_price_type(), target);
  }

  // optional string benchmark_security_id = 9;
  if (has_benchmark_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_security_id().data(), this->benchmark_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->benchmark_security_id(), target);
  }

  // optional string benchmark_security_id_source = 10;
  if (has_benchmark_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->benchmark_security_id_source().data(), this->benchmark_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->benchmark_security_id_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpreadOrBenchmarkCurveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string benchmark_curve_currency = 1;
    if (has_benchmark_curve_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->benchmark_curve_currency());
    }

    // optional .Common.BenchmarkCurveNameEnum benchmark_curve_name = 2;
    if (has_benchmark_curve_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->benchmark_curve_name());
    }

    // optional string benchmark_curve_point = 3;
    if (has_benchmark_curve_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->benchmark_curve_point());
    }

    // optional sfixed64 spread = 4;
    if (has_spread()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 spread_exponent = 5;
    if (has_spread_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 benchmark_price = 6;
    if (has_benchmark_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 benchmark_price_exponent = 7;
    if (has_benchmark_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 benchmark_price_type = 8;
    if (has_benchmark_price_type()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string benchmark_security_id = 9;
    if (has_benchmark_security_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->benchmark_security_id());
    }

    // optional string benchmark_security_id_source = 10;
    if (has_benchmark_security_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->benchmark_security_id_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpreadOrBenchmarkCurveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpreadOrBenchmarkCurveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpreadOrBenchmarkCurveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpreadOrBenchmarkCurveData::MergeFrom(const SpreadOrBenchmarkCurveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_benchmark_curve_currency()) {
      set_benchmark_curve_currency(from.benchmark_curve_currency());
    }
    if (from.has_benchmark_curve_name()) {
      set_benchmark_curve_name(from.benchmark_curve_name());
    }
    if (from.has_benchmark_curve_point()) {
      set_benchmark_curve_point(from.benchmark_curve_point());
    }
    if (from.has_spread()) {
      set_spread(from.spread());
    }
    if (from.has_spread_exponent()) {
      set_spread_exponent(from.spread_exponent());
    }
    if (from.has_benchmark_price()) {
      set_benchmark_price(from.benchmark_price());
    }
    if (from.has_benchmark_price_exponent()) {
      set_benchmark_price_exponent(from.benchmark_price_exponent());
    }
    if (from.has_benchmark_price_type()) {
      set_benchmark_price_type(from.benchmark_price_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_benchmark_security_id()) {
      set_benchmark_security_id(from.benchmark_security_id());
    }
    if (from.has_benchmark_security_id_source()) {
      set_benchmark_security_id_source(from.benchmark_security_id_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpreadOrBenchmarkCurveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpreadOrBenchmarkCurveData::CopyFrom(const SpreadOrBenchmarkCurveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpreadOrBenchmarkCurveData::IsInitialized() const {

  return true;
}

void SpreadOrBenchmarkCurveData::Swap(SpreadOrBenchmarkCurveData* other) {
  if (other != this) {
    std::swap(benchmark_curve_currency_, other->benchmark_curve_currency_);
    std::swap(benchmark_curve_name_, other->benchmark_curve_name_);
    std::swap(benchmark_curve_point_, other->benchmark_curve_point_);
    std::swap(spread_, other->spread_);
    std::swap(spread_exponent_, other->spread_exponent_);
    std::swap(benchmark_price_, other->benchmark_price_);
    std::swap(benchmark_price_exponent_, other->benchmark_price_exponent_);
    std::swap(benchmark_price_type_, other->benchmark_price_type_);
    std::swap(benchmark_security_id_, other->benchmark_security_id_);
    std::swap(benchmark_security_id_source_, other->benchmark_security_id_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpreadOrBenchmarkCurveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpreadOrBenchmarkCurveData_descriptor_;
  metadata.reflection = SpreadOrBenchmarkCurveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YieldData::kYieldFieldNumber;
const int YieldData::kYieldExponentFieldNumber;
const int YieldData::kYieldTypeFieldNumber;
const int YieldData::kYieldCalcDateFieldNumber;
const int YieldData::kYieldRedemptionDateFieldNumber;
const int YieldData::kYieldRedemptionPriceFieldNumber;
const int YieldData::kYieldRedemptionPriceExponentFieldNumber;
const int YieldData::kYieldRedemptionPriceTypeFieldNumber;
#endif  // !_MSC_VER

YieldData::YieldData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YieldData::InitAsDefaultInstance() {
}

YieldData::YieldData(const YieldData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YieldData::SharedCtor() {
  _cached_size_ = 0;
  yield_ = GOOGLE_LONGLONG(0);
  yield_exponent_ = 0;
  yield_type_ = 0;
  yield_calc_date_ = 0;
  yield_redemption_date_ = 0;
  yield_redemption_price_ = GOOGLE_LONGLONG(0);
  yield_redemption_price_exponent_ = 0;
  yield_redemption_price_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YieldData::~YieldData() {
  SharedDtor();
}

void YieldData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YieldData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YieldData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YieldData_descriptor_;
}

const YieldData& YieldData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

YieldData* YieldData::default_instance_ = NULL;

YieldData* YieldData::New() const {
  return new YieldData;
}

void YieldData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    yield_ = GOOGLE_LONGLONG(0);
    yield_exponent_ = 0;
    yield_type_ = 0;
    yield_calc_date_ = 0;
    yield_redemption_date_ = 0;
    yield_redemption_price_ = GOOGLE_LONGLONG(0);
    yield_redemption_price_exponent_ = 0;
    yield_redemption_price_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YieldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 yield = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &yield_)));
          set_has_yield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_yield_exponent;
        break;
      }

      // optional sfixed32 yield_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yield_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &yield_exponent_)));
          set_has_yield_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_yield_type;
        break;
      }

      // optional .Common.YieldTypeEnum yield_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yield_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::YieldTypeEnum_IsValid(value)) {
            set_yield_type(static_cast< ::Common::YieldTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yield_calc_date;
        break;
      }

      // optional sfixed32 yield_calc_date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yield_calc_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &yield_calc_date_)));
          set_has_yield_calc_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_yield_redemption_date;
        break;
      }

      // optional sfixed32 yield_redemption_date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yield_redemption_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &yield_redemption_date_)));
          set_has_yield_redemption_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_yield_redemption_price;
        break;
      }

      // optional sfixed64 yield_redemption_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yield_redemption_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &yield_redemption_price_)));
          set_has_yield_redemption_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_yield_redemption_price_exponent;
        break;
      }

      // optional sfixed32 yield_redemption_price_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yield_redemption_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &yield_redemption_price_exponent_)));
          set_has_yield_redemption_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_yield_redemption_price_type;
        break;
      }

      // optional sfixed64 yield_redemption_price_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yield_redemption_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &yield_redemption_price_type_)));
          set_has_yield_redemption_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YieldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 yield = 1;
  if (has_yield()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->yield(), output);
  }

  // optional sfixed32 yield_exponent = 2;
  if (has_yield_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->yield_exponent(), output);
  }

  // optional .Common.YieldTypeEnum yield_type = 3;
  if (has_yield_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->yield_type(), output);
  }

  // optional sfixed32 yield_calc_date = 4;
  if (has_yield_calc_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->yield_calc_date(), output);
  }

  // optional sfixed32 yield_redemption_date = 5;
  if (has_yield_redemption_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->yield_redemption_date(), output);
  }

  // optional sfixed64 yield_redemption_price = 6;
  if (has_yield_redemption_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->yield_redemption_price(), output);
  }

  // optional sfixed32 yield_redemption_price_exponent = 7;
  if (has_yield_redemption_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->yield_redemption_price_exponent(), output);
  }

  // optional sfixed64 yield_redemption_price_type = 8;
  if (has_yield_redemption_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->yield_redemption_price_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YieldData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 yield = 1;
  if (has_yield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->yield(), target);
  }

  // optional sfixed32 yield_exponent = 2;
  if (has_yield_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->yield_exponent(), target);
  }

  // optional .Common.YieldTypeEnum yield_type = 3;
  if (has_yield_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->yield_type(), target);
  }

  // optional sfixed32 yield_calc_date = 4;
  if (has_yield_calc_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->yield_calc_date(), target);
  }

  // optional sfixed32 yield_redemption_date = 5;
  if (has_yield_redemption_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->yield_redemption_date(), target);
  }

  // optional sfixed64 yield_redemption_price = 6;
  if (has_yield_redemption_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->yield_redemption_price(), target);
  }

  // optional sfixed32 yield_redemption_price_exponent = 7;
  if (has_yield_redemption_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->yield_redemption_price_exponent(), target);
  }

  // optional sfixed64 yield_redemption_price_type = 8;
  if (has_yield_redemption_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->yield_redemption_price_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YieldData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 yield = 1;
    if (has_yield()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 yield_exponent = 2;
    if (has_yield_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.YieldTypeEnum yield_type = 3;
    if (has_yield_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->yield_type());
    }

    // optional sfixed32 yield_calc_date = 4;
    if (has_yield_calc_date()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 yield_redemption_date = 5;
    if (has_yield_redemption_date()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 yield_redemption_price = 6;
    if (has_yield_redemption_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 yield_redemption_price_exponent = 7;
    if (has_yield_redemption_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 yield_redemption_price_type = 8;
    if (has_yield_redemption_price_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YieldData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YieldData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YieldData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YieldData::MergeFrom(const YieldData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_yield()) {
      set_yield(from.yield());
    }
    if (from.has_yield_exponent()) {
      set_yield_exponent(from.yield_exponent());
    }
    if (from.has_yield_type()) {
      set_yield_type(from.yield_type());
    }
    if (from.has_yield_calc_date()) {
      set_yield_calc_date(from.yield_calc_date());
    }
    if (from.has_yield_redemption_date()) {
      set_yield_redemption_date(from.yield_redemption_date());
    }
    if (from.has_yield_redemption_price()) {
      set_yield_redemption_price(from.yield_redemption_price());
    }
    if (from.has_yield_redemption_price_exponent()) {
      set_yield_redemption_price_exponent(from.yield_redemption_price_exponent());
    }
    if (from.has_yield_redemption_price_type()) {
      set_yield_redemption_price_type(from.yield_redemption_price_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YieldData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YieldData::CopyFrom(const YieldData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YieldData::IsInitialized() const {

  return true;
}

void YieldData::Swap(YieldData* other) {
  if (other != this) {
    std::swap(yield_, other->yield_);
    std::swap(yield_exponent_, other->yield_exponent_);
    std::swap(yield_type_, other->yield_type_);
    std::swap(yield_calc_date_, other->yield_calc_date_);
    std::swap(yield_redemption_date_, other->yield_redemption_date_);
    std::swap(yield_redemption_price_, other->yield_redemption_price_);
    std::swap(yield_redemption_price_exponent_, other->yield_redemption_price_exponent_);
    std::swap(yield_redemption_price_type_, other->yield_redemption_price_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YieldData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YieldData_descriptor_;
  metadata.reflection = YieldData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommissionData::kCommCurrencyFieldNumber;
const int CommissionData::kCommTypeFieldNumber;
const int CommissionData::kCommissionFieldNumber;
const int CommissionData::kCommissionExponentFieldNumber;
const int CommissionData::kFundRenewWaivFieldNumber;
#endif  // !_MSC_VER

CommissionData::CommissionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommissionData::InitAsDefaultInstance() {
}

CommissionData::CommissionData(const CommissionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommissionData::SharedCtor() {
  _cached_size_ = 0;
  comm_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comm_type_ = 0;
  commission_ = GOOGLE_LONGLONG(0);
  commission_exponent_ = 0;
  fund_renew_waiv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommissionData::~CommissionData() {
  SharedDtor();
}

void CommissionData::SharedDtor() {
  if (comm_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete comm_currency_;
  }
  if (this != default_instance_) {
  }
}

void CommissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommissionData_descriptor_;
}

const CommissionData& CommissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

CommissionData* CommissionData::default_instance_ = NULL;

CommissionData* CommissionData::New() const {
  return new CommissionData;
}

void CommissionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comm_currency()) {
      if (comm_currency_ != &::google::protobuf::internal::kEmptyString) {
        comm_currency_->clear();
      }
    }
    comm_type_ = 0;
    commission_ = GOOGLE_LONGLONG(0);
    commission_exponent_ = 0;
    fund_renew_waiv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string comm_currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comm_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comm_currency().data(), this->comm_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comm_type;
        break;
      }

      // optional .Common.CommTypeEnum comm_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comm_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::CommTypeEnum_IsValid(value)) {
            set_comm_type(static_cast< ::Common::CommTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_commission;
        break;
      }

      // optional sfixed64 commission = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &commission_)));
          set_has_commission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_commission_exponent;
        break;
      }

      // optional sfixed32 commission_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_commission_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &commission_exponent_)));
          set_has_commission_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fund_renew_waiv;
        break;
      }

      // optional .Common.FundRenewWaivEnum fund_renew_waiv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fund_renew_waiv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::FundRenewWaivEnum_IsValid(value)) {
            set_fund_renew_waiv(static_cast< ::Common::FundRenewWaivEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string comm_currency = 1;
  if (has_comm_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm_currency().data(), this->comm_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->comm_currency(), output);
  }

  // optional .Common.CommTypeEnum comm_type = 2;
  if (has_comm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->comm_type(), output);
  }

  // optional sfixed64 commission = 3;
  if (has_commission()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->commission(), output);
  }

  // optional sfixed32 commission_exponent = 4;
  if (has_commission_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->commission_exponent(), output);
  }

  // optional .Common.FundRenewWaivEnum fund_renew_waiv = 5;
  if (has_fund_renew_waiv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->fund_renew_waiv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string comm_currency = 1;
  if (has_comm_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comm_currency().data(), this->comm_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->comm_currency(), target);
  }

  // optional .Common.CommTypeEnum comm_type = 2;
  if (has_comm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->comm_type(), target);
  }

  // optional sfixed64 commission = 3;
  if (has_commission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->commission(), target);
  }

  // optional sfixed32 commission_exponent = 4;
  if (has_commission_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->commission_exponent(), target);
  }

  // optional .Common.FundRenewWaivEnum fund_renew_waiv = 5;
  if (has_fund_renew_waiv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->fund_renew_waiv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommissionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string comm_currency = 1;
    if (has_comm_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comm_currency());
    }

    // optional .Common.CommTypeEnum comm_type = 2;
    if (has_comm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->comm_type());
    }

    // optional sfixed64 commission = 3;
    if (has_commission()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 commission_exponent = 4;
    if (has_commission_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.FundRenewWaivEnum fund_renew_waiv = 5;
    if (has_fund_renew_waiv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fund_renew_waiv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommissionData::MergeFrom(const CommissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm_currency()) {
      set_comm_currency(from.comm_currency());
    }
    if (from.has_comm_type()) {
      set_comm_type(from.comm_type());
    }
    if (from.has_commission()) {
      set_commission(from.commission());
    }
    if (from.has_commission_exponent()) {
      set_commission_exponent(from.commission_exponent());
    }
    if (from.has_fund_renew_waiv()) {
      set_fund_renew_waiv(from.fund_renew_waiv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommissionData::CopyFrom(const CommissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommissionData::IsInitialized() const {

  return true;
}

void CommissionData::Swap(CommissionData* other) {
  if (other != this) {
    std::swap(comm_currency_, other->comm_currency_);
    std::swap(comm_type_, other->comm_type_);
    std::swap(commission_, other->commission_);
    std::swap(commission_exponent_, other->commission_exponent_);
    std::swap(fund_renew_waiv_, other->fund_renew_waiv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommissionData_descriptor_;
  metadata.reflection = CommissionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PegInstructions::kPegLimitTypeFieldNumber;
const int PegInstructions::kPegMoveTypeFieldNumber;
const int PegInstructions::kPegOffsetTypeFieldNumber;
const int PegInstructions::kPegOffsetValueFieldNumber;
const int PegInstructions::kPegPriceTypeFieldNumber;
const int PegInstructions::kPegRoundDirectionFieldNumber;
const int PegInstructions::kPegScopeFieldNumber;
const int PegInstructions::kPegSecurityDescFieldNumber;
const int PegInstructions::kPegSecurityIdFieldNumber;
const int PegInstructions::kPegSecurityIdSourceFieldNumber;
const int PegInstructions::kPegSymbolFieldNumber;
#endif  // !_MSC_VER

PegInstructions::PegInstructions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PegInstructions::InitAsDefaultInstance() {
}

PegInstructions::PegInstructions(const PegInstructions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PegInstructions::SharedCtor() {
  _cached_size_ = 0;
  peg_limit_type_ = 0;
  peg_move_type_ = 0;
  peg_offset_type_ = 0;
  peg_offset_value_ = 0;
  peg_price_type_ = 0;
  peg_round_direction_ = 0;
  peg_scope_ = 0;
  peg_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peg_security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peg_security_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peg_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PegInstructions::~PegInstructions() {
  SharedDtor();
}

void PegInstructions::SharedDtor() {
  if (peg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete peg_security_desc_;
  }
  if (peg_security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete peg_security_id_;
  }
  if (peg_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete peg_security_id_source_;
  }
  if (peg_symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete peg_symbol_;
  }
  if (this != default_instance_) {
  }
}

void PegInstructions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PegInstructions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PegInstructions_descriptor_;
}

const PegInstructions& PegInstructions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PegInstructions* PegInstructions::default_instance_ = NULL;

PegInstructions* PegInstructions::New() const {
  return new PegInstructions;
}

void PegInstructions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peg_limit_type_ = 0;
    peg_move_type_ = 0;
    peg_offset_type_ = 0;
    peg_offset_value_ = 0;
    peg_price_type_ = 0;
    peg_round_direction_ = 0;
    peg_scope_ = 0;
    if (has_peg_security_desc()) {
      if (peg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        peg_security_desc_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_peg_security_id()) {
      if (peg_security_id_ != &::google::protobuf::internal::kEmptyString) {
        peg_security_id_->clear();
      }
    }
    if (has_peg_security_id_source()) {
      if (peg_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
        peg_security_id_source_->clear();
      }
    }
    if (has_peg_symbol()) {
      if (peg_symbol_ != &::google::protobuf::internal::kEmptyString) {
        peg_symbol_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PegInstructions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.PegLimitTypeEnum peg_limit_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegLimitTypeEnum_IsValid(value)) {
            set_peg_limit_type(static_cast< ::Common::PegLimitTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_peg_move_type;
        break;
      }

      // optional .Common.PegMoveTypeEnum peg_move_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peg_move_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegMoveTypeEnum_IsValid(value)) {
            set_peg_move_type(static_cast< ::Common::PegMoveTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_peg_offset_type;
        break;
      }

      // optional .Common.PegOffsetTypeEnum peg_offset_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peg_offset_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegOffsetTypeEnum_IsValid(value)) {
            set_peg_offset_type(static_cast< ::Common::PegOffsetTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_peg_offset_value;
        break;
      }

      // optional double peg_offset_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_peg_offset_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &peg_offset_value_)));
          set_has_peg_offset_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_peg_price_type;
        break;
      }

      // optional .Common.PegPriceTypeEnum peg_price_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peg_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegPriceTypeEnum_IsValid(value)) {
            set_peg_price_type(static_cast< ::Common::PegPriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_peg_round_direction;
        break;
      }

      // optional .Common.PegRoundDirectionEnum peg_round_direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peg_round_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegRoundDirectionEnum_IsValid(value)) {
            set_peg_round_direction(static_cast< ::Common::PegRoundDirectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_peg_scope;
        break;
      }

      // optional .Common.PegScopeEnum peg_scope = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peg_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PegScopeEnum_IsValid(value)) {
            set_peg_scope(static_cast< ::Common::PegScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_peg_security_desc;
        break;
      }

      // optional string peg_security_desc = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peg_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peg_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peg_security_desc().data(), this->peg_security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_peg_security_id;
        break;
      }

      // optional string peg_security_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peg_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peg_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peg_security_id().data(), this->peg_security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_peg_security_id_source;
        break;
      }

      // optional string peg_security_id_source = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peg_security_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peg_security_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peg_security_id_source().data(), this->peg_security_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_peg_symbol;
        break;
      }

      // optional string peg_symbol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peg_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peg_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peg_symbol().data(), this->peg_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PegInstructions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.PegLimitTypeEnum peg_limit_type = 1;
  if (has_peg_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->peg_limit_type(), output);
  }

  // optional .Common.PegMoveTypeEnum peg_move_type = 2;
  if (has_peg_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->peg_move_type(), output);
  }

  // optional .Common.PegOffsetTypeEnum peg_offset_type = 3;
  if (has_peg_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->peg_offset_type(), output);
  }

  // optional double peg_offset_value = 4;
  if (has_peg_offset_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->peg_offset_value(), output);
  }

  // optional .Common.PegPriceTypeEnum peg_price_type = 5;
  if (has_peg_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->peg_price_type(), output);
  }

  // optional .Common.PegRoundDirectionEnum peg_round_direction = 6;
  if (has_peg_round_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->peg_round_direction(), output);
  }

  // optional .Common.PegScopeEnum peg_scope = 7;
  if (has_peg_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->peg_scope(), output);
  }

  // optional string peg_security_desc = 8;
  if (has_peg_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_desc().data(), this->peg_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->peg_security_desc(), output);
  }

  // optional string peg_security_id = 9;
  if (has_peg_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_id().data(), this->peg_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->peg_security_id(), output);
  }

  // optional string peg_security_id_source = 10;
  if (has_peg_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_id_source().data(), this->peg_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->peg_security_id_source(), output);
  }

  // optional string peg_symbol = 11;
  if (has_peg_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_symbol().data(), this->peg_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->peg_symbol(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PegInstructions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.PegLimitTypeEnum peg_limit_type = 1;
  if (has_peg_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->peg_limit_type(), target);
  }

  // optional .Common.PegMoveTypeEnum peg_move_type = 2;
  if (has_peg_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->peg_move_type(), target);
  }

  // optional .Common.PegOffsetTypeEnum peg_offset_type = 3;
  if (has_peg_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->peg_offset_type(), target);
  }

  // optional double peg_offset_value = 4;
  if (has_peg_offset_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->peg_offset_value(), target);
  }

  // optional .Common.PegPriceTypeEnum peg_price_type = 5;
  if (has_peg_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->peg_price_type(), target);
  }

  // optional .Common.PegRoundDirectionEnum peg_round_direction = 6;
  if (has_peg_round_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->peg_round_direction(), target);
  }

  // optional .Common.PegScopeEnum peg_scope = 7;
  if (has_peg_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->peg_scope(), target);
  }

  // optional string peg_security_desc = 8;
  if (has_peg_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_desc().data(), this->peg_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->peg_security_desc(), target);
  }

  // optional string peg_security_id = 9;
  if (has_peg_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_id().data(), this->peg_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->peg_security_id(), target);
  }

  // optional string peg_security_id_source = 10;
  if (has_peg_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_security_id_source().data(), this->peg_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->peg_security_id_source(), target);
  }

  // optional string peg_symbol = 11;
  if (has_peg_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peg_symbol().data(), this->peg_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->peg_symbol(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PegInstructions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.PegLimitTypeEnum peg_limit_type = 1;
    if (has_peg_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_limit_type());
    }

    // optional .Common.PegMoveTypeEnum peg_move_type = 2;
    if (has_peg_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_move_type());
    }

    // optional .Common.PegOffsetTypeEnum peg_offset_type = 3;
    if (has_peg_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_offset_type());
    }

    // optional double peg_offset_value = 4;
    if (has_peg_offset_value()) {
      total_size += 1 + 8;
    }

    // optional .Common.PegPriceTypeEnum peg_price_type = 5;
    if (has_peg_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_price_type());
    }

    // optional .Common.PegRoundDirectionEnum peg_round_direction = 6;
    if (has_peg_round_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_round_direction());
    }

    // optional .Common.PegScopeEnum peg_scope = 7;
    if (has_peg_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->peg_scope());
    }

    // optional string peg_security_desc = 8;
    if (has_peg_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peg_security_desc());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string peg_security_id = 9;
    if (has_peg_security_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peg_security_id());
    }

    // optional string peg_security_id_source = 10;
    if (has_peg_security_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peg_security_id_source());
    }

    // optional string peg_symbol = 11;
    if (has_peg_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peg_symbol());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PegInstructions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PegInstructions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PegInstructions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PegInstructions::MergeFrom(const PegInstructions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peg_limit_type()) {
      set_peg_limit_type(from.peg_limit_type());
    }
    if (from.has_peg_move_type()) {
      set_peg_move_type(from.peg_move_type());
    }
    if (from.has_peg_offset_type()) {
      set_peg_offset_type(from.peg_offset_type());
    }
    if (from.has_peg_offset_value()) {
      set_peg_offset_value(from.peg_offset_value());
    }
    if (from.has_peg_price_type()) {
      set_peg_price_type(from.peg_price_type());
    }
    if (from.has_peg_round_direction()) {
      set_peg_round_direction(from.peg_round_direction());
    }
    if (from.has_peg_scope()) {
      set_peg_scope(from.peg_scope());
    }
    if (from.has_peg_security_desc()) {
      set_peg_security_desc(from.peg_security_desc());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_peg_security_id()) {
      set_peg_security_id(from.peg_security_id());
    }
    if (from.has_peg_security_id_source()) {
      set_peg_security_id_source(from.peg_security_id_source());
    }
    if (from.has_peg_symbol()) {
      set_peg_symbol(from.peg_symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PegInstructions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PegInstructions::CopyFrom(const PegInstructions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PegInstructions::IsInitialized() const {

  return true;
}

void PegInstructions::Swap(PegInstructions* other) {
  if (other != this) {
    std::swap(peg_limit_type_, other->peg_limit_type_);
    std::swap(peg_move_type_, other->peg_move_type_);
    std::swap(peg_offset_type_, other->peg_offset_type_);
    std::swap(peg_offset_value_, other->peg_offset_value_);
    std::swap(peg_price_type_, other->peg_price_type_);
    std::swap(peg_round_direction_, other->peg_round_direction_);
    std::swap(peg_scope_, other->peg_scope_);
    std::swap(peg_security_desc_, other->peg_security_desc_);
    std::swap(peg_security_id_, other->peg_security_id_);
    std::swap(peg_security_id_source_, other->peg_security_id_source_);
    std::swap(peg_symbol_, other->peg_symbol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PegInstructions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PegInstructions_descriptor_;
  metadata.reflection = PegInstructions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscretionInstructions::kDiscretionInstFieldNumber;
const int DiscretionInstructions::kDiscretionLimitTypeFieldNumber;
const int DiscretionInstructions::kDiscretionMoveTypeFieldNumber;
const int DiscretionInstructions::kDiscretionOffsetTypeFieldNumber;
const int DiscretionInstructions::kDiscretionOffsetValueFieldNumber;
const int DiscretionInstructions::kDiscretionRoundDirectionFieldNumber;
const int DiscretionInstructions::kDiscretionScopeFieldNumber;
#endif  // !_MSC_VER

DiscretionInstructions::DiscretionInstructions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscretionInstructions::InitAsDefaultInstance() {
}

DiscretionInstructions::DiscretionInstructions(const DiscretionInstructions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscretionInstructions::SharedCtor() {
  _cached_size_ = 0;
  discretion_inst_ = 0;
  discretion_limit_type_ = 0;
  discretion_move_type_ = 0;
  discretion_offset_type_ = 0;
  discretion_offset_value_ = 0;
  discretion_round_direction_ = 0;
  discretion_scope_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscretionInstructions::~DiscretionInstructions() {
  SharedDtor();
}

void DiscretionInstructions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscretionInstructions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscretionInstructions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscretionInstructions_descriptor_;
}

const DiscretionInstructions& DiscretionInstructions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

DiscretionInstructions* DiscretionInstructions::default_instance_ = NULL;

DiscretionInstructions* DiscretionInstructions::New() const {
  return new DiscretionInstructions;
}

void DiscretionInstructions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    discretion_inst_ = 0;
    discretion_limit_type_ = 0;
    discretion_move_type_ = 0;
    discretion_offset_type_ = 0;
    discretion_offset_value_ = 0;
    discretion_round_direction_ = 0;
    discretion_scope_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscretionInstructions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.DiscretionInstEnum discretion_inst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionInstEnum_IsValid(value)) {
            set_discretion_inst(static_cast< ::Common::DiscretionInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discretion_limit_type;
        break;
      }

      // optional .Common.DiscretionLimitTypeEnum discretion_limit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discretion_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionLimitTypeEnum_IsValid(value)) {
            set_discretion_limit_type(static_cast< ::Common::DiscretionLimitTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_discretion_move_type;
        break;
      }

      // optional .Common.DiscretionMoveTypeEnum discretion_move_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discretion_move_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionMoveTypeEnum_IsValid(value)) {
            set_discretion_move_type(static_cast< ::Common::DiscretionMoveTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discretion_offset_type;
        break;
      }

      // optional .Common.DiscretionOffsetTypeEnum discretion_offset_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discretion_offset_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionOffsetTypeEnum_IsValid(value)) {
            set_discretion_offset_type(static_cast< ::Common::DiscretionOffsetTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_discretion_offset_value;
        break;
      }

      // optional double discretion_offset_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_discretion_offset_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &discretion_offset_value_)));
          set_has_discretion_offset_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_discretion_round_direction;
        break;
      }

      // optional .Common.DiscretionRoundDirectionEnum discretion_round_direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discretion_round_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionRoundDirectionEnum_IsValid(value)) {
            set_discretion_round_direction(static_cast< ::Common::DiscretionRoundDirectionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_discretion_scope;
        break;
      }

      // optional .Common.DiscretionScopeEnum discretion_scope = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discretion_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DiscretionScopeEnum_IsValid(value)) {
            set_discretion_scope(static_cast< ::Common::DiscretionScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscretionInstructions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.DiscretionInstEnum discretion_inst = 1;
  if (has_discretion_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->discretion_inst(), output);
  }

  // optional .Common.DiscretionLimitTypeEnum discretion_limit_type = 2;
  if (has_discretion_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->discretion_limit_type(), output);
  }

  // optional .Common.DiscretionMoveTypeEnum discretion_move_type = 3;
  if (has_discretion_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->discretion_move_type(), output);
  }

  // optional .Common.DiscretionOffsetTypeEnum discretion_offset_type = 4;
  if (has_discretion_offset_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->discretion_offset_type(), output);
  }

  // optional double discretion_offset_value = 5;
  if (has_discretion_offset_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->discretion_offset_value(), output);
  }

  // optional .Common.DiscretionRoundDirectionEnum discretion_round_direction = 6;
  if (has_discretion_round_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->discretion_round_direction(), output);
  }

  // optional .Common.DiscretionScopeEnum discretion_scope = 7;
  if (has_discretion_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->discretion_scope(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscretionInstructions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.DiscretionInstEnum discretion_inst = 1;
  if (has_discretion_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->discretion_inst(), target);
  }

  // optional .Common.DiscretionLimitTypeEnum discretion_limit_type = 2;
  if (has_discretion_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->discretion_limit_type(), target);
  }

  // optional .Common.DiscretionMoveTypeEnum discretion_move_type = 3;
  if (has_discretion_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->discretion_move_type(), target);
  }

  // optional .Common.DiscretionOffsetTypeEnum discretion_offset_type = 4;
  if (has_discretion_offset_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->discretion_offset_type(), target);
  }

  // optional double discretion_offset_value = 5;
  if (has_discretion_offset_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->discretion_offset_value(), target);
  }

  // optional .Common.DiscretionRoundDirectionEnum discretion_round_direction = 6;
  if (has_discretion_round_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->discretion_round_direction(), target);
  }

  // optional .Common.DiscretionScopeEnum discretion_scope = 7;
  if (has_discretion_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->discretion_scope(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscretionInstructions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.DiscretionInstEnum discretion_inst = 1;
    if (has_discretion_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_inst());
    }

    // optional .Common.DiscretionLimitTypeEnum discretion_limit_type = 2;
    if (has_discretion_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_limit_type());
    }

    // optional .Common.DiscretionMoveTypeEnum discretion_move_type = 3;
    if (has_discretion_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_move_type());
    }

    // optional .Common.DiscretionOffsetTypeEnum discretion_offset_type = 4;
    if (has_discretion_offset_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_offset_type());
    }

    // optional double discretion_offset_value = 5;
    if (has_discretion_offset_value()) {
      total_size += 1 + 8;
    }

    // optional .Common.DiscretionRoundDirectionEnum discretion_round_direction = 6;
    if (has_discretion_round_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_round_direction());
    }

    // optional .Common.DiscretionScopeEnum discretion_scope = 7;
    if (has_discretion_scope()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->discretion_scope());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscretionInstructions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscretionInstructions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscretionInstructions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscretionInstructions::MergeFrom(const DiscretionInstructions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_discretion_inst()) {
      set_discretion_inst(from.discretion_inst());
    }
    if (from.has_discretion_limit_type()) {
      set_discretion_limit_type(from.discretion_limit_type());
    }
    if (from.has_discretion_move_type()) {
      set_discretion_move_type(from.discretion_move_type());
    }
    if (from.has_discretion_offset_type()) {
      set_discretion_offset_type(from.discretion_offset_type());
    }
    if (from.has_discretion_offset_value()) {
      set_discretion_offset_value(from.discretion_offset_value());
    }
    if (from.has_discretion_round_direction()) {
      set_discretion_round_direction(from.discretion_round_direction());
    }
    if (from.has_discretion_scope()) {
      set_discretion_scope(from.discretion_scope());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscretionInstructions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscretionInstructions::CopyFrom(const DiscretionInstructions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscretionInstructions::IsInitialized() const {

  return true;
}

void DiscretionInstructions::Swap(DiscretionInstructions* other) {
  if (other != this) {
    std::swap(discretion_inst_, other->discretion_inst_);
    std::swap(discretion_limit_type_, other->discretion_limit_type_);
    std::swap(discretion_move_type_, other->discretion_move_type_);
    std::swap(discretion_offset_type_, other->discretion_offset_type_);
    std::swap(discretion_offset_value_, other->discretion_offset_value_);
    std::swap(discretion_round_direction_, other->discretion_round_direction_);
    std::swap(discretion_scope_, other->discretion_scope_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscretionInstructions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscretionInstructions_descriptor_;
  metadata.reflection = DiscretionInstructions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrategyParametersGrp::kStrategyParameterNameFieldNumber;
const int StrategyParametersGrp::kStrategyParameterTypeFieldNumber;
const int StrategyParametersGrp::kStrategyParameterValueFieldNumber;
#endif  // !_MSC_VER

StrategyParametersGrp::StrategyParametersGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrategyParametersGrp::InitAsDefaultInstance() {
}

StrategyParametersGrp::StrategyParametersGrp(const StrategyParametersGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrategyParametersGrp::SharedCtor() {
  _cached_size_ = 0;
  strategy_parameter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_parameter_type_ = 0;
  strategy_parameter_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrategyParametersGrp::~StrategyParametersGrp() {
  SharedDtor();
}

void StrategyParametersGrp::SharedDtor() {
  if (strategy_parameter_name_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_parameter_name_;
  }
  if (strategy_parameter_value_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_parameter_value_;
  }
  if (this != default_instance_) {
  }
}

void StrategyParametersGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrategyParametersGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrategyParametersGrp_descriptor_;
}

const StrategyParametersGrp& StrategyParametersGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StrategyParametersGrp* StrategyParametersGrp::default_instance_ = NULL;

StrategyParametersGrp* StrategyParametersGrp::New() const {
  return new StrategyParametersGrp;
}

void StrategyParametersGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strategy_parameter_name()) {
      if (strategy_parameter_name_ != &::google::protobuf::internal::kEmptyString) {
        strategy_parameter_name_->clear();
      }
    }
    strategy_parameter_type_ = 0;
    if (has_strategy_parameter_value()) {
      if (strategy_parameter_value_ != &::google::protobuf::internal::kEmptyString) {
        strategy_parameter_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrategyParametersGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strategy_parameter_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy_parameter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategy_parameter_name().data(), this->strategy_parameter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strategy_parameter_type;
        break;
      }

      // optional .Common.StrategyParameterTypeEnum strategy_parameter_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strategy_parameter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::StrategyParameterTypeEnum_IsValid(value)) {
            set_strategy_parameter_type(static_cast< ::Common::StrategyParameterTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strategy_parameter_value;
        break;
      }

      // optional string strategy_parameter_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy_parameter_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy_parameter_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategy_parameter_value().data(), this->strategy_parameter_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrategyParametersGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strategy_parameter_name = 1;
  if (has_strategy_parameter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_parameter_name().data(), this->strategy_parameter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strategy_parameter_name(), output);
  }

  // optional .Common.StrategyParameterTypeEnum strategy_parameter_type = 2;
  if (has_strategy_parameter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->strategy_parameter_type(), output);
  }

  // optional string strategy_parameter_value = 3;
  if (has_strategy_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_parameter_value().data(), this->strategy_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strategy_parameter_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrategyParametersGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strategy_parameter_name = 1;
  if (has_strategy_parameter_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_parameter_name().data(), this->strategy_parameter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strategy_parameter_name(), target);
  }

  // optional .Common.StrategyParameterTypeEnum strategy_parameter_type = 2;
  if (has_strategy_parameter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->strategy_parameter_type(), target);
  }

  // optional string strategy_parameter_value = 3;
  if (has_strategy_parameter_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy_parameter_value().data(), this->strategy_parameter_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strategy_parameter_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrategyParametersGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strategy_parameter_name = 1;
    if (has_strategy_parameter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy_parameter_name());
    }

    // optional .Common.StrategyParameterTypeEnum strategy_parameter_type = 2;
    if (has_strategy_parameter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->strategy_parameter_type());
    }

    // optional string strategy_parameter_value = 3;
    if (has_strategy_parameter_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy_parameter_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrategyParametersGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrategyParametersGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrategyParametersGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrategyParametersGrp::MergeFrom(const StrategyParametersGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy_parameter_name()) {
      set_strategy_parameter_name(from.strategy_parameter_name());
    }
    if (from.has_strategy_parameter_type()) {
      set_strategy_parameter_type(from.strategy_parameter_type());
    }
    if (from.has_strategy_parameter_value()) {
      set_strategy_parameter_value(from.strategy_parameter_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrategyParametersGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrategyParametersGrp::CopyFrom(const StrategyParametersGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrategyParametersGrp::IsInitialized() const {

  return true;
}

void StrategyParametersGrp::Swap(StrategyParametersGrp* other) {
  if (other != this) {
    std::swap(strategy_parameter_name_, other->strategy_parameter_name_);
    std::swap(strategy_parameter_type_, other->strategy_parameter_type_);
    std::swap(strategy_parameter_value_, other->strategy_parameter_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrategyParametersGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrategyParametersGrp_descriptor_;
  metadata.reflection = StrategyParametersGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrdRegTimestamps::kDeskOrderHandlingInstFieldNumber;
const int TrdRegTimestamps::kDeskTypeFieldNumber;
const int TrdRegTimestamps::kDeskTypeSourceFieldNumber;
const int TrdRegTimestamps::kTrdRegTimestampFieldNumber;
const int TrdRegTimestamps::kTrdRegTimestampOriginFieldNumber;
const int TrdRegTimestamps::kTrdRegTimestampTypeFieldNumber;
#endif  // !_MSC_VER

TrdRegTimestamps::TrdRegTimestamps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrdRegTimestamps::InitAsDefaultInstance() {
}

TrdRegTimestamps::TrdRegTimestamps(const TrdRegTimestamps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrdRegTimestamps::SharedCtor() {
  _cached_size_ = 0;
  desk_order_handling_inst_ = 0;
  desk_type_ = 0;
  desk_type_source_ = 0;
  trd_reg_timestamp_ = GOOGLE_LONGLONG(0);
  trd_reg_timestamp_origin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trd_reg_timestamp_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrdRegTimestamps::~TrdRegTimestamps() {
  SharedDtor();
}

void TrdRegTimestamps::SharedDtor() {
  if (trd_reg_timestamp_origin_ != &::google::protobuf::internal::kEmptyString) {
    delete trd_reg_timestamp_origin_;
  }
  if (this != default_instance_) {
  }
}

void TrdRegTimestamps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrdRegTimestamps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrdRegTimestamps_descriptor_;
}

const TrdRegTimestamps& TrdRegTimestamps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TrdRegTimestamps* TrdRegTimestamps::default_instance_ = NULL;

TrdRegTimestamps* TrdRegTimestamps::New() const {
  return new TrdRegTimestamps;
}

void TrdRegTimestamps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_order_handling_inst_ = 0;
    desk_type_ = 0;
    desk_type_source_ = 0;
    trd_reg_timestamp_ = GOOGLE_LONGLONG(0);
    if (has_trd_reg_timestamp_origin()) {
      if (trd_reg_timestamp_origin_ != &::google::protobuf::internal::kEmptyString) {
        trd_reg_timestamp_origin_->clear();
      }
    }
    trd_reg_timestamp_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrdRegTimestamps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.DeskOrderHandlingInstEnum desk_order_handling_inst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DeskOrderHandlingInstEnum_IsValid(value)) {
            set_desk_order_handling_inst(static_cast< ::Common::DeskOrderHandlingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_desk_type;
        break;
      }

      // optional .Common.DeskTypeEnum desk_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DeskTypeEnum_IsValid(value)) {
            set_desk_type(static_cast< ::Common::DeskTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_desk_type_source;
        break;
      }

      // optional .Common.DeskTypeSourceEnum desk_type_source = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_desk_type_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DeskTypeSourceEnum_IsValid(value)) {
            set_desk_type_source(static_cast< ::Common::DeskTypeSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_trd_reg_timestamp;
        break;
      }

      // optional sfixed64 trd_reg_timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trd_reg_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trd_reg_timestamp_)));
          set_has_trd_reg_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trd_reg_timestamp_origin;
        break;
      }

      // optional string trd_reg_timestamp_origin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trd_reg_timestamp_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trd_reg_timestamp_origin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trd_reg_timestamp_origin().data(), this->trd_reg_timestamp_origin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trd_reg_timestamp_type;
        break;
      }

      // optional .Common.TrdRegTimestampTypeEnum trd_reg_timestamp_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trd_reg_timestamp_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TrdRegTimestampTypeEnum_IsValid(value)) {
            set_trd_reg_timestamp_type(static_cast< ::Common::TrdRegTimestampTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrdRegTimestamps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.DeskOrderHandlingInstEnum desk_order_handling_inst = 1;
  if (has_desk_order_handling_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->desk_order_handling_inst(), output);
  }

  // optional .Common.DeskTypeEnum desk_type = 2;
  if (has_desk_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->desk_type(), output);
  }

  // optional .Common.DeskTypeSourceEnum desk_type_source = 3;
  if (has_desk_type_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->desk_type_source(), output);
  }

  // optional sfixed64 trd_reg_timestamp = 4;
  if (has_trd_reg_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->trd_reg_timestamp(), output);
  }

  // optional string trd_reg_timestamp_origin = 5;
  if (has_trd_reg_timestamp_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trd_reg_timestamp_origin().data(), this->trd_reg_timestamp_origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->trd_reg_timestamp_origin(), output);
  }

  // optional .Common.TrdRegTimestampTypeEnum trd_reg_timestamp_type = 6;
  if (has_trd_reg_timestamp_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->trd_reg_timestamp_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrdRegTimestamps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.DeskOrderHandlingInstEnum desk_order_handling_inst = 1;
  if (has_desk_order_handling_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->desk_order_handling_inst(), target);
  }

  // optional .Common.DeskTypeEnum desk_type = 2;
  if (has_desk_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->desk_type(), target);
  }

  // optional .Common.DeskTypeSourceEnum desk_type_source = 3;
  if (has_desk_type_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->desk_type_source(), target);
  }

  // optional sfixed64 trd_reg_timestamp = 4;
  if (has_trd_reg_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->trd_reg_timestamp(), target);
  }

  // optional string trd_reg_timestamp_origin = 5;
  if (has_trd_reg_timestamp_origin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trd_reg_timestamp_origin().data(), this->trd_reg_timestamp_origin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trd_reg_timestamp_origin(), target);
  }

  // optional .Common.TrdRegTimestampTypeEnum trd_reg_timestamp_type = 6;
  if (has_trd_reg_timestamp_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->trd_reg_timestamp_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrdRegTimestamps::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.DeskOrderHandlingInstEnum desk_order_handling_inst = 1;
    if (has_desk_order_handling_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desk_order_handling_inst());
    }

    // optional .Common.DeskTypeEnum desk_type = 2;
    if (has_desk_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desk_type());
    }

    // optional .Common.DeskTypeSourceEnum desk_type_source = 3;
    if (has_desk_type_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->desk_type_source());
    }

    // optional sfixed64 trd_reg_timestamp = 4;
    if (has_trd_reg_timestamp()) {
      total_size += 1 + 8;
    }

    // optional string trd_reg_timestamp_origin = 5;
    if (has_trd_reg_timestamp_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trd_reg_timestamp_origin());
    }

    // optional .Common.TrdRegTimestampTypeEnum trd_reg_timestamp_type = 6;
    if (has_trd_reg_timestamp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trd_reg_timestamp_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrdRegTimestamps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrdRegTimestamps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrdRegTimestamps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrdRegTimestamps::MergeFrom(const TrdRegTimestamps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_order_handling_inst()) {
      set_desk_order_handling_inst(from.desk_order_handling_inst());
    }
    if (from.has_desk_type()) {
      set_desk_type(from.desk_type());
    }
    if (from.has_desk_type_source()) {
      set_desk_type_source(from.desk_type_source());
    }
    if (from.has_trd_reg_timestamp()) {
      set_trd_reg_timestamp(from.trd_reg_timestamp());
    }
    if (from.has_trd_reg_timestamp_origin()) {
      set_trd_reg_timestamp_origin(from.trd_reg_timestamp_origin());
    }
    if (from.has_trd_reg_timestamp_type()) {
      set_trd_reg_timestamp_type(from.trd_reg_timestamp_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrdRegTimestamps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrdRegTimestamps::CopyFrom(const TrdRegTimestamps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrdRegTimestamps::IsInitialized() const {

  return true;
}

void TrdRegTimestamps::Swap(TrdRegTimestamps* other) {
  if (other != this) {
    std::swap(desk_order_handling_inst_, other->desk_order_handling_inst_);
    std::swap(desk_type_, other->desk_type_);
    std::swap(desk_type_source_, other->desk_type_source_);
    std::swap(trd_reg_timestamp_, other->trd_reg_timestamp_);
    std::swap(trd_reg_timestamp_origin_, other->trd_reg_timestamp_origin_);
    std::swap(trd_reg_timestamp_type_, other->trd_reg_timestamp_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrdRegTimestamps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrdRegTimestamps_descriptor_;
  metadata.reflection = TrdRegTimestamps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationSequenceControl::kApplIdFieldNumber;
const int ApplicationSequenceControl::kApplLastSeqNumFieldNumber;
const int ApplicationSequenceControl::kApplResendFlagFieldNumber;
const int ApplicationSequenceControl::kApplSeqNumFieldNumber;
#endif  // !_MSC_VER

ApplicationSequenceControl::ApplicationSequenceControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationSequenceControl::InitAsDefaultInstance() {
}

ApplicationSequenceControl::ApplicationSequenceControl(const ApplicationSequenceControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationSequenceControl::SharedCtor() {
  _cached_size_ = 0;
  appl_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appl_last_seq_num_ = 0u;
  appl_resend_flag_ = false;
  appl_seq_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationSequenceControl::~ApplicationSequenceControl() {
  SharedDtor();
}

void ApplicationSequenceControl::SharedDtor() {
  if (appl_id_ != &::google::protobuf::internal::kEmptyString) {
    delete appl_id_;
  }
  if (this != default_instance_) {
  }
}

void ApplicationSequenceControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationSequenceControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationSequenceControl_descriptor_;
}

const ApplicationSequenceControl& ApplicationSequenceControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ApplicationSequenceControl* ApplicationSequenceControl::default_instance_ = NULL;

ApplicationSequenceControl* ApplicationSequenceControl::New() const {
  return new ApplicationSequenceControl;
}

void ApplicationSequenceControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_appl_id()) {
      if (appl_id_ != &::google::protobuf::internal::kEmptyString) {
        appl_id_->clear();
      }
    }
    appl_last_seq_num_ = 0u;
    appl_resend_flag_ = false;
    appl_seq_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationSequenceControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string appl_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appl_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appl_id().data(), this->appl_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_appl_last_seq_num;
        break;
      }

      // optional fixed32 appl_last_seq_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_appl_last_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &appl_last_seq_num_)));
          set_has_appl_last_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_appl_resend_flag;
        break;
      }

      // optional bool appl_resend_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appl_resend_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &appl_resend_flag_)));
          set_has_appl_resend_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_appl_seq_num;
        break;
      }

      // optional fixed32 appl_seq_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_appl_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &appl_seq_num_)));
          set_has_appl_seq_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationSequenceControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string appl_id = 1;
  if (has_appl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appl_id().data(), this->appl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->appl_id(), output);
  }

  // optional fixed32 appl_last_seq_num = 2;
  if (has_appl_last_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->appl_last_seq_num(), output);
  }

  // optional bool appl_resend_flag = 3;
  if (has_appl_resend_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->appl_resend_flag(), output);
  }

  // optional fixed32 appl_seq_num = 4;
  if (has_appl_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->appl_seq_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationSequenceControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string appl_id = 1;
  if (has_appl_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appl_id().data(), this->appl_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->appl_id(), target);
  }

  // optional fixed32 appl_last_seq_num = 2;
  if (has_appl_last_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->appl_last_seq_num(), target);
  }

  // optional bool appl_resend_flag = 3;
  if (has_appl_resend_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->appl_resend_flag(), target);
  }

  // optional fixed32 appl_seq_num = 4;
  if (has_appl_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->appl_seq_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationSequenceControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string appl_id = 1;
    if (has_appl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appl_id());
    }

    // optional fixed32 appl_last_seq_num = 2;
    if (has_appl_last_seq_num()) {
      total_size += 1 + 4;
    }

    // optional bool appl_resend_flag = 3;
    if (has_appl_resend_flag()) {
      total_size += 1 + 1;
    }

    // optional fixed32 appl_seq_num = 4;
    if (has_appl_seq_num()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationSequenceControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationSequenceControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationSequenceControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationSequenceControl::MergeFrom(const ApplicationSequenceControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_appl_id()) {
      set_appl_id(from.appl_id());
    }
    if (from.has_appl_last_seq_num()) {
      set_appl_last_seq_num(from.appl_last_seq_num());
    }
    if (from.has_appl_resend_flag()) {
      set_appl_resend_flag(from.appl_resend_flag());
    }
    if (from.has_appl_seq_num()) {
      set_appl_seq_num(from.appl_seq_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationSequenceControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationSequenceControl::CopyFrom(const ApplicationSequenceControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationSequenceControl::IsInitialized() const {

  return true;
}

void ApplicationSequenceControl::Swap(ApplicationSequenceControl* other) {
  if (other != this) {
    std::swap(appl_id_, other->appl_id_);
    std::swap(appl_last_seq_num_, other->appl_last_seq_num_);
    std::swap(appl_resend_flag_, other->appl_resend_flag_);
    std::swap(appl_seq_num_, other->appl_seq_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationSequenceControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationSequenceControl_descriptor_;
  metadata.reflection = ApplicationSequenceControl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContraGrp::kContraBrokerFieldNumber;
const int ContraGrp::kContraLegRefIdFieldNumber;
const int ContraGrp::kContraTradeQtyFieldNumber;
const int ContraGrp::kContraTradeQtyExponentFieldNumber;
const int ContraGrp::kContraTradeTimeFieldNumber;
const int ContraGrp::kContraTraderFieldNumber;
#endif  // !_MSC_VER

ContraGrp::ContraGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContraGrp::InitAsDefaultInstance() {
}

ContraGrp::ContraGrp(const ContraGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContraGrp::SharedCtor() {
  _cached_size_ = 0;
  contra_broker_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contra_leg_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contra_trade_qty_ = GOOGLE_LONGLONG(0);
  contra_trade_qty_exponent_ = 0;
  contra_trade_time_ = GOOGLE_LONGLONG(0);
  contra_trader_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContraGrp::~ContraGrp() {
  SharedDtor();
}

void ContraGrp::SharedDtor() {
  if (contra_broker_ != &::google::protobuf::internal::kEmptyString) {
    delete contra_broker_;
  }
  if (contra_leg_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete contra_leg_ref_id_;
  }
  if (contra_trader_ != &::google::protobuf::internal::kEmptyString) {
    delete contra_trader_;
  }
  if (this != default_instance_) {
  }
}

void ContraGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContraGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContraGrp_descriptor_;
}

const ContraGrp& ContraGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ContraGrp* ContraGrp::default_instance_ = NULL;

ContraGrp* ContraGrp::New() const {
  return new ContraGrp;
}

void ContraGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_contra_broker()) {
      if (contra_broker_ != &::google::protobuf::internal::kEmptyString) {
        contra_broker_->clear();
      }
    }
    if (has_contra_leg_ref_id()) {
      if (contra_leg_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        contra_leg_ref_id_->clear();
      }
    }
    contra_trade_qty_ = GOOGLE_LONGLONG(0);
    contra_trade_qty_exponent_ = 0;
    contra_trade_time_ = GOOGLE_LONGLONG(0);
    if (has_contra_trader()) {
      if (contra_trader_ != &::google::protobuf::internal::kEmptyString) {
        contra_trader_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContraGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contra_broker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contra_broker()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contra_broker().data(), this->contra_broker().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_contra_leg_ref_id;
        break;
      }

      // optional string contra_leg_ref_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contra_leg_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contra_leg_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contra_leg_ref_id().data(), this->contra_leg_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_contra_trade_qty;
        break;
      }

      // optional sfixed64 contra_trade_qty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contra_trade_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &contra_trade_qty_)));
          set_has_contra_trade_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_contra_trade_qty_exponent;
        break;
      }

      // optional sfixed32 contra_trade_qty_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contra_trade_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &contra_trade_qty_exponent_)));
          set_has_contra_trade_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_contra_trade_time;
        break;
      }

      // optional sfixed64 contra_trade_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_contra_trade_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &contra_trade_time_)));
          set_has_contra_trade_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_contra_trader;
        break;
      }

      // optional string contra_trader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contra_trader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contra_trader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contra_trader().data(), this->contra_trader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContraGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string contra_broker = 1;
  if (has_contra_broker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_broker().data(), this->contra_broker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->contra_broker(), output);
  }

  // optional string contra_leg_ref_id = 2;
  if (has_contra_leg_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_leg_ref_id().data(), this->contra_leg_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->contra_leg_ref_id(), output);
  }

  // optional sfixed64 contra_trade_qty = 3;
  if (has_contra_trade_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->contra_trade_qty(), output);
  }

  // optional sfixed32 contra_trade_qty_exponent = 4;
  if (has_contra_trade_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->contra_trade_qty_exponent(), output);
  }

  // optional sfixed64 contra_trade_time = 5;
  if (has_contra_trade_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->contra_trade_time(), output);
  }

  // optional string contra_trader = 6;
  if (has_contra_trader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_trader().data(), this->contra_trader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->contra_trader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContraGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string contra_broker = 1;
  if (has_contra_broker()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_broker().data(), this->contra_broker().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contra_broker(), target);
  }

  // optional string contra_leg_ref_id = 2;
  if (has_contra_leg_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_leg_ref_id().data(), this->contra_leg_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->contra_leg_ref_id(), target);
  }

  // optional sfixed64 contra_trade_qty = 3;
  if (has_contra_trade_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->contra_trade_qty(), target);
  }

  // optional sfixed32 contra_trade_qty_exponent = 4;
  if (has_contra_trade_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->contra_trade_qty_exponent(), target);
  }

  // optional sfixed64 contra_trade_time = 5;
  if (has_contra_trade_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->contra_trade_time(), target);
  }

  // optional string contra_trader = 6;
  if (has_contra_trader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contra_trader().data(), this->contra_trader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->contra_trader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContraGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string contra_broker = 1;
    if (has_contra_broker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contra_broker());
    }

    // optional string contra_leg_ref_id = 2;
    if (has_contra_leg_ref_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contra_leg_ref_id());
    }

    // optional sfixed64 contra_trade_qty = 3;
    if (has_contra_trade_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 contra_trade_qty_exponent = 4;
    if (has_contra_trade_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 contra_trade_time = 5;
    if (has_contra_trade_time()) {
      total_size += 1 + 8;
    }

    // optional string contra_trader = 6;
    if (has_contra_trader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contra_trader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContraGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContraGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContraGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContraGrp::MergeFrom(const ContraGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contra_broker()) {
      set_contra_broker(from.contra_broker());
    }
    if (from.has_contra_leg_ref_id()) {
      set_contra_leg_ref_id(from.contra_leg_ref_id());
    }
    if (from.has_contra_trade_qty()) {
      set_contra_trade_qty(from.contra_trade_qty());
    }
    if (from.has_contra_trade_qty_exponent()) {
      set_contra_trade_qty_exponent(from.contra_trade_qty_exponent());
    }
    if (from.has_contra_trade_time()) {
      set_contra_trade_time(from.contra_trade_time());
    }
    if (from.has_contra_trader()) {
      set_contra_trader(from.contra_trader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContraGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContraGrp::CopyFrom(const ContraGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContraGrp::IsInitialized() const {

  return true;
}

void ContraGrp::Swap(ContraGrp* other) {
  if (other != this) {
    std::swap(contra_broker_, other->contra_broker_);
    std::swap(contra_leg_ref_id_, other->contra_leg_ref_id_);
    std::swap(contra_trade_qty_, other->contra_trade_qty_);
    std::swap(contra_trade_qty_exponent_, other->contra_trade_qty_exponent_);
    std::swap(contra_trade_time_, other->contra_trade_time_);
    std::swap(contra_trader_, other->contra_trader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContraGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContraGrp_descriptor_;
  metadata.reflection = ContraGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NstdPtys4SubGrp::kNested4PartySubIdFieldNumber;
const int NstdPtys4SubGrp::kNested4PartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

NstdPtys4SubGrp::NstdPtys4SubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NstdPtys4SubGrp::InitAsDefaultInstance() {
}

NstdPtys4SubGrp::NstdPtys4SubGrp(const NstdPtys4SubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NstdPtys4SubGrp::SharedCtor() {
  _cached_size_ = 0;
  nested4party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested4party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NstdPtys4SubGrp::~NstdPtys4SubGrp() {
  SharedDtor();
}

void NstdPtys4SubGrp::SharedDtor() {
  if (nested4party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested4party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void NstdPtys4SubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NstdPtys4SubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NstdPtys4SubGrp_descriptor_;
}

const NstdPtys4SubGrp& NstdPtys4SubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NstdPtys4SubGrp* NstdPtys4SubGrp::default_instance_ = NULL;

NstdPtys4SubGrp* NstdPtys4SubGrp::New() const {
  return new NstdPtys4SubGrp;
}

void NstdPtys4SubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested4party_sub_id()) {
      if (nested4party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        nested4party_sub_id_->clear();
      }
    }
    nested4party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NstdPtys4SubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested4party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested4party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested4party_sub_id().data(), this->nested4party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nested4party_sub_id_type;
        break;
      }

      // optional sfixed64 nested4party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested4party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested4party_sub_id_type_)));
          set_has_nested4party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NstdPtys4SubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested4party_sub_id = 1;
  if (has_nested4party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_sub_id().data(), this->nested4party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested4party_sub_id(), output);
  }

  // optional sfixed64 nested4party_sub_id_type = 2;
  if (has_nested4party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->nested4party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NstdPtys4SubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested4party_sub_id = 1;
  if (has_nested4party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_sub_id().data(), this->nested4party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested4party_sub_id(), target);
  }

  // optional sfixed64 nested4party_sub_id_type = 2;
  if (has_nested4party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->nested4party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NstdPtys4SubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested4party_sub_id = 1;
    if (has_nested4party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested4party_sub_id());
    }

    // optional sfixed64 nested4party_sub_id_type = 2;
    if (has_nested4party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NstdPtys4SubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NstdPtys4SubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NstdPtys4SubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NstdPtys4SubGrp::MergeFrom(const NstdPtys4SubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested4party_sub_id()) {
      set_nested4party_sub_id(from.nested4party_sub_id());
    }
    if (from.has_nested4party_sub_id_type()) {
      set_nested4party_sub_id_type(from.nested4party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NstdPtys4SubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NstdPtys4SubGrp::CopyFrom(const NstdPtys4SubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NstdPtys4SubGrp::IsInitialized() const {

  return true;
}

void NstdPtys4SubGrp::Swap(NstdPtys4SubGrp* other) {
  if (other != this) {
    std::swap(nested4party_sub_id_, other->nested4party_sub_id_);
    std::swap(nested4party_sub_id_type_, other->nested4party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NstdPtys4SubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NstdPtys4SubGrp_descriptor_;
  metadata.reflection = NstdPtys4SubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NestedParties4::kNested4PartyIdFieldNumber;
const int NestedParties4::kNested4PartyIdSourceFieldNumber;
const int NestedParties4::kNested4PartyRoleFieldNumber;
const int NestedParties4::kNstdPtys4SubGrpFieldNumber;
#endif  // !_MSC_VER

NestedParties4::NestedParties4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NestedParties4::InitAsDefaultInstance() {
}

NestedParties4::NestedParties4(const NestedParties4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NestedParties4::SharedCtor() {
  _cached_size_ = 0;
  nested4party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested4party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested4party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NestedParties4::~NestedParties4() {
  SharedDtor();
}

void NestedParties4::SharedDtor() {
  if (nested4party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested4party_id_;
  }
  if (nested4party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete nested4party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void NestedParties4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedParties4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedParties4_descriptor_;
}

const NestedParties4& NestedParties4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NestedParties4* NestedParties4::default_instance_ = NULL;

NestedParties4* NestedParties4::New() const {
  return new NestedParties4;
}

void NestedParties4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested4party_id()) {
      if (nested4party_id_ != &::google::protobuf::internal::kEmptyString) {
        nested4party_id_->clear();
      }
    }
    if (has_nested4party_id_source()) {
      if (nested4party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        nested4party_id_source_->clear();
      }
    }
    nested4party_role_ = GOOGLE_LONGLONG(0);
  }
  nstd_ptys4sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NestedParties4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested4party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested4party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested4party_id().data(), this->nested4party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested4party_id_source;
        break;
      }

      // optional string nested4party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested4party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested4party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested4party_id_source().data(), this->nested4party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nested4party_role;
        break;
      }

      // optional sfixed64 nested4party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested4party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested4party_role_)));
          set_has_nested4party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys4sub_grp;
        break;
      }

      // repeated .Common.NstdPtys4SubGrp nstd_ptys4sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nstd_ptys4sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nstd_ptys4sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys4sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NestedParties4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested4party_id = 1;
  if (has_nested4party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_id().data(), this->nested4party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested4party_id(), output);
  }

  // optional string nested4party_id_source = 2;
  if (has_nested4party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_id_source().data(), this->nested4party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nested4party_id_source(), output);
  }

  // optional sfixed64 nested4party_role = 3;
  if (has_nested4party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->nested4party_role(), output);
  }

  // repeated .Common.NstdPtys4SubGrp nstd_ptys4sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys4sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nstd_ptys4sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NestedParties4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested4party_id = 1;
  if (has_nested4party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_id().data(), this->nested4party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested4party_id(), target);
  }

  // optional string nested4party_id_source = 2;
  if (has_nested4party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested4party_id_source().data(), this->nested4party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nested4party_id_source(), target);
  }

  // optional sfixed64 nested4party_role = 3;
  if (has_nested4party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->nested4party_role(), target);
  }

  // repeated .Common.NstdPtys4SubGrp nstd_ptys4sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys4sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nstd_ptys4sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NestedParties4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested4party_id = 1;
    if (has_nested4party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested4party_id());
    }

    // optional string nested4party_id_source = 2;
    if (has_nested4party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested4party_id_source());
    }

    // optional sfixed64 nested4party_role = 3;
    if (has_nested4party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.NstdPtys4SubGrp nstd_ptys4sub_grp = 4;
  total_size += 1 * this->nstd_ptys4sub_grp_size();
  for (int i = 0; i < this->nstd_ptys4sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nstd_ptys4sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedParties4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NestedParties4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NestedParties4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NestedParties4::MergeFrom(const NestedParties4& from) {
  GOOGLE_CHECK_NE(&from, this);
  nstd_ptys4sub_grp_.MergeFrom(from.nstd_ptys4sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested4party_id()) {
      set_nested4party_id(from.nested4party_id());
    }
    if (from.has_nested4party_id_source()) {
      set_nested4party_id_source(from.nested4party_id_source());
    }
    if (from.has_nested4party_role()) {
      set_nested4party_role(from.nested4party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NestedParties4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedParties4::CopyFrom(const NestedParties4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedParties4::IsInitialized() const {

  return true;
}

void NestedParties4::Swap(NestedParties4* other) {
  if (other != this) {
    std::swap(nested4party_id_, other->nested4party_id_);
    std::swap(nested4party_id_source_, other->nested4party_id_source_);
    std::swap(nested4party_role_, other->nested4party_role_);
    nstd_ptys4sub_grp_.Swap(&other->nstd_ptys4sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NestedParties4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedParties4_descriptor_;
  metadata.reflection = NestedParties4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RateSource::kRateSourceFieldNumber;
const int RateSource::kRateSourceTypeFieldNumber;
const int RateSource::kReferencePageFieldNumber;
#endif  // !_MSC_VER

RateSource::RateSource()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RateSource::InitAsDefaultInstance() {
}

RateSource::RateSource(const RateSource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RateSource::SharedCtor() {
  _cached_size_ = 0;
  rate_source_ = 0;
  rate_source_type_ = 0;
  reference_page_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RateSource::~RateSource() {
  SharedDtor();
}

void RateSource::SharedDtor() {
  if (reference_page_ != &::google::protobuf::internal::kEmptyString) {
    delete reference_page_;
  }
  if (this != default_instance_) {
  }
}

void RateSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateSource_descriptor_;
}

const RateSource& RateSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RateSource* RateSource::default_instance_ = NULL;

RateSource* RateSource::New() const {
  return new RateSource;
}

void RateSource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_source_ = 0;
    rate_source_type_ = 0;
    if (has_reference_page()) {
      if (reference_page_ != &::google::protobuf::internal::kEmptyString) {
        reference_page_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RateSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.RateSourceEnum rate_source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::RateSourceEnum_IsValid(value)) {
            set_rate_source(static_cast< ::Common::RateSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rate_source_type;
        break;
      }

      // optional .Common.RateSourceTypeEnum rate_source_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate_source_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::RateSourceTypeEnum_IsValid(value)) {
            set_rate_source_type(static_cast< ::Common::RateSourceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reference_page;
        break;
      }

      // optional string reference_page = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reference_page:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reference_page()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reference_page().data(), this->reference_page().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RateSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.RateSourceEnum rate_source = 1;
  if (has_rate_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rate_source(), output);
  }

  // optional .Common.RateSourceTypeEnum rate_source_type = 2;
  if (has_rate_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rate_source_type(), output);
  }

  // optional string reference_page = 3;
  if (has_reference_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_page().data(), this->reference_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->reference_page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RateSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.RateSourceEnum rate_source = 1;
  if (has_rate_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rate_source(), target);
  }

  // optional .Common.RateSourceTypeEnum rate_source_type = 2;
  if (has_rate_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rate_source_type(), target);
  }

  // optional string reference_page = 3;
  if (has_reference_page()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reference_page().data(), this->reference_page().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reference_page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RateSource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.RateSourceEnum rate_source = 1;
    if (has_rate_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rate_source());
    }

    // optional .Common.RateSourceTypeEnum rate_source_type = 2;
    if (has_rate_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rate_source_type());
    }

    // optional string reference_page = 3;
    if (has_reference_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reference_page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateSource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RateSource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RateSource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RateSource::MergeFrom(const RateSource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate_source()) {
      set_rate_source(from.rate_source());
    }
    if (from.has_rate_source_type()) {
      set_rate_source_type(from.rate_source_type());
    }
    if (from.has_reference_page()) {
      set_reference_page(from.reference_page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RateSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateSource::CopyFrom(const RateSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateSource::IsInitialized() const {

  return true;
}

void RateSource::Swap(RateSource* other) {
  if (other != this) {
    std::swap(rate_source_, other->rate_source_);
    std::swap(rate_source_type_, other->rate_source_type_);
    std::swap(reference_page_, other->reference_page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RateSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RateSource_descriptor_;
  metadata.reflection = RateSource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContAmtGrp::kContAmtCurrFieldNumber;
const int ContAmtGrp::kContAmtTypeFieldNumber;
const int ContAmtGrp::kContAmtValueFieldNumber;
#endif  // !_MSC_VER

ContAmtGrp::ContAmtGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContAmtGrp::InitAsDefaultInstance() {
}

ContAmtGrp::ContAmtGrp(const ContAmtGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContAmtGrp::SharedCtor() {
  _cached_size_ = 0;
  cont_amt_curr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cont_amt_type_ = 0;
  cont_amt_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContAmtGrp::~ContAmtGrp() {
  SharedDtor();
}

void ContAmtGrp::SharedDtor() {
  if (cont_amt_curr_ != &::google::protobuf::internal::kEmptyString) {
    delete cont_amt_curr_;
  }
  if (this != default_instance_) {
  }
}

void ContAmtGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContAmtGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContAmtGrp_descriptor_;
}

const ContAmtGrp& ContAmtGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ContAmtGrp* ContAmtGrp::default_instance_ = NULL;

ContAmtGrp* ContAmtGrp::New() const {
  return new ContAmtGrp;
}

void ContAmtGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cont_amt_curr()) {
      if (cont_amt_curr_ != &::google::protobuf::internal::kEmptyString) {
        cont_amt_curr_->clear();
      }
    }
    cont_amt_type_ = 0;
    cont_amt_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContAmtGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cont_amt_curr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cont_amt_curr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cont_amt_curr().data(), this->cont_amt_curr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cont_amt_type;
        break;
      }

      // optional .Common.ContAmtTypeEnum cont_amt_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cont_amt_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ContAmtTypeEnum_IsValid(value)) {
            set_cont_amt_type(static_cast< ::Common::ContAmtTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_cont_amt_value;
        break;
      }

      // optional double cont_amt_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cont_amt_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cont_amt_value_)));
          set_has_cont_amt_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContAmtGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cont_amt_curr = 1;
  if (has_cont_amt_curr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cont_amt_curr().data(), this->cont_amt_curr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cont_amt_curr(), output);
  }

  // optional .Common.ContAmtTypeEnum cont_amt_type = 2;
  if (has_cont_amt_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cont_amt_type(), output);
  }

  // optional double cont_amt_value = 3;
  if (has_cont_amt_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cont_amt_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContAmtGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cont_amt_curr = 1;
  if (has_cont_amt_curr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cont_amt_curr().data(), this->cont_amt_curr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cont_amt_curr(), target);
  }

  // optional .Common.ContAmtTypeEnum cont_amt_type = 2;
  if (has_cont_amt_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cont_amt_type(), target);
  }

  // optional double cont_amt_value = 3;
  if (has_cont_amt_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cont_amt_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContAmtGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cont_amt_curr = 1;
    if (has_cont_amt_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cont_amt_curr());
    }

    // optional .Common.ContAmtTypeEnum cont_amt_type = 2;
    if (has_cont_amt_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cont_amt_type());
    }

    // optional double cont_amt_value = 3;
    if (has_cont_amt_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContAmtGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContAmtGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContAmtGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContAmtGrp::MergeFrom(const ContAmtGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cont_amt_curr()) {
      set_cont_amt_curr(from.cont_amt_curr());
    }
    if (from.has_cont_amt_type()) {
      set_cont_amt_type(from.cont_amt_type());
    }
    if (from.has_cont_amt_value()) {
      set_cont_amt_value(from.cont_amt_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContAmtGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContAmtGrp::CopyFrom(const ContAmtGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContAmtGrp::IsInitialized() const {

  return true;
}

void ContAmtGrp::Swap(ContAmtGrp* other) {
  if (other != this) {
    std::swap(cont_amt_curr_, other->cont_amt_curr_);
    std::swap(cont_amt_type_, other->cont_amt_type_);
    std::swap(cont_amt_value_, other->cont_amt_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContAmtGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContAmtGrp_descriptor_;
  metadata.reflection = ContAmtGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegSecAltIdGrp::kLegSecurityAltIdFieldNumber;
const int LegSecAltIdGrp::kLegSecurityAltIdSourceFieldNumber;
#endif  // !_MSC_VER

LegSecAltIdGrp::LegSecAltIdGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegSecAltIdGrp::InitAsDefaultInstance() {
}

LegSecAltIdGrp::LegSecAltIdGrp(const LegSecAltIdGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegSecAltIdGrp::SharedCtor() {
  _cached_size_ = 0;
  leg_security_alt_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_security_alt_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegSecAltIdGrp::~LegSecAltIdGrp() {
  SharedDtor();
}

void LegSecAltIdGrp::SharedDtor() {
  if (leg_security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_alt_id_;
  }
  if (leg_security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_alt_id_source_;
  }
  if (this != default_instance_) {
  }
}

void LegSecAltIdGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegSecAltIdGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegSecAltIdGrp_descriptor_;
}

const LegSecAltIdGrp& LegSecAltIdGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LegSecAltIdGrp* LegSecAltIdGrp::default_instance_ = NULL;

LegSecAltIdGrp* LegSecAltIdGrp::New() const {
  return new LegSecAltIdGrp;
}

void LegSecAltIdGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leg_security_alt_id()) {
      if (leg_security_alt_id_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_alt_id_->clear();
      }
    }
    if (has_leg_security_alt_id_source()) {
      if (leg_security_alt_id_source_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_alt_id_source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegSecAltIdGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leg_security_alt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_alt_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_alt_id().data(), this->leg_security_alt_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_security_alt_id_source;
        break;
      }

      // optional string leg_security_alt_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_alt_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_alt_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_alt_id_source().data(), this->leg_security_alt_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegSecAltIdGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string leg_security_alt_id = 1;
  if (has_leg_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_alt_id().data(), this->leg_security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leg_security_alt_id(), output);
  }

  // optional string leg_security_alt_id_source = 2;
  if (has_leg_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_alt_id_source().data(), this->leg_security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leg_security_alt_id_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegSecAltIdGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string leg_security_alt_id = 1;
  if (has_leg_security_alt_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_alt_id().data(), this->leg_security_alt_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leg_security_alt_id(), target);
  }

  // optional string leg_security_alt_id_source = 2;
  if (has_leg_security_alt_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_alt_id_source().data(), this->leg_security_alt_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leg_security_alt_id_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegSecAltIdGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string leg_security_alt_id = 1;
    if (has_leg_security_alt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_alt_id());
    }

    // optional string leg_security_alt_id_source = 2;
    if (has_leg_security_alt_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_alt_id_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegSecAltIdGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegSecAltIdGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegSecAltIdGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegSecAltIdGrp::MergeFrom(const LegSecAltIdGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg_security_alt_id()) {
      set_leg_security_alt_id(from.leg_security_alt_id());
    }
    if (from.has_leg_security_alt_id_source()) {
      set_leg_security_alt_id_source(from.leg_security_alt_id_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegSecAltIdGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegSecAltIdGrp::CopyFrom(const LegSecAltIdGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegSecAltIdGrp::IsInitialized() const {

  return true;
}

void LegSecAltIdGrp::Swap(LegSecAltIdGrp* other) {
  if (other != this) {
    std::swap(leg_security_alt_id_, other->leg_security_alt_id_);
    std::swap(leg_security_alt_id_source_, other->leg_security_alt_id_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegSecAltIdGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegSecAltIdGrp_descriptor_;
  metadata.reflection = LegSecAltIdGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegFlowScheduleTypeUnion::kLegFlowScheduleTypeFieldNumber;
const int LegFlowScheduleTypeUnion::kLegFlowScheduleTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

LegFlowScheduleTypeUnion::LegFlowScheduleTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegFlowScheduleTypeUnion::InitAsDefaultInstance() {
}

LegFlowScheduleTypeUnion::LegFlowScheduleTypeUnion(const LegFlowScheduleTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegFlowScheduleTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  leg_flow_schedule_type_ = GOOGLE_LONGLONG(0);
  leg_flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegFlowScheduleTypeUnion::~LegFlowScheduleTypeUnion() {
  SharedDtor();
}

void LegFlowScheduleTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LegFlowScheduleTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegFlowScheduleTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegFlowScheduleTypeUnion_descriptor_;
}

const LegFlowScheduleTypeUnion& LegFlowScheduleTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LegFlowScheduleTypeUnion* LegFlowScheduleTypeUnion::default_instance_ = NULL;

LegFlowScheduleTypeUnion* LegFlowScheduleTypeUnion::New() const {
  return new LegFlowScheduleTypeUnion;
}

void LegFlowScheduleTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leg_flow_schedule_type_ = GOOGLE_LONGLONG(0);
    leg_flow_schedule_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegFlowScheduleTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 leg_flow_schedule_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_flow_schedule_type_)));
          set_has_leg_flow_schedule_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_leg_flow_schedule_type_sfixed64;
        break;
      }

      // optional sfixed64 leg_flow_schedule_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_flow_schedule_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_flow_schedule_type_sfixed64_)));
          set_has_leg_flow_schedule_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegFlowScheduleTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 leg_flow_schedule_type = 1;
  if (has_leg_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->leg_flow_schedule_type(), output);
  }

  // optional sfixed64 leg_flow_schedule_type_sfixed64 = 2;
  if (has_leg_flow_schedule_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->leg_flow_schedule_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegFlowScheduleTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 leg_flow_schedule_type = 1;
  if (has_leg_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->leg_flow_schedule_type(), target);
  }

  // optional sfixed64 leg_flow_schedule_type_sfixed64 = 2;
  if (has_leg_flow_schedule_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->leg_flow_schedule_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegFlowScheduleTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 leg_flow_schedule_type = 1;
    if (has_leg_flow_schedule_type()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 leg_flow_schedule_type_sfixed64 = 2;
    if (has_leg_flow_schedule_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegFlowScheduleTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegFlowScheduleTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegFlowScheduleTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegFlowScheduleTypeUnion::MergeFrom(const LegFlowScheduleTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg_flow_schedule_type()) {
      set_leg_flow_schedule_type(from.leg_flow_schedule_type());
    }
    if (from.has_leg_flow_schedule_type_sfixed64()) {
      set_leg_flow_schedule_type_sfixed64(from.leg_flow_schedule_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegFlowScheduleTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegFlowScheduleTypeUnion::CopyFrom(const LegFlowScheduleTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegFlowScheduleTypeUnion::IsInitialized() const {

  return true;
}

void LegFlowScheduleTypeUnion::Swap(LegFlowScheduleTypeUnion* other) {
  if (other != this) {
    std::swap(leg_flow_schedule_type_, other->leg_flow_schedule_type_);
    std::swap(leg_flow_schedule_type_sfixed64_, other->leg_flow_schedule_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegFlowScheduleTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegFlowScheduleTypeUnion_descriptor_;
  metadata.reflection = LegFlowScheduleTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentLeg::kEncodedLegIssuerFieldNumber;
const int InstrumentLeg::kEncodedLegIssuerLenFieldNumber;
const int InstrumentLeg::kEncodedLegSecurityDescFieldNumber;
const int InstrumentLeg::kEncodedLegSecurityDescLenFieldNumber;
const int InstrumentLeg::kLegCfiCodeFieldNumber;
const int InstrumentLeg::kLegContractMultiplierFieldNumber;
const int InstrumentLeg::kLegCountryOfIssueFieldNumber;
const int InstrumentLeg::kLegCouponPaymentDateFieldNumber;
const int InstrumentLeg::kLegCouponRateFieldNumber;
const int InstrumentLeg::kLegCouponRateExponentFieldNumber;
const int InstrumentLeg::kLegCreditRatingFieldNumber;
const int InstrumentLeg::kLegFactorFieldNumber;
const int InstrumentLeg::kLegInstrRegistryFieldNumber;
const int InstrumentLeg::kLegIssueDateFieldNumber;
const int InstrumentLeg::kLegIssuerFieldNumber;
const int InstrumentLeg::kLegLocaleOfIssueFieldNumber;
const int InstrumentLeg::kLegMaturityDateFieldNumber;
const int InstrumentLeg::kLegMaturityMonthYearFieldNumber;
const int InstrumentLeg::kLegOptAttributeFieldNumber;
const int InstrumentLeg::kLegProductFieldNumber;
const int InstrumentLeg::kLegRatioQtyFieldNumber;
const int InstrumentLeg::kLegRedemptionDateFieldNumber;
const int InstrumentLeg::kLegRepoCollateralSecurityTypeFieldNumber;
const int InstrumentLeg::kLegRepurchaseRateFieldNumber;
const int InstrumentLeg::kLegRepurchaseRateExponentFieldNumber;
const int InstrumentLeg::kLegRepurchaseTermFieldNumber;
const int InstrumentLeg::kLegSecurityDescFieldNumber;
const int InstrumentLeg::kLegSecurityExchangeFieldNumber;
const int InstrumentLeg::kLegSecurityIdFieldNumber;
const int InstrumentLeg::kLegSecurityIdSourceFieldNumber;
const int InstrumentLeg::kLegSecurityTypeFieldNumber;
const int InstrumentLeg::kLegSideFieldNumber;
const int InstrumentLeg::kLegStateOrProvinceOfIssueFieldNumber;
const int InstrumentLeg::kLegStrikePriceFieldNumber;
const int InstrumentLeg::kLegStrikePriceExponentFieldNumber;
const int InstrumentLeg::kLegSymbolFieldNumber;
const int InstrumentLeg::kLegSymbolSfxFieldNumber;
const int InstrumentLeg::kLegContractSettlMonthFieldNumber;
const int InstrumentLeg::kLegCurrencyFieldNumber;
const int InstrumentLeg::kLegDatedDateFieldNumber;
const int InstrumentLeg::kLegInterestAccrualDateFieldNumber;
const int InstrumentLeg::kLegOptionRatioFieldNumber;
const int InstrumentLeg::kLegPoolFieldNumber;
const int InstrumentLeg::kLegPriceFieldNumber;
const int InstrumentLeg::kLegPriceExponentFieldNumber;
const int InstrumentLeg::kLegSecAltIdGrpFieldNumber;
const int InstrumentLeg::kLegSecuritySubTypeFieldNumber;
const int InstrumentLeg::kLegStrikeCurrencyFieldNumber;
const int InstrumentLeg::kLegTimeUnitFieldNumber;
const int InstrumentLeg::kLegUnitOfMeasureFieldNumber;
const int InstrumentLeg::kLegExerciseStyleFieldNumber;
const int InstrumentLeg::kLegMaturityTimeFieldNumber;
const int InstrumentLeg::kLegPriceUnitOfMeasureFieldNumber;
const int InstrumentLeg::kLegPriceUnitOfMeasureQtyFieldNumber;
const int InstrumentLeg::kLegPriceUnitOfMeasureQtyExponentFieldNumber;
const int InstrumentLeg::kLegPutOrCallFieldNumber;
const int InstrumentLeg::kLegUnitOfMeasureQtyFieldNumber;
const int InstrumentLeg::kLegUnitOfMeasureQtyExponentFieldNumber;
const int InstrumentLeg::kLegContractMultiplierUnitFieldNumber;
const int InstrumentLeg::kLegFlowScheduleTypeFieldNumber;
#endif  // !_MSC_VER

InstrumentLeg::InstrumentLeg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentLeg::InitAsDefaultInstance() {
}

InstrumentLeg::InstrumentLeg(const InstrumentLeg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentLeg::SharedCtor() {
  _cached_size_ = 0;
  encoded_leg_issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_leg_issuer_len_ = 0u;
  encoded_leg_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_leg_security_desc_len_ = 0u;
  leg_cfi_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_contract_multiplier_ = 0;
  leg_country_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_coupon_payment_date_ = 0;
  leg_coupon_rate_ = GOOGLE_LONGLONG(0);
  leg_coupon_rate_exponent_ = 0;
  leg_credit_rating_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_factor_ = 0;
  leg_instr_registry_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_issue_date_ = 0;
  leg_issuer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_locale_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_maturity_date_ = 0;
  leg_maturity_month_year_ = 0;
  leg_opt_attribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_product_ = GOOGLE_LONGLONG(0);
  leg_ratio_qty_ = 0;
  leg_redemption_date_ = 0;
  leg_repo_collateral_security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_repurchase_rate_ = GOOGLE_LONGLONG(0);
  leg_repurchase_rate_exponent_ = 0;
  leg_repurchase_term_ = GOOGLE_LONGLONG(0);
  leg_security_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_security_exchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_security_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_security_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_side_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_state_or_province_of_issue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_strike_price_ = GOOGLE_LONGLONG(0);
  leg_strike_price_exponent_ = 0;
  leg_symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_symbol_sfx_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_contract_settl_month_ = 0;
  leg_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_dated_date_ = 0;
  leg_interest_accrual_date_ = 0;
  leg_option_ratio_ = 0;
  leg_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_price_ = GOOGLE_LONGLONG(0);
  leg_price_exponent_ = 0;
  leg_security_sub_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_strike_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_time_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_unit_of_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_exercise_style_ = GOOGLE_LONGLONG(0);
  leg_maturity_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_price_unit_of_measure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  leg_price_unit_of_measure_qty_exponent_ = 0;
  leg_put_or_call_ = GOOGLE_LONGLONG(0);
  leg_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
  leg_unit_of_measure_qty_exponent_ = 0;
  leg_contract_multiplier_unit_ = GOOGLE_LONGLONG(0);
  leg_flow_schedule_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentLeg::~InstrumentLeg() {
  SharedDtor();
}

void InstrumentLeg::SharedDtor() {
  if (encoded_leg_issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_leg_issuer_;
  }
  if (encoded_leg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_leg_security_desc_;
  }
  if (leg_cfi_code_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_cfi_code_;
  }
  if (leg_country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_country_of_issue_;
  }
  if (leg_credit_rating_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_credit_rating_;
  }
  if (leg_instr_registry_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_instr_registry_;
  }
  if (leg_issuer_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_issuer_;
  }
  if (leg_locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_locale_of_issue_;
  }
  if (leg_opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_opt_attribute_;
  }
  if (leg_repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_repo_collateral_security_type_;
  }
  if (leg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_desc_;
  }
  if (leg_security_exchange_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_exchange_;
  }
  if (leg_security_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_id_;
  }
  if (leg_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_id_source_;
  }
  if (leg_security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_type_;
  }
  if (leg_side_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_side_;
  }
  if (leg_state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_state_or_province_of_issue_;
  }
  if (leg_symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_symbol_;
  }
  if (leg_symbol_sfx_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_symbol_sfx_;
  }
  if (leg_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_currency_;
  }
  if (leg_pool_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_pool_;
  }
  if (leg_security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_security_sub_type_;
  }
  if (leg_strike_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_strike_currency_;
  }
  if (leg_time_unit_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_time_unit_;
  }
  if (leg_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_unit_of_measure_;
  }
  if (leg_maturity_time_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_maturity_time_;
  }
  if (leg_price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_price_unit_of_measure_;
  }
  if (this != default_instance_) {
  }
}

void InstrumentLeg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentLeg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentLeg_descriptor_;
}

const InstrumentLeg& InstrumentLeg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrumentLeg* InstrumentLeg::default_instance_ = NULL;

InstrumentLeg* InstrumentLeg::New() const {
  return new InstrumentLeg;
}

void InstrumentLeg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encoded_leg_issuer()) {
      if (encoded_leg_issuer_ != &::google::protobuf::internal::kEmptyString) {
        encoded_leg_issuer_->clear();
      }
    }
    encoded_leg_issuer_len_ = 0u;
    if (has_encoded_leg_security_desc()) {
      if (encoded_leg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        encoded_leg_security_desc_->clear();
      }
    }
    encoded_leg_security_desc_len_ = 0u;
    if (has_leg_cfi_code()) {
      if (leg_cfi_code_ != &::google::protobuf::internal::kEmptyString) {
        leg_cfi_code_->clear();
      }
    }
    leg_contract_multiplier_ = 0;
    if (has_leg_country_of_issue()) {
      if (leg_country_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        leg_country_of_issue_->clear();
      }
    }
    leg_coupon_payment_date_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leg_coupon_rate_ = GOOGLE_LONGLONG(0);
    leg_coupon_rate_exponent_ = 0;
    if (has_leg_credit_rating()) {
      if (leg_credit_rating_ != &::google::protobuf::internal::kEmptyString) {
        leg_credit_rating_->clear();
      }
    }
    leg_factor_ = 0;
    if (has_leg_instr_registry()) {
      if (leg_instr_registry_ != &::google::protobuf::internal::kEmptyString) {
        leg_instr_registry_->clear();
      }
    }
    leg_issue_date_ = 0;
    if (has_leg_issuer()) {
      if (leg_issuer_ != &::google::protobuf::internal::kEmptyString) {
        leg_issuer_->clear();
      }
    }
    if (has_leg_locale_of_issue()) {
      if (leg_locale_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        leg_locale_of_issue_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    leg_maturity_date_ = 0;
    leg_maturity_month_year_ = 0;
    if (has_leg_opt_attribute()) {
      if (leg_opt_attribute_ != &::google::protobuf::internal::kEmptyString) {
        leg_opt_attribute_->clear();
      }
    }
    leg_product_ = GOOGLE_LONGLONG(0);
    leg_ratio_qty_ = 0;
    leg_redemption_date_ = 0;
    if (has_leg_repo_collateral_security_type()) {
      if (leg_repo_collateral_security_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_repo_collateral_security_type_->clear();
      }
    }
    leg_repurchase_rate_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    leg_repurchase_rate_exponent_ = 0;
    leg_repurchase_term_ = GOOGLE_LONGLONG(0);
    if (has_leg_security_desc()) {
      if (leg_security_desc_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_desc_->clear();
      }
    }
    if (has_leg_security_exchange()) {
      if (leg_security_exchange_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_exchange_->clear();
      }
    }
    if (has_leg_security_id()) {
      if (leg_security_id_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_id_->clear();
      }
    }
    if (has_leg_security_id_source()) {
      if (leg_security_id_source_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_id_source_->clear();
      }
    }
    if (has_leg_security_type()) {
      if (leg_security_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_type_->clear();
      }
    }
    if (has_leg_side()) {
      if (leg_side_ != &::google::protobuf::internal::kEmptyString) {
        leg_side_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_leg_state_or_province_of_issue()) {
      if (leg_state_or_province_of_issue_ != &::google::protobuf::internal::kEmptyString) {
        leg_state_or_province_of_issue_->clear();
      }
    }
    leg_strike_price_ = GOOGLE_LONGLONG(0);
    leg_strike_price_exponent_ = 0;
    if (has_leg_symbol()) {
      if (leg_symbol_ != &::google::protobuf::internal::kEmptyString) {
        leg_symbol_->clear();
      }
    }
    if (has_leg_symbol_sfx()) {
      if (leg_symbol_sfx_ != &::google::protobuf::internal::kEmptyString) {
        leg_symbol_sfx_->clear();
      }
    }
    leg_contract_settl_month_ = 0;
    if (has_leg_currency()) {
      if (leg_currency_ != &::google::protobuf::internal::kEmptyString) {
        leg_currency_->clear();
      }
    }
    leg_dated_date_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    leg_interest_accrual_date_ = 0;
    leg_option_ratio_ = 0;
    if (has_leg_pool()) {
      if (leg_pool_ != &::google::protobuf::internal::kEmptyString) {
        leg_pool_->clear();
      }
    }
    leg_price_ = GOOGLE_LONGLONG(0);
    leg_price_exponent_ = 0;
    if (has_leg_security_sub_type()) {
      if (leg_security_sub_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_security_sub_type_->clear();
      }
    }
    if (has_leg_strike_currency()) {
      if (leg_strike_currency_ != &::google::protobuf::internal::kEmptyString) {
        leg_strike_currency_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_leg_time_unit()) {
      if (leg_time_unit_ != &::google::protobuf::internal::kEmptyString) {
        leg_time_unit_->clear();
      }
    }
    if (has_leg_unit_of_measure()) {
      if (leg_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
        leg_unit_of_measure_->clear();
      }
    }
    leg_exercise_style_ = GOOGLE_LONGLONG(0);
    if (has_leg_maturity_time()) {
      if (leg_maturity_time_ != &::google::protobuf::internal::kEmptyString) {
        leg_maturity_time_->clear();
      }
    }
    if (has_leg_price_unit_of_measure()) {
      if (leg_price_unit_of_measure_ != &::google::protobuf::internal::kEmptyString) {
        leg_price_unit_of_measure_->clear();
      }
    }
    leg_price_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    leg_price_unit_of_measure_qty_exponent_ = 0;
    leg_put_or_call_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    leg_unit_of_measure_qty_ = GOOGLE_LONGLONG(0);
    leg_unit_of_measure_qty_exponent_ = 0;
    leg_contract_multiplier_unit_ = GOOGLE_LONGLONG(0);
    leg_flow_schedule_type_ = GOOGLE_LONGLONG(0);
  }
  leg_sec_alt_id_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentLeg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encoded_leg_issuer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_leg_issuer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_encoded_leg_issuer_len;
        break;
      }

      // optional fixed32 encoded_leg_issuer_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_leg_issuer_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_leg_issuer_len_)));
          set_has_encoded_leg_issuer_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_encoded_leg_security_desc;
        break;
      }

      // optional bytes encoded_leg_security_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_leg_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_leg_security_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_encoded_leg_security_desc_len;
        break;
      }

      // optional fixed32 encoded_leg_security_desc_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_leg_security_desc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_leg_security_desc_len_)));
          set_has_encoded_leg_security_desc_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leg_cfi_code;
        break;
      }

      // optional string leg_cfi_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_cfi_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_cfi_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_cfi_code().data(), this->leg_cfi_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_leg_contract_multiplier;
        break;
      }

      // optional double leg_contract_multiplier = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_contract_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_contract_multiplier_)));
          set_has_leg_contract_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_leg_country_of_issue;
        break;
      }

      // optional string leg_country_of_issue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_country_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_country_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_country_of_issue().data(), this->leg_country_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_leg_coupon_payment_date;
        break;
      }

      // optional sfixed32 leg_coupon_payment_date = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_coupon_payment_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_coupon_payment_date_)));
          set_has_leg_coupon_payment_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_leg_coupon_rate;
        break;
      }

      // optional sfixed64 leg_coupon_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_coupon_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_coupon_rate_)));
          set_has_leg_coupon_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_leg_coupon_rate_exponent;
        break;
      }

      // optional sfixed32 leg_coupon_rate_exponent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_coupon_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_coupon_rate_exponent_)));
          set_has_leg_coupon_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_leg_credit_rating;
        break;
      }

      // optional string leg_credit_rating = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_credit_rating:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_credit_rating()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_credit_rating().data(), this->leg_credit_rating().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_leg_factor;
        break;
      }

      // optional double leg_factor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_factor_)));
          set_has_leg_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_leg_instr_registry;
        break;
      }

      // optional string leg_instr_registry = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_instr_registry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_instr_registry()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_instr_registry().data(), this->leg_instr_registry().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_leg_issue_date;
        break;
      }

      // optional sfixed32 leg_issue_date = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_issue_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_issue_date_)));
          set_has_leg_issue_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_leg_issuer;
        break;
      }

      // optional string leg_issuer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_issuer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_issuer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_issuer().data(), this->leg_issuer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_leg_locale_of_issue;
        break;
      }

      // optional string leg_locale_of_issue = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_locale_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_locale_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_locale_of_issue().data(), this->leg_locale_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_leg_maturity_date;
        break;
      }

      // optional sfixed32 leg_maturity_date = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_maturity_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_maturity_date_)));
          set_has_leg_maturity_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_leg_maturity_month_year;
        break;
      }

      // optional sfixed32 leg_maturity_month_year = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_maturity_month_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_maturity_month_year_)));
          set_has_leg_maturity_month_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_leg_opt_attribute;
        break;
      }

      // optional string leg_opt_attribute = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_opt_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_opt_attribute()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_opt_attribute().data(), this->leg_opt_attribute().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_leg_product;
        break;
      }

      // optional sfixed64 leg_product = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_product:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_product_)));
          set_has_leg_product();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_leg_ratio_qty;
        break;
      }

      // optional double leg_ratio_qty = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_ratio_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_ratio_qty_)));
          set_has_leg_ratio_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_leg_redemption_date;
        break;
      }

      // optional sfixed32 leg_redemption_date = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_redemption_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_redemption_date_)));
          set_has_leg_redemption_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_leg_repo_collateral_security_type;
        break;
      }

      // optional string leg_repo_collateral_security_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_repo_collateral_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_repo_collateral_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_repo_collateral_security_type().data(), this->leg_repo_collateral_security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_leg_repurchase_rate;
        break;
      }

      // optional sfixed64 leg_repurchase_rate = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_repurchase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_repurchase_rate_)));
          set_has_leg_repurchase_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_leg_repurchase_rate_exponent;
        break;
      }

      // optional sfixed32 leg_repurchase_rate_exponent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_repurchase_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_repurchase_rate_exponent_)));
          set_has_leg_repurchase_rate_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_leg_repurchase_term;
        break;
      }

      // optional sfixed64 leg_repurchase_term = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_repurchase_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_repurchase_term_)));
          set_has_leg_repurchase_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_leg_security_desc;
        break;
      }

      // optional string leg_security_desc = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_desc().data(), this->leg_security_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_leg_security_exchange;
        break;
      }

      // optional string leg_security_exchange = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_exchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_exchange().data(), this->leg_security_exchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_leg_security_id;
        break;
      }

      // optional string leg_security_id = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_id().data(), this->leg_security_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_leg_security_id_source;
        break;
      }

      // optional string leg_security_id_source = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_id_source().data(), this->leg_security_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_leg_security_type;
        break;
      }

      // optional string leg_security_type = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_type().data(), this->leg_security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_leg_side;
        break;
      }

      // optional string leg_side = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_side()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_side().data(), this->leg_side().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_leg_state_or_province_of_issue;
        break;
      }

      // optional string leg_state_or_province_of_issue = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_state_or_province_of_issue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_state_or_province_of_issue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_state_or_province_of_issue().data(), this->leg_state_or_province_of_issue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_leg_strike_price;
        break;
      }

      // optional sfixed64 leg_strike_price = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_strike_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_strike_price_)));
          set_has_leg_strike_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_leg_strike_price_exponent;
        break;
      }

      // optional sfixed32 leg_strike_price_exponent = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_strike_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_strike_price_exponent_)));
          set_has_leg_strike_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_leg_symbol;
        break;
      }

      // optional string leg_symbol = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_symbol().data(), this->leg_symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_leg_symbol_sfx;
        break;
      }

      // optional string leg_symbol_sfx = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_symbol_sfx:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_symbol_sfx()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_symbol_sfx().data(), this->leg_symbol_sfx().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_leg_contract_settl_month;
        break;
      }

      // optional sfixed32 leg_contract_settl_month = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_contract_settl_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_contract_settl_month_)));
          set_has_leg_contract_settl_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_leg_currency;
        break;
      }

      // optional string leg_currency = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_currency().data(), this->leg_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_leg_dated_date;
        break;
      }

      // optional sfixed32 leg_dated_date = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_dated_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_dated_date_)));
          set_has_leg_dated_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_leg_interest_accrual_date;
        break;
      }

      // optional sfixed32 leg_interest_accrual_date = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_interest_accrual_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_interest_accrual_date_)));
          set_has_leg_interest_accrual_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_leg_option_ratio;
        break;
      }

      // optional double leg_option_ratio = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_option_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_option_ratio_)));
          set_has_leg_option_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_leg_pool;
        break;
      }

      // optional string leg_pool = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_pool()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_pool().data(), this->leg_pool().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_leg_price;
        break;
      }

      // optional sfixed64 leg_price = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_price_)));
          set_has_leg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_leg_price_exponent;
        break;
      }

      // optional sfixed32 leg_price_exponent = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_price_exponent_)));
          set_has_leg_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_leg_sec_alt_id_grp;
        break;
      }

      // repeated .Common.LegSecAltIdGrp leg_sec_alt_id_grp = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_sec_alt_id_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_sec_alt_id_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_leg_sec_alt_id_grp;
        if (input->ExpectTag(378)) goto parse_leg_security_sub_type;
        break;
      }

      // optional string leg_security_sub_type = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_security_sub_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_security_sub_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_security_sub_type().data(), this->leg_security_sub_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_leg_strike_currency;
        break;
      }

      // optional string leg_strike_currency = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_strike_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_strike_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_strike_currency().data(), this->leg_strike_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_leg_time_unit;
        break;
      }

      // optional string leg_time_unit = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_time_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_time_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_time_unit().data(), this->leg_time_unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_leg_unit_of_measure;
        break;
      }

      // optional string leg_unit_of_measure = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_unit_of_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_unit_of_measure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_unit_of_measure().data(), this->leg_unit_of_measure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(409)) goto parse_leg_exercise_style;
        break;
      }

      // optional sfixed64 leg_exercise_style = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_exercise_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_exercise_style_)));
          set_has_leg_exercise_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_leg_maturity_time;
        break;
      }

      // optional string leg_maturity_time = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_maturity_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_maturity_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_maturity_time().data(), this->leg_maturity_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_leg_price_unit_of_measure;
        break;
      }

      // optional string leg_price_unit_of_measure = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_price_unit_of_measure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_price_unit_of_measure()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_price_unit_of_measure().data(), this->leg_price_unit_of_measure().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(433)) goto parse_leg_price_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 leg_price_unit_of_measure_qty = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_price_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_price_unit_of_measure_qty_)));
          set_has_leg_price_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(445)) goto parse_leg_price_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 leg_price_unit_of_measure_qty_exponent = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_price_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_price_unit_of_measure_qty_exponent_)));
          set_has_leg_price_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_leg_put_or_call;
        break;
      }

      // optional sfixed64 leg_put_or_call = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_put_or_call:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_put_or_call_)));
          set_has_leg_put_or_call();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(457)) goto parse_leg_unit_of_measure_qty;
        break;
      }

      // optional sfixed64 leg_unit_of_measure_qty = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_unit_of_measure_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_unit_of_measure_qty_)));
          set_has_leg_unit_of_measure_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(469)) goto parse_leg_unit_of_measure_qty_exponent;
        break;
      }

      // optional sfixed32 leg_unit_of_measure_qty_exponent = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_unit_of_measure_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_unit_of_measure_qty_exponent_)));
          set_has_leg_unit_of_measure_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(473)) goto parse_leg_contract_multiplier_unit;
        break;
      }

      // optional sfixed64 leg_contract_multiplier_unit = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_contract_multiplier_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_contract_multiplier_unit_)));
          set_has_leg_contract_multiplier_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(481)) goto parse_leg_flow_schedule_type;
        break;
      }

      // optional sfixed64 leg_flow_schedule_type = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_flow_schedule_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_flow_schedule_type_)));
          set_has_leg_flow_schedule_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentLeg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes encoded_leg_issuer = 1;
  if (has_encoded_leg_issuer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->encoded_leg_issuer(), output);
  }

  // optional fixed32 encoded_leg_issuer_len = 2;
  if (has_encoded_leg_issuer_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->encoded_leg_issuer_len(), output);
  }

  // optional bytes encoded_leg_security_desc = 3;
  if (has_encoded_leg_security_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->encoded_leg_security_desc(), output);
  }

  // optional fixed32 encoded_leg_security_desc_len = 4;
  if (has_encoded_leg_security_desc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->encoded_leg_security_desc_len(), output);
  }

  // optional string leg_cfi_code = 5;
  if (has_leg_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_cfi_code().data(), this->leg_cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leg_cfi_code(), output);
  }

  // optional double leg_contract_multiplier = 6;
  if (has_leg_contract_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->leg_contract_multiplier(), output);
  }

  // optional string leg_country_of_issue = 7;
  if (has_leg_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_country_of_issue().data(), this->leg_country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->leg_country_of_issue(), output);
  }

  // optional sfixed32 leg_coupon_payment_date = 8;
  if (has_leg_coupon_payment_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->leg_coupon_payment_date(), output);
  }

  // optional sfixed64 leg_coupon_rate = 9;
  if (has_leg_coupon_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->leg_coupon_rate(), output);
  }

  // optional sfixed32 leg_coupon_rate_exponent = 10;
  if (has_leg_coupon_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->leg_coupon_rate_exponent(), output);
  }

  // optional string leg_credit_rating = 11;
  if (has_leg_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_credit_rating().data(), this->leg_credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->leg_credit_rating(), output);
  }

  // optional double leg_factor = 12;
  if (has_leg_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->leg_factor(), output);
  }

  // optional string leg_instr_registry = 13;
  if (has_leg_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_instr_registry().data(), this->leg_instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->leg_instr_registry(), output);
  }

  // optional sfixed32 leg_issue_date = 14;
  if (has_leg_issue_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->leg_issue_date(), output);
  }

  // optional string leg_issuer = 15;
  if (has_leg_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_issuer().data(), this->leg_issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->leg_issuer(), output);
  }

  // optional string leg_locale_of_issue = 16;
  if (has_leg_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_locale_of_issue().data(), this->leg_locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->leg_locale_of_issue(), output);
  }

  // optional sfixed32 leg_maturity_date = 17;
  if (has_leg_maturity_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(17, this->leg_maturity_date(), output);
  }

  // optional sfixed32 leg_maturity_month_year = 18;
  if (has_leg_maturity_month_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->leg_maturity_month_year(), output);
  }

  // optional string leg_opt_attribute = 19;
  if (has_leg_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_opt_attribute().data(), this->leg_opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->leg_opt_attribute(), output);
  }

  // optional sfixed64 leg_product = 20;
  if (has_leg_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(20, this->leg_product(), output);
  }

  // optional double leg_ratio_qty = 21;
  if (has_leg_ratio_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->leg_ratio_qty(), output);
  }

  // optional sfixed32 leg_redemption_date = 22;
  if (has_leg_redemption_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(22, this->leg_redemption_date(), output);
  }

  // optional string leg_repo_collateral_security_type = 23;
  if (has_leg_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_repo_collateral_security_type().data(), this->leg_repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->leg_repo_collateral_security_type(), output);
  }

  // optional sfixed64 leg_repurchase_rate = 24;
  if (has_leg_repurchase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(24, this->leg_repurchase_rate(), output);
  }

  // optional sfixed32 leg_repurchase_rate_exponent = 25;
  if (has_leg_repurchase_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(25, this->leg_repurchase_rate_exponent(), output);
  }

  // optional sfixed64 leg_repurchase_term = 26;
  if (has_leg_repurchase_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(26, this->leg_repurchase_term(), output);
  }

  // optional string leg_security_desc = 27;
  if (has_leg_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_desc().data(), this->leg_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->leg_security_desc(), output);
  }

  // optional string leg_security_exchange = 28;
  if (has_leg_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_exchange().data(), this->leg_security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->leg_security_exchange(), output);
  }

  // optional string leg_security_id = 29;
  if (has_leg_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_id().data(), this->leg_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->leg_security_id(), output);
  }

  // optional string leg_security_id_source = 30;
  if (has_leg_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_id_source().data(), this->leg_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->leg_security_id_source(), output);
  }

  // optional string leg_security_type = 31;
  if (has_leg_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_type().data(), this->leg_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->leg_security_type(), output);
  }

  // optional string leg_side = 32;
  if (has_leg_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_side().data(), this->leg_side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->leg_side(), output);
  }

  // optional string leg_state_or_province_of_issue = 33;
  if (has_leg_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_state_or_province_of_issue().data(), this->leg_state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->leg_state_or_province_of_issue(), output);
  }

  // optional sfixed64 leg_strike_price = 34;
  if (has_leg_strike_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(34, this->leg_strike_price(), output);
  }

  // optional sfixed32 leg_strike_price_exponent = 35;
  if (has_leg_strike_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(35, this->leg_strike_price_exponent(), output);
  }

  // optional string leg_symbol = 36;
  if (has_leg_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_symbol().data(), this->leg_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->leg_symbol(), output);
  }

  // optional string leg_symbol_sfx = 37;
  if (has_leg_symbol_sfx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_symbol_sfx().data(), this->leg_symbol_sfx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->leg_symbol_sfx(), output);
  }

  // optional sfixed32 leg_contract_settl_month = 38;
  if (has_leg_contract_settl_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(38, this->leg_contract_settl_month(), output);
  }

  // optional string leg_currency = 39;
  if (has_leg_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_currency().data(), this->leg_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->leg_currency(), output);
  }

  // optional sfixed32 leg_dated_date = 40;
  if (has_leg_dated_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(40, this->leg_dated_date(), output);
  }

  // optional sfixed32 leg_interest_accrual_date = 41;
  if (has_leg_interest_accrual_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(41, this->leg_interest_accrual_date(), output);
  }

  // optional double leg_option_ratio = 42;
  if (has_leg_option_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->leg_option_ratio(), output);
  }

  // optional string leg_pool = 43;
  if (has_leg_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_pool().data(), this->leg_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->leg_pool(), output);
  }

  // optional sfixed64 leg_price = 44;
  if (has_leg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(44, this->leg_price(), output);
  }

  // optional sfixed32 leg_price_exponent = 45;
  if (has_leg_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(45, this->leg_price_exponent(), output);
  }

  // repeated .Common.LegSecAltIdGrp leg_sec_alt_id_grp = 46;
  for (int i = 0; i < this->leg_sec_alt_id_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->leg_sec_alt_id_grp(i), output);
  }

  // optional string leg_security_sub_type = 47;
  if (has_leg_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_sub_type().data(), this->leg_security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->leg_security_sub_type(), output);
  }

  // optional string leg_strike_currency = 48;
  if (has_leg_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_strike_currency().data(), this->leg_strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->leg_strike_currency(), output);
  }

  // optional string leg_time_unit = 49;
  if (has_leg_time_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_time_unit().data(), this->leg_time_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->leg_time_unit(), output);
  }

  // optional string leg_unit_of_measure = 50;
  if (has_leg_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_unit_of_measure().data(), this->leg_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->leg_unit_of_measure(), output);
  }

  // optional sfixed64 leg_exercise_style = 51;
  if (has_leg_exercise_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(51, this->leg_exercise_style(), output);
  }

  // optional string leg_maturity_time = 52;
  if (has_leg_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_maturity_time().data(), this->leg_maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->leg_maturity_time(), output);
  }

  // optional string leg_price_unit_of_measure = 53;
  if (has_leg_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_price_unit_of_measure().data(), this->leg_price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      53, this->leg_price_unit_of_measure(), output);
  }

  // optional sfixed64 leg_price_unit_of_measure_qty = 54;
  if (has_leg_price_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(54, this->leg_price_unit_of_measure_qty(), output);
  }

  // optional sfixed32 leg_price_unit_of_measure_qty_exponent = 55;
  if (has_leg_price_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(55, this->leg_price_unit_of_measure_qty_exponent(), output);
  }

  // optional sfixed64 leg_put_or_call = 56;
  if (has_leg_put_or_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(56, this->leg_put_or_call(), output);
  }

  // optional sfixed64 leg_unit_of_measure_qty = 57;
  if (has_leg_unit_of_measure_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(57, this->leg_unit_of_measure_qty(), output);
  }

  // optional sfixed32 leg_unit_of_measure_qty_exponent = 58;
  if (has_leg_unit_of_measure_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(58, this->leg_unit_of_measure_qty_exponent(), output);
  }

  // optional sfixed64 leg_contract_multiplier_unit = 59;
  if (has_leg_contract_multiplier_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(59, this->leg_contract_multiplier_unit(), output);
  }

  // optional sfixed64 leg_flow_schedule_type = 60;
  if (has_leg_flow_schedule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(60, this->leg_flow_schedule_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentLeg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes encoded_leg_issuer = 1;
  if (has_encoded_leg_issuer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encoded_leg_issuer(), target);
  }

  // optional fixed32 encoded_leg_issuer_len = 2;
  if (has_encoded_leg_issuer_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->encoded_leg_issuer_len(), target);
  }

  // optional bytes encoded_leg_security_desc = 3;
  if (has_encoded_leg_security_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->encoded_leg_security_desc(), target);
  }

  // optional fixed32 encoded_leg_security_desc_len = 4;
  if (has_encoded_leg_security_desc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->encoded_leg_security_desc_len(), target);
  }

  // optional string leg_cfi_code = 5;
  if (has_leg_cfi_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_cfi_code().data(), this->leg_cfi_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leg_cfi_code(), target);
  }

  // optional double leg_contract_multiplier = 6;
  if (has_leg_contract_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->leg_contract_multiplier(), target);
  }

  // optional string leg_country_of_issue = 7;
  if (has_leg_country_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_country_of_issue().data(), this->leg_country_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leg_country_of_issue(), target);
  }

  // optional sfixed32 leg_coupon_payment_date = 8;
  if (has_leg_coupon_payment_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->leg_coupon_payment_date(), target);
  }

  // optional sfixed64 leg_coupon_rate = 9;
  if (has_leg_coupon_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->leg_coupon_rate(), target);
  }

  // optional sfixed32 leg_coupon_rate_exponent = 10;
  if (has_leg_coupon_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->leg_coupon_rate_exponent(), target);
  }

  // optional string leg_credit_rating = 11;
  if (has_leg_credit_rating()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_credit_rating().data(), this->leg_credit_rating().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->leg_credit_rating(), target);
  }

  // optional double leg_factor = 12;
  if (has_leg_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->leg_factor(), target);
  }

  // optional string leg_instr_registry = 13;
  if (has_leg_instr_registry()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_instr_registry().data(), this->leg_instr_registry().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->leg_instr_registry(), target);
  }

  // optional sfixed32 leg_issue_date = 14;
  if (has_leg_issue_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->leg_issue_date(), target);
  }

  // optional string leg_issuer = 15;
  if (has_leg_issuer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_issuer().data(), this->leg_issuer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->leg_issuer(), target);
  }

  // optional string leg_locale_of_issue = 16;
  if (has_leg_locale_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_locale_of_issue().data(), this->leg_locale_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->leg_locale_of_issue(), target);
  }

  // optional sfixed32 leg_maturity_date = 17;
  if (has_leg_maturity_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(17, this->leg_maturity_date(), target);
  }

  // optional sfixed32 leg_maturity_month_year = 18;
  if (has_leg_maturity_month_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->leg_maturity_month_year(), target);
  }

  // optional string leg_opt_attribute = 19;
  if (has_leg_opt_attribute()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_opt_attribute().data(), this->leg_opt_attribute().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->leg_opt_attribute(), target);
  }

  // optional sfixed64 leg_product = 20;
  if (has_leg_product()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(20, this->leg_product(), target);
  }

  // optional double leg_ratio_qty = 21;
  if (has_leg_ratio_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->leg_ratio_qty(), target);
  }

  // optional sfixed32 leg_redemption_date = 22;
  if (has_leg_redemption_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(22, this->leg_redemption_date(), target);
  }

  // optional string leg_repo_collateral_security_type = 23;
  if (has_leg_repo_collateral_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_repo_collateral_security_type().data(), this->leg_repo_collateral_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->leg_repo_collateral_security_type(), target);
  }

  // optional sfixed64 leg_repurchase_rate = 24;
  if (has_leg_repurchase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(24, this->leg_repurchase_rate(), target);
  }

  // optional sfixed32 leg_repurchase_rate_exponent = 25;
  if (has_leg_repurchase_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(25, this->leg_repurchase_rate_exponent(), target);
  }

  // optional sfixed64 leg_repurchase_term = 26;
  if (has_leg_repurchase_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(26, this->leg_repurchase_term(), target);
  }

  // optional string leg_security_desc = 27;
  if (has_leg_security_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_desc().data(), this->leg_security_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->leg_security_desc(), target);
  }

  // optional string leg_security_exchange = 28;
  if (has_leg_security_exchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_exchange().data(), this->leg_security_exchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->leg_security_exchange(), target);
  }

  // optional string leg_security_id = 29;
  if (has_leg_security_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_id().data(), this->leg_security_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->leg_security_id(), target);
  }

  // optional string leg_security_id_source = 30;
  if (has_leg_security_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_id_source().data(), this->leg_security_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->leg_security_id_source(), target);
  }

  // optional string leg_security_type = 31;
  if (has_leg_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_type().data(), this->leg_security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->leg_security_type(), target);
  }

  // optional string leg_side = 32;
  if (has_leg_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_side().data(), this->leg_side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->leg_side(), target);
  }

  // optional string leg_state_or_province_of_issue = 33;
  if (has_leg_state_or_province_of_issue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_state_or_province_of_issue().data(), this->leg_state_or_province_of_issue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->leg_state_or_province_of_issue(), target);
  }

  // optional sfixed64 leg_strike_price = 34;
  if (has_leg_strike_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(34, this->leg_strike_price(), target);
  }

  // optional sfixed32 leg_strike_price_exponent = 35;
  if (has_leg_strike_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(35, this->leg_strike_price_exponent(), target);
  }

  // optional string leg_symbol = 36;
  if (has_leg_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_symbol().data(), this->leg_symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->leg_symbol(), target);
  }

  // optional string leg_symbol_sfx = 37;
  if (has_leg_symbol_sfx()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_symbol_sfx().data(), this->leg_symbol_sfx().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->leg_symbol_sfx(), target);
  }

  // optional sfixed32 leg_contract_settl_month = 38;
  if (has_leg_contract_settl_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(38, this->leg_contract_settl_month(), target);
  }

  // optional string leg_currency = 39;
  if (has_leg_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_currency().data(), this->leg_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->leg_currency(), target);
  }

  // optional sfixed32 leg_dated_date = 40;
  if (has_leg_dated_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(40, this->leg_dated_date(), target);
  }

  // optional sfixed32 leg_interest_accrual_date = 41;
  if (has_leg_interest_accrual_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(41, this->leg_interest_accrual_date(), target);
  }

  // optional double leg_option_ratio = 42;
  if (has_leg_option_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->leg_option_ratio(), target);
  }

  // optional string leg_pool = 43;
  if (has_leg_pool()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_pool().data(), this->leg_pool().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->leg_pool(), target);
  }

  // optional sfixed64 leg_price = 44;
  if (has_leg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(44, this->leg_price(), target);
  }

  // optional sfixed32 leg_price_exponent = 45;
  if (has_leg_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(45, this->leg_price_exponent(), target);
  }

  // repeated .Common.LegSecAltIdGrp leg_sec_alt_id_grp = 46;
  for (int i = 0; i < this->leg_sec_alt_id_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->leg_sec_alt_id_grp(i), target);
  }

  // optional string leg_security_sub_type = 47;
  if (has_leg_security_sub_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_security_sub_type().data(), this->leg_security_sub_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->leg_security_sub_type(), target);
  }

  // optional string leg_strike_currency = 48;
  if (has_leg_strike_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_strike_currency().data(), this->leg_strike_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->leg_strike_currency(), target);
  }

  // optional string leg_time_unit = 49;
  if (has_leg_time_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_time_unit().data(), this->leg_time_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->leg_time_unit(), target);
  }

  // optional string leg_unit_of_measure = 50;
  if (has_leg_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_unit_of_measure().data(), this->leg_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->leg_unit_of_measure(), target);
  }

  // optional sfixed64 leg_exercise_style = 51;
  if (has_leg_exercise_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(51, this->leg_exercise_style(), target);
  }

  // optional string leg_maturity_time = 52;
  if (has_leg_maturity_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_maturity_time().data(), this->leg_maturity_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->leg_maturity_time(), target);
  }

  // optional string leg_price_unit_of_measure = 53;
  if (has_leg_price_unit_of_measure()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_price_unit_of_measure().data(), this->leg_price_unit_of_measure().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->leg_price_unit_of_measure(), target);
  }

  // optional sfixed64 leg_price_unit_of_measure_qty = 54;
  if (has_leg_price_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(54, this->leg_price_unit_of_measure_qty(), target);
  }

  // optional sfixed32 leg_price_unit_of_measure_qty_exponent = 55;
  if (has_leg_price_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(55, this->leg_price_unit_of_measure_qty_exponent(), target);
  }

  // optional sfixed64 leg_put_or_call = 56;
  if (has_leg_put_or_call()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(56, this->leg_put_or_call(), target);
  }

  // optional sfixed64 leg_unit_of_measure_qty = 57;
  if (has_leg_unit_of_measure_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(57, this->leg_unit_of_measure_qty(), target);
  }

  // optional sfixed32 leg_unit_of_measure_qty_exponent = 58;
  if (has_leg_unit_of_measure_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(58, this->leg_unit_of_measure_qty_exponent(), target);
  }

  // optional sfixed64 leg_contract_multiplier_unit = 59;
  if (has_leg_contract_multiplier_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(59, this->leg_contract_multiplier_unit(), target);
  }

  // optional sfixed64 leg_flow_schedule_type = 60;
  if (has_leg_flow_schedule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(60, this->leg_flow_schedule_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentLeg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes encoded_leg_issuer = 1;
    if (has_encoded_leg_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_leg_issuer());
    }

    // optional fixed32 encoded_leg_issuer_len = 2;
    if (has_encoded_leg_issuer_len()) {
      total_size += 1 + 4;
    }

    // optional bytes encoded_leg_security_desc = 3;
    if (has_encoded_leg_security_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_leg_security_desc());
    }

    // optional fixed32 encoded_leg_security_desc_len = 4;
    if (has_encoded_leg_security_desc_len()) {
      total_size += 1 + 4;
    }

    // optional string leg_cfi_code = 5;
    if (has_leg_cfi_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_cfi_code());
    }

    // optional double leg_contract_multiplier = 6;
    if (has_leg_contract_multiplier()) {
      total_size += 1 + 8;
    }

    // optional string leg_country_of_issue = 7;
    if (has_leg_country_of_issue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_country_of_issue());
    }

    // optional sfixed32 leg_coupon_payment_date = 8;
    if (has_leg_coupon_payment_date()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed64 leg_coupon_rate = 9;
    if (has_leg_coupon_rate()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_coupon_rate_exponent = 10;
    if (has_leg_coupon_rate_exponent()) {
      total_size += 1 + 4;
    }

    // optional string leg_credit_rating = 11;
    if (has_leg_credit_rating()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_credit_rating());
    }

    // optional double leg_factor = 12;
    if (has_leg_factor()) {
      total_size += 1 + 8;
    }

    // optional string leg_instr_registry = 13;
    if (has_leg_instr_registry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_instr_registry());
    }

    // optional sfixed32 leg_issue_date = 14;
    if (has_leg_issue_date()) {
      total_size += 1 + 4;
    }

    // optional string leg_issuer = 15;
    if (has_leg_issuer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_issuer());
    }

    // optional string leg_locale_of_issue = 16;
    if (has_leg_locale_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_locale_of_issue());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed32 leg_maturity_date = 17;
    if (has_leg_maturity_date()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 leg_maturity_month_year = 18;
    if (has_leg_maturity_month_year()) {
      total_size += 2 + 4;
    }

    // optional string leg_opt_attribute = 19;
    if (has_leg_opt_attribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_opt_attribute());
    }

    // optional sfixed64 leg_product = 20;
    if (has_leg_product()) {
      total_size += 2 + 8;
    }

    // optional double leg_ratio_qty = 21;
    if (has_leg_ratio_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_redemption_date = 22;
    if (has_leg_redemption_date()) {
      total_size += 2 + 4;
    }

    // optional string leg_repo_collateral_security_type = 23;
    if (has_leg_repo_collateral_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_repo_collateral_security_type());
    }

    // optional sfixed64 leg_repurchase_rate = 24;
    if (has_leg_repurchase_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed32 leg_repurchase_rate_exponent = 25;
    if (has_leg_repurchase_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 leg_repurchase_term = 26;
    if (has_leg_repurchase_term()) {
      total_size += 2 + 8;
    }

    // optional string leg_security_desc = 27;
    if (has_leg_security_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_desc());
    }

    // optional string leg_security_exchange = 28;
    if (has_leg_security_exchange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_exchange());
    }

    // optional string leg_security_id = 29;
    if (has_leg_security_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_id());
    }

    // optional string leg_security_id_source = 30;
    if (has_leg_security_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_id_source());
    }

    // optional string leg_security_type = 31;
    if (has_leg_security_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_type());
    }

    // optional string leg_side = 32;
    if (has_leg_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_side());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string leg_state_or_province_of_issue = 33;
    if (has_leg_state_or_province_of_issue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_state_or_province_of_issue());
    }

    // optional sfixed64 leg_strike_price = 34;
    if (has_leg_strike_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_strike_price_exponent = 35;
    if (has_leg_strike_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional string leg_symbol = 36;
    if (has_leg_symbol()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_symbol());
    }

    // optional string leg_symbol_sfx = 37;
    if (has_leg_symbol_sfx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_symbol_sfx());
    }

    // optional sfixed32 leg_contract_settl_month = 38;
    if (has_leg_contract_settl_month()) {
      total_size += 2 + 4;
    }

    // optional string leg_currency = 39;
    if (has_leg_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_currency());
    }

    // optional sfixed32 leg_dated_date = 40;
    if (has_leg_dated_date()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional sfixed32 leg_interest_accrual_date = 41;
    if (has_leg_interest_accrual_date()) {
      total_size += 2 + 4;
    }

    // optional double leg_option_ratio = 42;
    if (has_leg_option_ratio()) {
      total_size += 2 + 8;
    }

    // optional string leg_pool = 43;
    if (has_leg_pool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_pool());
    }

    // optional sfixed64 leg_price = 44;
    if (has_leg_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_price_exponent = 45;
    if (has_leg_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional string leg_security_sub_type = 47;
    if (has_leg_security_sub_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_security_sub_type());
    }

    // optional string leg_strike_currency = 48;
    if (has_leg_strike_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_strike_currency());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string leg_time_unit = 49;
    if (has_leg_time_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_time_unit());
    }

    // optional string leg_unit_of_measure = 50;
    if (has_leg_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_unit_of_measure());
    }

    // optional sfixed64 leg_exercise_style = 51;
    if (has_leg_exercise_style()) {
      total_size += 2 + 8;
    }

    // optional string leg_maturity_time = 52;
    if (has_leg_maturity_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_maturity_time());
    }

    // optional string leg_price_unit_of_measure = 53;
    if (has_leg_price_unit_of_measure()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_price_unit_of_measure());
    }

    // optional sfixed64 leg_price_unit_of_measure_qty = 54;
    if (has_leg_price_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_price_unit_of_measure_qty_exponent = 55;
    if (has_leg_price_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 leg_put_or_call = 56;
    if (has_leg_put_or_call()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional sfixed64 leg_unit_of_measure_qty = 57;
    if (has_leg_unit_of_measure_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_unit_of_measure_qty_exponent = 58;
    if (has_leg_unit_of_measure_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 leg_contract_multiplier_unit = 59;
    if (has_leg_contract_multiplier_unit()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 leg_flow_schedule_type = 60;
    if (has_leg_flow_schedule_type()) {
      total_size += 2 + 8;
    }

  }
  // repeated .Common.LegSecAltIdGrp leg_sec_alt_id_grp = 46;
  total_size += 2 * this->leg_sec_alt_id_grp_size();
  for (int i = 0; i < this->leg_sec_alt_id_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_sec_alt_id_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentLeg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentLeg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentLeg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentLeg::MergeFrom(const InstrumentLeg& from) {
  GOOGLE_CHECK_NE(&from, this);
  leg_sec_alt_id_grp_.MergeFrom(from.leg_sec_alt_id_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoded_leg_issuer()) {
      set_encoded_leg_issuer(from.encoded_leg_issuer());
    }
    if (from.has_encoded_leg_issuer_len()) {
      set_encoded_leg_issuer_len(from.encoded_leg_issuer_len());
    }
    if (from.has_encoded_leg_security_desc()) {
      set_encoded_leg_security_desc(from.encoded_leg_security_desc());
    }
    if (from.has_encoded_leg_security_desc_len()) {
      set_encoded_leg_security_desc_len(from.encoded_leg_security_desc_len());
    }
    if (from.has_leg_cfi_code()) {
      set_leg_cfi_code(from.leg_cfi_code());
    }
    if (from.has_leg_contract_multiplier()) {
      set_leg_contract_multiplier(from.leg_contract_multiplier());
    }
    if (from.has_leg_country_of_issue()) {
      set_leg_country_of_issue(from.leg_country_of_issue());
    }
    if (from.has_leg_coupon_payment_date()) {
      set_leg_coupon_payment_date(from.leg_coupon_payment_date());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leg_coupon_rate()) {
      set_leg_coupon_rate(from.leg_coupon_rate());
    }
    if (from.has_leg_coupon_rate_exponent()) {
      set_leg_coupon_rate_exponent(from.leg_coupon_rate_exponent());
    }
    if (from.has_leg_credit_rating()) {
      set_leg_credit_rating(from.leg_credit_rating());
    }
    if (from.has_leg_factor()) {
      set_leg_factor(from.leg_factor());
    }
    if (from.has_leg_instr_registry()) {
      set_leg_instr_registry(from.leg_instr_registry());
    }
    if (from.has_leg_issue_date()) {
      set_leg_issue_date(from.leg_issue_date());
    }
    if (from.has_leg_issuer()) {
      set_leg_issuer(from.leg_issuer());
    }
    if (from.has_leg_locale_of_issue()) {
      set_leg_locale_of_issue(from.leg_locale_of_issue());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leg_maturity_date()) {
      set_leg_maturity_date(from.leg_maturity_date());
    }
    if (from.has_leg_maturity_month_year()) {
      set_leg_maturity_month_year(from.leg_maturity_month_year());
    }
    if (from.has_leg_opt_attribute()) {
      set_leg_opt_attribute(from.leg_opt_attribute());
    }
    if (from.has_leg_product()) {
      set_leg_product(from.leg_product());
    }
    if (from.has_leg_ratio_qty()) {
      set_leg_ratio_qty(from.leg_ratio_qty());
    }
    if (from.has_leg_redemption_date()) {
      set_leg_redemption_date(from.leg_redemption_date());
    }
    if (from.has_leg_repo_collateral_security_type()) {
      set_leg_repo_collateral_security_type(from.leg_repo_collateral_security_type());
    }
    if (from.has_leg_repurchase_rate()) {
      set_leg_repurchase_rate(from.leg_repurchase_rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_leg_repurchase_rate_exponent()) {
      set_leg_repurchase_rate_exponent(from.leg_repurchase_rate_exponent());
    }
    if (from.has_leg_repurchase_term()) {
      set_leg_repurchase_term(from.leg_repurchase_term());
    }
    if (from.has_leg_security_desc()) {
      set_leg_security_desc(from.leg_security_desc());
    }
    if (from.has_leg_security_exchange()) {
      set_leg_security_exchange(from.leg_security_exchange());
    }
    if (from.has_leg_security_id()) {
      set_leg_security_id(from.leg_security_id());
    }
    if (from.has_leg_security_id_source()) {
      set_leg_security_id_source(from.leg_security_id_source());
    }
    if (from.has_leg_security_type()) {
      set_leg_security_type(from.leg_security_type());
    }
    if (from.has_leg_side()) {
      set_leg_side(from.leg_side());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_leg_state_or_province_of_issue()) {
      set_leg_state_or_province_of_issue(from.leg_state_or_province_of_issue());
    }
    if (from.has_leg_strike_price()) {
      set_leg_strike_price(from.leg_strike_price());
    }
    if (from.has_leg_strike_price_exponent()) {
      set_leg_strike_price_exponent(from.leg_strike_price_exponent());
    }
    if (from.has_leg_symbol()) {
      set_leg_symbol(from.leg_symbol());
    }
    if (from.has_leg_symbol_sfx()) {
      set_leg_symbol_sfx(from.leg_symbol_sfx());
    }
    if (from.has_leg_contract_settl_month()) {
      set_leg_contract_settl_month(from.leg_contract_settl_month());
    }
    if (from.has_leg_currency()) {
      set_leg_currency(from.leg_currency());
    }
    if (from.has_leg_dated_date()) {
      set_leg_dated_date(from.leg_dated_date());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_leg_interest_accrual_date()) {
      set_leg_interest_accrual_date(from.leg_interest_accrual_date());
    }
    if (from.has_leg_option_ratio()) {
      set_leg_option_ratio(from.leg_option_ratio());
    }
    if (from.has_leg_pool()) {
      set_leg_pool(from.leg_pool());
    }
    if (from.has_leg_price()) {
      set_leg_price(from.leg_price());
    }
    if (from.has_leg_price_exponent()) {
      set_leg_price_exponent(from.leg_price_exponent());
    }
    if (from.has_leg_security_sub_type()) {
      set_leg_security_sub_type(from.leg_security_sub_type());
    }
    if (from.has_leg_strike_currency()) {
      set_leg_strike_currency(from.leg_strike_currency());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_leg_time_unit()) {
      set_leg_time_unit(from.leg_time_unit());
    }
    if (from.has_leg_unit_of_measure()) {
      set_leg_unit_of_measure(from.leg_unit_of_measure());
    }
    if (from.has_leg_exercise_style()) {
      set_leg_exercise_style(from.leg_exercise_style());
    }
    if (from.has_leg_maturity_time()) {
      set_leg_maturity_time(from.leg_maturity_time());
    }
    if (from.has_leg_price_unit_of_measure()) {
      set_leg_price_unit_of_measure(from.leg_price_unit_of_measure());
    }
    if (from.has_leg_price_unit_of_measure_qty()) {
      set_leg_price_unit_of_measure_qty(from.leg_price_unit_of_measure_qty());
    }
    if (from.has_leg_price_unit_of_measure_qty_exponent()) {
      set_leg_price_unit_of_measure_qty_exponent(from.leg_price_unit_of_measure_qty_exponent());
    }
    if (from.has_leg_put_or_call()) {
      set_leg_put_or_call(from.leg_put_or_call());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_leg_unit_of_measure_qty()) {
      set_leg_unit_of_measure_qty(from.leg_unit_of_measure_qty());
    }
    if (from.has_leg_unit_of_measure_qty_exponent()) {
      set_leg_unit_of_measure_qty_exponent(from.leg_unit_of_measure_qty_exponent());
    }
    if (from.has_leg_contract_multiplier_unit()) {
      set_leg_contract_multiplier_unit(from.leg_contract_multiplier_unit());
    }
    if (from.has_leg_flow_schedule_type()) {
      set_leg_flow_schedule_type(from.leg_flow_schedule_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentLeg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentLeg::CopyFrom(const InstrumentLeg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentLeg::IsInitialized() const {

  return true;
}

void InstrumentLeg::Swap(InstrumentLeg* other) {
  if (other != this) {
    std::swap(encoded_leg_issuer_, other->encoded_leg_issuer_);
    std::swap(encoded_leg_issuer_len_, other->encoded_leg_issuer_len_);
    std::swap(encoded_leg_security_desc_, other->encoded_leg_security_desc_);
    std::swap(encoded_leg_security_desc_len_, other->encoded_leg_security_desc_len_);
    std::swap(leg_cfi_code_, other->leg_cfi_code_);
    std::swap(leg_contract_multiplier_, other->leg_contract_multiplier_);
    std::swap(leg_country_of_issue_, other->leg_country_of_issue_);
    std::swap(leg_coupon_payment_date_, other->leg_coupon_payment_date_);
    std::swap(leg_coupon_rate_, other->leg_coupon_rate_);
    std::swap(leg_coupon_rate_exponent_, other->leg_coupon_rate_exponent_);
    std::swap(leg_credit_rating_, other->leg_credit_rating_);
    std::swap(leg_factor_, other->leg_factor_);
    std::swap(leg_instr_registry_, other->leg_instr_registry_);
    std::swap(leg_issue_date_, other->leg_issue_date_);
    std::swap(leg_issuer_, other->leg_issuer_);
    std::swap(leg_locale_of_issue_, other->leg_locale_of_issue_);
    std::swap(leg_maturity_date_, other->leg_maturity_date_);
    std::swap(leg_maturity_month_year_, other->leg_maturity_month_year_);
    std::swap(leg_opt_attribute_, other->leg_opt_attribute_);
    std::swap(leg_product_, other->leg_product_);
    std::swap(leg_ratio_qty_, other->leg_ratio_qty_);
    std::swap(leg_redemption_date_, other->leg_redemption_date_);
    std::swap(leg_repo_collateral_security_type_, other->leg_repo_collateral_security_type_);
    std::swap(leg_repurchase_rate_, other->leg_repurchase_rate_);
    std::swap(leg_repurchase_rate_exponent_, other->leg_repurchase_rate_exponent_);
    std::swap(leg_repurchase_term_, other->leg_repurchase_term_);
    std::swap(leg_security_desc_, other->leg_security_desc_);
    std::swap(leg_security_exchange_, other->leg_security_exchange_);
    std::swap(leg_security_id_, other->leg_security_id_);
    std::swap(leg_security_id_source_, other->leg_security_id_source_);
    std::swap(leg_security_type_, other->leg_security_type_);
    std::swap(leg_side_, other->leg_side_);
    std::swap(leg_state_or_province_of_issue_, other->leg_state_or_province_of_issue_);
    std::swap(leg_strike_price_, other->leg_strike_price_);
    std::swap(leg_strike_price_exponent_, other->leg_strike_price_exponent_);
    std::swap(leg_symbol_, other->leg_symbol_);
    std::swap(leg_symbol_sfx_, other->leg_symbol_sfx_);
    std::swap(leg_contract_settl_month_, other->leg_contract_settl_month_);
    std::swap(leg_currency_, other->leg_currency_);
    std::swap(leg_dated_date_, other->leg_dated_date_);
    std::swap(leg_interest_accrual_date_, other->leg_interest_accrual_date_);
    std::swap(leg_option_ratio_, other->leg_option_ratio_);
    std::swap(leg_pool_, other->leg_pool_);
    std::swap(leg_price_, other->leg_price_);
    std::swap(leg_price_exponent_, other->leg_price_exponent_);
    leg_sec_alt_id_grp_.Swap(&other->leg_sec_alt_id_grp_);
    std::swap(leg_security_sub_type_, other->leg_security_sub_type_);
    std::swap(leg_strike_currency_, other->leg_strike_currency_);
    std::swap(leg_time_unit_, other->leg_time_unit_);
    std::swap(leg_unit_of_measure_, other->leg_unit_of_measure_);
    std::swap(leg_exercise_style_, other->leg_exercise_style_);
    std::swap(leg_maturity_time_, other->leg_maturity_time_);
    std::swap(leg_price_unit_of_measure_, other->leg_price_unit_of_measure_);
    std::swap(leg_price_unit_of_measure_qty_, other->leg_price_unit_of_measure_qty_);
    std::swap(leg_price_unit_of_measure_qty_exponent_, other->leg_price_unit_of_measure_qty_exponent_);
    std::swap(leg_put_or_call_, other->leg_put_or_call_);
    std::swap(leg_unit_of_measure_qty_, other->leg_unit_of_measure_qty_);
    std::swap(leg_unit_of_measure_qty_exponent_, other->leg_unit_of_measure_qty_exponent_);
    std::swap(leg_contract_multiplier_unit_, other->leg_contract_multiplier_unit_);
    std::swap(leg_flow_schedule_type_, other->leg_flow_schedule_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentLeg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentLeg_descriptor_;
  metadata.reflection = InstrumentLeg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegStipulations::kLegStipulationTypeFieldNumber;
const int LegStipulations::kLegStipulationValueFieldNumber;
#endif  // !_MSC_VER

LegStipulations::LegStipulations()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegStipulations::InitAsDefaultInstance() {
}

LegStipulations::LegStipulations(const LegStipulations& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegStipulations::SharedCtor() {
  _cached_size_ = 0;
  leg_stipulation_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_stipulation_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegStipulations::~LegStipulations() {
  SharedDtor();
}

void LegStipulations::SharedDtor() {
  if (leg_stipulation_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_stipulation_type_;
  }
  if (leg_stipulation_value_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_stipulation_value_;
  }
  if (this != default_instance_) {
  }
}

void LegStipulations::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegStipulations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegStipulations_descriptor_;
}

const LegStipulations& LegStipulations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LegStipulations* LegStipulations::default_instance_ = NULL;

LegStipulations* LegStipulations::New() const {
  return new LegStipulations;
}

void LegStipulations::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leg_stipulation_type()) {
      if (leg_stipulation_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_stipulation_type_->clear();
      }
    }
    if (has_leg_stipulation_value()) {
      if (leg_stipulation_value_ != &::google::protobuf::internal::kEmptyString) {
        leg_stipulation_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegStipulations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leg_stipulation_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_stipulation_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_stipulation_type().data(), this->leg_stipulation_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_stipulation_value;
        break;
      }

      // optional string leg_stipulation_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_stipulation_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_stipulation_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_stipulation_value().data(), this->leg_stipulation_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegStipulations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string leg_stipulation_type = 1;
  if (has_leg_stipulation_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_stipulation_type().data(), this->leg_stipulation_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leg_stipulation_type(), output);
  }

  // optional string leg_stipulation_value = 2;
  if (has_leg_stipulation_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_stipulation_value().data(), this->leg_stipulation_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leg_stipulation_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegStipulations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string leg_stipulation_type = 1;
  if (has_leg_stipulation_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_stipulation_type().data(), this->leg_stipulation_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leg_stipulation_type(), target);
  }

  // optional string leg_stipulation_value = 2;
  if (has_leg_stipulation_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_stipulation_value().data(), this->leg_stipulation_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leg_stipulation_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegStipulations::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string leg_stipulation_type = 1;
    if (has_leg_stipulation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_stipulation_type());
    }

    // optional string leg_stipulation_value = 2;
    if (has_leg_stipulation_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_stipulation_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegStipulations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegStipulations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegStipulations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegStipulations::MergeFrom(const LegStipulations& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg_stipulation_type()) {
      set_leg_stipulation_type(from.leg_stipulation_type());
    }
    if (from.has_leg_stipulation_value()) {
      set_leg_stipulation_value(from.leg_stipulation_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegStipulations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegStipulations::CopyFrom(const LegStipulations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegStipulations::IsInitialized() const {

  return true;
}

void LegStipulations::Swap(LegStipulations* other) {
  if (other != this) {
    std::swap(leg_stipulation_type_, other->leg_stipulation_type_);
    std::swap(leg_stipulation_value_, other->leg_stipulation_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegStipulations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegStipulations_descriptor_;
  metadata.reflection = LegStipulations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NstdPtys2SubGrp::kNested2PartySubIdFieldNumber;
const int NstdPtys2SubGrp::kNested2PartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

NstdPtys2SubGrp::NstdPtys2SubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NstdPtys2SubGrp::InitAsDefaultInstance() {
}

NstdPtys2SubGrp::NstdPtys2SubGrp(const NstdPtys2SubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NstdPtys2SubGrp::SharedCtor() {
  _cached_size_ = 0;
  nested2party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested2party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NstdPtys2SubGrp::~NstdPtys2SubGrp() {
  SharedDtor();
}

void NstdPtys2SubGrp::SharedDtor() {
  if (nested2party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested2party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void NstdPtys2SubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NstdPtys2SubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NstdPtys2SubGrp_descriptor_;
}

const NstdPtys2SubGrp& NstdPtys2SubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NstdPtys2SubGrp* NstdPtys2SubGrp::default_instance_ = NULL;

NstdPtys2SubGrp* NstdPtys2SubGrp::New() const {
  return new NstdPtys2SubGrp;
}

void NstdPtys2SubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested2party_sub_id()) {
      if (nested2party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        nested2party_sub_id_->clear();
      }
    }
    nested2party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NstdPtys2SubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested2party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested2party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested2party_sub_id().data(), this->nested2party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nested2party_sub_id_type;
        break;
      }

      // optional sfixed64 nested2party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested2party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested2party_sub_id_type_)));
          set_has_nested2party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NstdPtys2SubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested2party_sub_id = 1;
  if (has_nested2party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_sub_id().data(), this->nested2party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested2party_sub_id(), output);
  }

  // optional sfixed64 nested2party_sub_id_type = 2;
  if (has_nested2party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->nested2party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NstdPtys2SubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested2party_sub_id = 1;
  if (has_nested2party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_sub_id().data(), this->nested2party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested2party_sub_id(), target);
  }

  // optional sfixed64 nested2party_sub_id_type = 2;
  if (has_nested2party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->nested2party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NstdPtys2SubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested2party_sub_id = 1;
    if (has_nested2party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested2party_sub_id());
    }

    // optional sfixed64 nested2party_sub_id_type = 2;
    if (has_nested2party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NstdPtys2SubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NstdPtys2SubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NstdPtys2SubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NstdPtys2SubGrp::MergeFrom(const NstdPtys2SubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested2party_sub_id()) {
      set_nested2party_sub_id(from.nested2party_sub_id());
    }
    if (from.has_nested2party_sub_id_type()) {
      set_nested2party_sub_id_type(from.nested2party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NstdPtys2SubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NstdPtys2SubGrp::CopyFrom(const NstdPtys2SubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NstdPtys2SubGrp::IsInitialized() const {

  return true;
}

void NstdPtys2SubGrp::Swap(NstdPtys2SubGrp* other) {
  if (other != this) {
    std::swap(nested2party_sub_id_, other->nested2party_sub_id_);
    std::swap(nested2party_sub_id_type_, other->nested2party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NstdPtys2SubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NstdPtys2SubGrp_descriptor_;
  metadata.reflection = NstdPtys2SubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NestedParties2::kNested2PartyIdFieldNumber;
const int NestedParties2::kNested2PartyIdSourceFieldNumber;
const int NestedParties2::kNested2PartyRoleFieldNumber;
const int NestedParties2::kNstdPtys2SubGrpFieldNumber;
#endif  // !_MSC_VER

NestedParties2::NestedParties2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NestedParties2::InitAsDefaultInstance() {
}

NestedParties2::NestedParties2(const NestedParties2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NestedParties2::SharedCtor() {
  _cached_size_ = 0;
  nested2party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested2party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested2party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NestedParties2::~NestedParties2() {
  SharedDtor();
}

void NestedParties2::SharedDtor() {
  if (nested2party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested2party_id_;
  }
  if (nested2party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete nested2party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void NestedParties2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedParties2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedParties2_descriptor_;
}

const NestedParties2& NestedParties2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NestedParties2* NestedParties2::default_instance_ = NULL;

NestedParties2* NestedParties2::New() const {
  return new NestedParties2;
}

void NestedParties2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested2party_id()) {
      if (nested2party_id_ != &::google::protobuf::internal::kEmptyString) {
        nested2party_id_->clear();
      }
    }
    if (has_nested2party_id_source()) {
      if (nested2party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        nested2party_id_source_->clear();
      }
    }
    nested2party_role_ = GOOGLE_LONGLONG(0);
  }
  nstd_ptys2sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NestedParties2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested2party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested2party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested2party_id().data(), this->nested2party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested2party_id_source;
        break;
      }

      // optional string nested2party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested2party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested2party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested2party_id_source().data(), this->nested2party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nested2party_role;
        break;
      }

      // optional sfixed64 nested2party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested2party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested2party_role_)));
          set_has_nested2party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys2sub_grp;
        break;
      }

      // repeated .Common.NstdPtys2SubGrp nstd_ptys2sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nstd_ptys2sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nstd_ptys2sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys2sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NestedParties2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested2party_id = 1;
  if (has_nested2party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_id().data(), this->nested2party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested2party_id(), output);
  }

  // optional string nested2party_id_source = 2;
  if (has_nested2party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_id_source().data(), this->nested2party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nested2party_id_source(), output);
  }

  // optional sfixed64 nested2party_role = 3;
  if (has_nested2party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->nested2party_role(), output);
  }

  // repeated .Common.NstdPtys2SubGrp nstd_ptys2sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys2sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nstd_ptys2sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NestedParties2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested2party_id = 1;
  if (has_nested2party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_id().data(), this->nested2party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested2party_id(), target);
  }

  // optional string nested2party_id_source = 2;
  if (has_nested2party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested2party_id_source().data(), this->nested2party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nested2party_id_source(), target);
  }

  // optional sfixed64 nested2party_role = 3;
  if (has_nested2party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->nested2party_role(), target);
  }

  // repeated .Common.NstdPtys2SubGrp nstd_ptys2sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys2sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nstd_ptys2sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NestedParties2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested2party_id = 1;
    if (has_nested2party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested2party_id());
    }

    // optional string nested2party_id_source = 2;
    if (has_nested2party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested2party_id_source());
    }

    // optional sfixed64 nested2party_role = 3;
    if (has_nested2party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.NstdPtys2SubGrp nstd_ptys2sub_grp = 4;
  total_size += 1 * this->nstd_ptys2sub_grp_size();
  for (int i = 0; i < this->nstd_ptys2sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nstd_ptys2sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedParties2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NestedParties2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NestedParties2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NestedParties2::MergeFrom(const NestedParties2& from) {
  GOOGLE_CHECK_NE(&from, this);
  nstd_ptys2sub_grp_.MergeFrom(from.nstd_ptys2sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested2party_id()) {
      set_nested2party_id(from.nested2party_id());
    }
    if (from.has_nested2party_id_source()) {
      set_nested2party_id_source(from.nested2party_id_source());
    }
    if (from.has_nested2party_role()) {
      set_nested2party_role(from.nested2party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NestedParties2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedParties2::CopyFrom(const NestedParties2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedParties2::IsInitialized() const {

  return true;
}

void NestedParties2::Swap(NestedParties2* other) {
  if (other != this) {
    std::swap(nested2party_id_, other->nested2party_id_);
    std::swap(nested2party_id_source_, other->nested2party_id_source_);
    std::swap(nested2party_role_, other->nested2party_role_);
    nstd_ptys2sub_grp_.Swap(&other->nstd_ptys2sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NestedParties2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedParties2_descriptor_;
  metadata.reflection = NestedParties2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegPreAllocGrp::kLegAllocAccountFieldNumber;
const int LegPreAllocGrp::kLegAllocAcctIdSourceFieldNumber;
const int LegPreAllocGrp::kLegAllocQtyFieldNumber;
const int LegPreAllocGrp::kLegAllocQtyExponentFieldNumber;
const int LegPreAllocGrp::kLegIndividualAllocIdFieldNumber;
const int LegPreAllocGrp::kNestedParties2FieldNumber;
const int LegPreAllocGrp::kLegAllocSettlCurrencyFieldNumber;
#endif  // !_MSC_VER

LegPreAllocGrp::LegPreAllocGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegPreAllocGrp::InitAsDefaultInstance() {
}

LegPreAllocGrp::LegPreAllocGrp(const LegPreAllocGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegPreAllocGrp::SharedCtor() {
  _cached_size_ = 0;
  leg_alloc_account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_alloc_acct_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_alloc_qty_ = GOOGLE_LONGLONG(0);
  leg_alloc_qty_exponent_ = 0;
  leg_individual_alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_alloc_settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegPreAllocGrp::~LegPreAllocGrp() {
  SharedDtor();
}

void LegPreAllocGrp::SharedDtor() {
  if (leg_alloc_account_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_alloc_account_;
  }
  if (leg_alloc_acct_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_alloc_acct_id_source_;
  }
  if (leg_individual_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_individual_alloc_id_;
  }
  if (leg_alloc_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_alloc_settl_currency_;
  }
  if (this != default_instance_) {
  }
}

void LegPreAllocGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegPreAllocGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegPreAllocGrp_descriptor_;
}

const LegPreAllocGrp& LegPreAllocGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LegPreAllocGrp* LegPreAllocGrp::default_instance_ = NULL;

LegPreAllocGrp* LegPreAllocGrp::New() const {
  return new LegPreAllocGrp;
}

void LegPreAllocGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leg_alloc_account()) {
      if (leg_alloc_account_ != &::google::protobuf::internal::kEmptyString) {
        leg_alloc_account_->clear();
      }
    }
    if (has_leg_alloc_acct_id_source()) {
      if (leg_alloc_acct_id_source_ != &::google::protobuf::internal::kEmptyString) {
        leg_alloc_acct_id_source_->clear();
      }
    }
    leg_alloc_qty_ = GOOGLE_LONGLONG(0);
    leg_alloc_qty_exponent_ = 0;
    if (has_leg_individual_alloc_id()) {
      if (leg_individual_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
        leg_individual_alloc_id_->clear();
      }
    }
    if (has_leg_alloc_settl_currency()) {
      if (leg_alloc_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
        leg_alloc_settl_currency_->clear();
      }
    }
  }
  nested_parties2_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegPreAllocGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leg_alloc_account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_alloc_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_alloc_account().data(), this->leg_alloc_account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_alloc_acct_id_source;
        break;
      }

      // optional string leg_alloc_acct_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_alloc_acct_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_alloc_acct_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_alloc_acct_id_source().data(), this->leg_alloc_acct_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_leg_alloc_qty;
        break;
      }

      // optional sfixed64 leg_alloc_qty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_alloc_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_alloc_qty_)));
          set_has_leg_alloc_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_leg_alloc_qty_exponent;
        break;
      }

      // optional sfixed32 leg_alloc_qty_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_alloc_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_alloc_qty_exponent_)));
          set_has_leg_alloc_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leg_individual_alloc_id;
        break;
      }

      // optional string leg_individual_alloc_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_individual_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_individual_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_individual_alloc_id().data(), this->leg_individual_alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nested_parties2;
        break;
      }

      // repeated .Common.NestedParties2 nested_parties2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_parties2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nested_parties2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nested_parties2;
        if (input->ExpectTag(58)) goto parse_leg_alloc_settl_currency;
        break;
      }

      // optional string leg_alloc_settl_currency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_alloc_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_alloc_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_alloc_settl_currency().data(), this->leg_alloc_settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegPreAllocGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string leg_alloc_account = 1;
  if (has_leg_alloc_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_account().data(), this->leg_alloc_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leg_alloc_account(), output);
  }

  // optional string leg_alloc_acct_id_source = 2;
  if (has_leg_alloc_acct_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_acct_id_source().data(), this->leg_alloc_acct_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leg_alloc_acct_id_source(), output);
  }

  // optional sfixed64 leg_alloc_qty = 3;
  if (has_leg_alloc_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->leg_alloc_qty(), output);
  }

  // optional sfixed32 leg_alloc_qty_exponent = 4;
  if (has_leg_alloc_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->leg_alloc_qty_exponent(), output);
  }

  // optional string leg_individual_alloc_id = 5;
  if (has_leg_individual_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_individual_alloc_id().data(), this->leg_individual_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leg_individual_alloc_id(), output);
  }

  // repeated .Common.NestedParties2 nested_parties2 = 6;
  for (int i = 0; i < this->nested_parties2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nested_parties2(i), output);
  }

  // optional string leg_alloc_settl_currency = 7;
  if (has_leg_alloc_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_settl_currency().data(), this->leg_alloc_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->leg_alloc_settl_currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegPreAllocGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string leg_alloc_account = 1;
  if (has_leg_alloc_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_account().data(), this->leg_alloc_account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leg_alloc_account(), target);
  }

  // optional string leg_alloc_acct_id_source = 2;
  if (has_leg_alloc_acct_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_acct_id_source().data(), this->leg_alloc_acct_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leg_alloc_acct_id_source(), target);
  }

  // optional sfixed64 leg_alloc_qty = 3;
  if (has_leg_alloc_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->leg_alloc_qty(), target);
  }

  // optional sfixed32 leg_alloc_qty_exponent = 4;
  if (has_leg_alloc_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->leg_alloc_qty_exponent(), target);
  }

  // optional string leg_individual_alloc_id = 5;
  if (has_leg_individual_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_individual_alloc_id().data(), this->leg_individual_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leg_individual_alloc_id(), target);
  }

  // repeated .Common.NestedParties2 nested_parties2 = 6;
  for (int i = 0; i < this->nested_parties2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nested_parties2(i), target);
  }

  // optional string leg_alloc_settl_currency = 7;
  if (has_leg_alloc_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_settl_currency().data(), this->leg_alloc_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->leg_alloc_settl_currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegPreAllocGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string leg_alloc_account = 1;
    if (has_leg_alloc_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_alloc_account());
    }

    // optional string leg_alloc_acct_id_source = 2;
    if (has_leg_alloc_acct_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_alloc_acct_id_source());
    }

    // optional sfixed64 leg_alloc_qty = 3;
    if (has_leg_alloc_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_alloc_qty_exponent = 4;
    if (has_leg_alloc_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string leg_individual_alloc_id = 5;
    if (has_leg_individual_alloc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_individual_alloc_id());
    }

    // optional string leg_alloc_settl_currency = 7;
    if (has_leg_alloc_settl_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_alloc_settl_currency());
    }

  }
  // repeated .Common.NestedParties2 nested_parties2 = 6;
  total_size += 1 * this->nested_parties2_size();
  for (int i = 0; i < this->nested_parties2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nested_parties2(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegPreAllocGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegPreAllocGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegPreAllocGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegPreAllocGrp::MergeFrom(const LegPreAllocGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  nested_parties2_.MergeFrom(from.nested_parties2_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg_alloc_account()) {
      set_leg_alloc_account(from.leg_alloc_account());
    }
    if (from.has_leg_alloc_acct_id_source()) {
      set_leg_alloc_acct_id_source(from.leg_alloc_acct_id_source());
    }
    if (from.has_leg_alloc_qty()) {
      set_leg_alloc_qty(from.leg_alloc_qty());
    }
    if (from.has_leg_alloc_qty_exponent()) {
      set_leg_alloc_qty_exponent(from.leg_alloc_qty_exponent());
    }
    if (from.has_leg_individual_alloc_id()) {
      set_leg_individual_alloc_id(from.leg_individual_alloc_id());
    }
    if (from.has_leg_alloc_settl_currency()) {
      set_leg_alloc_settl_currency(from.leg_alloc_settl_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegPreAllocGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegPreAllocGrp::CopyFrom(const LegPreAllocGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegPreAllocGrp::IsInitialized() const {

  return true;
}

void LegPreAllocGrp::Swap(LegPreAllocGrp* other) {
  if (other != this) {
    std::swap(leg_alloc_account_, other->leg_alloc_account_);
    std::swap(leg_alloc_acct_id_source_, other->leg_alloc_acct_id_source_);
    std::swap(leg_alloc_qty_, other->leg_alloc_qty_);
    std::swap(leg_alloc_qty_exponent_, other->leg_alloc_qty_exponent_);
    std::swap(leg_individual_alloc_id_, other->leg_individual_alloc_id_);
    nested_parties2_.Swap(&other->nested_parties2_);
    std::swap(leg_alloc_settl_currency_, other->leg_alloc_settl_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegPreAllocGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegPreAllocGrp_descriptor_;
  metadata.reflection = LegPreAllocGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NstdPtys3SubGrp::kNested3PartySubIdFieldNumber;
const int NstdPtys3SubGrp::kNested3PartySubIdTypeFieldNumber;
#endif  // !_MSC_VER

NstdPtys3SubGrp::NstdPtys3SubGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NstdPtys3SubGrp::InitAsDefaultInstance() {
}

NstdPtys3SubGrp::NstdPtys3SubGrp(const NstdPtys3SubGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NstdPtys3SubGrp::SharedCtor() {
  _cached_size_ = 0;
  nested3party_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested3party_sub_id_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NstdPtys3SubGrp::~NstdPtys3SubGrp() {
  SharedDtor();
}

void NstdPtys3SubGrp::SharedDtor() {
  if (nested3party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested3party_sub_id_;
  }
  if (this != default_instance_) {
  }
}

void NstdPtys3SubGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NstdPtys3SubGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NstdPtys3SubGrp_descriptor_;
}

const NstdPtys3SubGrp& NstdPtys3SubGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NstdPtys3SubGrp* NstdPtys3SubGrp::default_instance_ = NULL;

NstdPtys3SubGrp* NstdPtys3SubGrp::New() const {
  return new NstdPtys3SubGrp;
}

void NstdPtys3SubGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested3party_sub_id()) {
      if (nested3party_sub_id_ != &::google::protobuf::internal::kEmptyString) {
        nested3party_sub_id_->clear();
      }
    }
    nested3party_sub_id_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NstdPtys3SubGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested3party_sub_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested3party_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested3party_sub_id().data(), this->nested3party_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_nested3party_sub_id_type;
        break;
      }

      // optional sfixed64 nested3party_sub_id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested3party_sub_id_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested3party_sub_id_type_)));
          set_has_nested3party_sub_id_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NstdPtys3SubGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested3party_sub_id = 1;
  if (has_nested3party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_sub_id().data(), this->nested3party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested3party_sub_id(), output);
  }

  // optional sfixed64 nested3party_sub_id_type = 2;
  if (has_nested3party_sub_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->nested3party_sub_id_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NstdPtys3SubGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested3party_sub_id = 1;
  if (has_nested3party_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_sub_id().data(), this->nested3party_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested3party_sub_id(), target);
  }

  // optional sfixed64 nested3party_sub_id_type = 2;
  if (has_nested3party_sub_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->nested3party_sub_id_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NstdPtys3SubGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested3party_sub_id = 1;
    if (has_nested3party_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested3party_sub_id());
    }

    // optional sfixed64 nested3party_sub_id_type = 2;
    if (has_nested3party_sub_id_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NstdPtys3SubGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NstdPtys3SubGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NstdPtys3SubGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NstdPtys3SubGrp::MergeFrom(const NstdPtys3SubGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested3party_sub_id()) {
      set_nested3party_sub_id(from.nested3party_sub_id());
    }
    if (from.has_nested3party_sub_id_type()) {
      set_nested3party_sub_id_type(from.nested3party_sub_id_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NstdPtys3SubGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NstdPtys3SubGrp::CopyFrom(const NstdPtys3SubGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NstdPtys3SubGrp::IsInitialized() const {

  return true;
}

void NstdPtys3SubGrp::Swap(NstdPtys3SubGrp* other) {
  if (other != this) {
    std::swap(nested3party_sub_id_, other->nested3party_sub_id_);
    std::swap(nested3party_sub_id_type_, other->nested3party_sub_id_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NstdPtys3SubGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NstdPtys3SubGrp_descriptor_;
  metadata.reflection = NstdPtys3SubGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NestedParties3::kNested3PartyIdFieldNumber;
const int NestedParties3::kNested3PartyIdSourceFieldNumber;
const int NestedParties3::kNested3PartyRoleFieldNumber;
const int NestedParties3::kNstdPtys3SubGrpFieldNumber;
#endif  // !_MSC_VER

NestedParties3::NestedParties3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NestedParties3::InitAsDefaultInstance() {
}

NestedParties3::NestedParties3(const NestedParties3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NestedParties3::SharedCtor() {
  _cached_size_ = 0;
  nested3party_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested3party_id_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nested3party_role_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NestedParties3::~NestedParties3() {
  SharedDtor();
}

void NestedParties3::SharedDtor() {
  if (nested3party_id_ != &::google::protobuf::internal::kEmptyString) {
    delete nested3party_id_;
  }
  if (nested3party_id_source_ != &::google::protobuf::internal::kEmptyString) {
    delete nested3party_id_source_;
  }
  if (this != default_instance_) {
  }
}

void NestedParties3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedParties3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedParties3_descriptor_;
}

const NestedParties3& NestedParties3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NestedParties3* NestedParties3::default_instance_ = NULL;

NestedParties3* NestedParties3::New() const {
  return new NestedParties3;
}

void NestedParties3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nested3party_id()) {
      if (nested3party_id_ != &::google::protobuf::internal::kEmptyString) {
        nested3party_id_->clear();
      }
    }
    if (has_nested3party_id_source()) {
      if (nested3party_id_source_ != &::google::protobuf::internal::kEmptyString) {
        nested3party_id_source_->clear();
      }
    }
    nested3party_role_ = GOOGLE_LONGLONG(0);
  }
  nstd_ptys3sub_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NestedParties3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nested3party_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested3party_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested3party_id().data(), this->nested3party_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested3party_id_source;
        break;
      }

      // optional string nested3party_id_source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested3party_id_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested3party_id_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested3party_id_source().data(), this->nested3party_id_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_nested3party_role;
        break;
      }

      // optional sfixed64 nested3party_role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_nested3party_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested3party_role_)));
          set_has_nested3party_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys3sub_grp;
        break;
      }

      // repeated .Common.NstdPtys3SubGrp nstd_ptys3sub_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nstd_ptys3sub_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nstd_ptys3sub_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nstd_ptys3sub_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NestedParties3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string nested3party_id = 1;
  if (has_nested3party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_id().data(), this->nested3party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nested3party_id(), output);
  }

  // optional string nested3party_id_source = 2;
  if (has_nested3party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_id_source().data(), this->nested3party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nested3party_id_source(), output);
  }

  // optional sfixed64 nested3party_role = 3;
  if (has_nested3party_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->nested3party_role(), output);
  }

  // repeated .Common.NstdPtys3SubGrp nstd_ptys3sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys3sub_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->nstd_ptys3sub_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NestedParties3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string nested3party_id = 1;
  if (has_nested3party_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_id().data(), this->nested3party_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nested3party_id(), target);
  }

  // optional string nested3party_id_source = 2;
  if (has_nested3party_id_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested3party_id_source().data(), this->nested3party_id_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nested3party_id_source(), target);
  }

  // optional sfixed64 nested3party_role = 3;
  if (has_nested3party_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->nested3party_role(), target);
  }

  // repeated .Common.NstdPtys3SubGrp nstd_ptys3sub_grp = 4;
  for (int i = 0; i < this->nstd_ptys3sub_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->nstd_ptys3sub_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NestedParties3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string nested3party_id = 1;
    if (has_nested3party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested3party_id());
    }

    // optional string nested3party_id_source = 2;
    if (has_nested3party_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested3party_id_source());
    }

    // optional sfixed64 nested3party_role = 3;
    if (has_nested3party_role()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.NstdPtys3SubGrp nstd_ptys3sub_grp = 4;
  total_size += 1 * this->nstd_ptys3sub_grp_size();
  for (int i = 0; i < this->nstd_ptys3sub_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nstd_ptys3sub_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedParties3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NestedParties3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NestedParties3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NestedParties3::MergeFrom(const NestedParties3& from) {
  GOOGLE_CHECK_NE(&from, this);
  nstd_ptys3sub_grp_.MergeFrom(from.nstd_ptys3sub_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested3party_id()) {
      set_nested3party_id(from.nested3party_id());
    }
    if (from.has_nested3party_id_source()) {
      set_nested3party_id_source(from.nested3party_id_source());
    }
    if (from.has_nested3party_role()) {
      set_nested3party_role(from.nested3party_role());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NestedParties3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedParties3::CopyFrom(const NestedParties3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedParties3::IsInitialized() const {

  return true;
}

void NestedParties3::Swap(NestedParties3* other) {
  if (other != this) {
    std::swap(nested3party_id_, other->nested3party_id_);
    std::swap(nested3party_id_source_, other->nested3party_id_source_);
    std::swap(nested3party_role_, other->nested3party_role_);
    nstd_ptys3sub_grp_.Swap(&other->nstd_ptys3sub_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NestedParties3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedParties3_descriptor_;
  metadata.reflection = NestedParties3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrmtLegExecGrp::kInstrumentLegFieldNumber;
const int InstrmtLegExecGrp::kLegCalculatedCcyLastQtyFieldNumber;
const int InstrmtLegExecGrp::kLegCalculatedCcyLastQtyExponentFieldNumber;
const int InstrmtLegExecGrp::kLegCoveredOrUncoveredFieldNumber;
const int InstrmtLegExecGrp::kLegGrossTradeAmtFieldNumber;
const int InstrmtLegExecGrp::kLegGrossTradeAmtExponentFieldNumber;
const int InstrmtLegExecGrp::kLegLastForwardPointsFieldNumber;
const int InstrmtLegExecGrp::kLegLastForwardPointsExponentFieldNumber;
const int InstrmtLegExecGrp::kLegLastPxFieldNumber;
const int InstrmtLegExecGrp::kLegLastPxExponentFieldNumber;
const int InstrmtLegExecGrp::kLegOrderQtyFieldNumber;
const int InstrmtLegExecGrp::kLegOrderQtyExponentFieldNumber;
const int InstrmtLegExecGrp::kLegPositionEffectFieldNumber;
const int InstrmtLegExecGrp::kLegQtyFieldNumber;
const int InstrmtLegExecGrp::kLegQtyExponentFieldNumber;
const int InstrmtLegExecGrp::kLegRefIdFieldNumber;
const int InstrmtLegExecGrp::kLegSettlCurrencyFieldNumber;
const int InstrmtLegExecGrp::kLegSettlDateFieldNumber;
const int InstrmtLegExecGrp::kLegSettlTypeFieldNumber;
const int InstrmtLegExecGrp::kLegStipulationsFieldNumber;
const int InstrmtLegExecGrp::kLegSwapTypeFieldNumber;
const int InstrmtLegExecGrp::kLegAllocIdFieldNumber;
const int InstrmtLegExecGrp::kLegCurrencyRatioFieldNumber;
const int InstrmtLegExecGrp::kLegDividendYieldFieldNumber;
const int InstrmtLegExecGrp::kLegDividendYieldExponentFieldNumber;
const int InstrmtLegExecGrp::kLegLastQtyFieldNumber;
const int InstrmtLegExecGrp::kLegLastQtyExponentFieldNumber;
const int InstrmtLegExecGrp::kLegPreAllocGrpFieldNumber;
const int InstrmtLegExecGrp::kLegVolatilityFieldNumber;
const int InstrmtLegExecGrp::kNestedParties3FieldNumber;
#endif  // !_MSC_VER

InstrmtLegExecGrp::InstrmtLegExecGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrmtLegExecGrp::InitAsDefaultInstance() {
  instrument_leg_ = const_cast< ::Common::InstrumentLeg*>(&::Common::InstrumentLeg::default_instance());
}

InstrmtLegExecGrp::InstrmtLegExecGrp(const InstrmtLegExecGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrmtLegExecGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_leg_ = NULL;
  leg_calculated_ccy_last_qty_ = GOOGLE_LONGLONG(0);
  leg_calculated_ccy_last_qty_exponent_ = 0;
  leg_covered_or_uncovered_ = GOOGLE_LONGLONG(0);
  leg_gross_trade_amt_ = GOOGLE_LONGLONG(0);
  leg_gross_trade_amt_exponent_ = 0;
  leg_last_forward_points_ = GOOGLE_LONGLONG(0);
  leg_last_forward_points_exponent_ = 0;
  leg_last_px_ = GOOGLE_LONGLONG(0);
  leg_last_px_exponent_ = 0;
  leg_order_qty_ = GOOGLE_LONGLONG(0);
  leg_order_qty_exponent_ = 0;
  leg_position_effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_qty_ = GOOGLE_LONGLONG(0);
  leg_qty_exponent_ = 0;
  leg_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_settl_date_ = 0;
  leg_settl_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_swap_type_ = 0;
  leg_alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_currency_ratio_ = 0;
  leg_dividend_yield_ = GOOGLE_LONGLONG(0);
  leg_dividend_yield_exponent_ = 0;
  leg_last_qty_ = GOOGLE_LONGLONG(0);
  leg_last_qty_exponent_ = 0;
  leg_volatility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrmtLegExecGrp::~InstrmtLegExecGrp() {
  SharedDtor();
}

void InstrmtLegExecGrp::SharedDtor() {
  if (leg_position_effect_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_position_effect_;
  }
  if (leg_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_ref_id_;
  }
  if (leg_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_settl_currency_;
  }
  if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_settl_type_;
  }
  if (leg_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_alloc_id_;
  }
  if (this != default_instance_) {
    delete instrument_leg_;
  }
}

void InstrmtLegExecGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrmtLegExecGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrmtLegExecGrp_descriptor_;
}

const InstrmtLegExecGrp& InstrmtLegExecGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrmtLegExecGrp* InstrmtLegExecGrp::default_instance_ = NULL;

InstrmtLegExecGrp* InstrmtLegExecGrp::New() const {
  return new InstrmtLegExecGrp;
}

void InstrmtLegExecGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_leg()) {
      if (instrument_leg_ != NULL) instrument_leg_->::Common::InstrumentLeg::Clear();
    }
    leg_calculated_ccy_last_qty_ = GOOGLE_LONGLONG(0);
    leg_calculated_ccy_last_qty_exponent_ = 0;
    leg_covered_or_uncovered_ = GOOGLE_LONGLONG(0);
    leg_gross_trade_amt_ = GOOGLE_LONGLONG(0);
    leg_gross_trade_amt_exponent_ = 0;
    leg_last_forward_points_ = GOOGLE_LONGLONG(0);
    leg_last_forward_points_exponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leg_last_px_ = GOOGLE_LONGLONG(0);
    leg_last_px_exponent_ = 0;
    leg_order_qty_ = GOOGLE_LONGLONG(0);
    leg_order_qty_exponent_ = 0;
    if (has_leg_position_effect()) {
      if (leg_position_effect_ != &::google::protobuf::internal::kEmptyString) {
        leg_position_effect_->clear();
      }
    }
    leg_qty_ = GOOGLE_LONGLONG(0);
    leg_qty_exponent_ = 0;
    if (has_leg_ref_id()) {
      if (leg_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        leg_ref_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_leg_settl_currency()) {
      if (leg_settl_currency_ != &::google::protobuf::internal::kEmptyString) {
        leg_settl_currency_->clear();
      }
    }
    leg_settl_date_ = 0;
    if (has_leg_settl_type()) {
      if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_settl_type_->clear();
      }
    }
    leg_swap_type_ = 0;
    if (has_leg_alloc_id()) {
      if (leg_alloc_id_ != &::google::protobuf::internal::kEmptyString) {
        leg_alloc_id_->clear();
      }
    }
    leg_currency_ratio_ = 0;
    leg_dividend_yield_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    leg_dividend_yield_exponent_ = 0;
    leg_last_qty_ = GOOGLE_LONGLONG(0);
    leg_last_qty_exponent_ = 0;
    leg_volatility_ = 0;
  }
  leg_stipulations_.Clear();
  leg_pre_alloc_grp_.Clear();
  nested_parties3_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrmtLegExecGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrumentLeg instrument_leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_leg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_leg_calculated_ccy_last_qty;
        break;
      }

      // optional sfixed64 leg_calculated_ccy_last_qty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_calculated_ccy_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_calculated_ccy_last_qty_)));
          set_has_leg_calculated_ccy_last_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_leg_calculated_ccy_last_qty_exponent;
        break;
      }

      // optional sfixed32 leg_calculated_ccy_last_qty_exponent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_calculated_ccy_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_calculated_ccy_last_qty_exponent_)));
          set_has_leg_calculated_ccy_last_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_leg_covered_or_uncovered;
        break;
      }

      // optional sfixed64 leg_covered_or_uncovered = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_covered_or_uncovered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_covered_or_uncovered_)));
          set_has_leg_covered_or_uncovered();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_leg_gross_trade_amt;
        break;
      }

      // optional sfixed64 leg_gross_trade_amt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_gross_trade_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_gross_trade_amt_)));
          set_has_leg_gross_trade_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_leg_gross_trade_amt_exponent;
        break;
      }

      // optional sfixed32 leg_gross_trade_amt_exponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_gross_trade_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_gross_trade_amt_exponent_)));
          set_has_leg_gross_trade_amt_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_leg_last_forward_points;
        break;
      }

      // optional sfixed64 leg_last_forward_points = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_last_forward_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_last_forward_points_)));
          set_has_leg_last_forward_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_leg_last_forward_points_exponent;
        break;
      }

      // optional sfixed32 leg_last_forward_points_exponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_last_forward_points_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_last_forward_points_exponent_)));
          set_has_leg_last_forward_points_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_leg_last_px;
        break;
      }

      // optional sfixed64 leg_last_px = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_last_px_)));
          set_has_leg_last_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_leg_last_px_exponent;
        break;
      }

      // optional sfixed32 leg_last_px_exponent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_last_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_last_px_exponent_)));
          set_has_leg_last_px_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_leg_order_qty;
        break;
      }

      // optional sfixed64 leg_order_qty = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_order_qty_)));
          set_has_leg_order_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_leg_order_qty_exponent;
        break;
      }

      // optional sfixed32 leg_order_qty_exponent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_order_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_order_qty_exponent_)));
          set_has_leg_order_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_leg_position_effect;
        break;
      }

      // optional string leg_position_effect = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_position_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_position_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_position_effect().data(), this->leg_position_effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_leg_qty;
        break;
      }

      // optional sfixed64 leg_qty = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_qty_)));
          set_has_leg_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_leg_qty_exponent;
        break;
      }

      // optional sfixed32 leg_qty_exponent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_qty_exponent_)));
          set_has_leg_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_leg_ref_id;
        break;
      }

      // optional string leg_ref_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_ref_id().data(), this->leg_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_leg_settl_currency;
        break;
      }

      // optional string leg_settl_currency = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_settl_currency().data(), this->leg_settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_leg_settl_date;
        break;
      }

      // optional sfixed32 leg_settl_date = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_settl_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_settl_date_)));
          set_has_leg_settl_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_leg_settl_type;
        break;
      }

      // optional string leg_settl_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_settl_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_settl_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_settl_type().data(), this->leg_settl_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_leg_stipulations;
        break;
      }

      // repeated .Common.LegStipulations leg_stipulations = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_leg_stipulations;
        if (input->ExpectTag(168)) goto parse_leg_swap_type;
        break;
      }

      // optional .Common.LegSwapTypeEnum leg_swap_type = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_swap_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::LegSwapTypeEnum_IsValid(value)) {
            set_leg_swap_type(static_cast< ::Common::LegSwapTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_leg_alloc_id;
        break;
      }

      // optional string leg_alloc_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_alloc_id().data(), this->leg_alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_leg_currency_ratio;
        break;
      }

      // optional double leg_currency_ratio = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_currency_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_currency_ratio_)));
          set_has_leg_currency_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_leg_dividend_yield;
        break;
      }

      // optional sfixed64 leg_dividend_yield = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_dividend_yield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_dividend_yield_)));
          set_has_leg_dividend_yield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_leg_dividend_yield_exponent;
        break;
      }

      // optional sfixed32 leg_dividend_yield_exponent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_dividend_yield_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_dividend_yield_exponent_)));
          set_has_leg_dividend_yield_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_leg_last_qty;
        break;
      }

      // optional sfixed64 leg_last_qty = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_last_qty_)));
          set_has_leg_last_qty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_leg_last_qty_exponent;
        break;
      }

      // optional sfixed32 leg_last_qty_exponent = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_last_qty_exponent_)));
          set_has_leg_last_qty_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_leg_pre_alloc_grp;
        break;
      }

      // repeated .Common.LegPreAllocGrp leg_pre_alloc_grp = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_pre_alloc_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_pre_alloc_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_leg_pre_alloc_grp;
        if (input->ExpectTag(233)) goto parse_leg_volatility;
        break;
      }

      // optional double leg_volatility = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_volatility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leg_volatility_)));
          set_has_leg_volatility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_nested_parties3;
        break;
      }

      // repeated .Common.NestedParties3 nested_parties3 = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_parties3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nested_parties3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_nested_parties3;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrmtLegExecGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument_leg(), output);
  }

  // optional sfixed64 leg_calculated_ccy_last_qty = 2;
  if (has_leg_calculated_ccy_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->leg_calculated_ccy_last_qty(), output);
  }

  // optional sfixed32 leg_calculated_ccy_last_qty_exponent = 3;
  if (has_leg_calculated_ccy_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->leg_calculated_ccy_last_qty_exponent(), output);
  }

  // optional sfixed64 leg_covered_or_uncovered = 4;
  if (has_leg_covered_or_uncovered()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->leg_covered_or_uncovered(), output);
  }

  // optional sfixed64 leg_gross_trade_amt = 5;
  if (has_leg_gross_trade_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->leg_gross_trade_amt(), output);
  }

  // optional sfixed32 leg_gross_trade_amt_exponent = 6;
  if (has_leg_gross_trade_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->leg_gross_trade_amt_exponent(), output);
  }

  // optional sfixed64 leg_last_forward_points = 7;
  if (has_leg_last_forward_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->leg_last_forward_points(), output);
  }

  // optional sfixed32 leg_last_forward_points_exponent = 8;
  if (has_leg_last_forward_points_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->leg_last_forward_points_exponent(), output);
  }

  // optional sfixed64 leg_last_px = 9;
  if (has_leg_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(9, this->leg_last_px(), output);
  }

  // optional sfixed32 leg_last_px_exponent = 10;
  if (has_leg_last_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->leg_last_px_exponent(), output);
  }

  // optional sfixed64 leg_order_qty = 11;
  if (has_leg_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(11, this->leg_order_qty(), output);
  }

  // optional sfixed32 leg_order_qty_exponent = 12;
  if (has_leg_order_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->leg_order_qty_exponent(), output);
  }

  // optional string leg_position_effect = 13;
  if (has_leg_position_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_position_effect().data(), this->leg_position_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->leg_position_effect(), output);
  }

  // optional sfixed64 leg_qty = 14;
  if (has_leg_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(14, this->leg_qty(), output);
  }

  // optional sfixed32 leg_qty_exponent = 15;
  if (has_leg_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->leg_qty_exponent(), output);
  }

  // optional string leg_ref_id = 16;
  if (has_leg_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_ref_id().data(), this->leg_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->leg_ref_id(), output);
  }

  // optional string leg_settl_currency = 17;
  if (has_leg_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_currency().data(), this->leg_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->leg_settl_currency(), output);
  }

  // optional sfixed32 leg_settl_date = 18;
  if (has_leg_settl_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->leg_settl_date(), output);
  }

  // optional string leg_settl_type = 19;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->leg_settl_type(), output);
  }

  // repeated .Common.LegStipulations leg_stipulations = 20;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->leg_stipulations(i), output);
  }

  // optional .Common.LegSwapTypeEnum leg_swap_type = 21;
  if (has_leg_swap_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->leg_swap_type(), output);
  }

  // optional string leg_alloc_id = 22;
  if (has_leg_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_id().data(), this->leg_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->leg_alloc_id(), output);
  }

  // optional double leg_currency_ratio = 23;
  if (has_leg_currency_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->leg_currency_ratio(), output);
  }

  // optional sfixed64 leg_dividend_yield = 24;
  if (has_leg_dividend_yield()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(24, this->leg_dividend_yield(), output);
  }

  // optional sfixed32 leg_dividend_yield_exponent = 25;
  if (has_leg_dividend_yield_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(25, this->leg_dividend_yield_exponent(), output);
  }

  // optional sfixed64 leg_last_qty = 26;
  if (has_leg_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(26, this->leg_last_qty(), output);
  }

  // optional sfixed32 leg_last_qty_exponent = 27;
  if (has_leg_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(27, this->leg_last_qty_exponent(), output);
  }

  // repeated .Common.LegPreAllocGrp leg_pre_alloc_grp = 28;
  for (int i = 0; i < this->leg_pre_alloc_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->leg_pre_alloc_grp(i), output);
  }

  // optional double leg_volatility = 29;
  if (has_leg_volatility()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->leg_volatility(), output);
  }

  // repeated .Common.NestedParties3 nested_parties3 = 30;
  for (int i = 0; i < this->nested_parties3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->nested_parties3(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrmtLegExecGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument_leg(), target);
  }

  // optional sfixed64 leg_calculated_ccy_last_qty = 2;
  if (has_leg_calculated_ccy_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->leg_calculated_ccy_last_qty(), target);
  }

  // optional sfixed32 leg_calculated_ccy_last_qty_exponent = 3;
  if (has_leg_calculated_ccy_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->leg_calculated_ccy_last_qty_exponent(), target);
  }

  // optional sfixed64 leg_covered_or_uncovered = 4;
  if (has_leg_covered_or_uncovered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->leg_covered_or_uncovered(), target);
  }

  // optional sfixed64 leg_gross_trade_amt = 5;
  if (has_leg_gross_trade_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->leg_gross_trade_amt(), target);
  }

  // optional sfixed32 leg_gross_trade_amt_exponent = 6;
  if (has_leg_gross_trade_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->leg_gross_trade_amt_exponent(), target);
  }

  // optional sfixed64 leg_last_forward_points = 7;
  if (has_leg_last_forward_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->leg_last_forward_points(), target);
  }

  // optional sfixed32 leg_last_forward_points_exponent = 8;
  if (has_leg_last_forward_points_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->leg_last_forward_points_exponent(), target);
  }

  // optional sfixed64 leg_last_px = 9;
  if (has_leg_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(9, this->leg_last_px(), target);
  }

  // optional sfixed32 leg_last_px_exponent = 10;
  if (has_leg_last_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->leg_last_px_exponent(), target);
  }

  // optional sfixed64 leg_order_qty = 11;
  if (has_leg_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(11, this->leg_order_qty(), target);
  }

  // optional sfixed32 leg_order_qty_exponent = 12;
  if (has_leg_order_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->leg_order_qty_exponent(), target);
  }

  // optional string leg_position_effect = 13;
  if (has_leg_position_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_position_effect().data(), this->leg_position_effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->leg_position_effect(), target);
  }

  // optional sfixed64 leg_qty = 14;
  if (has_leg_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(14, this->leg_qty(), target);
  }

  // optional sfixed32 leg_qty_exponent = 15;
  if (has_leg_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->leg_qty_exponent(), target);
  }

  // optional string leg_ref_id = 16;
  if (has_leg_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_ref_id().data(), this->leg_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->leg_ref_id(), target);
  }

  // optional string leg_settl_currency = 17;
  if (has_leg_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_currency().data(), this->leg_settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->leg_settl_currency(), target);
  }

  // optional sfixed32 leg_settl_date = 18;
  if (has_leg_settl_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->leg_settl_date(), target);
  }

  // optional string leg_settl_type = 19;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->leg_settl_type(), target);
  }

  // repeated .Common.LegStipulations leg_stipulations = 20;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->leg_stipulations(i), target);
  }

  // optional .Common.LegSwapTypeEnum leg_swap_type = 21;
  if (has_leg_swap_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->leg_swap_type(), target);
  }

  // optional string leg_alloc_id = 22;
  if (has_leg_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_alloc_id().data(), this->leg_alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->leg_alloc_id(), target);
  }

  // optional double leg_currency_ratio = 23;
  if (has_leg_currency_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->leg_currency_ratio(), target);
  }

  // optional sfixed64 leg_dividend_yield = 24;
  if (has_leg_dividend_yield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(24, this->leg_dividend_yield(), target);
  }

  // optional sfixed32 leg_dividend_yield_exponent = 25;
  if (has_leg_dividend_yield_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(25, this->leg_dividend_yield_exponent(), target);
  }

  // optional sfixed64 leg_last_qty = 26;
  if (has_leg_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(26, this->leg_last_qty(), target);
  }

  // optional sfixed32 leg_last_qty_exponent = 27;
  if (has_leg_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(27, this->leg_last_qty_exponent(), target);
  }

  // repeated .Common.LegPreAllocGrp leg_pre_alloc_grp = 28;
  for (int i = 0; i < this->leg_pre_alloc_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->leg_pre_alloc_grp(i), target);
  }

  // optional double leg_volatility = 29;
  if (has_leg_volatility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->leg_volatility(), target);
  }

  // repeated .Common.NestedParties3 nested_parties3 = 30;
  for (int i = 0; i < this->nested_parties3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->nested_parties3(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrmtLegExecGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrumentLeg instrument_leg = 1;
    if (has_instrument_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_leg());
    }

    // optional sfixed64 leg_calculated_ccy_last_qty = 2;
    if (has_leg_calculated_ccy_last_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_calculated_ccy_last_qty_exponent = 3;
    if (has_leg_calculated_ccy_last_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 leg_covered_or_uncovered = 4;
    if (has_leg_covered_or_uncovered()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 leg_gross_trade_amt = 5;
    if (has_leg_gross_trade_amt()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_gross_trade_amt_exponent = 6;
    if (has_leg_gross_trade_amt_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 leg_last_forward_points = 7;
    if (has_leg_last_forward_points()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_last_forward_points_exponent = 8;
    if (has_leg_last_forward_points_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed64 leg_last_px = 9;
    if (has_leg_last_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_last_px_exponent = 10;
    if (has_leg_last_px_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 leg_order_qty = 11;
    if (has_leg_order_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_order_qty_exponent = 12;
    if (has_leg_order_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string leg_position_effect = 13;
    if (has_leg_position_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_position_effect());
    }

    // optional sfixed64 leg_qty = 14;
    if (has_leg_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_qty_exponent = 15;
    if (has_leg_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string leg_ref_id = 16;
    if (has_leg_ref_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_ref_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string leg_settl_currency = 17;
    if (has_leg_settl_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_settl_currency());
    }

    // optional sfixed32 leg_settl_date = 18;
    if (has_leg_settl_date()) {
      total_size += 2 + 4;
    }

    // optional string leg_settl_type = 19;
    if (has_leg_settl_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_settl_type());
    }

    // optional .Common.LegSwapTypeEnum leg_swap_type = 21;
    if (has_leg_swap_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg_swap_type());
    }

    // optional string leg_alloc_id = 22;
    if (has_leg_alloc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_alloc_id());
    }

    // optional double leg_currency_ratio = 23;
    if (has_leg_currency_ratio()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 leg_dividend_yield = 24;
    if (has_leg_dividend_yield()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed32 leg_dividend_yield_exponent = 25;
    if (has_leg_dividend_yield_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 leg_last_qty = 26;
    if (has_leg_last_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leg_last_qty_exponent = 27;
    if (has_leg_last_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional double leg_volatility = 29;
    if (has_leg_volatility()) {
      total_size += 2 + 8;
    }

  }
  // repeated .Common.LegStipulations leg_stipulations = 20;
  total_size += 2 * this->leg_stipulations_size();
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_stipulations(i));
  }

  // repeated .Common.LegPreAllocGrp leg_pre_alloc_grp = 28;
  total_size += 2 * this->leg_pre_alloc_grp_size();
  for (int i = 0; i < this->leg_pre_alloc_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_pre_alloc_grp(i));
  }

  // repeated .Common.NestedParties3 nested_parties3 = 30;
  total_size += 2 * this->nested_parties3_size();
  for (int i = 0; i < this->nested_parties3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nested_parties3(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrmtLegExecGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrmtLegExecGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrmtLegExecGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrmtLegExecGrp::MergeFrom(const InstrmtLegExecGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  leg_stipulations_.MergeFrom(from.leg_stipulations_);
  leg_pre_alloc_grp_.MergeFrom(from.leg_pre_alloc_grp_);
  nested_parties3_.MergeFrom(from.nested_parties3_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_leg()) {
      mutable_instrument_leg()->::Common::InstrumentLeg::MergeFrom(from.instrument_leg());
    }
    if (from.has_leg_calculated_ccy_last_qty()) {
      set_leg_calculated_ccy_last_qty(from.leg_calculated_ccy_last_qty());
    }
    if (from.has_leg_calculated_ccy_last_qty_exponent()) {
      set_leg_calculated_ccy_last_qty_exponent(from.leg_calculated_ccy_last_qty_exponent());
    }
    if (from.has_leg_covered_or_uncovered()) {
      set_leg_covered_or_uncovered(from.leg_covered_or_uncovered());
    }
    if (from.has_leg_gross_trade_amt()) {
      set_leg_gross_trade_amt(from.leg_gross_trade_amt());
    }
    if (from.has_leg_gross_trade_amt_exponent()) {
      set_leg_gross_trade_amt_exponent(from.leg_gross_trade_amt_exponent());
    }
    if (from.has_leg_last_forward_points()) {
      set_leg_last_forward_points(from.leg_last_forward_points());
    }
    if (from.has_leg_last_forward_points_exponent()) {
      set_leg_last_forward_points_exponent(from.leg_last_forward_points_exponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leg_last_px()) {
      set_leg_last_px(from.leg_last_px());
    }
    if (from.has_leg_last_px_exponent()) {
      set_leg_last_px_exponent(from.leg_last_px_exponent());
    }
    if (from.has_leg_order_qty()) {
      set_leg_order_qty(from.leg_order_qty());
    }
    if (from.has_leg_order_qty_exponent()) {
      set_leg_order_qty_exponent(from.leg_order_qty_exponent());
    }
    if (from.has_leg_position_effect()) {
      set_leg_position_effect(from.leg_position_effect());
    }
    if (from.has_leg_qty()) {
      set_leg_qty(from.leg_qty());
    }
    if (from.has_leg_qty_exponent()) {
      set_leg_qty_exponent(from.leg_qty_exponent());
    }
    if (from.has_leg_ref_id()) {
      set_leg_ref_id(from.leg_ref_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_leg_settl_currency()) {
      set_leg_settl_currency(from.leg_settl_currency());
    }
    if (from.has_leg_settl_date()) {
      set_leg_settl_date(from.leg_settl_date());
    }
    if (from.has_leg_settl_type()) {
      set_leg_settl_type(from.leg_settl_type());
    }
    if (from.has_leg_swap_type()) {
      set_leg_swap_type(from.leg_swap_type());
    }
    if (from.has_leg_alloc_id()) {
      set_leg_alloc_id(from.leg_alloc_id());
    }
    if (from.has_leg_currency_ratio()) {
      set_leg_currency_ratio(from.leg_currency_ratio());
    }
    if (from.has_leg_dividend_yield()) {
      set_leg_dividend_yield(from.leg_dividend_yield());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_leg_dividend_yield_exponent()) {
      set_leg_dividend_yield_exponent(from.leg_dividend_yield_exponent());
    }
    if (from.has_leg_last_qty()) {
      set_leg_last_qty(from.leg_last_qty());
    }
    if (from.has_leg_last_qty_exponent()) {
      set_leg_last_qty_exponent(from.leg_last_qty_exponent());
    }
    if (from.has_leg_volatility()) {
      set_leg_volatility(from.leg_volatility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrmtLegExecGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrmtLegExecGrp::CopyFrom(const InstrmtLegExecGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrmtLegExecGrp::IsInitialized() const {

  return true;
}

void InstrmtLegExecGrp::Swap(InstrmtLegExecGrp* other) {
  if (other != this) {
    std::swap(instrument_leg_, other->instrument_leg_);
    std::swap(leg_calculated_ccy_last_qty_, other->leg_calculated_ccy_last_qty_);
    std::swap(leg_calculated_ccy_last_qty_exponent_, other->leg_calculated_ccy_last_qty_exponent_);
    std::swap(leg_covered_or_uncovered_, other->leg_covered_or_uncovered_);
    std::swap(leg_gross_trade_amt_, other->leg_gross_trade_amt_);
    std::swap(leg_gross_trade_amt_exponent_, other->leg_gross_trade_amt_exponent_);
    std::swap(leg_last_forward_points_, other->leg_last_forward_points_);
    std::swap(leg_last_forward_points_exponent_, other->leg_last_forward_points_exponent_);
    std::swap(leg_last_px_, other->leg_last_px_);
    std::swap(leg_last_px_exponent_, other->leg_last_px_exponent_);
    std::swap(leg_order_qty_, other->leg_order_qty_);
    std::swap(leg_order_qty_exponent_, other->leg_order_qty_exponent_);
    std::swap(leg_position_effect_, other->leg_position_effect_);
    std::swap(leg_qty_, other->leg_qty_);
    std::swap(leg_qty_exponent_, other->leg_qty_exponent_);
    std::swap(leg_ref_id_, other->leg_ref_id_);
    std::swap(leg_settl_currency_, other->leg_settl_currency_);
    std::swap(leg_settl_date_, other->leg_settl_date_);
    std::swap(leg_settl_type_, other->leg_settl_type_);
    leg_stipulations_.Swap(&other->leg_stipulations_);
    std::swap(leg_swap_type_, other->leg_swap_type_);
    std::swap(leg_alloc_id_, other->leg_alloc_id_);
    std::swap(leg_currency_ratio_, other->leg_currency_ratio_);
    std::swap(leg_dividend_yield_, other->leg_dividend_yield_);
    std::swap(leg_dividend_yield_exponent_, other->leg_dividend_yield_exponent_);
    std::swap(leg_last_qty_, other->leg_last_qty_);
    std::swap(leg_last_qty_exponent_, other->leg_last_qty_exponent_);
    leg_pre_alloc_grp_.Swap(&other->leg_pre_alloc_grp_);
    std::swap(leg_volatility_, other->leg_volatility_);
    nested_parties3_.Swap(&other->nested_parties3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrmtLegExecGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrmtLegExecGrp_descriptor_;
  metadata.reflection = InstrmtLegExecGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiscFeesGrp::kMiscFeeAmtFieldNumber;
const int MiscFeesGrp::kMiscFeeAmtExponentFieldNumber;
const int MiscFeesGrp::kMiscFeeBasisFieldNumber;
const int MiscFeesGrp::kMiscFeeCurrFieldNumber;
const int MiscFeesGrp::kMiscFeeTypeFieldNumber;
#endif  // !_MSC_VER

MiscFeesGrp::MiscFeesGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiscFeesGrp::InitAsDefaultInstance() {
}

MiscFeesGrp::MiscFeesGrp(const MiscFeesGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiscFeesGrp::SharedCtor() {
  _cached_size_ = 0;
  misc_fee_amt_ = GOOGLE_LONGLONG(0);
  misc_fee_amt_exponent_ = 0;
  misc_fee_basis_ = 0;
  misc_fee_curr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  misc_fee_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiscFeesGrp::~MiscFeesGrp() {
  SharedDtor();
}

void MiscFeesGrp::SharedDtor() {
  if (misc_fee_curr_ != &::google::protobuf::internal::kEmptyString) {
    delete misc_fee_curr_;
  }
  if (this != default_instance_) {
  }
}

void MiscFeesGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiscFeesGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiscFeesGrp_descriptor_;
}

const MiscFeesGrp& MiscFeesGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MiscFeesGrp* MiscFeesGrp::default_instance_ = NULL;

MiscFeesGrp* MiscFeesGrp::New() const {
  return new MiscFeesGrp;
}

void MiscFeesGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    misc_fee_amt_ = GOOGLE_LONGLONG(0);
    misc_fee_amt_exponent_ = 0;
    misc_fee_basis_ = 0;
    if (has_misc_fee_curr()) {
      if (misc_fee_curr_ != &::google::protobuf::internal::kEmptyString) {
        misc_fee_curr_->clear();
      }
    }
    misc_fee_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiscFeesGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 misc_fee_amt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &misc_fee_amt_)));
          set_has_misc_fee_amt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_misc_fee_amt_exponent;
        break;
      }

      // optional sfixed32 misc_fee_amt_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_misc_fee_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &misc_fee_amt_exponent_)));
          set_has_misc_fee_amt_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_misc_fee_basis;
        break;
      }

      // optional .Common.MiscFeeBasisEnum misc_fee_basis = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_misc_fee_basis:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MiscFeeBasisEnum_IsValid(value)) {
            set_misc_fee_basis(static_cast< ::Common::MiscFeeBasisEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_misc_fee_curr;
        break;
      }

      // optional string misc_fee_curr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_misc_fee_curr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_misc_fee_curr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->misc_fee_curr().data(), this->misc_fee_curr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_misc_fee_type;
        break;
      }

      // optional .Common.MiscFeeTypeEnum misc_fee_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_misc_fee_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MiscFeeTypeEnum_IsValid(value)) {
            set_misc_fee_type(static_cast< ::Common::MiscFeeTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiscFeesGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 misc_fee_amt = 1;
  if (has_misc_fee_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->misc_fee_amt(), output);
  }

  // optional sfixed32 misc_fee_amt_exponent = 2;
  if (has_misc_fee_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->misc_fee_amt_exponent(), output);
  }

  // optional .Common.MiscFeeBasisEnum misc_fee_basis = 3;
  if (has_misc_fee_basis()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->misc_fee_basis(), output);
  }

  // optional string misc_fee_curr = 4;
  if (has_misc_fee_curr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->misc_fee_curr().data(), this->misc_fee_curr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->misc_fee_curr(), output);
  }

  // optional .Common.MiscFeeTypeEnum misc_fee_type = 5;
  if (has_misc_fee_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->misc_fee_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiscFeesGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 misc_fee_amt = 1;
  if (has_misc_fee_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->misc_fee_amt(), target);
  }

  // optional sfixed32 misc_fee_amt_exponent = 2;
  if (has_misc_fee_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->misc_fee_amt_exponent(), target);
  }

  // optional .Common.MiscFeeBasisEnum misc_fee_basis = 3;
  if (has_misc_fee_basis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->misc_fee_basis(), target);
  }

  // optional string misc_fee_curr = 4;
  if (has_misc_fee_curr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->misc_fee_curr().data(), this->misc_fee_curr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->misc_fee_curr(), target);
  }

  // optional .Common.MiscFeeTypeEnum misc_fee_type = 5;
  if (has_misc_fee_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->misc_fee_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiscFeesGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 misc_fee_amt = 1;
    if (has_misc_fee_amt()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 misc_fee_amt_exponent = 2;
    if (has_misc_fee_amt_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.MiscFeeBasisEnum misc_fee_basis = 3;
    if (has_misc_fee_basis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->misc_fee_basis());
    }

    // optional string misc_fee_curr = 4;
    if (has_misc_fee_curr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->misc_fee_curr());
    }

    // optional .Common.MiscFeeTypeEnum misc_fee_type = 5;
    if (has_misc_fee_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->misc_fee_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiscFeesGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiscFeesGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiscFeesGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiscFeesGrp::MergeFrom(const MiscFeesGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_misc_fee_amt()) {
      set_misc_fee_amt(from.misc_fee_amt());
    }
    if (from.has_misc_fee_amt_exponent()) {
      set_misc_fee_amt_exponent(from.misc_fee_amt_exponent());
    }
    if (from.has_misc_fee_basis()) {
      set_misc_fee_basis(from.misc_fee_basis());
    }
    if (from.has_misc_fee_curr()) {
      set_misc_fee_curr(from.misc_fee_curr());
    }
    if (from.has_misc_fee_type()) {
      set_misc_fee_type(from.misc_fee_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiscFeesGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiscFeesGrp::CopyFrom(const MiscFeesGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiscFeesGrp::IsInitialized() const {

  return true;
}

void MiscFeesGrp::Swap(MiscFeesGrp* other) {
  if (other != this) {
    std::swap(misc_fee_amt_, other->misc_fee_amt_);
    std::swap(misc_fee_amt_exponent_, other->misc_fee_amt_exponent_);
    std::swap(misc_fee_basis_, other->misc_fee_basis_);
    std::swap(misc_fee_curr_, other->misc_fee_curr_);
    std::swap(misc_fee_type_, other->misc_fee_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiscFeesGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiscFeesGrp_descriptor_;
  metadata.reflection = MiscFeesGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrmtLegGrp::kInstrumentLegFieldNumber;
#endif  // !_MSC_VER

InstrmtLegGrp::InstrmtLegGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrmtLegGrp::InitAsDefaultInstance() {
  instrument_leg_ = const_cast< ::Common::InstrumentLeg*>(&::Common::InstrumentLeg::default_instance());
}

InstrmtLegGrp::InstrmtLegGrp(const InstrmtLegGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrmtLegGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_leg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrmtLegGrp::~InstrmtLegGrp() {
  SharedDtor();
}

void InstrmtLegGrp::SharedDtor() {
  if (this != default_instance_) {
    delete instrument_leg_;
  }
}

void InstrmtLegGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrmtLegGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrmtLegGrp_descriptor_;
}

const InstrmtLegGrp& InstrmtLegGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrmtLegGrp* InstrmtLegGrp::default_instance_ = NULL;

InstrmtLegGrp* InstrmtLegGrp::New() const {
  return new InstrmtLegGrp;
}

void InstrmtLegGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_leg()) {
      if (instrument_leg_ != NULL) instrument_leg_->::Common::InstrumentLeg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrmtLegGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrumentLeg instrument_leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_leg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrmtLegGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument_leg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrmtLegGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument_leg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrmtLegGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrumentLeg instrument_leg = 1;
    if (has_instrument_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_leg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrmtLegGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrmtLegGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrmtLegGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrmtLegGrp::MergeFrom(const InstrmtLegGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_leg()) {
      mutable_instrument_leg()->::Common::InstrumentLeg::MergeFrom(from.instrument_leg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrmtLegGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrmtLegGrp::CopyFrom(const InstrmtLegGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrmtLegGrp::IsInitialized() const {

  return true;
}

void InstrmtLegGrp::Swap(InstrmtLegGrp* other) {
  if (other != this) {
    std::swap(instrument_leg_, other->instrument_leg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrmtLegGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrmtLegGrp_descriptor_;
  metadata.reflection = InstrmtLegGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrmtLegIoiGrp::kInstrumentLegFieldNumber;
const int InstrmtLegIoiGrp::kLegIoiQtyFieldNumber;
const int InstrmtLegIoiGrp::kLegStipulationsFieldNumber;
#endif  // !_MSC_VER

InstrmtLegIoiGrp::InstrmtLegIoiGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrmtLegIoiGrp::InitAsDefaultInstance() {
  instrument_leg_ = const_cast< ::Common::InstrumentLeg*>(&::Common::InstrumentLeg::default_instance());
}

InstrmtLegIoiGrp::InstrmtLegIoiGrp(const InstrmtLegIoiGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrmtLegIoiGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_leg_ = NULL;
  leg_ioi_qty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrmtLegIoiGrp::~InstrmtLegIoiGrp() {
  SharedDtor();
}

void InstrmtLegIoiGrp::SharedDtor() {
  if (leg_ioi_qty_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_ioi_qty_;
  }
  if (this != default_instance_) {
    delete instrument_leg_;
  }
}

void InstrmtLegIoiGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrmtLegIoiGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrmtLegIoiGrp_descriptor_;
}

const InstrmtLegIoiGrp& InstrmtLegIoiGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrmtLegIoiGrp* InstrmtLegIoiGrp::default_instance_ = NULL;

InstrmtLegIoiGrp* InstrmtLegIoiGrp::New() const {
  return new InstrmtLegIoiGrp;
}

void InstrmtLegIoiGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_leg()) {
      if (instrument_leg_ != NULL) instrument_leg_->::Common::InstrumentLeg::Clear();
    }
    if (has_leg_ioi_qty()) {
      if (leg_ioi_qty_ != &::google::protobuf::internal::kEmptyString) {
        leg_ioi_qty_->clear();
      }
    }
  }
  leg_stipulations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrmtLegIoiGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrumentLeg instrument_leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_leg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_ioi_qty;
        break;
      }

      // optional string leg_ioi_qty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_ioi_qty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_ioi_qty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_ioi_qty().data(), this->leg_ioi_qty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leg_stipulations;
        break;
      }

      // repeated .Common.LegStipulations leg_stipulations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leg_stipulations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrmtLegIoiGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument_leg(), output);
  }

  // optional string leg_ioi_qty = 2;
  if (has_leg_ioi_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_ioi_qty().data(), this->leg_ioi_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leg_ioi_qty(), output);
  }

  // repeated .Common.LegStipulations leg_stipulations = 3;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leg_stipulations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrmtLegIoiGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument_leg(), target);
  }

  // optional string leg_ioi_qty = 2;
  if (has_leg_ioi_qty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_ioi_qty().data(), this->leg_ioi_qty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leg_ioi_qty(), target);
  }

  // repeated .Common.LegStipulations leg_stipulations = 3;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leg_stipulations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrmtLegIoiGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrumentLeg instrument_leg = 1;
    if (has_instrument_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_leg());
    }

    // optional string leg_ioi_qty = 2;
    if (has_leg_ioi_qty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_ioi_qty());
    }

  }
  // repeated .Common.LegStipulations leg_stipulations = 3;
  total_size += 1 * this->leg_stipulations_size();
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_stipulations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrmtLegIoiGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrmtLegIoiGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrmtLegIoiGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrmtLegIoiGrp::MergeFrom(const InstrmtLegIoiGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  leg_stipulations_.MergeFrom(from.leg_stipulations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_leg()) {
      mutable_instrument_leg()->::Common::InstrumentLeg::MergeFrom(from.instrument_leg());
    }
    if (from.has_leg_ioi_qty()) {
      set_leg_ioi_qty(from.leg_ioi_qty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrmtLegIoiGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrmtLegIoiGrp::CopyFrom(const InstrmtLegIoiGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrmtLegIoiGrp::IsInitialized() const {

  return true;
}

void InstrmtLegIoiGrp::Swap(InstrmtLegIoiGrp* other) {
  if (other != this) {
    std::swap(instrument_leg_, other->instrument_leg_);
    std::swap(leg_ioi_qty_, other->leg_ioi_qty_);
    leg_stipulations_.Swap(&other->leg_stipulations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrmtLegIoiGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrmtLegIoiGrp_descriptor_;
  metadata.reflection = InstrmtLegIoiGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoutingGrp::kRoutingIdFieldNumber;
const int RoutingGrp::kRoutingTypeFieldNumber;
#endif  // !_MSC_VER

RoutingGrp::RoutingGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoutingGrp::InitAsDefaultInstance() {
}

RoutingGrp::RoutingGrp(const RoutingGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoutingGrp::SharedCtor() {
  _cached_size_ = 0;
  routing_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  routing_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutingGrp::~RoutingGrp() {
  SharedDtor();
}

void RoutingGrp::SharedDtor() {
  if (routing_id_ != &::google::protobuf::internal::kEmptyString) {
    delete routing_id_;
  }
  if (this != default_instance_) {
  }
}

void RoutingGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutingGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutingGrp_descriptor_;
}

const RoutingGrp& RoutingGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

RoutingGrp* RoutingGrp::default_instance_ = NULL;

RoutingGrp* RoutingGrp::New() const {
  return new RoutingGrp;
}

void RoutingGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_routing_id()) {
      if (routing_id_ != &::google::protobuf::internal::kEmptyString) {
        routing_id_->clear();
      }
    }
    routing_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoutingGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string routing_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_routing_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->routing_id().data(), this->routing_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_routing_type;
        break;
      }

      // optional .Common.RoutingTypeEnum routing_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_routing_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::RoutingTypeEnum_IsValid(value)) {
            set_routing_type(static_cast< ::Common::RoutingTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoutingGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string routing_id = 1;
  if (has_routing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routing_id().data(), this->routing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->routing_id(), output);
  }

  // optional .Common.RoutingTypeEnum routing_type = 2;
  if (has_routing_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->routing_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoutingGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string routing_id = 1;
  if (has_routing_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->routing_id().data(), this->routing_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->routing_id(), target);
  }

  // optional .Common.RoutingTypeEnum routing_type = 2;
  if (has_routing_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->routing_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoutingGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string routing_id = 1;
    if (has_routing_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->routing_id());
    }

    // optional .Common.RoutingTypeEnum routing_type = 2;
    if (has_routing_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->routing_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutingGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoutingGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoutingGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoutingGrp::MergeFrom(const RoutingGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_routing_id()) {
      set_routing_id(from.routing_id());
    }
    if (from.has_routing_type()) {
      set_routing_type(from.routing_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoutingGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingGrp::CopyFrom(const RoutingGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingGrp::IsInitialized() const {

  return true;
}

void RoutingGrp::Swap(RoutingGrp* other) {
  if (other != this) {
    std::swap(routing_id_, other->routing_id_);
    std::swap(routing_type_, other->routing_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoutingGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutingGrp_descriptor_;
  metadata.reflection = RoutingGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrAttribTypeUnion::kInstrAttribTypeFieldNumber;
const int InstrAttribTypeUnion::kInstrAttribTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

InstrAttribTypeUnion::InstrAttribTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrAttribTypeUnion::InitAsDefaultInstance() {
}

InstrAttribTypeUnion::InstrAttribTypeUnion(const InstrAttribTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrAttribTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  instr_attrib_type_ = 0;
  instr_attrib_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrAttribTypeUnion::~InstrAttribTypeUnion() {
  SharedDtor();
}

void InstrAttribTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrAttribTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrAttribTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrAttribTypeUnion_descriptor_;
}

const InstrAttribTypeUnion& InstrAttribTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrAttribTypeUnion* InstrAttribTypeUnion::default_instance_ = NULL;

InstrAttribTypeUnion* InstrAttribTypeUnion::New() const {
  return new InstrAttribTypeUnion;
}

void InstrAttribTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instr_attrib_type_ = 0;
    instr_attrib_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrAttribTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::InstrAttribTypeEnum_IsValid(value)) {
            set_instr_attrib_type(static_cast< ::Common::InstrAttribTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_instr_attrib_type_sfixed64;
        break;
      }

      // optional sfixed64 instr_attrib_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_instr_attrib_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &instr_attrib_type_sfixed64_)));
          set_has_instr_attrib_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrAttribTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
  if (has_instr_attrib_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->instr_attrib_type(), output);
  }

  // optional sfixed64 instr_attrib_type_sfixed64 = 2;
  if (has_instr_attrib_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->instr_attrib_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrAttribTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
  if (has_instr_attrib_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->instr_attrib_type(), target);
  }

  // optional sfixed64 instr_attrib_type_sfixed64 = 2;
  if (has_instr_attrib_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->instr_attrib_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrAttribTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
    if (has_instr_attrib_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->instr_attrib_type());
    }

    // optional sfixed64 instr_attrib_type_sfixed64 = 2;
    if (has_instr_attrib_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrAttribTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrAttribTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrAttribTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrAttribTypeUnion::MergeFrom(const InstrAttribTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instr_attrib_type()) {
      set_instr_attrib_type(from.instr_attrib_type());
    }
    if (from.has_instr_attrib_type_sfixed64()) {
      set_instr_attrib_type_sfixed64(from.instr_attrib_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrAttribTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrAttribTypeUnion::CopyFrom(const InstrAttribTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrAttribTypeUnion::IsInitialized() const {

  return true;
}

void InstrAttribTypeUnion::Swap(InstrAttribTypeUnion* other) {
  if (other != this) {
    std::swap(instr_attrib_type_, other->instr_attrib_type_);
    std::swap(instr_attrib_type_sfixed64_, other->instr_attrib_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrAttribTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrAttribTypeUnion_descriptor_;
  metadata.reflection = InstrAttribTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrbGrp::kInstrAttribTypeFieldNumber;
const int AttrbGrp::kInstrAttribValueFieldNumber;
#endif  // !_MSC_VER

AttrbGrp::AttrbGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrbGrp::InitAsDefaultInstance() {
}

AttrbGrp::AttrbGrp(const AttrbGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrbGrp::SharedCtor() {
  _cached_size_ = 0;
  instr_attrib_type_ = 0;
  instr_attrib_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrbGrp::~AttrbGrp() {
  SharedDtor();
}

void AttrbGrp::SharedDtor() {
  if (instr_attrib_value_ != &::google::protobuf::internal::kEmptyString) {
    delete instr_attrib_value_;
  }
  if (this != default_instance_) {
  }
}

void AttrbGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrbGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrbGrp_descriptor_;
}

const AttrbGrp& AttrbGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

AttrbGrp* AttrbGrp::default_instance_ = NULL;

AttrbGrp* AttrbGrp::New() const {
  return new AttrbGrp;
}

void AttrbGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instr_attrib_type_ = 0;
    if (has_instr_attrib_value()) {
      if (instr_attrib_value_ != &::google::protobuf::internal::kEmptyString) {
        instr_attrib_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrbGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::InstrAttribTypeEnum_IsValid(value)) {
            set_instr_attrib_type(static_cast< ::Common::InstrAttribTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_instr_attrib_value;
        break;
      }

      // optional string instr_attrib_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instr_attrib_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instr_attrib_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instr_attrib_value().data(), this->instr_attrib_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrbGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
  if (has_instr_attrib_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->instr_attrib_type(), output);
  }

  // optional string instr_attrib_value = 2;
  if (has_instr_attrib_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_attrib_value().data(), this->instr_attrib_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->instr_attrib_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrbGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
  if (has_instr_attrib_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->instr_attrib_type(), target);
  }

  // optional string instr_attrib_value = 2;
  if (has_instr_attrib_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instr_attrib_value().data(), this->instr_attrib_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->instr_attrib_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrbGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrAttribTypeEnum instr_attrib_type = 1;
    if (has_instr_attrib_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->instr_attrib_type());
    }

    // optional string instr_attrib_value = 2;
    if (has_instr_attrib_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instr_attrib_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrbGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrbGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrbGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrbGrp::MergeFrom(const AttrbGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instr_attrib_type()) {
      set_instr_attrib_type(from.instr_attrib_type());
    }
    if (from.has_instr_attrib_value()) {
      set_instr_attrib_value(from.instr_attrib_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrbGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrbGrp::CopyFrom(const AttrbGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrbGrp::IsInitialized() const {

  return true;
}

void AttrbGrp::Swap(AttrbGrp* other) {
  if (other != this) {
    std::swap(instr_attrib_type_, other->instr_attrib_type_);
    std::swap(instr_attrib_value_, other->instr_attrib_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrbGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrbGrp_descriptor_;
  metadata.reflection = AttrbGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrumentExtension::kAttrbGrpFieldNumber;
const int InstrumentExtension::kDeliveryFormFieldNumber;
const int InstrumentExtension::kPctAtRiskFieldNumber;
const int InstrumentExtension::kPctAtRiskExponentFieldNumber;
#endif  // !_MSC_VER

InstrumentExtension::InstrumentExtension()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrumentExtension::InitAsDefaultInstance() {
}

InstrumentExtension::InstrumentExtension(const InstrumentExtension& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrumentExtension::SharedCtor() {
  _cached_size_ = 0;
  delivery_form_ = 0;
  pct_at_risk_ = GOOGLE_LONGLONG(0);
  pct_at_risk_exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrumentExtension::~InstrumentExtension() {
  SharedDtor();
}

void InstrumentExtension::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstrumentExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrumentExtension::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrumentExtension_descriptor_;
}

const InstrumentExtension& InstrumentExtension::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrumentExtension* InstrumentExtension::default_instance_ = NULL;

InstrumentExtension* InstrumentExtension::New() const {
  return new InstrumentExtension;
}

void InstrumentExtension::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    delivery_form_ = 0;
    pct_at_risk_ = GOOGLE_LONGLONG(0);
    pct_at_risk_exponent_ = 0;
  }
  attrb_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrumentExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.AttrbGrp attrb_grp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrb_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrb_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attrb_grp;
        if (input->ExpectTag(16)) goto parse_delivery_form;
        break;
      }

      // optional .Common.DeliveryFormEnum delivery_form = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delivery_form:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::DeliveryFormEnum_IsValid(value)) {
            set_delivery_form(static_cast< ::Common::DeliveryFormEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_pct_at_risk;
        break;
      }

      // optional sfixed64 pct_at_risk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pct_at_risk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &pct_at_risk_)));
          set_has_pct_at_risk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_pct_at_risk_exponent;
        break;
      }

      // optional sfixed32 pct_at_risk_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pct_at_risk_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &pct_at_risk_exponent_)));
          set_has_pct_at_risk_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrumentExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Common.AttrbGrp attrb_grp = 1;
  for (int i = 0; i < this->attrb_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrb_grp(i), output);
  }

  // optional .Common.DeliveryFormEnum delivery_form = 2;
  if (has_delivery_form()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->delivery_form(), output);
  }

  // optional sfixed64 pct_at_risk = 3;
  if (has_pct_at_risk()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->pct_at_risk(), output);
  }

  // optional sfixed32 pct_at_risk_exponent = 4;
  if (has_pct_at_risk_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->pct_at_risk_exponent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrumentExtension::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.AttrbGrp attrb_grp = 1;
  for (int i = 0; i < this->attrb_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrb_grp(i), target);
  }

  // optional .Common.DeliveryFormEnum delivery_form = 2;
  if (has_delivery_form()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->delivery_form(), target);
  }

  // optional sfixed64 pct_at_risk = 3;
  if (has_pct_at_risk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->pct_at_risk(), target);
  }

  // optional sfixed32 pct_at_risk_exponent = 4;
  if (has_pct_at_risk_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->pct_at_risk_exponent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrumentExtension::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Common.DeliveryFormEnum delivery_form = 2;
    if (has_delivery_form()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->delivery_form());
    }

    // optional sfixed64 pct_at_risk = 3;
    if (has_pct_at_risk()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 pct_at_risk_exponent = 4;
    if (has_pct_at_risk_exponent()) {
      total_size += 1 + 4;
    }

  }
  // repeated .Common.AttrbGrp attrb_grp = 1;
  total_size += 1 * this->attrb_grp_size();
  for (int i = 0; i < this->attrb_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrb_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrumentExtension::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrumentExtension* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrumentExtension*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrumentExtension::MergeFrom(const InstrumentExtension& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrb_grp_.MergeFrom(from.attrb_grp_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_delivery_form()) {
      set_delivery_form(from.delivery_form());
    }
    if (from.has_pct_at_risk()) {
      set_pct_at_risk(from.pct_at_risk());
    }
    if (from.has_pct_at_risk_exponent()) {
      set_pct_at_risk_exponent(from.pct_at_risk_exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrumentExtension::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrumentExtension::CopyFrom(const InstrumentExtension& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrumentExtension::IsInitialized() const {

  return true;
}

void InstrumentExtension::Swap(InstrumentExtension* other) {
  if (other != this) {
    attrb_grp_.Swap(&other->attrb_grp_);
    std::swap(delivery_form_, other->delivery_form_);
    std::swap(pct_at_risk_, other->pct_at_risk_);
    std::swap(pct_at_risk_exponent_, other->pct_at_risk_exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrumentExtension::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrumentExtension_descriptor_;
  metadata.reflection = InstrumentExtension_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TickRules::kEndTickPriceRangeFieldNumber;
const int TickRules::kEndTickPriceRangeExponentFieldNumber;
const int TickRules::kStartTickPriceRangeFieldNumber;
const int TickRules::kStartTickPriceRangeExponentFieldNumber;
const int TickRules::kTickIncrementFieldNumber;
const int TickRules::kTickIncrementExponentFieldNumber;
const int TickRules::kTickRuleTypeFieldNumber;
#endif  // !_MSC_VER

TickRules::TickRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TickRules::InitAsDefaultInstance() {
}

TickRules::TickRules(const TickRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TickRules::SharedCtor() {
  _cached_size_ = 0;
  end_tick_price_range_ = GOOGLE_LONGLONG(0);
  end_tick_price_range_exponent_ = 0;
  start_tick_price_range_ = GOOGLE_LONGLONG(0);
  start_tick_price_range_exponent_ = 0;
  tick_increment_ = GOOGLE_LONGLONG(0);
  tick_increment_exponent_ = 0;
  tick_rule_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TickRules::~TickRules() {
  SharedDtor();
}

void TickRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TickRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TickRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TickRules_descriptor_;
}

const TickRules& TickRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TickRules* TickRules::default_instance_ = NULL;

TickRules* TickRules::New() const {
  return new TickRules;
}

void TickRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    end_tick_price_range_ = GOOGLE_LONGLONG(0);
    end_tick_price_range_exponent_ = 0;
    start_tick_price_range_ = GOOGLE_LONGLONG(0);
    start_tick_price_range_exponent_ = 0;
    tick_increment_ = GOOGLE_LONGLONG(0);
    tick_increment_exponent_ = 0;
    tick_rule_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TickRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 end_tick_price_range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &end_tick_price_range_)));
          set_has_end_tick_price_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_end_tick_price_range_exponent;
        break;
      }

      // optional sfixed32 end_tick_price_range_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_tick_price_range_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_tick_price_range_exponent_)));
          set_has_end_tick_price_range_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_start_tick_price_range;
        break;
      }

      // optional sfixed64 start_tick_price_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_tick_price_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &start_tick_price_range_)));
          set_has_start_tick_price_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_tick_price_range_exponent;
        break;
      }

      // optional sfixed32 start_tick_price_range_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_tick_price_range_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_tick_price_range_exponent_)));
          set_has_start_tick_price_range_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_tick_increment;
        break;
      }

      // optional sfixed64 tick_increment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tick_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tick_increment_)));
          set_has_tick_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_tick_increment_exponent;
        break;
      }

      // optional sfixed32 tick_increment_exponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tick_increment_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &tick_increment_exponent_)));
          set_has_tick_increment_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tick_rule_type;
        break;
      }

      // optional .Common.TickRuleTypeEnum tick_rule_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick_rule_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TickRuleTypeEnum_IsValid(value)) {
            set_tick_rule_type(static_cast< ::Common::TickRuleTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TickRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 end_tick_price_range = 1;
  if (has_end_tick_price_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->end_tick_price_range(), output);
  }

  // optional sfixed32 end_tick_price_range_exponent = 2;
  if (has_end_tick_price_range_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->end_tick_price_range_exponent(), output);
  }

  // optional sfixed64 start_tick_price_range = 3;
  if (has_start_tick_price_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->start_tick_price_range(), output);
  }

  // optional sfixed32 start_tick_price_range_exponent = 4;
  if (has_start_tick_price_range_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->start_tick_price_range_exponent(), output);
  }

  // optional sfixed64 tick_increment = 5;
  if (has_tick_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->tick_increment(), output);
  }

  // optional sfixed32 tick_increment_exponent = 6;
  if (has_tick_increment_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->tick_increment_exponent(), output);
  }

  // optional .Common.TickRuleTypeEnum tick_rule_type = 7;
  if (has_tick_rule_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tick_rule_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TickRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 end_tick_price_range = 1;
  if (has_end_tick_price_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->end_tick_price_range(), target);
  }

  // optional sfixed32 end_tick_price_range_exponent = 2;
  if (has_end_tick_price_range_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->end_tick_price_range_exponent(), target);
  }

  // optional sfixed64 start_tick_price_range = 3;
  if (has_start_tick_price_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->start_tick_price_range(), target);
  }

  // optional sfixed32 start_tick_price_range_exponent = 4;
  if (has_start_tick_price_range_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->start_tick_price_range_exponent(), target);
  }

  // optional sfixed64 tick_increment = 5;
  if (has_tick_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->tick_increment(), target);
  }

  // optional sfixed32 tick_increment_exponent = 6;
  if (has_tick_increment_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->tick_increment_exponent(), target);
  }

  // optional .Common.TickRuleTypeEnum tick_rule_type = 7;
  if (has_tick_rule_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tick_rule_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TickRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 end_tick_price_range = 1;
    if (has_end_tick_price_range()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 end_tick_price_range_exponent = 2;
    if (has_end_tick_price_range_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 start_tick_price_range = 3;
    if (has_start_tick_price_range()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 start_tick_price_range_exponent = 4;
    if (has_start_tick_price_range_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 tick_increment = 5;
    if (has_tick_increment()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 tick_increment_exponent = 6;
    if (has_tick_increment_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.TickRuleTypeEnum tick_rule_type = 7;
    if (has_tick_rule_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tick_rule_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TickRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TickRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TickRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TickRules::MergeFrom(const TickRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_tick_price_range()) {
      set_end_tick_price_range(from.end_tick_price_range());
    }
    if (from.has_end_tick_price_range_exponent()) {
      set_end_tick_price_range_exponent(from.end_tick_price_range_exponent());
    }
    if (from.has_start_tick_price_range()) {
      set_start_tick_price_range(from.start_tick_price_range());
    }
    if (from.has_start_tick_price_range_exponent()) {
      set_start_tick_price_range_exponent(from.start_tick_price_range_exponent());
    }
    if (from.has_tick_increment()) {
      set_tick_increment(from.tick_increment());
    }
    if (from.has_tick_increment_exponent()) {
      set_tick_increment_exponent(from.tick_increment_exponent());
    }
    if (from.has_tick_rule_type()) {
      set_tick_rule_type(from.tick_rule_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TickRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TickRules::CopyFrom(const TickRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TickRules::IsInitialized() const {

  return true;
}

void TickRules::Swap(TickRules* other) {
  if (other != this) {
    std::swap(end_tick_price_range_, other->end_tick_price_range_);
    std::swap(end_tick_price_range_exponent_, other->end_tick_price_range_exponent_);
    std::swap(start_tick_price_range_, other->start_tick_price_range_);
    std::swap(start_tick_price_range_exponent_, other->start_tick_price_range_exponent_);
    std::swap(tick_increment_, other->tick_increment_);
    std::swap(tick_increment_exponent_, other->tick_increment_exponent_);
    std::swap(tick_rule_type_, other->tick_rule_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TickRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TickRules_descriptor_;
  metadata.reflection = TickRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotTypeRules::kLotTypeFieldNumber;
const int LotTypeRules::kMinLotSizeFieldNumber;
const int LotTypeRules::kMinLotSizeExponentFieldNumber;
#endif  // !_MSC_VER

LotTypeRules::LotTypeRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LotTypeRules::InitAsDefaultInstance() {
}

LotTypeRules::LotTypeRules(const LotTypeRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LotTypeRules::SharedCtor() {
  _cached_size_ = 0;
  lot_type_ = 0;
  min_lot_size_ = GOOGLE_LONGLONG(0);
  min_lot_size_exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotTypeRules::~LotTypeRules() {
  SharedDtor();
}

void LotTypeRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotTypeRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotTypeRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotTypeRules_descriptor_;
}

const LotTypeRules& LotTypeRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LotTypeRules* LotTypeRules::default_instance_ = NULL;

LotTypeRules* LotTypeRules::New() const {
  return new LotTypeRules;
}

void LotTypeRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lot_type_ = 0;
    min_lot_size_ = GOOGLE_LONGLONG(0);
    min_lot_size_exponent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotTypeRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.LotTypeEnum lot_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::LotTypeEnum_IsValid(value)) {
            set_lot_type(static_cast< ::Common::LotTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_min_lot_size;
        break;
      }

      // optional sfixed64 min_lot_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_lot_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_lot_size_)));
          set_has_min_lot_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_min_lot_size_exponent;
        break;
      }

      // optional sfixed32 min_lot_size_exponent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_lot_size_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_lot_size_exponent_)));
          set_has_min_lot_size_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LotTypeRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.LotTypeEnum lot_type = 1;
  if (has_lot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->lot_type(), output);
  }

  // optional sfixed64 min_lot_size = 2;
  if (has_min_lot_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->min_lot_size(), output);
  }

  // optional sfixed32 min_lot_size_exponent = 3;
  if (has_min_lot_size_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->min_lot_size_exponent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LotTypeRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.LotTypeEnum lot_type = 1;
  if (has_lot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->lot_type(), target);
  }

  // optional sfixed64 min_lot_size = 2;
  if (has_min_lot_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->min_lot_size(), target);
  }

  // optional sfixed32 min_lot_size_exponent = 3;
  if (has_min_lot_size_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->min_lot_size_exponent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LotTypeRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.LotTypeEnum lot_type = 1;
    if (has_lot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lot_type());
    }

    // optional sfixed64 min_lot_size = 2;
    if (has_min_lot_size()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 min_lot_size_exponent = 3;
    if (has_min_lot_size_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotTypeRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotTypeRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotTypeRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotTypeRules::MergeFrom(const LotTypeRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lot_type()) {
      set_lot_type(from.lot_type());
    }
    if (from.has_min_lot_size()) {
      set_min_lot_size(from.min_lot_size());
    }
    if (from.has_min_lot_size_exponent()) {
      set_min_lot_size_exponent(from.min_lot_size_exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotTypeRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotTypeRules::CopyFrom(const LotTypeRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotTypeRules::IsInitialized() const {

  return true;
}

void LotTypeRules::Swap(LotTypeRules* other) {
  if (other != this) {
    std::swap(lot_type_, other->lot_type_);
    std::swap(min_lot_size_, other->min_lot_size_);
    std::swap(min_lot_size_exponent_, other->min_lot_size_exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotTypeRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotTypeRules_descriptor_;
  metadata.reflection = LotTypeRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PriceLimits::kHighLimitPriceFieldNumber;
const int PriceLimits::kHighLimitPriceExponentFieldNumber;
const int PriceLimits::kLowLimitPriceFieldNumber;
const int PriceLimits::kLowLimitPriceExponentFieldNumber;
const int PriceLimits::kPriceLimitTypeFieldNumber;
const int PriceLimits::kTradingReferencePriceFieldNumber;
const int PriceLimits::kTradingReferencePriceExponentFieldNumber;
#endif  // !_MSC_VER

PriceLimits::PriceLimits()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PriceLimits::InitAsDefaultInstance() {
}

PriceLimits::PriceLimits(const PriceLimits& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PriceLimits::SharedCtor() {
  _cached_size_ = 0;
  high_limit_price_ = GOOGLE_LONGLONG(0);
  high_limit_price_exponent_ = 0;
  low_limit_price_ = GOOGLE_LONGLONG(0);
  low_limit_price_exponent_ = 0;
  price_limit_type_ = 0;
  trading_reference_price_ = GOOGLE_LONGLONG(0);
  trading_reference_price_exponent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PriceLimits::~PriceLimits() {
  SharedDtor();
}

void PriceLimits::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PriceLimits::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PriceLimits::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceLimits_descriptor_;
}

const PriceLimits& PriceLimits::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

PriceLimits* PriceLimits::default_instance_ = NULL;

PriceLimits* PriceLimits::New() const {
  return new PriceLimits;
}

void PriceLimits::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    high_limit_price_ = GOOGLE_LONGLONG(0);
    high_limit_price_exponent_ = 0;
    low_limit_price_ = GOOGLE_LONGLONG(0);
    low_limit_price_exponent_ = 0;
    price_limit_type_ = 0;
    trading_reference_price_ = GOOGLE_LONGLONG(0);
    trading_reference_price_exponent_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PriceLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 high_limit_price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &high_limit_price_)));
          set_has_high_limit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_high_limit_price_exponent;
        break;
      }

      // optional sfixed32 high_limit_price_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_high_limit_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &high_limit_price_exponent_)));
          set_has_high_limit_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_low_limit_price;
        break;
      }

      // optional sfixed64 low_limit_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_low_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &low_limit_price_)));
          set_has_low_limit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_low_limit_price_exponent;
        break;
      }

      // optional sfixed32 low_limit_price_exponent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_low_limit_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &low_limit_price_exponent_)));
          set_has_low_limit_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price_limit_type;
        break;
      }

      // optional .Common.PriceLimitTypeEnum price_limit_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PriceLimitTypeEnum_IsValid(value)) {
            set_price_limit_type(static_cast< ::Common::PriceLimitTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_trading_reference_price;
        break;
      }

      // optional sfixed64 trading_reference_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_trading_reference_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trading_reference_price_)));
          set_has_trading_reference_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_trading_reference_price_exponent;
        break;
      }

      // optional sfixed32 trading_reference_price_exponent = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trading_reference_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trading_reference_price_exponent_)));
          set_has_trading_reference_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PriceLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 high_limit_price = 1;
  if (has_high_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->high_limit_price(), output);
  }

  // optional sfixed32 high_limit_price_exponent = 2;
  if (has_high_limit_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->high_limit_price_exponent(), output);
  }

  // optional sfixed64 low_limit_price = 3;
  if (has_low_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->low_limit_price(), output);
  }

  // optional sfixed32 low_limit_price_exponent = 4;
  if (has_low_limit_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->low_limit_price_exponent(), output);
  }

  // optional .Common.PriceLimitTypeEnum price_limit_type = 5;
  if (has_price_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->price_limit_type(), output);
  }

  // optional sfixed64 trading_reference_price = 6;
  if (has_trading_reference_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->trading_reference_price(), output);
  }

  // optional sfixed32 trading_reference_price_exponent = 7;
  if (has_trading_reference_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->trading_reference_price_exponent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PriceLimits::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 high_limit_price = 1;
  if (has_high_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->high_limit_price(), target);
  }

  // optional sfixed32 high_limit_price_exponent = 2;
  if (has_high_limit_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->high_limit_price_exponent(), target);
  }

  // optional sfixed64 low_limit_price = 3;
  if (has_low_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->low_limit_price(), target);
  }

  // optional sfixed32 low_limit_price_exponent = 4;
  if (has_low_limit_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->low_limit_price_exponent(), target);
  }

  // optional .Common.PriceLimitTypeEnum price_limit_type = 5;
  if (has_price_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->price_limit_type(), target);
  }

  // optional sfixed64 trading_reference_price = 6;
  if (has_trading_reference_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->trading_reference_price(), target);
  }

  // optional sfixed32 trading_reference_price_exponent = 7;
  if (has_trading_reference_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->trading_reference_price_exponent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PriceLimits::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 high_limit_price = 1;
    if (has_high_limit_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 high_limit_price_exponent = 2;
    if (has_high_limit_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 low_limit_price = 3;
    if (has_low_limit_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 low_limit_price_exponent = 4;
    if (has_low_limit_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional .Common.PriceLimitTypeEnum price_limit_type = 5;
    if (has_price_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_limit_type());
    }

    // optional sfixed64 trading_reference_price = 6;
    if (has_trading_reference_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 trading_reference_price_exponent = 7;
    if (has_trading_reference_price_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PriceLimits::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PriceLimits* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PriceLimits*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PriceLimits::MergeFrom(const PriceLimits& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_high_limit_price()) {
      set_high_limit_price(from.high_limit_price());
    }
    if (from.has_high_limit_price_exponent()) {
      set_high_limit_price_exponent(from.high_limit_price_exponent());
    }
    if (from.has_low_limit_price()) {
      set_low_limit_price(from.low_limit_price());
    }
    if (from.has_low_limit_price_exponent()) {
      set_low_limit_price_exponent(from.low_limit_price_exponent());
    }
    if (from.has_price_limit_type()) {
      set_price_limit_type(from.price_limit_type());
    }
    if (from.has_trading_reference_price()) {
      set_trading_reference_price(from.trading_reference_price());
    }
    if (from.has_trading_reference_price_exponent()) {
      set_trading_reference_price_exponent(from.trading_reference_price_exponent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PriceLimits::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceLimits::CopyFrom(const PriceLimits& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceLimits::IsInitialized() const {

  return true;
}

void PriceLimits::Swap(PriceLimits* other) {
  if (other != this) {
    std::swap(high_limit_price_, other->high_limit_price_);
    std::swap(high_limit_price_exponent_, other->high_limit_price_exponent_);
    std::swap(low_limit_price_, other->low_limit_price_);
    std::swap(low_limit_price_exponent_, other->low_limit_price_exponent_);
    std::swap(price_limit_type_, other->price_limit_type_);
    std::swap(trading_reference_price_, other->trading_reference_price_);
    std::swap(trading_reference_price_exponent_, other->trading_reference_price_exponent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PriceLimits::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PriceLimits_descriptor_;
  metadata.reflection = PriceLimits_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseTradingRules::kExpirationCycleFieldNumber;
const int BaseTradingRules::kImpliedMarketIndicatorFieldNumber;
const int BaseTradingRules::kLotTypeRulesFieldNumber;
const int BaseTradingRules::kMaxPriceVariationFieldNumber;
const int BaseTradingRules::kMaxTradeVolFieldNumber;
const int BaseTradingRules::kMaxTradeVolExponentFieldNumber;
const int BaseTradingRules::kMinTradeVolFieldNumber;
const int BaseTradingRules::kMinTradeVolExponentFieldNumber;
const int BaseTradingRules::kMultilegModelFieldNumber;
const int BaseTradingRules::kMultilegPriceMethodFieldNumber;
const int BaseTradingRules::kPriceLimitsFieldNumber;
const int BaseTradingRules::kPriceTypeFieldNumber;
const int BaseTradingRules::kRoundLotFieldNumber;
const int BaseTradingRules::kRoundLotExponentFieldNumber;
const int BaseTradingRules::kTickRulesFieldNumber;
const int BaseTradingRules::kTradingCurrencyFieldNumber;
#endif  // !_MSC_VER

BaseTradingRules::BaseTradingRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseTradingRules::InitAsDefaultInstance() {
  price_limits_ = const_cast< ::Common::PriceLimits*>(&::Common::PriceLimits::default_instance());
}

BaseTradingRules::BaseTradingRules(const BaseTradingRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseTradingRules::SharedCtor() {
  _cached_size_ = 0;
  expiration_cycle_ = 0;
  implied_market_indicator_ = 0;
  max_price_variation_ = 0;
  max_trade_vol_ = GOOGLE_LONGLONG(0);
  max_trade_vol_exponent_ = 0;
  min_trade_vol_ = GOOGLE_LONGLONG(0);
  min_trade_vol_exponent_ = 0;
  multileg_model_ = 0;
  multileg_price_method_ = 0;
  price_limits_ = NULL;
  price_type_ = 0;
  round_lot_ = GOOGLE_LONGLONG(0);
  round_lot_exponent_ = 0;
  trading_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseTradingRules::~BaseTradingRules() {
  SharedDtor();
}

void BaseTradingRules::SharedDtor() {
  if (trading_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete trading_currency_;
  }
  if (this != default_instance_) {
    delete price_limits_;
  }
}

void BaseTradingRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseTradingRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseTradingRules_descriptor_;
}

const BaseTradingRules& BaseTradingRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

BaseTradingRules* BaseTradingRules::default_instance_ = NULL;

BaseTradingRules* BaseTradingRules::New() const {
  return new BaseTradingRules;
}

void BaseTradingRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expiration_cycle_ = 0;
    implied_market_indicator_ = 0;
    max_price_variation_ = 0;
    max_trade_vol_ = GOOGLE_LONGLONG(0);
    max_trade_vol_exponent_ = 0;
    min_trade_vol_ = GOOGLE_LONGLONG(0);
    min_trade_vol_exponent_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    multileg_model_ = 0;
    multileg_price_method_ = 0;
    if (has_price_limits()) {
      if (price_limits_ != NULL) price_limits_->::Common::PriceLimits::Clear();
    }
    price_type_ = 0;
    round_lot_ = GOOGLE_LONGLONG(0);
    round_lot_exponent_ = 0;
    if (has_trading_currency()) {
      if (trading_currency_ != &::google::protobuf::internal::kEmptyString) {
        trading_currency_->clear();
      }
    }
  }
  lot_type_rules_.Clear();
  tick_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseTradingRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.ExpirationCycleEnum expiration_cycle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ExpirationCycleEnum_IsValid(value)) {
            set_expiration_cycle(static_cast< ::Common::ExpirationCycleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_implied_market_indicator;
        break;
      }

      // optional .Common.ImpliedMarketIndicatorEnum implied_market_indicator = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_implied_market_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::ImpliedMarketIndicatorEnum_IsValid(value)) {
            set_implied_market_indicator(static_cast< ::Common::ImpliedMarketIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lot_type_rules;
        break;
      }

      // repeated .Common.LotTypeRules lot_type_rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lot_type_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lot_type_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lot_type_rules;
        if (input->ExpectTag(33)) goto parse_max_price_variation;
        break;
      }

      // optional double max_price_variation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_price_variation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_price_variation_)));
          set_has_max_price_variation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_max_trade_vol;
        break;
      }

      // optional sfixed64 max_trade_vol = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_trade_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_trade_vol_)));
          set_has_max_trade_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_max_trade_vol_exponent;
        break;
      }

      // optional sfixed32 max_trade_vol_exponent = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_trade_vol_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_trade_vol_exponent_)));
          set_has_max_trade_vol_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_min_trade_vol;
        break;
      }

      // optional sfixed64 min_trade_vol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_trade_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_trade_vol_)));
          set_has_min_trade_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_min_trade_vol_exponent;
        break;
      }

      // optional sfixed32 min_trade_vol_exponent = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_trade_vol_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_trade_vol_exponent_)));
          set_has_min_trade_vol_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_multileg_model;
        break;
      }

      // optional .Common.MultilegModelEnum multileg_model = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multileg_model:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MultilegModelEnum_IsValid(value)) {
            set_multileg_model(static_cast< ::Common::MultilegModelEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_multileg_price_method;
        break;
      }

      // optional .Common.MultilegPriceMethodEnum multileg_price_method = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multileg_price_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MultilegPriceMethodEnum_IsValid(value)) {
            set_multileg_price_method(static_cast< ::Common::MultilegPriceMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_price_limits;
        break;
      }

      // optional .Common.PriceLimits price_limits = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price_limits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price_limits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_price_type;
        break;
      }

      // optional .Common.PriceTypeEnum price_type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::Common::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_round_lot;
        break;
      }

      // optional sfixed64 round_lot = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_round_lot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &round_lot_)));
          set_has_round_lot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_round_lot_exponent;
        break;
      }

      // optional sfixed32 round_lot_exponent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_round_lot_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &round_lot_exponent_)));
          set_has_round_lot_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tick_rules;
        break;
      }

      // repeated .Common.TickRules tick_rules = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tick_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tick_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_tick_rules;
        if (input->ExpectTag(130)) goto parse_trading_currency;
        break;
      }

      // optional string trading_currency = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trading_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trading_currency().data(), this->trading_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseTradingRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.ExpirationCycleEnum expiration_cycle = 1;
  if (has_expiration_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->expiration_cycle(), output);
  }

  // optional .Common.ImpliedMarketIndicatorEnum implied_market_indicator = 2;
  if (has_implied_market_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->implied_market_indicator(), output);
  }

  // repeated .Common.LotTypeRules lot_type_rules = 3;
  for (int i = 0; i < this->lot_type_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lot_type_rules(i), output);
  }

  // optional double max_price_variation = 4;
  if (has_max_price_variation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_price_variation(), output);
  }

  // optional sfixed64 max_trade_vol = 5;
  if (has_max_trade_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->max_trade_vol(), output);
  }

  // optional sfixed32 max_trade_vol_exponent = 6;
  if (has_max_trade_vol_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->max_trade_vol_exponent(), output);
  }

  // optional sfixed64 min_trade_vol = 7;
  if (has_min_trade_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->min_trade_vol(), output);
  }

  // optional sfixed32 min_trade_vol_exponent = 8;
  if (has_min_trade_vol_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->min_trade_vol_exponent(), output);
  }

  // optional .Common.MultilegModelEnum multileg_model = 9;
  if (has_multileg_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->multileg_model(), output);
  }

  // optional .Common.MultilegPriceMethodEnum multileg_price_method = 10;
  if (has_multileg_price_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->multileg_price_method(), output);
  }

  // optional .Common.PriceLimits price_limits = 11;
  if (has_price_limits()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->price_limits(), output);
  }

  // optional .Common.PriceTypeEnum price_type = 12;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->price_type(), output);
  }

  // optional sfixed64 round_lot = 13;
  if (has_round_lot()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->round_lot(), output);
  }

  // optional sfixed32 round_lot_exponent = 14;
  if (has_round_lot_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->round_lot_exponent(), output);
  }

  // repeated .Common.TickRules tick_rules = 15;
  for (int i = 0; i < this->tick_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tick_rules(i), output);
  }

  // optional string trading_currency = 16;
  if (has_trading_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_currency().data(), this->trading_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->trading_currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseTradingRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.ExpirationCycleEnum expiration_cycle = 1;
  if (has_expiration_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->expiration_cycle(), target);
  }

  // optional .Common.ImpliedMarketIndicatorEnum implied_market_indicator = 2;
  if (has_implied_market_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->implied_market_indicator(), target);
  }

  // repeated .Common.LotTypeRules lot_type_rules = 3;
  for (int i = 0; i < this->lot_type_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lot_type_rules(i), target);
  }

  // optional double max_price_variation = 4;
  if (has_max_price_variation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_price_variation(), target);
  }

  // optional sfixed64 max_trade_vol = 5;
  if (has_max_trade_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->max_trade_vol(), target);
  }

  // optional sfixed32 max_trade_vol_exponent = 6;
  if (has_max_trade_vol_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->max_trade_vol_exponent(), target);
  }

  // optional sfixed64 min_trade_vol = 7;
  if (has_min_trade_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->min_trade_vol(), target);
  }

  // optional sfixed32 min_trade_vol_exponent = 8;
  if (has_min_trade_vol_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->min_trade_vol_exponent(), target);
  }

  // optional .Common.MultilegModelEnum multileg_model = 9;
  if (has_multileg_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->multileg_model(), target);
  }

  // optional .Common.MultilegPriceMethodEnum multileg_price_method = 10;
  if (has_multileg_price_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->multileg_price_method(), target);
  }

  // optional .Common.PriceLimits price_limits = 11;
  if (has_price_limits()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->price_limits(), target);
  }

  // optional .Common.PriceTypeEnum price_type = 12;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->price_type(), target);
  }

  // optional sfixed64 round_lot = 13;
  if (has_round_lot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->round_lot(), target);
  }

  // optional sfixed32 round_lot_exponent = 14;
  if (has_round_lot_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->round_lot_exponent(), target);
  }

  // repeated .Common.TickRules tick_rules = 15;
  for (int i = 0; i < this->tick_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tick_rules(i), target);
  }

  // optional string trading_currency = 16;
  if (has_trading_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trading_currency().data(), this->trading_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->trading_currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseTradingRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.ExpirationCycleEnum expiration_cycle = 1;
    if (has_expiration_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expiration_cycle());
    }

    // optional .Common.ImpliedMarketIndicatorEnum implied_market_indicator = 2;
    if (has_implied_market_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->implied_market_indicator());
    }

    // optional double max_price_variation = 4;
    if (has_max_price_variation()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 max_trade_vol = 5;
    if (has_max_trade_vol()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 max_trade_vol_exponent = 6;
    if (has_max_trade_vol_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 min_trade_vol = 7;
    if (has_min_trade_vol()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 min_trade_vol_exponent = 8;
    if (has_min_trade_vol_exponent()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.MultilegModelEnum multileg_model = 9;
    if (has_multileg_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->multileg_model());
    }

    // optional .Common.MultilegPriceMethodEnum multileg_price_method = 10;
    if (has_multileg_price_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->multileg_price_method());
    }

    // optional .Common.PriceLimits price_limits = 11;
    if (has_price_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price_limits());
    }

    // optional .Common.PriceTypeEnum price_type = 12;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional sfixed64 round_lot = 13;
    if (has_round_lot()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 round_lot_exponent = 14;
    if (has_round_lot_exponent()) {
      total_size += 1 + 4;
    }

    // optional string trading_currency = 16;
    if (has_trading_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trading_currency());
    }

  }
  // repeated .Common.LotTypeRules lot_type_rules = 3;
  total_size += 1 * this->lot_type_rules_size();
  for (int i = 0; i < this->lot_type_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lot_type_rules(i));
  }

  // repeated .Common.TickRules tick_rules = 15;
  total_size += 1 * this->tick_rules_size();
  for (int i = 0; i < this->tick_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tick_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseTradingRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseTradingRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseTradingRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseTradingRules::MergeFrom(const BaseTradingRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  lot_type_rules_.MergeFrom(from.lot_type_rules_);
  tick_rules_.MergeFrom(from.tick_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expiration_cycle()) {
      set_expiration_cycle(from.expiration_cycle());
    }
    if (from.has_implied_market_indicator()) {
      set_implied_market_indicator(from.implied_market_indicator());
    }
    if (from.has_max_price_variation()) {
      set_max_price_variation(from.max_price_variation());
    }
    if (from.has_max_trade_vol()) {
      set_max_trade_vol(from.max_trade_vol());
    }
    if (from.has_max_trade_vol_exponent()) {
      set_max_trade_vol_exponent(from.max_trade_vol_exponent());
    }
    if (from.has_min_trade_vol()) {
      set_min_trade_vol(from.min_trade_vol());
    }
    if (from.has_min_trade_vol_exponent()) {
      set_min_trade_vol_exponent(from.min_trade_vol_exponent());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multileg_model()) {
      set_multileg_model(from.multileg_model());
    }
    if (from.has_multileg_price_method()) {
      set_multileg_price_method(from.multileg_price_method());
    }
    if (from.has_price_limits()) {
      mutable_price_limits()->::Common::PriceLimits::MergeFrom(from.price_limits());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_round_lot()) {
      set_round_lot(from.round_lot());
    }
    if (from.has_round_lot_exponent()) {
      set_round_lot_exponent(from.round_lot_exponent());
    }
    if (from.has_trading_currency()) {
      set_trading_currency(from.trading_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseTradingRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseTradingRules::CopyFrom(const BaseTradingRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseTradingRules::IsInitialized() const {

  return true;
}

void BaseTradingRules::Swap(BaseTradingRules* other) {
  if (other != this) {
    std::swap(expiration_cycle_, other->expiration_cycle_);
    std::swap(implied_market_indicator_, other->implied_market_indicator_);
    lot_type_rules_.Swap(&other->lot_type_rules_);
    std::swap(max_price_variation_, other->max_price_variation_);
    std::swap(max_trade_vol_, other->max_trade_vol_);
    std::swap(max_trade_vol_exponent_, other->max_trade_vol_exponent_);
    std::swap(min_trade_vol_, other->min_trade_vol_);
    std::swap(min_trade_vol_exponent_, other->min_trade_vol_exponent_);
    std::swap(multileg_model_, other->multileg_model_);
    std::swap(multileg_price_method_, other->multileg_price_method_);
    std::swap(price_limits_, other->price_limits_);
    std::swap(price_type_, other->price_type_);
    std::swap(round_lot_, other->round_lot_);
    std::swap(round_lot_exponent_, other->round_lot_exponent_);
    tick_rules_.Swap(&other->tick_rules_);
    std::swap(trading_currency_, other->trading_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseTradingRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseTradingRules_descriptor_;
  metadata.reflection = BaseTradingRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrdTypeRules::kOrdTypeFieldNumber;
#endif  // !_MSC_VER

OrdTypeRules::OrdTypeRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrdTypeRules::InitAsDefaultInstance() {
}

OrdTypeRules::OrdTypeRules(const OrdTypeRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrdTypeRules::SharedCtor() {
  _cached_size_ = 0;
  ord_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdTypeRules::~OrdTypeRules() {
  SharedDtor();
}

void OrdTypeRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdTypeRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdTypeRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdTypeRules_descriptor_;
}

const OrdTypeRules& OrdTypeRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

OrdTypeRules* OrdTypeRules::default_instance_ = NULL;

OrdTypeRules* OrdTypeRules::New() const {
  return new OrdTypeRules;
}

void OrdTypeRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ord_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrdTypeRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.OrdTypeEnum ord_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::OrdTypeEnum_IsValid(value)) {
            set_ord_type(static_cast< ::Common::OrdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrdTypeRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.OrdTypeEnum ord_type = 1;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ord_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrdTypeRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.OrdTypeEnum ord_type = 1;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ord_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrdTypeRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.OrdTypeEnum ord_type = 1;
    if (has_ord_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdTypeRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrdTypeRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrdTypeRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrdTypeRules::MergeFrom(const OrdTypeRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrdTypeRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdTypeRules::CopyFrom(const OrdTypeRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdTypeRules::IsInitialized() const {

  return true;
}

void OrdTypeRules::Swap(OrdTypeRules* other) {
  if (other != this) {
    std::swap(ord_type_, other->ord_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrdTypeRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdTypeRules_descriptor_;
  metadata.reflection = OrdTypeRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeInForceRules::kTimeInForceFieldNumber;
#endif  // !_MSC_VER

TimeInForceRules::TimeInForceRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeInForceRules::InitAsDefaultInstance() {
}

TimeInForceRules::TimeInForceRules(const TimeInForceRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeInForceRules::SharedCtor() {
  _cached_size_ = 0;
  time_in_force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeInForceRules::~TimeInForceRules() {
  SharedDtor();
}

void TimeInForceRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeInForceRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeInForceRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInForceRules_descriptor_;
}

const TimeInForceRules& TimeInForceRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TimeInForceRules* TimeInForceRules::default_instance_ = NULL;

TimeInForceRules* TimeInForceRules::New() const {
  return new TimeInForceRules;
}

void TimeInForceRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_in_force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeInForceRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TimeInForceEnum time_in_force = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TimeInForceEnum_IsValid(value)) {
            set_time_in_force(static_cast< ::Common::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeInForceRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TimeInForceEnum time_in_force = 1;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->time_in_force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeInForceRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TimeInForceEnum time_in_force = 1;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->time_in_force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeInForceRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TimeInForceEnum time_in_force = 1;
    if (has_time_in_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_in_force());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeInForceRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeInForceRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeInForceRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeInForceRules::MergeFrom(const TimeInForceRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeInForceRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeInForceRules::CopyFrom(const TimeInForceRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeInForceRules::IsInitialized() const {

  return true;
}

void TimeInForceRules::Swap(TimeInForceRules* other) {
  if (other != this) {
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeInForceRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeInForceRules_descriptor_;
  metadata.reflection = TimeInForceRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecInstRules::kExecInstValueFieldNumber;
#endif  // !_MSC_VER

ExecInstRules::ExecInstRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecInstRules::InitAsDefaultInstance() {
}

ExecInstRules::ExecInstRules(const ExecInstRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecInstRules::SharedCtor() {
  _cached_size_ = 0;
  exec_inst_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecInstRules::~ExecInstRules() {
  SharedDtor();
}

void ExecInstRules::SharedDtor() {
  if (exec_inst_value_ != &::google::protobuf::internal::kEmptyString) {
    delete exec_inst_value_;
  }
  if (this != default_instance_) {
  }
}

void ExecInstRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecInstRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecInstRules_descriptor_;
}

const ExecInstRules& ExecInstRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

ExecInstRules* ExecInstRules::default_instance_ = NULL;

ExecInstRules* ExecInstRules::New() const {
  return new ExecInstRules;
}

void ExecInstRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_exec_inst_value()) {
      if (exec_inst_value_ != &::google::protobuf::internal::kEmptyString) {
        exec_inst_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecInstRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string exec_inst_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_inst_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exec_inst_value().data(), this->exec_inst_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecInstRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string exec_inst_value = 1;
  if (has_exec_inst_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_inst_value().data(), this->exec_inst_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->exec_inst_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecInstRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string exec_inst_value = 1;
  if (has_exec_inst_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exec_inst_value().data(), this->exec_inst_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->exec_inst_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecInstRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string exec_inst_value = 1;
    if (has_exec_inst_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_inst_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecInstRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecInstRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecInstRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecInstRules::MergeFrom(const ExecInstRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exec_inst_value()) {
      set_exec_inst_value(from.exec_inst_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecInstRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecInstRules::CopyFrom(const ExecInstRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecInstRules::IsInitialized() const {

  return true;
}

void ExecInstRules::Swap(ExecInstRules* other) {
  if (other != this) {
    std::swap(exec_inst_value_, other->exec_inst_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecInstRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecInstRules_descriptor_;
  metadata.reflection = ExecInstRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRules::kMatchAlgorithmFieldNumber;
const int MatchRules::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

MatchRules::MatchRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchRules::InitAsDefaultInstance() {
}

MatchRules::MatchRules(const MatchRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchRules::SharedCtor() {
  _cached_size_ = 0;
  match_algorithm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  match_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRules::~MatchRules() {
  SharedDtor();
}

void MatchRules::SharedDtor() {
  if (match_algorithm_ != &::google::protobuf::internal::kEmptyString) {
    delete match_algorithm_;
  }
  if (this != default_instance_) {
  }
}

void MatchRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRules_descriptor_;
}

const MatchRules& MatchRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MatchRules* MatchRules::default_instance_ = NULL;

MatchRules* MatchRules::New() const {
  return new MatchRules;
}

void MatchRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_match_algorithm()) {
      if (match_algorithm_ != &::google::protobuf::internal::kEmptyString) {
        match_algorithm_->clear();
      }
    }
    match_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string match_algorithm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_algorithm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->match_algorithm().data(), this->match_algorithm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_type;
        break;
      }

      // optional .Common.MatchTypeEnum match_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MatchTypeEnum_IsValid(value)) {
            set_match_type(static_cast< ::Common::MatchTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string match_algorithm = 1;
  if (has_match_algorithm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_algorithm().data(), this->match_algorithm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->match_algorithm(), output);
  }

  // optional .Common.MatchTypeEnum match_type = 2;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string match_algorithm = 1;
  if (has_match_algorithm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->match_algorithm().data(), this->match_algorithm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_algorithm(), target);
  }

  // optional .Common.MatchTypeEnum match_type = 2;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string match_algorithm = 1;
    if (has_match_algorithm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_algorithm());
    }

    // optional .Common.MatchTypeEnum match_type = 2;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRules::MergeFrom(const MatchRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_algorithm()) {
      set_match_algorithm(from.match_algorithm());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRules::CopyFrom(const MatchRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRules::IsInitialized() const {

  return true;
}

void MatchRules::Swap(MatchRules* other) {
  if (other != this) {
    std::swap(match_algorithm_, other->match_algorithm_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRules_descriptor_;
  metadata.reflection = MatchRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDataFeedTypes::kMdBookTypeFieldNumber;
const int MarketDataFeedTypes::kMdFeedTypeFieldNumber;
const int MarketDataFeedTypes::kMarketDepthFieldNumber;
#endif  // !_MSC_VER

MarketDataFeedTypes::MarketDataFeedTypes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDataFeedTypes::InitAsDefaultInstance() {
}

MarketDataFeedTypes::MarketDataFeedTypes(const MarketDataFeedTypes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDataFeedTypes::SharedCtor() {
  _cached_size_ = 0;
  md_book_type_ = 0;
  md_feed_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_depth_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDataFeedTypes::~MarketDataFeedTypes() {
  SharedDtor();
}

void MarketDataFeedTypes::SharedDtor() {
  if (md_feed_type_ != &::google::protobuf::internal::kEmptyString) {
    delete md_feed_type_;
  }
  if (this != default_instance_) {
  }
}

void MarketDataFeedTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDataFeedTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDataFeedTypes_descriptor_;
}

const MarketDataFeedTypes& MarketDataFeedTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MarketDataFeedTypes* MarketDataFeedTypes::default_instance_ = NULL;

MarketDataFeedTypes* MarketDataFeedTypes::New() const {
  return new MarketDataFeedTypes;
}

void MarketDataFeedTypes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    md_book_type_ = 0;
    if (has_md_feed_type()) {
      if (md_feed_type_ != &::google::protobuf::internal::kEmptyString) {
        md_feed_type_->clear();
      }
    }
    market_depth_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDataFeedTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.MdBookTypeEnum md_book_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MdBookTypeEnum_IsValid(value)) {
            set_md_book_type(static_cast< ::Common::MdBookTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_md_feed_type;
        break;
      }

      // optional string md_feed_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md_feed_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md_feed_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md_feed_type().data(), this->md_feed_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_market_depth;
        break;
      }

      // optional sfixed64 market_depth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_market_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &market_depth_)));
          set_has_market_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDataFeedTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.MdBookTypeEnum md_book_type = 1;
  if (has_md_book_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->md_book_type(), output);
  }

  // optional string md_feed_type = 2;
  if (has_md_feed_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md_feed_type().data(), this->md_feed_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->md_feed_type(), output);
  }

  // optional sfixed64 market_depth = 3;
  if (has_market_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->market_depth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDataFeedTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.MdBookTypeEnum md_book_type = 1;
  if (has_md_book_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->md_book_type(), target);
  }

  // optional string md_feed_type = 2;
  if (has_md_feed_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md_feed_type().data(), this->md_feed_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->md_feed_type(), target);
  }

  // optional sfixed64 market_depth = 3;
  if (has_market_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->market_depth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDataFeedTypes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.MdBookTypeEnum md_book_type = 1;
    if (has_md_book_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_book_type());
    }

    // optional string md_feed_type = 2;
    if (has_md_feed_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md_feed_type());
    }

    // optional sfixed64 market_depth = 3;
    if (has_market_depth()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDataFeedTypes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDataFeedTypes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDataFeedTypes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDataFeedTypes::MergeFrom(const MarketDataFeedTypes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_md_book_type()) {
      set_md_book_type(from.md_book_type());
    }
    if (from.has_md_feed_type()) {
      set_md_feed_type(from.md_feed_type());
    }
    if (from.has_market_depth()) {
      set_market_depth(from.market_depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDataFeedTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDataFeedTypes::CopyFrom(const MarketDataFeedTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDataFeedTypes::IsInitialized() const {

  return true;
}

void MarketDataFeedTypes::Swap(MarketDataFeedTypes* other) {
  if (other != this) {
    std::swap(md_book_type_, other->md_book_type_);
    std::swap(md_feed_type_, other->md_feed_type_);
    std::swap(market_depth_, other->market_depth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDataFeedTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDataFeedTypes_descriptor_;
  metadata.reflection = MarketDataFeedTypes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradingSessionRules::kExecInstRulesFieldNumber;
const int TradingSessionRules::kMarketDataFeedTypesFieldNumber;
const int TradingSessionRules::kMatchRulesFieldNumber;
const int TradingSessionRules::kOrdTypeRulesFieldNumber;
const int TradingSessionRules::kTimeInForceRulesFieldNumber;
#endif  // !_MSC_VER

TradingSessionRules::TradingSessionRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradingSessionRules::InitAsDefaultInstance() {
}

TradingSessionRules::TradingSessionRules(const TradingSessionRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradingSessionRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradingSessionRules::~TradingSessionRules() {
  SharedDtor();
}

void TradingSessionRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradingSessionRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradingSessionRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionRules_descriptor_;
}

const TradingSessionRules& TradingSessionRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TradingSessionRules* TradingSessionRules::default_instance_ = NULL;

TradingSessionRules* TradingSessionRules::New() const {
  return new TradingSessionRules;
}

void TradingSessionRules::Clear() {
  exec_inst_rules_.Clear();
  market_data_feed_types_.Clear();
  match_rules_.Clear();
  ord_type_rules_.Clear();
  time_in_force_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradingSessionRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.ExecInstRules exec_inst_rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exec_inst_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exec_inst_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_exec_inst_rules;
        if (input->ExpectTag(18)) goto parse_market_data_feed_types;
        break;
      }

      // repeated .Common.MarketDataFeedTypes market_data_feed_types = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_data_feed_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_market_data_feed_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_market_data_feed_types;
        if (input->ExpectTag(26)) goto parse_match_rules;
        break;
      }

      // repeated .Common.MatchRules match_rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_match_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_match_rules;
        if (input->ExpectTag(34)) goto parse_ord_type_rules;
        break;
      }

      // repeated .Common.OrdTypeRules ord_type_rules = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ord_type_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ord_type_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ord_type_rules;
        if (input->ExpectTag(42)) goto parse_time_in_force_rules;
        break;
      }

      // repeated .Common.TimeInForceRules time_in_force_rules = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_in_force_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_in_force_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time_in_force_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradingSessionRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Common.ExecInstRules exec_inst_rules = 1;
  for (int i = 0; i < this->exec_inst_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->exec_inst_rules(i), output);
  }

  // repeated .Common.MarketDataFeedTypes market_data_feed_types = 2;
  for (int i = 0; i < this->market_data_feed_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->market_data_feed_types(i), output);
  }

  // repeated .Common.MatchRules match_rules = 3;
  for (int i = 0; i < this->match_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->match_rules(i), output);
  }

  // repeated .Common.OrdTypeRules ord_type_rules = 4;
  for (int i = 0; i < this->ord_type_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ord_type_rules(i), output);
  }

  // repeated .Common.TimeInForceRules time_in_force_rules = 5;
  for (int i = 0; i < this->time_in_force_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->time_in_force_rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradingSessionRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.ExecInstRules exec_inst_rules = 1;
  for (int i = 0; i < this->exec_inst_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->exec_inst_rules(i), target);
  }

  // repeated .Common.MarketDataFeedTypes market_data_feed_types = 2;
  for (int i = 0; i < this->market_data_feed_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->market_data_feed_types(i), target);
  }

  // repeated .Common.MatchRules match_rules = 3;
  for (int i = 0; i < this->match_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->match_rules(i), target);
  }

  // repeated .Common.OrdTypeRules ord_type_rules = 4;
  for (int i = 0; i < this->ord_type_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ord_type_rules(i), target);
  }

  // repeated .Common.TimeInForceRules time_in_force_rules = 5;
  for (int i = 0; i < this->time_in_force_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->time_in_force_rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradingSessionRules::ByteSize() const {
  int total_size = 0;

  // repeated .Common.ExecInstRules exec_inst_rules = 1;
  total_size += 1 * this->exec_inst_rules_size();
  for (int i = 0; i < this->exec_inst_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exec_inst_rules(i));
  }

  // repeated .Common.MarketDataFeedTypes market_data_feed_types = 2;
  total_size += 1 * this->market_data_feed_types_size();
  for (int i = 0; i < this->market_data_feed_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->market_data_feed_types(i));
  }

  // repeated .Common.MatchRules match_rules = 3;
  total_size += 1 * this->match_rules_size();
  for (int i = 0; i < this->match_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->match_rules(i));
  }

  // repeated .Common.OrdTypeRules ord_type_rules = 4;
  total_size += 1 * this->ord_type_rules_size();
  for (int i = 0; i < this->ord_type_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ord_type_rules(i));
  }

  // repeated .Common.TimeInForceRules time_in_force_rules = 5;
  total_size += 1 * this->time_in_force_rules_size();
  for (int i = 0; i < this->time_in_force_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_in_force_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradingSessionRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradingSessionRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradingSessionRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradingSessionRules::MergeFrom(const TradingSessionRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  exec_inst_rules_.MergeFrom(from.exec_inst_rules_);
  market_data_feed_types_.MergeFrom(from.market_data_feed_types_);
  match_rules_.MergeFrom(from.match_rules_);
  ord_type_rules_.MergeFrom(from.ord_type_rules_);
  time_in_force_rules_.MergeFrom(from.time_in_force_rules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradingSessionRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSessionRules::CopyFrom(const TradingSessionRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSessionRules::IsInitialized() const {

  return true;
}

void TradingSessionRules::Swap(TradingSessionRules* other) {
  if (other != this) {
    exec_inst_rules_.Swap(&other->exec_inst_rules_);
    market_data_feed_types_.Swap(&other->market_data_feed_types_);
    match_rules_.Swap(&other->match_rules_);
    ord_type_rules_.Swap(&other->ord_type_rules_);
    time_in_force_rules_.Swap(&other->time_in_force_rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradingSessionRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradingSessionRules_descriptor_;
  metadata.reflection = TradingSessionRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradingSessionRulesGrp::kTradingSessionIdFieldNumber;
const int TradingSessionRulesGrp::kTradingSessionRulesFieldNumber;
const int TradingSessionRulesGrp::kTradingSessionSubIdFieldNumber;
#endif  // !_MSC_VER

TradingSessionRulesGrp::TradingSessionRulesGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradingSessionRulesGrp::InitAsDefaultInstance() {
  trading_session_rules_ = const_cast< ::Common::TradingSessionRules*>(&::Common::TradingSessionRules::default_instance());
}

TradingSessionRulesGrp::TradingSessionRulesGrp(const TradingSessionRulesGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradingSessionRulesGrp::SharedCtor() {
  _cached_size_ = 0;
  trading_session_id_ = 0;
  trading_session_rules_ = NULL;
  trading_session_sub_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradingSessionRulesGrp::~TradingSessionRulesGrp() {
  SharedDtor();
}

void TradingSessionRulesGrp::SharedDtor() {
  if (this != default_instance_) {
    delete trading_session_rules_;
  }
}

void TradingSessionRulesGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradingSessionRulesGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionRulesGrp_descriptor_;
}

const TradingSessionRulesGrp& TradingSessionRulesGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

TradingSessionRulesGrp* TradingSessionRulesGrp::default_instance_ = NULL;

TradingSessionRulesGrp* TradingSessionRulesGrp::New() const {
  return new TradingSessionRulesGrp;
}

void TradingSessionRulesGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_session_id_ = 0;
    if (has_trading_session_rules()) {
      if (trading_session_rules_ != NULL) trading_session_rules_->::Common::TradingSessionRules::Clear();
    }
    trading_session_sub_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradingSessionRulesGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.TradingSessionIdEnum trading_session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::Common::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trading_session_rules;
        break;
      }

      // optional .Common.TradingSessionRules trading_session_rules = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_session_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trading_session_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::Common::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradingSessionRulesGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->trading_session_id(), output);
  }

  // optional .Common.TradingSessionRules trading_session_rules = 2;
  if (has_trading_session_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trading_session_rules(), output);
  }

  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 3;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->trading_session_sub_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradingSessionRulesGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.TradingSessionIdEnum trading_session_id = 1;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->trading_session_id(), target);
  }

  // optional .Common.TradingSessionRules trading_session_rules = 2;
  if (has_trading_session_rules()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trading_session_rules(), target);
  }

  // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 3;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->trading_session_sub_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradingSessionRulesGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.TradingSessionIdEnum trading_session_id = 1;
    if (has_trading_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .Common.TradingSessionRules trading_session_rules = 2;
    if (has_trading_session_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trading_session_rules());
    }

    // optional .Common.TradingSessionSubIdEnum trading_session_sub_id = 3;
    if (has_trading_session_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradingSessionRulesGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradingSessionRulesGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradingSessionRulesGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradingSessionRulesGrp::MergeFrom(const TradingSessionRulesGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_trading_session_rules()) {
      mutable_trading_session_rules()->::Common::TradingSessionRules::MergeFrom(from.trading_session_rules());
    }
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradingSessionRulesGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingSessionRulesGrp::CopyFrom(const TradingSessionRulesGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingSessionRulesGrp::IsInitialized() const {

  return true;
}

void TradingSessionRulesGrp::Swap(TradingSessionRulesGrp* other) {
  if (other != this) {
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(trading_session_rules_, other->trading_session_rules_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradingSessionRulesGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradingSessionRulesGrp_descriptor_;
  metadata.reflection = TradingSessionRulesGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NestedInstrumentAttribute::kNestedInstrAttribTypeFieldNumber;
const int NestedInstrumentAttribute::kNestedInstrAttribValueFieldNumber;
#endif  // !_MSC_VER

NestedInstrumentAttribute::NestedInstrumentAttribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NestedInstrumentAttribute::InitAsDefaultInstance() {
}

NestedInstrumentAttribute::NestedInstrumentAttribute(const NestedInstrumentAttribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NestedInstrumentAttribute::SharedCtor() {
  _cached_size_ = 0;
  nested_instr_attrib_type_ = GOOGLE_LONGLONG(0);
  nested_instr_attrib_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NestedInstrumentAttribute::~NestedInstrumentAttribute() {
  SharedDtor();
}

void NestedInstrumentAttribute::SharedDtor() {
  if (nested_instr_attrib_value_ != &::google::protobuf::internal::kEmptyString) {
    delete nested_instr_attrib_value_;
  }
  if (this != default_instance_) {
  }
}

void NestedInstrumentAttribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NestedInstrumentAttribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NestedInstrumentAttribute_descriptor_;
}

const NestedInstrumentAttribute& NestedInstrumentAttribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

NestedInstrumentAttribute* NestedInstrumentAttribute::default_instance_ = NULL;

NestedInstrumentAttribute* NestedInstrumentAttribute::New() const {
  return new NestedInstrumentAttribute;
}

void NestedInstrumentAttribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nested_instr_attrib_type_ = GOOGLE_LONGLONG(0);
    if (has_nested_instr_attrib_value()) {
      if (nested_instr_attrib_value_ != &::google::protobuf::internal::kEmptyString) {
        nested_instr_attrib_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NestedInstrumentAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 nested_instr_attrib_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nested_instr_attrib_type_)));
          set_has_nested_instr_attrib_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested_instr_attrib_value;
        break;
      }

      // optional string nested_instr_attrib_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_instr_attrib_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nested_instr_attrib_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nested_instr_attrib_value().data(), this->nested_instr_attrib_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NestedInstrumentAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 nested_instr_attrib_type = 1;
  if (has_nested_instr_attrib_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->nested_instr_attrib_type(), output);
  }

  // optional string nested_instr_attrib_value = 2;
  if (has_nested_instr_attrib_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_instr_attrib_value().data(), this->nested_instr_attrib_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nested_instr_attrib_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NestedInstrumentAttribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 nested_instr_attrib_type = 1;
  if (has_nested_instr_attrib_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->nested_instr_attrib_type(), target);
  }

  // optional string nested_instr_attrib_value = 2;
  if (has_nested_instr_attrib_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nested_instr_attrib_value().data(), this->nested_instr_attrib_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nested_instr_attrib_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NestedInstrumentAttribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 nested_instr_attrib_type = 1;
    if (has_nested_instr_attrib_type()) {
      total_size += 1 + 8;
    }

    // optional string nested_instr_attrib_value = 2;
    if (has_nested_instr_attrib_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nested_instr_attrib_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NestedInstrumentAttribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NestedInstrumentAttribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NestedInstrumentAttribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NestedInstrumentAttribute::MergeFrom(const NestedInstrumentAttribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nested_instr_attrib_type()) {
      set_nested_instr_attrib_type(from.nested_instr_attrib_type());
    }
    if (from.has_nested_instr_attrib_value()) {
      set_nested_instr_attrib_value(from.nested_instr_attrib_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NestedInstrumentAttribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NestedInstrumentAttribute::CopyFrom(const NestedInstrumentAttribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NestedInstrumentAttribute::IsInitialized() const {

  return true;
}

void NestedInstrumentAttribute::Swap(NestedInstrumentAttribute* other) {
  if (other != this) {
    std::swap(nested_instr_attrib_type_, other->nested_instr_attrib_type_);
    std::swap(nested_instr_attrib_value_, other->nested_instr_attrib_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NestedInstrumentAttribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NestedInstrumentAttribute_descriptor_;
  metadata.reflection = NestedInstrumentAttribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityTradingRules::kBaseTradingRulesFieldNumber;
const int SecurityTradingRules::kNestedInstrumentAttributeFieldNumber;
const int SecurityTradingRules::kTradingSessionRulesGrpFieldNumber;
#endif  // !_MSC_VER

SecurityTradingRules::SecurityTradingRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityTradingRules::InitAsDefaultInstance() {
  base_trading_rules_ = const_cast< ::Common::BaseTradingRules*>(&::Common::BaseTradingRules::default_instance());
}

SecurityTradingRules::SecurityTradingRules(const SecurityTradingRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityTradingRules::SharedCtor() {
  _cached_size_ = 0;
  base_trading_rules_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityTradingRules::~SecurityTradingRules() {
  SharedDtor();
}

void SecurityTradingRules::SharedDtor() {
  if (this != default_instance_) {
    delete base_trading_rules_;
  }
}

void SecurityTradingRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityTradingRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityTradingRules_descriptor_;
}

const SecurityTradingRules& SecurityTradingRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

SecurityTradingRules* SecurityTradingRules::default_instance_ = NULL;

SecurityTradingRules* SecurityTradingRules::New() const {
  return new SecurityTradingRules;
}

void SecurityTradingRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_trading_rules()) {
      if (base_trading_rules_ != NULL) base_trading_rules_->::Common::BaseTradingRules::Clear();
    }
  }
  nested_instrument_attribute_.Clear();
  trading_session_rules_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityTradingRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.BaseTradingRules base_trading_rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_trading_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested_instrument_attribute;
        break;
      }

      // repeated .Common.NestedInstrumentAttribute nested_instrument_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nested_instrument_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nested_instrument_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nested_instrument_attribute;
        if (input->ExpectTag(26)) goto parse_trading_session_rules_grp;
        break;
      }

      // repeated .Common.TradingSessionRulesGrp trading_session_rules_grp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trading_session_rules_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trading_session_rules_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trading_session_rules_grp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityTradingRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.BaseTradingRules base_trading_rules = 1;
  if (has_base_trading_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_trading_rules(), output);
  }

  // repeated .Common.NestedInstrumentAttribute nested_instrument_attribute = 2;
  for (int i = 0; i < this->nested_instrument_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nested_instrument_attribute(i), output);
  }

  // repeated .Common.TradingSessionRulesGrp trading_session_rules_grp = 3;
  for (int i = 0; i < this->trading_session_rules_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trading_session_rules_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityTradingRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.BaseTradingRules base_trading_rules = 1;
  if (has_base_trading_rules()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_trading_rules(), target);
  }

  // repeated .Common.NestedInstrumentAttribute nested_instrument_attribute = 2;
  for (int i = 0; i < this->nested_instrument_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nested_instrument_attribute(i), target);
  }

  // repeated .Common.TradingSessionRulesGrp trading_session_rules_grp = 3;
  for (int i = 0; i < this->trading_session_rules_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->trading_session_rules_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityTradingRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.BaseTradingRules base_trading_rules = 1;
    if (has_base_trading_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_trading_rules());
    }

  }
  // repeated .Common.NestedInstrumentAttribute nested_instrument_attribute = 2;
  total_size += 1 * this->nested_instrument_attribute_size();
  for (int i = 0; i < this->nested_instrument_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nested_instrument_attribute(i));
  }

  // repeated .Common.TradingSessionRulesGrp trading_session_rules_grp = 3;
  total_size += 1 * this->trading_session_rules_grp_size();
  for (int i = 0; i < this->trading_session_rules_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trading_session_rules_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityTradingRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityTradingRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityTradingRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityTradingRules::MergeFrom(const SecurityTradingRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  nested_instrument_attribute_.MergeFrom(from.nested_instrument_attribute_);
  trading_session_rules_grp_.MergeFrom(from.trading_session_rules_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_trading_rules()) {
      mutable_base_trading_rules()->::Common::BaseTradingRules::MergeFrom(from.base_trading_rules());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityTradingRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityTradingRules::CopyFrom(const SecurityTradingRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityTradingRules::IsInitialized() const {

  return true;
}

void SecurityTradingRules::Swap(SecurityTradingRules* other) {
  if (other != this) {
    std::swap(base_trading_rules_, other->base_trading_rules_);
    nested_instrument_attribute_.Swap(&other->nested_instrument_attribute_);
    trading_session_rules_grp_.Swap(&other->trading_session_rules_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityTradingRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityTradingRules_descriptor_;
  metadata.reflection = SecurityTradingRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaturityRules::kEndMaturityMonthYearFieldNumber;
const int MaturityRules::kMaturityMonthYearFormatFieldNumber;
const int MaturityRules::kMaturityMonthYearIncrementFieldNumber;
const int MaturityRules::kMaturityMonthYearIncrementUnitsFieldNumber;
const int MaturityRules::kMaturityRuleIdFieldNumber;
const int MaturityRules::kStartMaturityMonthYearFieldNumber;
#endif  // !_MSC_VER

MaturityRules::MaturityRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaturityRules::InitAsDefaultInstance() {
}

MaturityRules::MaturityRules(const MaturityRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaturityRules::SharedCtor() {
  _cached_size_ = 0;
  end_maturity_month_year_ = 0;
  maturity_month_year_format_ = 0;
  maturity_month_year_increment_ = GOOGLE_LONGLONG(0);
  maturity_month_year_increment_units_ = 0;
  maturity_rule_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_maturity_month_year_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaturityRules::~MaturityRules() {
  SharedDtor();
}

void MaturityRules::SharedDtor() {
  if (maturity_rule_id_ != &::google::protobuf::internal::kEmptyString) {
    delete maturity_rule_id_;
  }
  if (this != default_instance_) {
  }
}

void MaturityRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaturityRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaturityRules_descriptor_;
}

const MaturityRules& MaturityRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MaturityRules* MaturityRules::default_instance_ = NULL;

MaturityRules* MaturityRules::New() const {
  return new MaturityRules;
}

void MaturityRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    end_maturity_month_year_ = 0;
    maturity_month_year_format_ = 0;
    maturity_month_year_increment_ = GOOGLE_LONGLONG(0);
    maturity_month_year_increment_units_ = 0;
    if (has_maturity_rule_id()) {
      if (maturity_rule_id_ != &::google::protobuf::internal::kEmptyString) {
        maturity_rule_id_->clear();
      }
    }
    start_maturity_month_year_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaturityRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 end_maturity_month_year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_maturity_month_year_)));
          set_has_end_maturity_month_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maturity_month_year_format;
        break;
      }

      // optional .Common.MaturityMonthYearFormatEnum maturity_month_year_format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maturity_month_year_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MaturityMonthYearFormatEnum_IsValid(value)) {
            set_maturity_month_year_format(static_cast< ::Common::MaturityMonthYearFormatEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_maturity_month_year_increment;
        break;
      }

      // optional sfixed64 maturity_month_year_increment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maturity_month_year_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &maturity_month_year_increment_)));
          set_has_maturity_month_year_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maturity_month_year_increment_units;
        break;
      }

      // optional .Common.MaturityMonthYearIncrementUnitsEnum maturity_month_year_increment_units = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maturity_month_year_increment_units:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::MaturityMonthYearIncrementUnitsEnum_IsValid(value)) {
            set_maturity_month_year_increment_units(static_cast< ::Common::MaturityMonthYearIncrementUnitsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_maturity_rule_id;
        break;
      }

      // optional string maturity_rule_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maturity_rule_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturity_rule_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maturity_rule_id().data(), this->maturity_rule_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_start_maturity_month_year;
        break;
      }

      // optional sfixed32 start_maturity_month_year = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_maturity_month_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_maturity_month_year_)));
          set_has_start_maturity_month_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaturityRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 end_maturity_month_year = 1;
  if (has_end_maturity_month_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->end_maturity_month_year(), output);
  }

  // optional .Common.MaturityMonthYearFormatEnum maturity_month_year_format = 2;
  if (has_maturity_month_year_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->maturity_month_year_format(), output);
  }

  // optional sfixed64 maturity_month_year_increment = 3;
  if (has_maturity_month_year_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->maturity_month_year_increment(), output);
  }

  // optional .Common.MaturityMonthYearIncrementUnitsEnum maturity_month_year_increment_units = 4;
  if (has_maturity_month_year_increment_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->maturity_month_year_increment_units(), output);
  }

  // optional string maturity_rule_id = 5;
  if (has_maturity_rule_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_rule_id().data(), this->maturity_rule_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->maturity_rule_id(), output);
  }

  // optional sfixed32 start_maturity_month_year = 6;
  if (has_start_maturity_month_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->start_maturity_month_year(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaturityRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 end_maturity_month_year = 1;
  if (has_end_maturity_month_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->end_maturity_month_year(), target);
  }

  // optional .Common.MaturityMonthYearFormatEnum maturity_month_year_format = 2;
  if (has_maturity_month_year_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->maturity_month_year_format(), target);
  }

  // optional sfixed64 maturity_month_year_increment = 3;
  if (has_maturity_month_year_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->maturity_month_year_increment(), target);
  }

  // optional .Common.MaturityMonthYearIncrementUnitsEnum maturity_month_year_increment_units = 4;
  if (has_maturity_month_year_increment_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->maturity_month_year_increment_units(), target);
  }

  // optional string maturity_rule_id = 5;
  if (has_maturity_rule_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity_rule_id().data(), this->maturity_rule_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->maturity_rule_id(), target);
  }

  // optional sfixed32 start_maturity_month_year = 6;
  if (has_start_maturity_month_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->start_maturity_month_year(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaturityRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 end_maturity_month_year = 1;
    if (has_end_maturity_month_year()) {
      total_size += 1 + 4;
    }

    // optional .Common.MaturityMonthYearFormatEnum maturity_month_year_format = 2;
    if (has_maturity_month_year_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maturity_month_year_format());
    }

    // optional sfixed64 maturity_month_year_increment = 3;
    if (has_maturity_month_year_increment()) {
      total_size += 1 + 8;
    }

    // optional .Common.MaturityMonthYearIncrementUnitsEnum maturity_month_year_increment_units = 4;
    if (has_maturity_month_year_increment_units()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maturity_month_year_increment_units());
    }

    // optional string maturity_rule_id = 5;
    if (has_maturity_rule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturity_rule_id());
    }

    // optional sfixed32 start_maturity_month_year = 6;
    if (has_start_maturity_month_year()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaturityRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaturityRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaturityRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaturityRules::MergeFrom(const MaturityRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_maturity_month_year()) {
      set_end_maturity_month_year(from.end_maturity_month_year());
    }
    if (from.has_maturity_month_year_format()) {
      set_maturity_month_year_format(from.maturity_month_year_format());
    }
    if (from.has_maturity_month_year_increment()) {
      set_maturity_month_year_increment(from.maturity_month_year_increment());
    }
    if (from.has_maturity_month_year_increment_units()) {
      set_maturity_month_year_increment_units(from.maturity_month_year_increment_units());
    }
    if (from.has_maturity_rule_id()) {
      set_maturity_rule_id(from.maturity_rule_id());
    }
    if (from.has_start_maturity_month_year()) {
      set_start_maturity_month_year(from.start_maturity_month_year());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaturityRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaturityRules::CopyFrom(const MaturityRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaturityRules::IsInitialized() const {

  return true;
}

void MaturityRules::Swap(MaturityRules* other) {
  if (other != this) {
    std::swap(end_maturity_month_year_, other->end_maturity_month_year_);
    std::swap(maturity_month_year_format_, other->maturity_month_year_format_);
    std::swap(maturity_month_year_increment_, other->maturity_month_year_increment_);
    std::swap(maturity_month_year_increment_units_, other->maturity_month_year_increment_units_);
    std::swap(maturity_rule_id_, other->maturity_rule_id_);
    std::swap(start_maturity_month_year_, other->start_maturity_month_year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaturityRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaturityRules_descriptor_;
  metadata.reflection = MaturityRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrikeRules::kEndStrikePxRangeFieldNumber;
const int StrikeRules::kEndStrikePxRangeExponentFieldNumber;
const int StrikeRules::kMaturityRulesFieldNumber;
const int StrikeRules::kStartStrikePxRangeFieldNumber;
const int StrikeRules::kStartStrikePxRangeExponentFieldNumber;
const int StrikeRules::kStrikeExerciseStyleFieldNumber;
const int StrikeRules::kStrikeIncrementFieldNumber;
const int StrikeRules::kStrikeRuleIdFieldNumber;
#endif  // !_MSC_VER

StrikeRules::StrikeRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrikeRules::InitAsDefaultInstance() {
}

StrikeRules::StrikeRules(const StrikeRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrikeRules::SharedCtor() {
  _cached_size_ = 0;
  end_strike_px_range_ = GOOGLE_LONGLONG(0);
  end_strike_px_range_exponent_ = 0;
  start_strike_px_range_ = GOOGLE_LONGLONG(0);
  start_strike_px_range_exponent_ = 0;
  strike_exercise_style_ = GOOGLE_LONGLONG(0);
  strike_increment_ = 0;
  strike_rule_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrikeRules::~StrikeRules() {
  SharedDtor();
}

void StrikeRules::SharedDtor() {
  if (strike_rule_id_ != &::google::protobuf::internal::kEmptyString) {
    delete strike_rule_id_;
  }
  if (this != default_instance_) {
  }
}

void StrikeRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrikeRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrikeRules_descriptor_;
}

const StrikeRules& StrikeRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

StrikeRules* StrikeRules::default_instance_ = NULL;

StrikeRules* StrikeRules::New() const {
  return new StrikeRules;
}

void StrikeRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    end_strike_px_range_ = GOOGLE_LONGLONG(0);
    end_strike_px_range_exponent_ = 0;
    start_strike_px_range_ = GOOGLE_LONGLONG(0);
    start_strike_px_range_exponent_ = 0;
    strike_exercise_style_ = GOOGLE_LONGLONG(0);
    strike_increment_ = 0;
    if (has_strike_rule_id()) {
      if (strike_rule_id_ != &::google::protobuf::internal::kEmptyString) {
        strike_rule_id_->clear();
      }
    }
  }
  maturity_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrikeRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 end_strike_px_range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &end_strike_px_range_)));
          set_has_end_strike_px_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_end_strike_px_range_exponent;
        break;
      }

      // optional sfixed32 end_strike_px_range_exponent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_end_strike_px_range_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_strike_px_range_exponent_)));
          set_has_end_strike_px_range_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_maturity_rules;
        break;
      }

      // repeated .Common.MaturityRules maturity_rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maturity_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maturity_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_maturity_rules;
        if (input->ExpectTag(33)) goto parse_start_strike_px_range;
        break;
      }

      // optional sfixed64 start_strike_px_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_start_strike_px_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &start_strike_px_range_)));
          set_has_start_strike_px_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_start_strike_px_range_exponent;
        break;
      }

      // optional sfixed32 start_strike_px_range_exponent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_strike_px_range_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_strike_px_range_exponent_)));
          set_has_start_strike_px_range_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_strike_exercise_style;
        break;
      }

      // optional sfixed64 strike_exercise_style = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_exercise_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &strike_exercise_style_)));
          set_has_strike_exercise_style();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_strike_increment;
        break;
      }

      // optional double strike_increment = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_strike_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &strike_increment_)));
          set_has_strike_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strike_rule_id;
        break;
      }

      // optional string strike_rule_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strike_rule_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strike_rule_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strike_rule_id().data(), this->strike_rule_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrikeRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed64 end_strike_px_range = 1;
  if (has_end_strike_px_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->end_strike_px_range(), output);
  }

  // optional sfixed32 end_strike_px_range_exponent = 2;
  if (has_end_strike_px_range_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->end_strike_px_range_exponent(), output);
  }

  // repeated .Common.MaturityRules maturity_rules = 3;
  for (int i = 0; i < this->maturity_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->maturity_rules(i), output);
  }

  // optional sfixed64 start_strike_px_range = 4;
  if (has_start_strike_px_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->start_strike_px_range(), output);
  }

  // optional sfixed32 start_strike_px_range_exponent = 5;
  if (has_start_strike_px_range_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->start_strike_px_range_exponent(), output);
  }

  // optional sfixed64 strike_exercise_style = 6;
  if (has_strike_exercise_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->strike_exercise_style(), output);
  }

  // optional double strike_increment = 7;
  if (has_strike_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->strike_increment(), output);
  }

  // optional string strike_rule_id = 8;
  if (has_strike_rule_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strike_rule_id().data(), this->strike_rule_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strike_rule_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrikeRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed64 end_strike_px_range = 1;
  if (has_end_strike_px_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->end_strike_px_range(), target);
  }

  // optional sfixed32 end_strike_px_range_exponent = 2;
  if (has_end_strike_px_range_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->end_strike_px_range_exponent(), target);
  }

  // repeated .Common.MaturityRules maturity_rules = 3;
  for (int i = 0; i < this->maturity_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->maturity_rules(i), target);
  }

  // optional sfixed64 start_strike_px_range = 4;
  if (has_start_strike_px_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->start_strike_px_range(), target);
  }

  // optional sfixed32 start_strike_px_range_exponent = 5;
  if (has_start_strike_px_range_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->start_strike_px_range_exponent(), target);
  }

  // optional sfixed64 strike_exercise_style = 6;
  if (has_strike_exercise_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->strike_exercise_style(), target);
  }

  // optional double strike_increment = 7;
  if (has_strike_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->strike_increment(), target);
  }

  // optional string strike_rule_id = 8;
  if (has_strike_rule_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strike_rule_id().data(), this->strike_rule_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strike_rule_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrikeRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 end_strike_px_range = 1;
    if (has_end_strike_px_range()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 end_strike_px_range_exponent = 2;
    if (has_end_strike_px_range_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 start_strike_px_range = 4;
    if (has_start_strike_px_range()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 start_strike_px_range_exponent = 5;
    if (has_start_strike_px_range_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 strike_exercise_style = 6;
    if (has_strike_exercise_style()) {
      total_size += 1 + 8;
    }

    // optional double strike_increment = 7;
    if (has_strike_increment()) {
      total_size += 1 + 8;
    }

    // optional string strike_rule_id = 8;
    if (has_strike_rule_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strike_rule_id());
    }

  }
  // repeated .Common.MaturityRules maturity_rules = 3;
  total_size += 1 * this->maturity_rules_size();
  for (int i = 0; i < this->maturity_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maturity_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrikeRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrikeRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrikeRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrikeRules::MergeFrom(const StrikeRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  maturity_rules_.MergeFrom(from.maturity_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_strike_px_range()) {
      set_end_strike_px_range(from.end_strike_px_range());
    }
    if (from.has_end_strike_px_range_exponent()) {
      set_end_strike_px_range_exponent(from.end_strike_px_range_exponent());
    }
    if (from.has_start_strike_px_range()) {
      set_start_strike_px_range(from.start_strike_px_range());
    }
    if (from.has_start_strike_px_range_exponent()) {
      set_start_strike_px_range_exponent(from.start_strike_px_range_exponent());
    }
    if (from.has_strike_exercise_style()) {
      set_strike_exercise_style(from.strike_exercise_style());
    }
    if (from.has_strike_increment()) {
      set_strike_increment(from.strike_increment());
    }
    if (from.has_strike_rule_id()) {
      set_strike_rule_id(from.strike_rule_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrikeRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrikeRules::CopyFrom(const StrikeRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrikeRules::IsInitialized() const {

  return true;
}

void StrikeRules::Swap(StrikeRules* other) {
  if (other != this) {
    std::swap(end_strike_px_range_, other->end_strike_px_range_);
    std::swap(end_strike_px_range_exponent_, other->end_strike_px_range_exponent_);
    maturity_rules_.Swap(&other->maturity_rules_);
    std::swap(start_strike_px_range_, other->start_strike_px_range_);
    std::swap(start_strike_px_range_exponent_, other->start_strike_px_range_exponent_);
    std::swap(strike_exercise_style_, other->strike_exercise_style_);
    std::swap(strike_increment_, other->strike_increment_);
    std::swap(strike_rule_id_, other->strike_rule_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrikeRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrikeRules_descriptor_;
  metadata.reflection = StrikeRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketSegmentGrp::kMarketIdFieldNumber;
const int MarketSegmentGrp::kMarketSegmentIdFieldNumber;
const int MarketSegmentGrp::kSecurityTradingRulesFieldNumber;
const int MarketSegmentGrp::kStrikeRulesFieldNumber;
#endif  // !_MSC_VER

MarketSegmentGrp::MarketSegmentGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketSegmentGrp::InitAsDefaultInstance() {
  security_trading_rules_ = const_cast< ::Common::SecurityTradingRules*>(&::Common::SecurityTradingRules::default_instance());
}

MarketSegmentGrp::MarketSegmentGrp(const MarketSegmentGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketSegmentGrp::SharedCtor() {
  _cached_size_ = 0;
  market_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_segment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_trading_rules_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketSegmentGrp::~MarketSegmentGrp() {
  SharedDtor();
}

void MarketSegmentGrp::SharedDtor() {
  if (market_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_id_;
  }
  if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_segment_id_;
  }
  if (this != default_instance_) {
    delete security_trading_rules_;
  }
}

void MarketSegmentGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketSegmentGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketSegmentGrp_descriptor_;
}

const MarketSegmentGrp& MarketSegmentGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

MarketSegmentGrp* MarketSegmentGrp::default_instance_ = NULL;

MarketSegmentGrp* MarketSegmentGrp::New() const {
  return new MarketSegmentGrp;
}

void MarketSegmentGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_market_id()) {
      if (market_id_ != &::google::protobuf::internal::kEmptyString) {
        market_id_->clear();
      }
    }
    if (has_market_segment_id()) {
      if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
        market_segment_id_->clear();
      }
    }
    if (has_security_trading_rules()) {
      if (security_trading_rules_ != NULL) security_trading_rules_->::Common::SecurityTradingRules::Clear();
    }
  }
  strike_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketSegmentGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string market_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_id().data(), this->market_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_market_segment_id;
        break;
      }

      // optional string market_segment_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_segment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_segment_id().data(), this->market_segment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security_trading_rules;
        break;
      }

      // optional .Common.SecurityTradingRules security_trading_rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_trading_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_trading_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strike_rules;
        break;
      }

      // repeated .Common.StrikeRules strike_rules = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strike_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strike_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strike_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketSegmentGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string market_id = 1;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->market_id(), output);
  }

  // optional string market_segment_id = 2;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->market_segment_id(), output);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 3;
  if (has_security_trading_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->security_trading_rules(), output);
  }

  // repeated .Common.StrikeRules strike_rules = 4;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->strike_rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketSegmentGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string market_id = 1;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->market_id(), target);
  }

  // optional string market_segment_id = 2;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->market_segment_id(), target);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 3;
  if (has_security_trading_rules()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->security_trading_rules(), target);
  }

  // repeated .Common.StrikeRules strike_rules = 4;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->strike_rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketSegmentGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string market_id = 1;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string market_segment_id = 2;
    if (has_market_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_segment_id());
    }

    // optional .Common.SecurityTradingRules security_trading_rules = 3;
    if (has_security_trading_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_trading_rules());
    }

  }
  // repeated .Common.StrikeRules strike_rules = 4;
  total_size += 1 * this->strike_rules_size();
  for (int i = 0; i < this->strike_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strike_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketSegmentGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketSegmentGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketSegmentGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketSegmentGrp::MergeFrom(const MarketSegmentGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  strike_rules_.MergeFrom(from.strike_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_market_segment_id()) {
      set_market_segment_id(from.market_segment_id());
    }
    if (from.has_security_trading_rules()) {
      mutable_security_trading_rules()->::Common::SecurityTradingRules::MergeFrom(from.security_trading_rules());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketSegmentGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSegmentGrp::CopyFrom(const MarketSegmentGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSegmentGrp::IsInitialized() const {

  return true;
}

void MarketSegmentGrp::Swap(MarketSegmentGrp* other) {
  if (other != this) {
    std::swap(market_id_, other->market_id_);
    std::swap(market_segment_id_, other->market_segment_id_);
    std::swap(security_trading_rules_, other->security_trading_rules_);
    strike_rules_.Swap(&other->strike_rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketSegmentGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketSegmentGrp_descriptor_;
  metadata.reflection = MarketSegmentGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LegBenchmarkCurveData::kLegBenchmarkCurveCurrencyFieldNumber;
const int LegBenchmarkCurveData::kLegBenchmarkCurveNameFieldNumber;
const int LegBenchmarkCurveData::kLegBenchmarkCurvePointFieldNumber;
const int LegBenchmarkCurveData::kLegBenchmarkPriceFieldNumber;
const int LegBenchmarkCurveData::kLegBenchmarkPriceExponentFieldNumber;
const int LegBenchmarkCurveData::kLegBenchmarkPriceTypeFieldNumber;
#endif  // !_MSC_VER

LegBenchmarkCurveData::LegBenchmarkCurveData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LegBenchmarkCurveData::InitAsDefaultInstance() {
}

LegBenchmarkCurveData::LegBenchmarkCurveData(const LegBenchmarkCurveData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LegBenchmarkCurveData::SharedCtor() {
  _cached_size_ = 0;
  leg_benchmark_curve_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_benchmark_curve_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_benchmark_curve_point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_benchmark_price_ = GOOGLE_LONGLONG(0);
  leg_benchmark_price_exponent_ = 0;
  leg_benchmark_price_type_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LegBenchmarkCurveData::~LegBenchmarkCurveData() {
  SharedDtor();
}

void LegBenchmarkCurveData::SharedDtor() {
  if (leg_benchmark_curve_currency_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_benchmark_curve_currency_;
  }
  if (leg_benchmark_curve_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_benchmark_curve_name_;
  }
  if (leg_benchmark_curve_point_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_benchmark_curve_point_;
  }
  if (this != default_instance_) {
  }
}

void LegBenchmarkCurveData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LegBenchmarkCurveData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegBenchmarkCurveData_descriptor_;
}

const LegBenchmarkCurveData& LegBenchmarkCurveData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

LegBenchmarkCurveData* LegBenchmarkCurveData::default_instance_ = NULL;

LegBenchmarkCurveData* LegBenchmarkCurveData::New() const {
  return new LegBenchmarkCurveData;
}

void LegBenchmarkCurveData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_leg_benchmark_curve_currency()) {
      if (leg_benchmark_curve_currency_ != &::google::protobuf::internal::kEmptyString) {
        leg_benchmark_curve_currency_->clear();
      }
    }
    if (has_leg_benchmark_curve_name()) {
      if (leg_benchmark_curve_name_ != &::google::protobuf::internal::kEmptyString) {
        leg_benchmark_curve_name_->clear();
      }
    }
    if (has_leg_benchmark_curve_point()) {
      if (leg_benchmark_curve_point_ != &::google::protobuf::internal::kEmptyString) {
        leg_benchmark_curve_point_->clear();
      }
    }
    leg_benchmark_price_ = GOOGLE_LONGLONG(0);
    leg_benchmark_price_exponent_ = 0;
    leg_benchmark_price_type_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LegBenchmarkCurveData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string leg_benchmark_curve_currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_benchmark_curve_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_benchmark_curve_currency().data(), this->leg_benchmark_curve_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_benchmark_curve_name;
        break;
      }

      // optional string leg_benchmark_curve_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_benchmark_curve_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_benchmark_curve_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_benchmark_curve_name().data(), this->leg_benchmark_curve_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leg_benchmark_curve_point;
        break;
      }

      // optional string leg_benchmark_curve_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_benchmark_curve_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_benchmark_curve_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_benchmark_curve_point().data(), this->leg_benchmark_curve_point().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_leg_benchmark_price;
        break;
      }

      // optional sfixed64 leg_benchmark_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_benchmark_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_benchmark_price_)));
          set_has_leg_benchmark_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_leg_benchmark_price_exponent;
        break;
      }

      // optional sfixed32 leg_benchmark_price_exponent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leg_benchmark_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leg_benchmark_price_exponent_)));
          set_has_leg_benchmark_price_exponent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_leg_benchmark_price_type;
        break;
      }

      // optional sfixed64 leg_benchmark_price_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leg_benchmark_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leg_benchmark_price_type_)));
          set_has_leg_benchmark_price_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LegBenchmarkCurveData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string leg_benchmark_curve_currency = 1;
  if (has_leg_benchmark_curve_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_currency().data(), this->leg_benchmark_curve_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->leg_benchmark_curve_currency(), output);
  }

  // optional string leg_benchmark_curve_name = 2;
  if (has_leg_benchmark_curve_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_name().data(), this->leg_benchmark_curve_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->leg_benchmark_curve_name(), output);
  }

  // optional string leg_benchmark_curve_point = 3;
  if (has_leg_benchmark_curve_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_point().data(), this->leg_benchmark_curve_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leg_benchmark_curve_point(), output);
  }

  // optional sfixed64 leg_benchmark_price = 4;
  if (has_leg_benchmark_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->leg_benchmark_price(), output);
  }

  // optional sfixed32 leg_benchmark_price_exponent = 5;
  if (has_leg_benchmark_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->leg_benchmark_price_exponent(), output);
  }

  // optional sfixed64 leg_benchmark_price_type = 6;
  if (has_leg_benchmark_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->leg_benchmark_price_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LegBenchmarkCurveData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string leg_benchmark_curve_currency = 1;
  if (has_leg_benchmark_curve_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_currency().data(), this->leg_benchmark_curve_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->leg_benchmark_curve_currency(), target);
  }

  // optional string leg_benchmark_curve_name = 2;
  if (has_leg_benchmark_curve_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_name().data(), this->leg_benchmark_curve_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leg_benchmark_curve_name(), target);
  }

  // optional string leg_benchmark_curve_point = 3;
  if (has_leg_benchmark_curve_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_benchmark_curve_point().data(), this->leg_benchmark_curve_point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leg_benchmark_curve_point(), target);
  }

  // optional sfixed64 leg_benchmark_price = 4;
  if (has_leg_benchmark_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->leg_benchmark_price(), target);
  }

  // optional sfixed32 leg_benchmark_price_exponent = 5;
  if (has_leg_benchmark_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->leg_benchmark_price_exponent(), target);
  }

  // optional sfixed64 leg_benchmark_price_type = 6;
  if (has_leg_benchmark_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->leg_benchmark_price_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LegBenchmarkCurveData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string leg_benchmark_curve_currency = 1;
    if (has_leg_benchmark_curve_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_benchmark_curve_currency());
    }

    // optional string leg_benchmark_curve_name = 2;
    if (has_leg_benchmark_curve_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_benchmark_curve_name());
    }

    // optional string leg_benchmark_curve_point = 3;
    if (has_leg_benchmark_curve_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_benchmark_curve_point());
    }

    // optional sfixed64 leg_benchmark_price = 4;
    if (has_leg_benchmark_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 leg_benchmark_price_exponent = 5;
    if (has_leg_benchmark_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 leg_benchmark_price_type = 6;
    if (has_leg_benchmark_price_type()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LegBenchmarkCurveData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LegBenchmarkCurveData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LegBenchmarkCurveData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LegBenchmarkCurveData::MergeFrom(const LegBenchmarkCurveData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leg_benchmark_curve_currency()) {
      set_leg_benchmark_curve_currency(from.leg_benchmark_curve_currency());
    }
    if (from.has_leg_benchmark_curve_name()) {
      set_leg_benchmark_curve_name(from.leg_benchmark_curve_name());
    }
    if (from.has_leg_benchmark_curve_point()) {
      set_leg_benchmark_curve_point(from.leg_benchmark_curve_point());
    }
    if (from.has_leg_benchmark_price()) {
      set_leg_benchmark_price(from.leg_benchmark_price());
    }
    if (from.has_leg_benchmark_price_exponent()) {
      set_leg_benchmark_price_exponent(from.leg_benchmark_price_exponent());
    }
    if (from.has_leg_benchmark_price_type()) {
      set_leg_benchmark_price_type(from.leg_benchmark_price_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LegBenchmarkCurveData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LegBenchmarkCurveData::CopyFrom(const LegBenchmarkCurveData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegBenchmarkCurveData::IsInitialized() const {

  return true;
}

void LegBenchmarkCurveData::Swap(LegBenchmarkCurveData* other) {
  if (other != this) {
    std::swap(leg_benchmark_curve_currency_, other->leg_benchmark_curve_currency_);
    std::swap(leg_benchmark_curve_name_, other->leg_benchmark_curve_name_);
    std::swap(leg_benchmark_curve_point_, other->leg_benchmark_curve_point_);
    std::swap(leg_benchmark_price_, other->leg_benchmark_price_);
    std::swap(leg_benchmark_price_exponent_, other->leg_benchmark_price_exponent_);
    std::swap(leg_benchmark_price_type_, other->leg_benchmark_price_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LegBenchmarkCurveData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LegBenchmarkCurveData_descriptor_;
  metadata.reflection = LegBenchmarkCurveData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstrmtLegSecListGrp::kInstrumentLegFieldNumber;
const int InstrmtLegSecListGrp::kLegBenchmarkCurveDataFieldNumber;
const int InstrmtLegSecListGrp::kLegSettlTypeFieldNumber;
const int InstrmtLegSecListGrp::kLegStipulationsFieldNumber;
const int InstrmtLegSecListGrp::kLegSwapTypeFieldNumber;
#endif  // !_MSC_VER

InstrmtLegSecListGrp::InstrmtLegSecListGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstrmtLegSecListGrp::InitAsDefaultInstance() {
  instrument_leg_ = const_cast< ::Common::InstrumentLeg*>(&::Common::InstrumentLeg::default_instance());
  leg_benchmark_curve_data_ = const_cast< ::Common::LegBenchmarkCurveData*>(&::Common::LegBenchmarkCurveData::default_instance());
}

InstrmtLegSecListGrp::InstrmtLegSecListGrp(const InstrmtLegSecListGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstrmtLegSecListGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_leg_ = NULL;
  leg_benchmark_curve_data_ = NULL;
  leg_settl_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_swap_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstrmtLegSecListGrp::~InstrmtLegSecListGrp() {
  SharedDtor();
}

void InstrmtLegSecListGrp::SharedDtor() {
  if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_settl_type_;
  }
  if (this != default_instance_) {
    delete instrument_leg_;
    delete leg_benchmark_curve_data_;
  }
}

void InstrmtLegSecListGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstrmtLegSecListGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstrmtLegSecListGrp_descriptor_;
}

const InstrmtLegSecListGrp& InstrmtLegSecListGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_2eproto();
  return *default_instance_;
}

InstrmtLegSecListGrp* InstrmtLegSecListGrp::default_instance_ = NULL;

InstrmtLegSecListGrp* InstrmtLegSecListGrp::New() const {
  return new InstrmtLegSecListGrp;
}

void InstrmtLegSecListGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_leg()) {
      if (instrument_leg_ != NULL) instrument_leg_->::Common::InstrumentLeg::Clear();
    }
    if (has_leg_benchmark_curve_data()) {
      if (leg_benchmark_curve_data_ != NULL) leg_benchmark_curve_data_->::Common::LegBenchmarkCurveData::Clear();
    }
    if (has_leg_settl_type()) {
      if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_settl_type_->clear();
      }
    }
    leg_swap_type_ = 0;
  }
  leg_stipulations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstrmtLegSecListGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrumentLeg instrument_leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_leg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_benchmark_curve_data;
        break;
      }

      // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leg_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leg_settl_type;
        break;
      }

      // optional string leg_settl_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_settl_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_settl_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_settl_type().data(), this->leg_settl_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leg_stipulations;
        break;
      }

      // repeated .Common.LegStipulations leg_stipulations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leg_stipulations;
        if (input->ExpectTag(40)) goto parse_leg_swap_type;
        break;
      }

      // optional .Common.LegSwapTypeEnum leg_swap_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_swap_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Common::LegSwapTypeEnum_IsValid(value)) {
            set_leg_swap_type(static_cast< ::Common::LegSwapTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstrmtLegSecListGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument_leg(), output);
  }

  // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
  if (has_leg_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leg_benchmark_curve_data(), output);
  }

  // optional string leg_settl_type = 3;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leg_settl_type(), output);
  }

  // repeated .Common.LegStipulations leg_stipulations = 4;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leg_stipulations(i), output);
  }

  // optional .Common.LegSwapTypeEnum leg_swap_type = 5;
  if (has_leg_swap_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->leg_swap_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstrmtLegSecListGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument_leg(), target);
  }

  // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
  if (has_leg_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leg_benchmark_curve_data(), target);
  }

  // optional string leg_settl_type = 3;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leg_settl_type(), target);
  }

  // repeated .Common.LegStipulations leg_stipulations = 4;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leg_stipulations(i), target);
  }

  // optional .Common.LegSwapTypeEnum leg_swap_type = 5;
  if (has_leg_swap_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->leg_swap_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstrmtLegSecListGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrumentLeg instrument_leg = 1;
    if (has_instrument_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_leg());
    }

    // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
    if (has_leg_benchmark_curve_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leg_benchmark_curve_data());
    }

    // optional string leg_settl_type = 3;
    if (has_leg_settl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_settl_type());
    }

    // optional .Common.LegSwapTypeEnum leg_swap_type = 5;
    if (has_leg_swap_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg_swap_type());
    }

  }
  // repeated .Common.LegStipulations leg_stipulations = 4;
  total_size += 1 * this->leg_stipulations_size();
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_stipulations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstrmtLegSecListGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstrmtLegSecListGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstrmtLegSecListGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstrmtLegSecListGrp::MergeFrom(const InstrmtLegSecListGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  leg_stipulations_.MergeFrom(from.leg_stipulations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_leg()) {
      mutable_instrument_leg()->::Common::InstrumentLeg::MergeFrom(from.instrument_leg());
    }
    if (from.has_leg_benchmark_curve_data()) {
      mutable_leg_benchmark_curve_data()->::Common::LegBenchmarkCurveData::MergeFrom(from.leg_benchmark_curve_data());
    }
    if (from.has_leg_settl_type()) {
      set_leg_settl_type(from.leg_settl_type());
    }
    if (from.has_leg_swap_type()) {
      set_leg_swap_type(from.leg_swap_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstrmtLegSecListGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstrmtLegSecListGrp::CopyFrom(const InstrmtLegSecListGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstrmtLegSecListGrp::IsInitialized() const {

  return true;
}

void InstrmtLegSecListGrp::Swap(InstrmtLegSecListGrp* other) {
  if (other != this) {
    std::swap(instrument_leg_, other->instrument_leg_);
    std::swap(leg_benchmark_curve_data_, other->leg_benchmark_curve_data_);
    std::swap(leg_settl_type_, other->leg_settl_type_);
    leg_stipulations_.Swap(&other->leg_stipulations_);
    std::swap(leg_swap_type_, other->leg_swap_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstrmtLegSecListGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstrmtLegSecListGrp_descriptor_;
  metadata.reflection = InstrmtLegSecListGrp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common

// @@protoc_insertion_point(global_scope)
