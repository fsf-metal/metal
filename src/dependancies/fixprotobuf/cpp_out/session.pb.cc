// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "session.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Session {

namespace {

const ::google::protobuf::Descriptor* HopGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HopGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StandardHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StandardHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* StandardTrailer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StandardTrailer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplVerIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_session_2eproto() {
  protobuf_AddDesc_session_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "session.proto");
  GOOGLE_CHECK(file != NULL);
  HopGrp_descriptor_ = file->message_type(0);
  static const int HopGrp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopGrp, hop_comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopGrp, hop_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopGrp, hop_sending_time_),
  };
  HopGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HopGrp_descriptor_,
      HopGrp::default_instance_,
      HopGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HopGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HopGrp));
  StandardHeader_descriptor_ = file->message_type(1);
  static const int StandardHeader_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, deliver_to_comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, deliver_to_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, msg_seq_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, on_behalf_of_comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, on_behalf_of_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, orig_sending_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, poss_dup_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, poss_resend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, secure_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, secure_data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, sender_comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, sender_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, sending_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, target_comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, target_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, deliver_to_location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, on_behalf_of_location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, sender_location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, target_location_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, last_msg_seq_num_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, message_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, xml_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, xml_data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, appl_ver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, cstm_appl_ver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, hop_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, appl_ext_id_),
  };
  StandardHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StandardHeader_descriptor_,
      StandardHeader::default_instance_,
      StandardHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StandardHeader));
  StandardTrailer_descriptor_ = file->message_type(2);
  static const int StandardTrailer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardTrailer, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardTrailer, signature_length_),
  };
  StandardTrailer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StandardTrailer_descriptor_,
      StandardTrailer::default_instance_,
      StandardTrailer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardTrailer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StandardTrailer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StandardTrailer));
  MsgTypeEnum_descriptor_ = file->enum_type(0);
  ApplVerIdEnum_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_session_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HopGrp_descriptor_, &HopGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StandardHeader_descriptor_, &StandardHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StandardTrailer_descriptor_, &StandardTrailer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_session_2eproto() {
  delete HopGrp::default_instance_;
  delete HopGrp_reflection_;
  delete StandardHeader::default_instance_;
  delete StandardHeader_reflection_;
  delete StandardTrailer::default_instance_;
  delete StandardTrailer_reflection_;
}

void protobuf_AddDesc_session_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meta::protobuf_AddDesc_meta_2eproto();
  ::fix::protobuf_AddDesc_fix_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rsession.proto\022\007Session\032\nmeta.proto\032\tfi"
    "x.proto\"r\n\006HopGrp\022 \n\013hop_comp_id\030\001 \001(\tB\013"
    "\235\254\033t\002\000\000\240\254\033\017\022\037\n\nhop_ref_id\030\002 \001(\007B\013\235\254\033v\002\000\000"
    "\240\254\033\025\022%\n\020hop_sending_time\030\003 \001(\020B\013\235\254\033u\002\000\000\240"
    "\254\033\021\"\301\010\n\016StandardHeader\022\'\n\022deliver_to_com"
    "p_id\030\001 \001(\tB\013\235\254\033\200\000\000\000\240\254\033\017\022&\n\021deliver_to_su"
    "b_id\030\002 \001(\tB\013\235\254\033\201\000\000\000\240\254\033\017\022 \n\013msg_seq_num\030\003"
    " \001(\007B\013\235\254\033\"\000\000\000\240\254\033\025\022)\n\024on_behalf_of_comp_i"
    "d\030\004 \001(\tB\013\235\254\033s\000\000\000\240\254\033\017\022(\n\023on_behalf_of_sub"
    "_id\030\005 \001(\tB\013\235\254\033t\000\000\000\240\254\033\017\022&\n\021orig_sending_t"
    "ime\030\006 \001(\020B\013\235\254\033z\000\000\000\240\254\033\021\022\"\n\rposs_dup_flag\030"
    "\007 \001(\010B\013\235\254\033+\000\000\000\240\254\033\007\022 \n\013poss_resend\030\010 \001(\010B"
    "\013\235\254\033a\000\000\000\240\254\033\007\022$\n\013secure_data\030\t \001(\014B\017\235\254\033[\000"
    "\000\000\240\254\033\001\270\254\033\010\022(\n\017secure_data_len\030\n \001(\007B\017\235\254\033"
    "Z\000\000\000\240\254\033\022\270\254\033\010\022#\n\016sender_comp_id\030\013 \001(\tB\013\235\254"
    "\0331\000\000\000\240\254\033\017\022\"\n\rsender_sub_id\030\014 \001(\tB\013\235\254\0332\000\000"
    "\000\240\254\033\017\022!\n\014sending_time\030\r \001(\020B\013\235\254\0334\000\000\000\240\254\033\021"
    "\022#\n\016target_comp_id\030\016 \001(\tB\013\235\254\0338\000\000\000\240\254\033\017\022\"\n"
    "\rtarget_sub_id\030\017 \001(\tB\013\235\254\0339\000\000\000\240\254\033\017\022+\n\026del"
    "iver_to_location_id\030\020 \001(\tB\013\235\254\033\221\000\000\000\240\254\033\017\022-"
    "\n\030on_behalf_of_location_id\030\021 \001(\tB\013\235\254\033\220\000\000"
    "\000\240\254\033\017\022\'\n\022sender_location_id\030\022 \001(\tB\013\235\254\033\216\000"
    "\000\000\240\254\033\017\022\'\n\022target_location_id\030\023 \001(\tB\013\235\254\033\217"
    "\000\000\000\240\254\033\017\022/\n\032last_msg_seq_num_processed\030\024 "
    "\001(\007B\013\235\254\033q\001\000\000\240\254\033\025\022%\n\020message_encoding\030\025 \001"
    "(\tB\013\235\254\033[\001\000\000\240\254\033\017\022\035\n\010xml_data\030\026 \001(\014B\013\235\254\033\325\000"
    "\000\000\240\254\033\001\022!\n\014xml_data_len\030\027 \001(\007B\013\235\254\033\324\000\000\000\240\254\033"
    "\022\0228\n\013appl_ver_id\030\030 \001(\0162\026.Session.ApplVer"
    "IdEnumB\013\235\254\033h\004\000\000\240\254\033\017\022%\n\020cstm_appl_ver_id\030"
    "\031 \001(\tB\013\235\254\033i\004\000\000\240\254\033\017\022)\n\007hop_grp\030\032 \003(\0132\017.Se"
    "ssion.HopGrpB\007\235\254\033s\002\000\000\022 \n\013appl_ext_id\030\033 \001"
    "(\020B\013\235\254\033\204\004\000\000\240\254\033\003\"`\n\017StandardTrailer\022\"\n\tsi"
    "gnature\030\001 \001(\014B\017\235\254\033Y\000\000\000\240\254\033\001\270\254\033\010\022)\n\020signat"
    "ure_length\030\002 \001(\007B\017\235\254\033]\000\000\000\240\254\033\022\270\254\033\010*\245\'\n\013Ms"
    "gTypeEnum\022-\n!MSG_TYPE_ADJUSTED_POSITION_"
    "REPORT\020\000\032\006\242\224#\002BL\022!\n\026MSG_TYPE_ADVERTISEME"
    "NT\020\001\032\005\242\224#\0017\022*\n\037MSG_TYPE_ALLOCATION_INSTR"
    "UCTION\020\002\032\005\242\224#\001J\022.\n#MSG_TYPE_ALLOCATION_I"
    "NSTRUCTION_ACK\020\003\032\005\242\224#\001P\0221\n%MSG_TYPE_ALLO"
    "CATION_INSTRUCTION_ALERT\020\004\032\006\242\224#\002BM\022&\n\032MS"
    "G_TYPE_ALLOCATION_REPORT\020\005\032\006\242\224#\002AS\022*\n\036MS"
    "G_TYPE_ALLOCATION_REPORT_ACK\020\006\032\006\242\224#\002AT\022/"
    "\n#MSG_TYPE_APPLICATION_MESSAGE_REPORT\020\007\032"
    "\006\242\224#\002BY\0220\n$MSG_TYPE_APPLICATION_MESSAGE_"
    "REQUEST\020\010\032\006\242\224#\002BW\0224\n(MSG_TYPE_APPLICATIO"
    "N_MESSAGE_REQUEST_ACK\020\t\032\006\242\224#\002BX\022&\n\032MSG_T"
    "YPE_ASSIGNMENT_REPORT\020\n\032\006\242\224#\002AW\022\037\n\024MSG_T"
    "YPE_BID_REQUEST\020\013\032\005\242\224#\001k\022 \n\025MSG_TYPE_BID"
    "_RESPONSE\020\014\032\005\242\224#\001l\022+\n MSG_TYPE_BUSINESS_"
    "MESSAGE_REJECT\020\r\032\005\242\224#\001j\022*\n\036MSG_TYPE_COLL"
    "ATERAL_ASSIGNMENT\020\016\032\006\242\224#\002AY\022\'\n\033MSG_TYPE_"
    "COLLATERAL_INQUIRY\020\017\032\006\242\224#\002BB\022+\n\037MSG_TYPE"
    "_COLLATERAL_INQUIRY_ACK\020\020\032\006\242\224#\002BG\022&\n\032MSG"
    "_TYPE_COLLATERAL_REPORT\020\021\032\006\242\224#\002BA\022\'\n\033MSG"
    "_TYPE_COLLATERAL_REQUEST\020\022\032\006\242\224#\002AX\022(\n\034MS"
    "G_TYPE_COLLATERAL_RESPONSE\020\023\032\006\242\224#\002AZ\022!\n\025"
    "MSG_TYPE_CONFIRMATION\020\024\032\006\242\224#\002AK\022%\n\031MSG_T"
    "YPE_CONFIRMATION_ACK\020\025\032\006\242\224#\002AU\022)\n\035MSG_TY"
    "PE_CONFIRMATION_REQUEST\020\026\032\006\242\224#\002BH\022.\n\"MSG"
    "_TYPE_CONTRARY_INTENTION_REPORT\020\027\032\006\242\224#\002B"
    "O\0226\n+MSG_TYPE_CROSS_ORDER_CANCEL_REPLACE"
    "_REQUEST\020\030\032\005\242\224#\001t\022.\n#MSG_TYPE_CROSS_ORDE"
    "R_CANCEL_REQUEST\020\031\032\005\242\224#\001u\022-\n!MSG_TYPE_DE"
    "RIVATIVE_SECURITY_LIST\020\032\032\006\242\224#\002AA\0224\n)MSG_"
    "TYPE_DERIVATIVE_SECURITY_LIST_REQUEST\020\033\032"
    "\005\242\224#\001z\022;\n/MSG_TYPE_DERIVATIVE_SECURITY_L"
    "IST_UPDATE_REPORT\020\034\032\006\242\224#\002BR\022#\n\030MSG_TYPE_"
    "DONT_KNOW_TRADE\020\035\032\005\242\224#\001Q\022\031\n\016MSG_TYPE_EMA"
    "IL\020\036\032\005\242\224#\001C\022.\n\"MSG_TYPE_EXECUTION_ACKNOW"
    "LEDGEMENT\020\037\032\006\242\224#\002BN\022$\n\031MSG_TYPE_EXECUTIO"
    "N_REPORT\020 \032\005\242\224#\0018\022\035\n\022MSG_TYPE_HEARTBEAT\020"
    "!\032\005\242\224#\0010\022\027\n\014MSG_TYPE_IOI\020\"\032\005\242\224#\0016\022\'\n\034MSG"
    "_TYPE_LIST_CANCEL_REQUEST\020#\032\005\242\224#\001K\022 \n\025MS"
    "G_TYPE_LIST_EXECUTE\020$\032\005\242\224#\001L\022\037\n\024MSG_TYPE"
    "_LIST_STATUS\020%\032\005\242\224#\001N\022\'\n\034MSG_TYPE_LIST_S"
    "TATUS_REQUEST\020&\032\005\242\224#\001M\022%\n\032MSG_TYPE_LIST_"
    "STRIKE_PRICE\020\'\032\005\242\224#\001m\022\031\n\016MSG_TYPE_LOGON\020"
    "(\032\005\242\224#\001A\022\032\n\017MSG_TYPE_LOGOUT\020)\032\005\242\224#\0015\0223\n("
    "MSG_TYPE_MARKET_DATA_INCREMENTAL_REFRESH"
    "\020*\032\005\242\224#\001X\022\'\n\034MSG_TYPE_MARKET_DATA_REQUES"
    "T\020+\032\005\242\224#\001V\022.\n#MSG_TYPE_MARKET_DATA_REQUE"
    "ST_REJECT\020,\032\005\242\224#\001Y\0225\n*MSG_TYPE_MARKET_DA"
    "TA_SNAPSHOT_FULL_REFRESH\020-\032\005\242\224#\001W\022&\n\032MSG"
    "_TYPE_MARKET_DEFINITION\020.\032\006\242\224#\002BU\022.\n\"MSG"
    "_TYPE_MARKET_DEFINITION_REQUEST\020/\032\006\242\224#\002B"
    "T\0224\n(MSG_TYPE_MARKET_DEFINITION_UPDATE_R"
    "EPORT\0200\032\006\242\224#\002BV\022\036\n\023MSG_TYPE_MASS_QUOTE\0201"
    "\032\005\242\224#\001i\022.\n#MSG_TYPE_MASS_QUOTE_ACKNOWLED"
    "GEMENT\0202\032\005\242\224#\001b\0222\n&MSG_TYPE_MULTILEG_ORD"
    "ER_CANCEL_REPLACE\0203\032\006\242\224#\002AC\022\?\n3MSG_TYPE_"
    "NETWORK_COUNTERPARTY_SYSTEM_STATUS_REQUE"
    "ST\0204\032\006\242\224#\002BC\022@\n4MSG_TYPE_NETWORK_COUNTER"
    "PARTY_SYSTEM_STATUS_RESPONSE\0205\032\006\242\224#\002BD\022#"
    "\n\030MSG_TYPE_NEW_ORDER_CROSS\0206\032\005\242\224#\001s\022\"\n\027M"
    "SG_TYPE_NEW_ORDER_LIST\0207\032\005\242\224#\001E\022\'\n\033MSG_T"
    "YPE_NEW_ORDER_MULTILEG\0208\032\006\242\224#\002AB\022$\n\031MSG_"
    "TYPE_NEW_ORDER_SINGLE\0209\032\005\242\224#\001D\022\030\n\rMSG_TY"
    "PE_NEWS\020:\032\005\242\224#\001B\022\'\n\034MSG_TYPE_ORDER_CANCE"
    "L_REJECT\020;\032\005\242\224#\0019\0220\n%MSG_TYPE_ORDER_CANC"
    "EL_REPLACE_REQUEST\020<\032\005\242\224#\001G\022(\n\035MSG_TYPE_"
    "ORDER_CANCEL_REQUEST\020=\032\005\242\224#\001F\022-\n!MSG_TYP"
    "E_ORDER_MASS_ACTION_REPORT\020>\032\006\242\224#\002BZ\022.\n\""
    "MSG_TYPE_ORDER_MASS_ACTION_REQUEST\020\?\032\006\242\224"
    "#\002CA\022,\n!MSG_TYPE_ORDER_MASS_CANCEL_REPOR"
    "T\020@\032\005\242\224#\001r\022-\n\"MSG_TYPE_ORDER_MASS_CANCEL"
    "_REQUEST\020A\032\005\242\224#\001q\022.\n\"MSG_TYPE_ORDER_MASS"
    "_STATUS_REQUEST\020B\032\006\242\224#\002AF\022(\n\035MSG_TYPE_OR"
    "DER_STATUS_REQUEST\020C\032\005\242\224#\001H\0220\n$MSG_TYPE_"
    "POSITION_MAINTENANCE_REPORT\020D\032\006\242\224#\002AM\0221\n"
    "%MSG_TYPE_POSITION_MAINTENANCE_REQUEST\020E"
    "\032\006\242\224#\002AL\022$\n\030MSG_TYPE_POSITION_REPORT\020F\032\006"
    "\242\224#\002AP\022\031\n\016MSG_TYPE_QUOTE\020G\032\005\242\224#\001S\022 \n\025MSG"
    "_TYPE_QUOTE_CANCEL\020H\032\005\242\224#\001Z\022!\n\026MSG_TYPE_"
    "QUOTE_REQUEST\020I\032\005\242\224#\001R\022)\n\035MSG_TYPE_QUOTE"
    "_REQUEST_REJECT\020J\032\006\242\224#\002AG\022#\n\027MSG_TYPE_QU"
    "OTE_RESPONSE\020K\032\006\242\224#\002AJ\022(\n\034MSG_TYPE_QUOTE"
    "_STATUS_REPORT\020L\032\006\242\224#\002AI\022(\n\035MSG_TYPE_QUO"
    "TE_STATUS_REQUEST\020M\032\005\242\224#\001a\022 \n\024MSG_TYPE_R"
    "FQ_REQUEST\020N\032\006\242\224#\002AH\022-\n\"MSG_TYPE_REGISTR"
    "ATION_INSTRUCTIONS\020O\032\005\242\224#\001o\0226\n+MSG_TYPE_"
    "REGISTRATION_INSTRUCTIONS_RESPONSE\020P\032\005\242\224"
    "#\001p\022\032\n\017MSG_TYPE_REJECT\020Q\032\005\242\224#\0013\022*\n\036MSG_T"
    "YPE_REQUEST_FOR_POSITIONS\020R\032\006\242\224#\002AN\022.\n\"M"
    "SG_TYPE_REQUEST_FOR_POSITIONS_ACK\020S\032\006\242\224#"
    "\002AO\022\"\n\027MSG_TYPE_RESEND_REQUEST\020T\032\005\242\224#\0012\022"
    "\'\n\034MSG_TYPE_SECURITY_DEFINITION\020U\032\005\242\224#\001d"
    "\022/\n$MSG_TYPE_SECURITY_DEFINITION_REQUEST"
    "\020V\032\005\242\224#\001c\0226\n*MSG_TYPE_SECURITY_DEFINITIO"
    "N_UPDATE_REPORT\020W\032\006\242\224#\002BP\022!\n\026MSG_TYPE_SE"
    "CURITY_LIST\020X\032\005\242\224#\001y\022)\n\036MSG_TYPE_SECURIT"
    "Y_LIST_REQUEST\020Y\032\005\242\224#\001x\0220\n$MSG_TYPE_SECU"
    "RITY_LIST_UPDATE_REPORT\020Z\032\006\242\224#\002BK\022#\n\030MSG"
    "_TYPE_SECURITY_STATUS\020[\032\005\242\224#\001f\022+\n MSG_TY"
    "PE_SECURITY_STATUS_REQUEST\020\\\032\005\242\224#\001e\022)\n\036M"
    "SG_TYPE_SECURITY_TYPE_REQUEST\020]\032\005\242\224#\001v\022\""
    "\n\027MSG_TYPE_SECURITY_TYPES\020^\032\005\242\224#\001w\022\"\n\027MS"
    "G_TYPE_SEQUENCE_RESET\020_\032\005\242\224#\0014\0223\n\'MSG_TY"
    "PE_SETTLEMENT_INSTRUCTION_REQUEST\020`\032\006\242\224#"
    "\002AV\022+\n MSG_TYPE_SETTLEMENT_INSTRUCTIONS\020"
    "a\032\005\242\224#\001T\0221\n%MSG_TYPE_SETTLEMENT_OBLIGATI"
    "ON_REPORT\020b\032\006\242\224#\002BQ\022-\n!MSG_TYPE_STREAM_A"
    "SSIGNMENT_REPORT\020c\032\006\242\224#\002CD\0221\n%MSG_TYPE_S"
    "TREAM_ASSIGNMENT_REPORT_ACK\020d\032\006\242\224#\002CE\022.\n"
    "\"MSG_TYPE_STREAM_ASSIGNMENT_REQUEST\020e\032\006\242"
    "\224#\002CC\022 \n\025MSG_TYPE_TEST_REQUEST\020f\032\005\242\224#\0011\022"
    ")\n\035MSG_TYPE_TRADE_CAPTURE_REPORT\020g\032\006\242\224#\002"
    "AE\022-\n!MSG_TYPE_TRADE_CAPTURE_REPORT_ACK\020"
    "h\032\006\242\224#\002AR\0221\n%MSG_TYPE_TRADE_CAPTURE_REPO"
    "RT_REQUEST\020i\032\006\242\224#\002AD\0225\n)MSG_TYPE_TRADE_C"
    "APTURE_REPORT_REQUEST_ACK\020j\032\006\242\224#\002AQ\022)\n\035M"
    "SG_TYPE_TRADING_SESSION_LIST\020k\032\006\242\224#\002BJ\0221"
    "\n%MSG_TYPE_TRADING_SESSION_LIST_REQUEST\020"
    "l\032\006\242\224#\002BI\0227\n+MSG_TYPE_TRADING_SESSION_LI"
    "ST_UPDATE_REPORT\020m\032\006\242\224#\002BS\022*\n\037MSG_TYPE_T"
    "RADING_SESSION_STATUS\020n\032\005\242\224#\001h\0222\n\'MSG_TY"
    "PE_TRADING_SESSION_STATUS_REQUEST\020o\032\005\242\224#"
    "\001g\022&\n\032MSG_TYPE_USER_NOTIFICATION\020p\032\006\242\224#\002"
    "CB\022!\n\025MSG_TYPE_USER_REQUEST\020q\032\006\242\224#\002BE\022\"\n"
    "\026MSG_TYPE_USER_RESPONSE\020r\032\006\242\224#\002BF\022\036\n\023MSG"
    "_TYPE_XMLNON_FIX\020s\032\005\242\224#\001n*\301\002\n\rApplVerIdE"
    "num\022\034\n\021APPL_VER_ID_FIX27\020\000\032\005\242\224#\0010\022\034\n\021APP"
    "L_VER_ID_FIX30\020\001\032\005\242\224#\0011\022\034\n\021APPL_VER_ID_F"
    "IX40\020\002\032\005\242\224#\0012\022\034\n\021APPL_VER_ID_FIX41\020\003\032\005\242\224"
    "#\0013\022\034\n\021APPL_VER_ID_FIX42\020\004\032\005\242\224#\0014\022\034\n\021APP"
    "L_VER_ID_FIX43\020\005\032\005\242\224#\0015\022\034\n\021APPL_VER_ID_F"
    "IX44\020\006\032\005\242\224#\0016\022\034\n\021APPL_VER_ID_FIX50\020\007\032\005\242\224"
    "#\0017\022\037\n\024APPL_VER_ID_FIX50SP1\020\010\032\005\242\224#\0018\022\037\n\024"
    "APPL_VER_ID_FIX50SP2\020\t\032\005\242\224#\0019B%\n\032org.fix"
    "protocol.componentsB\007Session", 6748);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "session.proto", &protobuf_RegisterTypes);
  HopGrp::default_instance_ = new HopGrp();
  StandardHeader::default_instance_ = new StandardHeader();
  StandardTrailer::default_instance_ = new StandardTrailer();
  HopGrp::default_instance_->InitAsDefaultInstance();
  StandardHeader::default_instance_->InitAsDefaultInstance();
  StandardTrailer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_session_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_session_2eproto {
  StaticDescriptorInitializer_session_2eproto() {
    protobuf_AddDesc_session_2eproto();
  }
} static_descriptor_initializer_session_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTypeEnum_descriptor_;
}
bool MsgTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ApplVerIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplVerIdEnum_descriptor_;
}
bool ApplVerIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HopGrp::kHopCompIdFieldNumber;
const int HopGrp::kHopRefIdFieldNumber;
const int HopGrp::kHopSendingTimeFieldNumber;
#endif  // !_MSC_VER

HopGrp::HopGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Session.HopGrp)
}

void HopGrp::InitAsDefaultInstance() {
}

HopGrp::HopGrp(const HopGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Session.HopGrp)
}

void HopGrp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hop_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hop_ref_id_ = 0u;
  hop_sending_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HopGrp::~HopGrp() {
  // @@protoc_insertion_point(destructor:Session.HopGrp)
  SharedDtor();
}

void HopGrp::SharedDtor() {
  if (hop_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hop_comp_id_;
  }
  if (this != default_instance_) {
  }
}

void HopGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HopGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HopGrp_descriptor_;
}

const HopGrp& HopGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

HopGrp* HopGrp::default_instance_ = NULL;

HopGrp* HopGrp::New() const {
  return new HopGrp;
}

void HopGrp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HopGrp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(hop_sending_time_, hop_ref_id_);
    if (has_hop_comp_id()) {
      if (hop_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hop_comp_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HopGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Session.HopGrp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hop_comp_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hop_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hop_comp_id().data(), this->hop_comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hop_comp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_hop_ref_id;
        break;
      }

      // optional fixed32 hop_ref_id = 2;
      case 2: {
        if (tag == 21) {
         parse_hop_ref_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hop_ref_id_)));
          set_has_hop_ref_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_hop_sending_time;
        break;
      }

      // optional sfixed64 hop_sending_time = 3;
      case 3: {
        if (tag == 25) {
         parse_hop_sending_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &hop_sending_time_)));
          set_has_hop_sending_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Session.HopGrp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Session.HopGrp)
  return false;
#undef DO_
}

void HopGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Session.HopGrp)
  // optional string hop_comp_id = 1;
  if (has_hop_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hop_comp_id().data(), this->hop_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hop_comp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hop_comp_id(), output);
  }

  // optional fixed32 hop_ref_id = 2;
  if (has_hop_ref_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->hop_ref_id(), output);
  }

  // optional sfixed64 hop_sending_time = 3;
  if (has_hop_sending_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->hop_sending_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Session.HopGrp)
}

::google::protobuf::uint8* HopGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.HopGrp)
  // optional string hop_comp_id = 1;
  if (has_hop_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hop_comp_id().data(), this->hop_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hop_comp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hop_comp_id(), target);
  }

  // optional fixed32 hop_ref_id = 2;
  if (has_hop_ref_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->hop_ref_id(), target);
  }

  // optional sfixed64 hop_sending_time = 3;
  if (has_hop_sending_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->hop_sending_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.HopGrp)
  return target;
}

int HopGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hop_comp_id = 1;
    if (has_hop_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hop_comp_id());
    }

    // optional fixed32 hop_ref_id = 2;
    if (has_hop_ref_id()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 hop_sending_time = 3;
    if (has_hop_sending_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HopGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HopGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HopGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HopGrp::MergeFrom(const HopGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hop_comp_id()) {
      set_hop_comp_id(from.hop_comp_id());
    }
    if (from.has_hop_ref_id()) {
      set_hop_ref_id(from.hop_ref_id());
    }
    if (from.has_hop_sending_time()) {
      set_hop_sending_time(from.hop_sending_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HopGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopGrp::CopyFrom(const HopGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopGrp::IsInitialized() const {

  return true;
}

void HopGrp::Swap(HopGrp* other) {
  if (other != this) {
    std::swap(hop_comp_id_, other->hop_comp_id_);
    std::swap(hop_ref_id_, other->hop_ref_id_);
    std::swap(hop_sending_time_, other->hop_sending_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HopGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HopGrp_descriptor_;
  metadata.reflection = HopGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StandardHeader::kDeliverToCompIdFieldNumber;
const int StandardHeader::kDeliverToSubIdFieldNumber;
const int StandardHeader::kMsgSeqNumFieldNumber;
const int StandardHeader::kOnBehalfOfCompIdFieldNumber;
const int StandardHeader::kOnBehalfOfSubIdFieldNumber;
const int StandardHeader::kOrigSendingTimeFieldNumber;
const int StandardHeader::kPossDupFlagFieldNumber;
const int StandardHeader::kPossResendFieldNumber;
const int StandardHeader::kSecureDataFieldNumber;
const int StandardHeader::kSecureDataLenFieldNumber;
const int StandardHeader::kSenderCompIdFieldNumber;
const int StandardHeader::kSenderSubIdFieldNumber;
const int StandardHeader::kSendingTimeFieldNumber;
const int StandardHeader::kTargetCompIdFieldNumber;
const int StandardHeader::kTargetSubIdFieldNumber;
const int StandardHeader::kDeliverToLocationIdFieldNumber;
const int StandardHeader::kOnBehalfOfLocationIdFieldNumber;
const int StandardHeader::kSenderLocationIdFieldNumber;
const int StandardHeader::kTargetLocationIdFieldNumber;
const int StandardHeader::kLastMsgSeqNumProcessedFieldNumber;
const int StandardHeader::kMessageEncodingFieldNumber;
const int StandardHeader::kXmlDataFieldNumber;
const int StandardHeader::kXmlDataLenFieldNumber;
const int StandardHeader::kApplVerIdFieldNumber;
const int StandardHeader::kCstmApplVerIdFieldNumber;
const int StandardHeader::kHopGrpFieldNumber;
const int StandardHeader::kApplExtIdFieldNumber;
#endif  // !_MSC_VER

StandardHeader::StandardHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Session.StandardHeader)
}

void StandardHeader::InitAsDefaultInstance() {
}

StandardHeader::StandardHeader(const StandardHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Session.StandardHeader)
}

void StandardHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  deliver_to_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deliver_to_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_seq_num_ = 0u;
  on_behalf_of_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_behalf_of_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_sending_time_ = GOOGLE_LONGLONG(0);
  poss_dup_flag_ = false;
  poss_resend_ = false;
  secure_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secure_data_len_ = 0u;
  sender_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sending_time_ = GOOGLE_LONGLONG(0);
  target_comp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_sub_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deliver_to_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  on_behalf_of_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_location_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_msg_seq_num_processed_ = 0u;
  message_encoding_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xml_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xml_data_len_ = 0u;
  appl_ver_id_ = 0;
  cstm_appl_ver_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  appl_ext_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandardHeader::~StandardHeader() {
  // @@protoc_insertion_point(destructor:Session.StandardHeader)
  SharedDtor();
}

void StandardHeader::SharedDtor() {
  if (deliver_to_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_comp_id_;
  }
  if (deliver_to_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_sub_id_;
  }
  if (on_behalf_of_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_comp_id_;
  }
  if (on_behalf_of_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_sub_id_;
  }
  if (secure_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secure_data_;
  }
  if (sender_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_comp_id_;
  }
  if (sender_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_sub_id_;
  }
  if (target_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_comp_id_;
  }
  if (target_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_sub_id_;
  }
  if (deliver_to_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete deliver_to_location_id_;
  }
  if (on_behalf_of_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete on_behalf_of_location_id_;
  }
  if (sender_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_location_id_;
  }
  if (target_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_location_id_;
  }
  if (message_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_encoding_;
  }
  if (xml_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xml_data_;
  }
  if (cstm_appl_ver_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cstm_appl_ver_id_;
  }
  if (this != default_instance_) {
  }
}

void StandardHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StandardHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StandardHeader_descriptor_;
}

const StandardHeader& StandardHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

StandardHeader* StandardHeader::default_instance_ = NULL;

StandardHeader* StandardHeader::New() const {
  return new StandardHeader;
}

void StandardHeader::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StandardHeader*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(orig_sending_time_, poss_resend_);
    if (has_deliver_to_comp_id()) {
      if (deliver_to_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deliver_to_comp_id_->clear();
      }
    }
    if (has_deliver_to_sub_id()) {
      if (deliver_to_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deliver_to_sub_id_->clear();
      }
    }
    if (has_on_behalf_of_comp_id()) {
      if (on_behalf_of_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        on_behalf_of_comp_id_->clear();
      }
    }
    if (has_on_behalf_of_sub_id()) {
      if (on_behalf_of_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        on_behalf_of_sub_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_secure_data()) {
      if (secure_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secure_data_->clear();
      }
    }
    secure_data_len_ = 0u;
    if (has_sender_comp_id()) {
      if (sender_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_comp_id_->clear();
      }
    }
    if (has_sender_sub_id()) {
      if (sender_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_sub_id_->clear();
      }
    }
    sending_time_ = GOOGLE_LONGLONG(0);
    if (has_target_comp_id()) {
      if (target_comp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_comp_id_->clear();
      }
    }
    if (has_target_sub_id()) {
      if (target_sub_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_sub_id_->clear();
      }
    }
    if (has_deliver_to_location_id()) {
      if (deliver_to_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        deliver_to_location_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(xml_data_len_, appl_ver_id_);
    if (has_on_behalf_of_location_id()) {
      if (on_behalf_of_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        on_behalf_of_location_id_->clear();
      }
    }
    if (has_sender_location_id()) {
      if (sender_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_location_id_->clear();
      }
    }
    if (has_target_location_id()) {
      if (target_location_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_location_id_->clear();
      }
    }
    last_msg_seq_num_processed_ = 0u;
    if (has_message_encoding()) {
      if (message_encoding_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_encoding_->clear();
      }
    }
    if (has_xml_data()) {
      if (xml_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        xml_data_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 83886080) {
    if (has_cstm_appl_ver_id()) {
      if (cstm_appl_ver_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cstm_appl_ver_id_->clear();
      }
    }
    appl_ext_id_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  hop_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StandardHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Session.StandardHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string deliver_to_comp_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deliver_to_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deliver_to_comp_id().data(), this->deliver_to_comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deliver_to_comp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_deliver_to_sub_id;
        break;
      }

      // optional string deliver_to_sub_id = 2;
      case 2: {
        if (tag == 18) {
         parse_deliver_to_sub_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deliver_to_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deliver_to_sub_id().data(), this->deliver_to_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deliver_to_sub_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_msg_seq_num;
        break;
      }

      // optional fixed32 msg_seq_num = 3;
      case 3: {
        if (tag == 29) {
         parse_msg_seq_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &msg_seq_num_)));
          set_has_msg_seq_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_on_behalf_of_comp_id;
        break;
      }

      // optional string on_behalf_of_comp_id = 4;
      case 4: {
        if (tag == 34) {
         parse_on_behalf_of_comp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_behalf_of_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->on_behalf_of_comp_id().data(), this->on_behalf_of_comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "on_behalf_of_comp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_on_behalf_of_sub_id;
        break;
      }

      // optional string on_behalf_of_sub_id = 5;
      case 5: {
        if (tag == 42) {
         parse_on_behalf_of_sub_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_behalf_of_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->on_behalf_of_sub_id().data(), this->on_behalf_of_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "on_behalf_of_sub_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_orig_sending_time;
        break;
      }

      // optional sfixed64 orig_sending_time = 6;
      case 6: {
        if (tag == 49) {
         parse_orig_sending_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orig_sending_time_)));
          set_has_orig_sending_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_poss_dup_flag;
        break;
      }

      // optional bool poss_dup_flag = 7;
      case 7: {
        if (tag == 56) {
         parse_poss_dup_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poss_dup_flag_)));
          set_has_poss_dup_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_poss_resend;
        break;
      }

      // optional bool poss_resend = 8;
      case 8: {
        if (tag == 64) {
         parse_poss_resend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &poss_resend_)));
          set_has_poss_resend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_secure_data;
        break;
      }

      // optional bytes secure_data = 9;
      case 9: {
        if (tag == 74) {
         parse_secure_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secure_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_secure_data_len;
        break;
      }

      // optional fixed32 secure_data_len = 10;
      case 10: {
        if (tag == 85) {
         parse_secure_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &secure_data_len_)));
          set_has_secure_data_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_sender_comp_id;
        break;
      }

      // optional string sender_comp_id = 11;
      case 11: {
        if (tag == 90) {
         parse_sender_comp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_comp_id().data(), this->sender_comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_comp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sender_sub_id;
        break;
      }

      // optional string sender_sub_id = 12;
      case 12: {
        if (tag == 98) {
         parse_sender_sub_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_sub_id().data(), this->sender_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_sub_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_sending_time;
        break;
      }

      // optional sfixed64 sending_time = 13;
      case 13: {
        if (tag == 105) {
         parse_sending_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &sending_time_)));
          set_has_sending_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_target_comp_id;
        break;
      }

      // optional string target_comp_id = 14;
      case 14: {
        if (tag == 114) {
         parse_target_comp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_comp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_comp_id().data(), this->target_comp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_comp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_target_sub_id;
        break;
      }

      // optional string target_sub_id = 15;
      case 15: {
        if (tag == 122) {
         parse_target_sub_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_sub_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_sub_id().data(), this->target_sub_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_sub_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_deliver_to_location_id;
        break;
      }

      // optional string deliver_to_location_id = 16;
      case 16: {
        if (tag == 130) {
         parse_deliver_to_location_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deliver_to_location_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deliver_to_location_id().data(), this->deliver_to_location_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "deliver_to_location_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_on_behalf_of_location_id;
        break;
      }

      // optional string on_behalf_of_location_id = 17;
      case 17: {
        if (tag == 138) {
         parse_on_behalf_of_location_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_on_behalf_of_location_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->on_behalf_of_location_id().data(), this->on_behalf_of_location_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "on_behalf_of_location_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_sender_location_id;
        break;
      }

      // optional string sender_location_id = 18;
      case 18: {
        if (tag == 146) {
         parse_sender_location_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_location_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_location_id().data(), this->sender_location_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender_location_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_target_location_id;
        break;
      }

      // optional string target_location_id = 19;
      case 19: {
        if (tag == 154) {
         parse_target_location_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_location_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_location_id().data(), this->target_location_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_location_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_last_msg_seq_num_processed;
        break;
      }

      // optional fixed32 last_msg_seq_num_processed = 20;
      case 20: {
        if (tag == 165) {
         parse_last_msg_seq_num_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &last_msg_seq_num_processed_)));
          set_has_last_msg_seq_num_processed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_message_encoding;
        break;
      }

      // optional string message_encoding = 21;
      case 21: {
        if (tag == 170) {
         parse_message_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_encoding()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message_encoding().data(), this->message_encoding().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message_encoding");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_xml_data;
        break;
      }

      // optional bytes xml_data = 22;
      case 22: {
        if (tag == 178) {
         parse_xml_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xml_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_xml_data_len;
        break;
      }

      // optional fixed32 xml_data_len = 23;
      case 23: {
        if (tag == 189) {
         parse_xml_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &xml_data_len_)));
          set_has_xml_data_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_appl_ver_id;
        break;
      }

      // optional .Session.ApplVerIdEnum appl_ver_id = 24;
      case 24: {
        if (tag == 192) {
         parse_appl_ver_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Session::ApplVerIdEnum_IsValid(value)) {
            set_appl_ver_id(static_cast< ::Session::ApplVerIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_cstm_appl_ver_id;
        break;
      }

      // optional string cstm_appl_ver_id = 25;
      case 25: {
        if (tag == 202) {
         parse_cstm_appl_ver_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cstm_appl_ver_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cstm_appl_ver_id().data(), this->cstm_appl_ver_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cstm_appl_ver_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_hop_grp;
        break;
      }

      // repeated .Session.HopGrp hop_grp = 26;
      case 26: {
        if (tag == 210) {
         parse_hop_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hop_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_hop_grp;
        if (input->ExpectTag(217)) goto parse_appl_ext_id;
        break;
      }

      // optional sfixed64 appl_ext_id = 27;
      case 27: {
        if (tag == 217) {
         parse_appl_ext_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &appl_ext_id_)));
          set_has_appl_ext_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Session.StandardHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Session.StandardHeader)
  return false;
#undef DO_
}

void StandardHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Session.StandardHeader)
  // optional string deliver_to_comp_id = 1;
  if (has_deliver_to_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_comp_id().data(), this->deliver_to_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_comp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deliver_to_comp_id(), output);
  }

  // optional string deliver_to_sub_id = 2;
  if (has_deliver_to_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_sub_id().data(), this->deliver_to_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_sub_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deliver_to_sub_id(), output);
  }

  // optional fixed32 msg_seq_num = 3;
  if (has_msg_seq_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->msg_seq_num(), output);
  }

  // optional string on_behalf_of_comp_id = 4;
  if (has_on_behalf_of_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_comp_id().data(), this->on_behalf_of_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_comp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->on_behalf_of_comp_id(), output);
  }

  // optional string on_behalf_of_sub_id = 5;
  if (has_on_behalf_of_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_sub_id().data(), this->on_behalf_of_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_sub_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->on_behalf_of_sub_id(), output);
  }

  // optional sfixed64 orig_sending_time = 6;
  if (has_orig_sending_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->orig_sending_time(), output);
  }

  // optional bool poss_dup_flag = 7;
  if (has_poss_dup_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->poss_dup_flag(), output);
  }

  // optional bool poss_resend = 8;
  if (has_poss_resend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->poss_resend(), output);
  }

  // optional bytes secure_data = 9;
  if (has_secure_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->secure_data(), output);
  }

  // optional fixed32 secure_data_len = 10;
  if (has_secure_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->secure_data_len(), output);
  }

  // optional string sender_comp_id = 11;
  if (has_sender_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_comp_id().data(), this->sender_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_comp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sender_comp_id(), output);
  }

  // optional string sender_sub_id = 12;
  if (has_sender_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_sub_id().data(), this->sender_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_sub_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->sender_sub_id(), output);
  }

  // optional sfixed64 sending_time = 13;
  if (has_sending_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->sending_time(), output);
  }

  // optional string target_comp_id = 14;
  if (has_target_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_comp_id().data(), this->target_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_comp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->target_comp_id(), output);
  }

  // optional string target_sub_id = 15;
  if (has_target_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_sub_id().data(), this->target_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_sub_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->target_sub_id(), output);
  }

  // optional string deliver_to_location_id = 16;
  if (has_deliver_to_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_location_id().data(), this->deliver_to_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->deliver_to_location_id(), output);
  }

  // optional string on_behalf_of_location_id = 17;
  if (has_on_behalf_of_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_location_id().data(), this->on_behalf_of_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->on_behalf_of_location_id(), output);
  }

  // optional string sender_location_id = 18;
  if (has_sender_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_location_id().data(), this->sender_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->sender_location_id(), output);
  }

  // optional string target_location_id = 19;
  if (has_target_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_location_id().data(), this->target_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_location_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->target_location_id(), output);
  }

  // optional fixed32 last_msg_seq_num_processed = 20;
  if (has_last_msg_seq_num_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->last_msg_seq_num_processed(), output);
  }

  // optional string message_encoding = 21;
  if (has_message_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_encoding().data(), this->message_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message_encoding");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->message_encoding(), output);
  }

  // optional bytes xml_data = 22;
  if (has_xml_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      22, this->xml_data(), output);
  }

  // optional fixed32 xml_data_len = 23;
  if (has_xml_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->xml_data_len(), output);
  }

  // optional .Session.ApplVerIdEnum appl_ver_id = 24;
  if (has_appl_ver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->appl_ver_id(), output);
  }

  // optional string cstm_appl_ver_id = 25;
  if (has_cstm_appl_ver_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cstm_appl_ver_id().data(), this->cstm_appl_ver_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cstm_appl_ver_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->cstm_appl_ver_id(), output);
  }

  // repeated .Session.HopGrp hop_grp = 26;
  for (int i = 0; i < this->hop_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->hop_grp(i), output);
  }

  // optional sfixed64 appl_ext_id = 27;
  if (has_appl_ext_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(27, this->appl_ext_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Session.StandardHeader)
}

::google::protobuf::uint8* StandardHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.StandardHeader)
  // optional string deliver_to_comp_id = 1;
  if (has_deliver_to_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_comp_id().data(), this->deliver_to_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_comp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deliver_to_comp_id(), target);
  }

  // optional string deliver_to_sub_id = 2;
  if (has_deliver_to_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_sub_id().data(), this->deliver_to_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_sub_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deliver_to_sub_id(), target);
  }

  // optional fixed32 msg_seq_num = 3;
  if (has_msg_seq_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->msg_seq_num(), target);
  }

  // optional string on_behalf_of_comp_id = 4;
  if (has_on_behalf_of_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_comp_id().data(), this->on_behalf_of_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_comp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->on_behalf_of_comp_id(), target);
  }

  // optional string on_behalf_of_sub_id = 5;
  if (has_on_behalf_of_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_sub_id().data(), this->on_behalf_of_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_sub_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->on_behalf_of_sub_id(), target);
  }

  // optional sfixed64 orig_sending_time = 6;
  if (has_orig_sending_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->orig_sending_time(), target);
  }

  // optional bool poss_dup_flag = 7;
  if (has_poss_dup_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->poss_dup_flag(), target);
  }

  // optional bool poss_resend = 8;
  if (has_poss_resend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->poss_resend(), target);
  }

  // optional bytes secure_data = 9;
  if (has_secure_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->secure_data(), target);
  }

  // optional fixed32 secure_data_len = 10;
  if (has_secure_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->secure_data_len(), target);
  }

  // optional string sender_comp_id = 11;
  if (has_sender_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_comp_id().data(), this->sender_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_comp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->sender_comp_id(), target);
  }

  // optional string sender_sub_id = 12;
  if (has_sender_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_sub_id().data(), this->sender_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_sub_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sender_sub_id(), target);
  }

  // optional sfixed64 sending_time = 13;
  if (has_sending_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->sending_time(), target);
  }

  // optional string target_comp_id = 14;
  if (has_target_comp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_comp_id().data(), this->target_comp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_comp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->target_comp_id(), target);
  }

  // optional string target_sub_id = 15;
  if (has_target_sub_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_sub_id().data(), this->target_sub_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_sub_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->target_sub_id(), target);
  }

  // optional string deliver_to_location_id = 16;
  if (has_deliver_to_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deliver_to_location_id().data(), this->deliver_to_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "deliver_to_location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->deliver_to_location_id(), target);
  }

  // optional string on_behalf_of_location_id = 17;
  if (has_on_behalf_of_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->on_behalf_of_location_id().data(), this->on_behalf_of_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "on_behalf_of_location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->on_behalf_of_location_id(), target);
  }

  // optional string sender_location_id = 18;
  if (has_sender_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_location_id().data(), this->sender_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender_location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->sender_location_id(), target);
  }

  // optional string target_location_id = 19;
  if (has_target_location_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_location_id().data(), this->target_location_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_location_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->target_location_id(), target);
  }

  // optional fixed32 last_msg_seq_num_processed = 20;
  if (has_last_msg_seq_num_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->last_msg_seq_num_processed(), target);
  }

  // optional string message_encoding = 21;
  if (has_message_encoding()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message_encoding().data(), this->message_encoding().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message_encoding");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->message_encoding(), target);
  }

  // optional bytes xml_data = 22;
  if (has_xml_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        22, this->xml_data(), target);
  }

  // optional fixed32 xml_data_len = 23;
  if (has_xml_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->xml_data_len(), target);
  }

  // optional .Session.ApplVerIdEnum appl_ver_id = 24;
  if (has_appl_ver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->appl_ver_id(), target);
  }

  // optional string cstm_appl_ver_id = 25;
  if (has_cstm_appl_ver_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cstm_appl_ver_id().data(), this->cstm_appl_ver_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cstm_appl_ver_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->cstm_appl_ver_id(), target);
  }

  // repeated .Session.HopGrp hop_grp = 26;
  for (int i = 0; i < this->hop_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->hop_grp(i), target);
  }

  // optional sfixed64 appl_ext_id = 27;
  if (has_appl_ext_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(27, this->appl_ext_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.StandardHeader)
  return target;
}

int StandardHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string deliver_to_comp_id = 1;
    if (has_deliver_to_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deliver_to_comp_id());
    }

    // optional string deliver_to_sub_id = 2;
    if (has_deliver_to_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deliver_to_sub_id());
    }

    // optional fixed32 msg_seq_num = 3;
    if (has_msg_seq_num()) {
      total_size += 1 + 4;
    }

    // optional string on_behalf_of_comp_id = 4;
    if (has_on_behalf_of_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_behalf_of_comp_id());
    }

    // optional string on_behalf_of_sub_id = 5;
    if (has_on_behalf_of_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_behalf_of_sub_id());
    }

    // optional sfixed64 orig_sending_time = 6;
    if (has_orig_sending_time()) {
      total_size += 1 + 8;
    }

    // optional bool poss_dup_flag = 7;
    if (has_poss_dup_flag()) {
      total_size += 1 + 1;
    }

    // optional bool poss_resend = 8;
    if (has_poss_resend()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes secure_data = 9;
    if (has_secure_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secure_data());
    }

    // optional fixed32 secure_data_len = 10;
    if (has_secure_data_len()) {
      total_size += 1 + 4;
    }

    // optional string sender_comp_id = 11;
    if (has_sender_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_comp_id());
    }

    // optional string sender_sub_id = 12;
    if (has_sender_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_sub_id());
    }

    // optional sfixed64 sending_time = 13;
    if (has_sending_time()) {
      total_size += 1 + 8;
    }

    // optional string target_comp_id = 14;
    if (has_target_comp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_comp_id());
    }

    // optional string target_sub_id = 15;
    if (has_target_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_sub_id());
    }

    // optional string deliver_to_location_id = 16;
    if (has_deliver_to_location_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deliver_to_location_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string on_behalf_of_location_id = 17;
    if (has_on_behalf_of_location_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->on_behalf_of_location_id());
    }

    // optional string sender_location_id = 18;
    if (has_sender_location_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_location_id());
    }

    // optional string target_location_id = 19;
    if (has_target_location_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_location_id());
    }

    // optional fixed32 last_msg_seq_num_processed = 20;
    if (has_last_msg_seq_num_processed()) {
      total_size += 2 + 4;
    }

    // optional string message_encoding = 21;
    if (has_message_encoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message_encoding());
    }

    // optional bytes xml_data = 22;
    if (has_xml_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xml_data());
    }

    // optional fixed32 xml_data_len = 23;
    if (has_xml_data_len()) {
      total_size += 2 + 4;
    }

    // optional .Session.ApplVerIdEnum appl_ver_id = 24;
    if (has_appl_ver_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->appl_ver_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string cstm_appl_ver_id = 25;
    if (has_cstm_appl_ver_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cstm_appl_ver_id());
    }

    // optional sfixed64 appl_ext_id = 27;
    if (has_appl_ext_id()) {
      total_size += 2 + 8;
    }

  }
  // repeated .Session.HopGrp hop_grp = 26;
  total_size += 2 * this->hop_grp_size();
  for (int i = 0; i < this->hop_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hop_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StandardHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StandardHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StandardHeader::MergeFrom(const StandardHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  hop_grp_.MergeFrom(from.hop_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deliver_to_comp_id()) {
      set_deliver_to_comp_id(from.deliver_to_comp_id());
    }
    if (from.has_deliver_to_sub_id()) {
      set_deliver_to_sub_id(from.deliver_to_sub_id());
    }
    if (from.has_msg_seq_num()) {
      set_msg_seq_num(from.msg_seq_num());
    }
    if (from.has_on_behalf_of_comp_id()) {
      set_on_behalf_of_comp_id(from.on_behalf_of_comp_id());
    }
    if (from.has_on_behalf_of_sub_id()) {
      set_on_behalf_of_sub_id(from.on_behalf_of_sub_id());
    }
    if (from.has_orig_sending_time()) {
      set_orig_sending_time(from.orig_sending_time());
    }
    if (from.has_poss_dup_flag()) {
      set_poss_dup_flag(from.poss_dup_flag());
    }
    if (from.has_poss_resend()) {
      set_poss_resend(from.poss_resend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_secure_data()) {
      set_secure_data(from.secure_data());
    }
    if (from.has_secure_data_len()) {
      set_secure_data_len(from.secure_data_len());
    }
    if (from.has_sender_comp_id()) {
      set_sender_comp_id(from.sender_comp_id());
    }
    if (from.has_sender_sub_id()) {
      set_sender_sub_id(from.sender_sub_id());
    }
    if (from.has_sending_time()) {
      set_sending_time(from.sending_time());
    }
    if (from.has_target_comp_id()) {
      set_target_comp_id(from.target_comp_id());
    }
    if (from.has_target_sub_id()) {
      set_target_sub_id(from.target_sub_id());
    }
    if (from.has_deliver_to_location_id()) {
      set_deliver_to_location_id(from.deliver_to_location_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_on_behalf_of_location_id()) {
      set_on_behalf_of_location_id(from.on_behalf_of_location_id());
    }
    if (from.has_sender_location_id()) {
      set_sender_location_id(from.sender_location_id());
    }
    if (from.has_target_location_id()) {
      set_target_location_id(from.target_location_id());
    }
    if (from.has_last_msg_seq_num_processed()) {
      set_last_msg_seq_num_processed(from.last_msg_seq_num_processed());
    }
    if (from.has_message_encoding()) {
      set_message_encoding(from.message_encoding());
    }
    if (from.has_xml_data()) {
      set_xml_data(from.xml_data());
    }
    if (from.has_xml_data_len()) {
      set_xml_data_len(from.xml_data_len());
    }
    if (from.has_appl_ver_id()) {
      set_appl_ver_id(from.appl_ver_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cstm_appl_ver_id()) {
      set_cstm_appl_ver_id(from.cstm_appl_ver_id());
    }
    if (from.has_appl_ext_id()) {
      set_appl_ext_id(from.appl_ext_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StandardHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardHeader::CopyFrom(const StandardHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardHeader::IsInitialized() const {

  return true;
}

void StandardHeader::Swap(StandardHeader* other) {
  if (other != this) {
    std::swap(deliver_to_comp_id_, other->deliver_to_comp_id_);
    std::swap(deliver_to_sub_id_, other->deliver_to_sub_id_);
    std::swap(msg_seq_num_, other->msg_seq_num_);
    std::swap(on_behalf_of_comp_id_, other->on_behalf_of_comp_id_);
    std::swap(on_behalf_of_sub_id_, other->on_behalf_of_sub_id_);
    std::swap(orig_sending_time_, other->orig_sending_time_);
    std::swap(poss_dup_flag_, other->poss_dup_flag_);
    std::swap(poss_resend_, other->poss_resend_);
    std::swap(secure_data_, other->secure_data_);
    std::swap(secure_data_len_, other->secure_data_len_);
    std::swap(sender_comp_id_, other->sender_comp_id_);
    std::swap(sender_sub_id_, other->sender_sub_id_);
    std::swap(sending_time_, other->sending_time_);
    std::swap(target_comp_id_, other->target_comp_id_);
    std::swap(target_sub_id_, other->target_sub_id_);
    std::swap(deliver_to_location_id_, other->deliver_to_location_id_);
    std::swap(on_behalf_of_location_id_, other->on_behalf_of_location_id_);
    std::swap(sender_location_id_, other->sender_location_id_);
    std::swap(target_location_id_, other->target_location_id_);
    std::swap(last_msg_seq_num_processed_, other->last_msg_seq_num_processed_);
    std::swap(message_encoding_, other->message_encoding_);
    std::swap(xml_data_, other->xml_data_);
    std::swap(xml_data_len_, other->xml_data_len_);
    std::swap(appl_ver_id_, other->appl_ver_id_);
    std::swap(cstm_appl_ver_id_, other->cstm_appl_ver_id_);
    hop_grp_.Swap(&other->hop_grp_);
    std::swap(appl_ext_id_, other->appl_ext_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StandardHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StandardHeader_descriptor_;
  metadata.reflection = StandardHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StandardTrailer::kSignatureFieldNumber;
const int StandardTrailer::kSignatureLengthFieldNumber;
#endif  // !_MSC_VER

StandardTrailer::StandardTrailer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Session.StandardTrailer)
}

void StandardTrailer::InitAsDefaultInstance() {
}

StandardTrailer::StandardTrailer(const StandardTrailer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Session.StandardTrailer)
}

void StandardTrailer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StandardTrailer::~StandardTrailer() {
  // @@protoc_insertion_point(destructor:Session.StandardTrailer)
  SharedDtor();
}

void StandardTrailer::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void StandardTrailer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StandardTrailer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StandardTrailer_descriptor_;
}

const StandardTrailer& StandardTrailer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_session_2eproto();
  return *default_instance_;
}

StandardTrailer* StandardTrailer::default_instance_ = NULL;

StandardTrailer* StandardTrailer::New() const {
  return new StandardTrailer;
}

void StandardTrailer::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
    signature_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StandardTrailer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Session.StandardTrailer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes signature = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_signature_length;
        break;
      }

      // optional fixed32 signature_length = 2;
      case 2: {
        if (tag == 21) {
         parse_signature_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &signature_length_)));
          set_has_signature_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Session.StandardTrailer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Session.StandardTrailer)
  return false;
#undef DO_
}

void StandardTrailer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Session.StandardTrailer)
  // optional bytes signature = 1;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // optional fixed32 signature_length = 2;
  if (has_signature_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->signature_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Session.StandardTrailer)
}

::google::protobuf::uint8* StandardTrailer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Session.StandardTrailer)
  // optional bytes signature = 1;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signature(), target);
  }

  // optional fixed32 signature_length = 2;
  if (has_signature_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->signature_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Session.StandardTrailer)
  return target;
}

int StandardTrailer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional fixed32 signature_length = 2;
    if (has_signature_length()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StandardTrailer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StandardTrailer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StandardTrailer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StandardTrailer::MergeFrom(const StandardTrailer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_signature_length()) {
      set_signature_length(from.signature_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StandardTrailer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StandardTrailer::CopyFrom(const StandardTrailer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StandardTrailer::IsInitialized() const {

  return true;
}

void StandardTrailer::Swap(StandardTrailer* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(signature_length_, other->signature_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StandardTrailer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StandardTrailer_descriptor_;
  metadata.reflection = StandardTrailer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Session

// @@protoc_insertion_point(global_scope)
