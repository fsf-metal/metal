// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: singlegeneralorderhandling.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "singlegeneralorderhandling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SingleGeneralOrderHandling {

namespace {

const ::google::protobuf::Descriptor* AcctIdSourceUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcctIdSourceUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettlTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettlTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* TargetStrategyUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TargetStrategyUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewOrderSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewOrderSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCancelReplaceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCancelReplaceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCancelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCancelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CxlRejReasonUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CxlRejReasonUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderCancelReject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderCancelReject_reflection_ = NULL;
const ::google::protobuf::Descriptor* FillsGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FillsGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdRejReasonUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdRejReasonUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecRestatementReasonUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecRestatementReasonUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderStatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionAcknowledgement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionAcknowledgement_reflection_ = NULL;
const ::google::protobuf::Descriptor* DontKnowTrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DontKnowTrade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AcctIdSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AccountTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DayBookingInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BookingUnitEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PreallocMethodEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SettlTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CashMarginEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ClearingFeeIndicatorEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HandlInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExDestinationIdSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessCodeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SideEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LocateReqdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QtyTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrdTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriceProtectionScopeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SolicitedFlagEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GtBookingInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderCapacityEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderRestrictionsEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CustOrderCapacityEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ForexReqEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BookingTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PositionEffectEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CoveredOrUncoveredEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TargetStrategyEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CancellationRightsEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MoneyLaunderingStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CustOrderHandlingInstEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderHandlingInstSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RefOrderIdSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrdStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WorkingIndicatorEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CxlRejResponseToEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CxlRejReasonEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastRptRequestedEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CrossTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrdRejReasonEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecRestatementReasonEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderCategoryEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LotTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AggressorIndicatorEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastCapacityEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastFragmentEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportToExchEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradedFlatSwitchEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SettlCurrFxRateCalcEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MultiLegReportingTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecPriceTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PriorityIndicatorEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastLiquidityIndEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExecAckStatusEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DKReasonEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_singlegeneralorderhandling_2eproto() {
  protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "singlegeneralorderhandling.proto");
  GOOGLE_CHECK(file != NULL);
  AcctIdSourceUnion_descriptor_ = file->message_type(0);
  static const int AcctIdSourceUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctIdSourceUnion, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctIdSourceUnion, acct_id_source_sfixed64_),
  };
  AcctIdSourceUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcctIdSourceUnion_descriptor_,
      AcctIdSourceUnion::default_instance_,
      AcctIdSourceUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctIdSourceUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctIdSourceUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcctIdSourceUnion));
  SettlTypeUnion_descriptor_ = file->message_type(1);
  static const int SettlTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlTypeUnion, settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlTypeUnion, settl_type_tenor_),
  };
  SettlTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettlTypeUnion_descriptor_,
      SettlTypeUnion::default_instance_,
      SettlTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettlTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettlTypeUnion));
  TargetStrategyUnion_descriptor_ = file->message_type(2);
  static const int TargetStrategyUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetStrategyUnion, target_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetStrategyUnion, target_strategy_sfixed64_),
  };
  TargetStrategyUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TargetStrategyUnion_descriptor_,
      TargetStrategyUnion::default_instance_,
      TargetStrategyUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetStrategyUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TargetStrategyUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TargetStrategyUnion));
  NewOrderSingle_descriptor_ = file->message_type(3);
  static const int NewOrderSingle_offsets_[104] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ex_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, exec_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, handl_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ioi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, max_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, max_floor_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, min_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, min_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, process_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, settl_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, stop_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, stop_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, forex_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, locate_reqd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, prev_close_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, prev_close_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, quote_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, settl_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, covered_or_uncovered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, max_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, max_show_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_qty2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_qty2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, position_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, settl_date2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, compliance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, effective_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, expire_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, gt_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, solicited_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, booking_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cancellation_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cash_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, clearing_fee_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, commission_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cust_order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, day_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, designation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, money_laundering_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_restrictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, prealloc_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, regist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, trade_origination_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, booking_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cust_directed_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, cust_order_handling_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, discretion_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, display_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ex_destination_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, manual_order_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, match_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, match_increment_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, max_price_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, order_handling_inst_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, participation_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, participation_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, peg_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, pre_alloc_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, pre_trade_anonymity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, price_protection_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, qty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, received_dept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ref_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, ref_order_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, strategy_parameters_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, target_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, target_strategy_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, trd_reg_timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, trdg_ses_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, triggering_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, und_instrmt_grp_),
  };
  NewOrderSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewOrderSingle_descriptor_,
      NewOrderSingle::default_instance_,
      NewOrderSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewOrderSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewOrderSingle));
  OrderCancelReplaceRequest_descriptor_ = file->message_type(4);
  static const int OrderCancelReplaceRequest_offsets_[100] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, exec_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, handl_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, orig_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, settl_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, stop_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, stop_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, ex_destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, max_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, max_floor_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, min_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, min_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, forex_req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, settl_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, covered_or_uncovered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, locate_reqd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, max_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, max_show_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_qty2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_qty2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, position_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, settl_date2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, compliance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, effective_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, expire_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, gt_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, solicited_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, booking_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cancellation_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cash_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, clearing_fee_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, commission_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cust_order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, day_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, designation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, money_laundering_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_restrictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, orig_ord_mod_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, prealloc_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, regist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, trade_origination_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, booking_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cust_directed_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, cust_order_handling_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, discretion_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, display_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, ex_destination_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, manual_order_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, match_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, match_increment_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, max_price_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, order_handling_inst_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, participation_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, participation_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, peg_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, pre_alloc_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, pre_trade_anonymity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, price_protection_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, qty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, received_dept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, strategy_parameters_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, target_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, target_strategy_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, trd_reg_timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, trdg_ses_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, triggering_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, und_instrmt_grp_),
  };
  OrderCancelReplaceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCancelReplaceRequest_descriptor_,
      OrderCancelReplaceRequest::default_instance_,
      OrderCancelReplaceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReplaceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCancelReplaceRequest));
  OrderCancelRequest_descriptor_ = file->message_type(5);
  static const int OrderCancelRequest_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, orig_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, compliance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, orig_ord_mod_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, und_instrmt_grp_),
  };
  OrderCancelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCancelRequest_descriptor_,
      OrderCancelRequest::default_instance_,
      OrderCancelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCancelRequest));
  CxlRejReasonUnion_descriptor_ = file->message_type(6);
  static const int CxlRejReasonUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CxlRejReasonUnion, cxl_rej_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CxlRejReasonUnion, cxl_rej_reason_sfixed64_),
  };
  CxlRejReasonUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CxlRejReasonUnion_descriptor_,
      CxlRejReasonUnion::default_instance_,
      CxlRejReasonUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CxlRejReasonUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CxlRejReasonUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CxlRejReasonUnion));
  OrderCancelReject_descriptor_ = file->message_type(7);
  static const int OrderCancelReject_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, cxl_rej_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, ord_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, orig_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, secondary_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, cxl_rej_response_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, orig_ord_mod_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, trade_origination_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, working_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, trade_date_),
  };
  OrderCancelReject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderCancelReject_descriptor_,
      OrderCancelReject::default_instance_,
      OrderCancelReject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderCancelReject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderCancelReject));
  FillsGrp_descriptor_ = file->message_type(8);
  static const int FillsGrp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, nested_parties4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, fill_liquidity_ind_),
  };
  FillsGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FillsGrp_descriptor_,
      FillsGrp::default_instance_,
      FillsGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FillsGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FillsGrp));
  OrdRejReasonUnion_descriptor_ = file->message_type(9);
  static const int OrdRejReasonUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdRejReasonUnion, ord_rej_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdRejReasonUnion, ord_rej_reason_sfixed64_),
  };
  OrdRejReasonUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrdRejReasonUnion_descriptor_,
      OrdRejReasonUnion::default_instance_,
      OrdRejReasonUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdRejReasonUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdRejReasonUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrdRejReasonUnion));
  ExecRestatementReasonUnion_descriptor_ = file->message_type(10);
  static const int ExecRestatementReasonUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecRestatementReasonUnion, exec_restatement_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecRestatementReasonUnion, exec_restatement_reason_sfixed64_),
  };
  ExecRestatementReasonUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecRestatementReasonUnion_descriptor_,
      ExecRestatementReasonUnion::default_instance_,
      ExecRestatementReasonUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecRestatementReasonUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecRestatementReasonUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecRestatementReasonUnion));
  ExecutionReport_descriptor_ = file->message_type(11);
  static const int ExecutionReport_offsets_[213] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, avg_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cum_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_mkt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, ord_rej_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, ord_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, ord_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, stop_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, stop_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, time_in_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trade_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, transact_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, report_to_exch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, net_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, net_money_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_curr_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_curr_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_forward_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_forward_points_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_spot_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_spot_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, leaves_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, leaves_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, orig_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, secondary_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_curr_fx_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_curr_fx_rate_calc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, compliance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_avg_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_avg_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_cum_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_order_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_order_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, effective_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_restatement_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, expire_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, gt_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, gross_trade_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, gross_trade_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, handl_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, max_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, max_floor_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, max_show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, max_show_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, min_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, min_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, multi_leg_reporting_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_qty2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_qty2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, position_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, settl_date2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, solicited_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, account_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, accrued_interest_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, accrued_interest_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, accrued_interest_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, accrued_interest_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, basis_feature_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, basis_feature_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, basis_feature_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, booking_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cancellation_rights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cash_margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, clearing_fee_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, commission_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, concession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, concession_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cross_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cross_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cust_order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, day_booking_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, designation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, ex_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_price_adjustment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, exec_valuation_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_forward_points2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_forward_points2_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, money_laundering_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, num_days_interest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_restrictions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, orig_cross_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, prealloc_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_improvement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_improvement_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, priority_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, regist_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, secondary_exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, total_takedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, total_takedown_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trade_origination_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, traded_flat_switch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trans_bkd_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, underlying_last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, underlying_last_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, underlying_last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, underlying_last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, working_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, aggressor_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, booking_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, calculated_ccy_last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, calculated_ccy_last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cont_amt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, contra_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, copy_msg_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cust_directed_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, cust_order_handling_inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, discretion_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, discretion_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, discretion_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, display_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, end_accrued_interest_amt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, end_accrued_interest_amt_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, end_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, end_cash_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, host_cross_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, instrmt_leg_exec_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, interest_at_maturity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, interest_at_maturity_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_liquidity_ind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_par_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_par_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_rpt_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_swap_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_swap_points_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, lot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, manual_order_indicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, mass_status_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, match_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, match_increment_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, max_price_levels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, misc_fees_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, ord_status_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, order_handling_inst_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, participation_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, participation_rate_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, peg_instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pegged_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pegged_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pegged_ref_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pegged_ref_price_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pre_trade_anonymity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_protection_scope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, qty_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, quote_resp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, received_dept_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, start_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, start_cash_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, strategy_parameters_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, target_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, target_strategy_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, target_strategy_performance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, time_bracket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, tot_num_reports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trd_reg_timestamps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, triggering_instruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, alloc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, application_sequence_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, dividend_yield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, dividend_yield_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, fills_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, last_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, pre_alloc_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, price_delta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, risk_free_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, time_to_expiration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, tot_no_fills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, trd_match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, volatility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, rate_source_),
  };
  ExecutionReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionReport_descriptor_,
      ExecutionReport::default_instance_,
      ExecutionReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionReport));
  OrderStatusRequest_descriptor_ = file->message_type(12);
  static const int OrderStatusRequest_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, cl_ord_link_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, parties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, secondary_cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, acct_id_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, ord_status_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, und_instrmt_grp_),
  };
  OrderStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderStatusRequest_descriptor_,
      OrderStatusRequest::default_instance_,
      OrderStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderStatusRequest));
  ExecutionAcknowledgement_descriptor_ = file->message_type(13);
  static const int ExecutionAcknowledgement_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, avg_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, cl_ord_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, cum_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, cum_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, dkreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, exec_ack_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, last_par_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, last_par_px_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, secondary_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, und_instrmt_grp_),
  };
  ExecutionAcknowledgement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionAcknowledgement_descriptor_,
      ExecutionAcknowledgement::default_instance_,
      ExecutionAcknowledgement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionAcknowledgement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionAcknowledgement));
  DontKnowTrade_descriptor_ = file->message_type(14);
  static const int DontKnowTrade_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, dkreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, exec_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, last_px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, last_qty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, last_qty_exponent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, order_qty_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, secondary_order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, und_instrmt_grp_),
  };
  DontKnowTrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DontKnowTrade_descriptor_,
      DontKnowTrade::default_instance_,
      DontKnowTrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontKnowTrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DontKnowTrade));
  AcctIdSourceEnum_descriptor_ = file->enum_type(0);
  AccountTypeEnum_descriptor_ = file->enum_type(1);
  DayBookingInstEnum_descriptor_ = file->enum_type(2);
  BookingUnitEnum_descriptor_ = file->enum_type(3);
  PreallocMethodEnum_descriptor_ = file->enum_type(4);
  SettlTypeEnum_descriptor_ = file->enum_type(5);
  CashMarginEnum_descriptor_ = file->enum_type(6);
  ClearingFeeIndicatorEnum_descriptor_ = file->enum_type(7);
  HandlInstEnum_descriptor_ = file->enum_type(8);
  ExecInstEnum_descriptor_ = file->enum_type(9);
  ExDestinationIdSourceEnum_descriptor_ = file->enum_type(10);
  ProcessCodeEnum_descriptor_ = file->enum_type(11);
  SideEnum_descriptor_ = file->enum_type(12);
  LocateReqdEnum_descriptor_ = file->enum_type(13);
  QtyTypeEnum_descriptor_ = file->enum_type(14);
  OrdTypeEnum_descriptor_ = file->enum_type(15);
  PriceTypeEnum_descriptor_ = file->enum_type(16);
  PriceProtectionScopeEnum_descriptor_ = file->enum_type(17);
  SolicitedFlagEnum_descriptor_ = file->enum_type(18);
  TimeInForceEnum_descriptor_ = file->enum_type(19);
  GtBookingInstEnum_descriptor_ = file->enum_type(20);
  OrderCapacityEnum_descriptor_ = file->enum_type(21);
  OrderRestrictionsEnum_descriptor_ = file->enum_type(22);
  CustOrderCapacityEnum_descriptor_ = file->enum_type(23);
  ForexReqEnum_descriptor_ = file->enum_type(24);
  BookingTypeEnum_descriptor_ = file->enum_type(25);
  PositionEffectEnum_descriptor_ = file->enum_type(26);
  CoveredOrUncoveredEnum_descriptor_ = file->enum_type(27);
  TargetStrategyEnum_descriptor_ = file->enum_type(28);
  CancellationRightsEnum_descriptor_ = file->enum_type(29);
  MoneyLaunderingStatusEnum_descriptor_ = file->enum_type(30);
  CustOrderHandlingInstEnum_descriptor_ = file->enum_type(31);
  OrderHandlingInstSourceEnum_descriptor_ = file->enum_type(32);
  RefOrderIdSourceEnum_descriptor_ = file->enum_type(33);
  OrdStatusEnum_descriptor_ = file->enum_type(34);
  WorkingIndicatorEnum_descriptor_ = file->enum_type(35);
  CxlRejResponseToEnum_descriptor_ = file->enum_type(36);
  CxlRejReasonEnum_descriptor_ = file->enum_type(37);
  LastRptRequestedEnum_descriptor_ = file->enum_type(38);
  CrossTypeEnum_descriptor_ = file->enum_type(39);
  ExecTypeEnum_descriptor_ = file->enum_type(40);
  OrdRejReasonEnum_descriptor_ = file->enum_type(41);
  ExecRestatementReasonEnum_descriptor_ = file->enum_type(42);
  MatchTypeEnum_descriptor_ = file->enum_type(43);
  OrderCategoryEnum_descriptor_ = file->enum_type(44);
  LotTypeEnum_descriptor_ = file->enum_type(45);
  AggressorIndicatorEnum_descriptor_ = file->enum_type(46);
  TradingSessionIdEnum_descriptor_ = file->enum_type(47);
  TradingSessionSubIdEnum_descriptor_ = file->enum_type(48);
  LastCapacityEnum_descriptor_ = file->enum_type(49);
  LastFragmentEnum_descriptor_ = file->enum_type(50);
  ReportToExchEnum_descriptor_ = file->enum_type(51);
  TradedFlatSwitchEnum_descriptor_ = file->enum_type(52);
  SettlCurrFxRateCalcEnum_descriptor_ = file->enum_type(53);
  MultiLegReportingTypeEnum_descriptor_ = file->enum_type(54);
  ExecPriceTypeEnum_descriptor_ = file->enum_type(55);
  PriorityIndicatorEnum_descriptor_ = file->enum_type(56);
  LastLiquidityIndEnum_descriptor_ = file->enum_type(57);
  ExecAckStatusEnum_descriptor_ = file->enum_type(58);
  DKReasonEnum_descriptor_ = file->enum_type(59);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_singlegeneralorderhandling_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcctIdSourceUnion_descriptor_, &AcctIdSourceUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettlTypeUnion_descriptor_, &SettlTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TargetStrategyUnion_descriptor_, &TargetStrategyUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewOrderSingle_descriptor_, &NewOrderSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCancelReplaceRequest_descriptor_, &OrderCancelReplaceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCancelRequest_descriptor_, &OrderCancelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CxlRejReasonUnion_descriptor_, &CxlRejReasonUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderCancelReject_descriptor_, &OrderCancelReject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FillsGrp_descriptor_, &FillsGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrdRejReasonUnion_descriptor_, &OrdRejReasonUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecRestatementReasonUnion_descriptor_, &ExecRestatementReasonUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionReport_descriptor_, &ExecutionReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderStatusRequest_descriptor_, &OrderStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionAcknowledgement_descriptor_, &ExecutionAcknowledgement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DontKnowTrade_descriptor_, &DontKnowTrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_singlegeneralorderhandling_2eproto() {
  delete AcctIdSourceUnion::default_instance_;
  delete AcctIdSourceUnion_reflection_;
  delete SettlTypeUnion::default_instance_;
  delete SettlTypeUnion_reflection_;
  delete TargetStrategyUnion::default_instance_;
  delete TargetStrategyUnion_reflection_;
  delete NewOrderSingle::default_instance_;
  delete NewOrderSingle_reflection_;
  delete OrderCancelReplaceRequest::default_instance_;
  delete OrderCancelReplaceRequest_reflection_;
  delete OrderCancelRequest::default_instance_;
  delete OrderCancelRequest_reflection_;
  delete CxlRejReasonUnion::default_instance_;
  delete CxlRejReasonUnion_reflection_;
  delete OrderCancelReject::default_instance_;
  delete OrderCancelReject_reflection_;
  delete FillsGrp::default_instance_;
  delete FillsGrp_reflection_;
  delete OrdRejReasonUnion::default_instance_;
  delete OrdRejReasonUnion_reflection_;
  delete ExecRestatementReasonUnion::default_instance_;
  delete ExecRestatementReasonUnion_reflection_;
  delete ExecutionReport::default_instance_;
  delete ExecutionReport_reflection_;
  delete OrderStatusRequest::default_instance_;
  delete OrderStatusRequest_reflection_;
  delete ExecutionAcknowledgement::default_instance_;
  delete ExecutionAcknowledgement_reflection_;
  delete DontKnowTrade::default_instance_;
  delete DontKnowTrade_reflection_;
}

void protobuf_AddDesc_singlegeneralorderhandling_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meta::protobuf_AddDesc_meta_2eproto();
  ::fix::protobuf_AddDesc_fix_2eproto();
  ::Session::protobuf_AddDesc_session_2eproto();
  ::Common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n singlegeneralorderhandling.proto\022\032Sing"
    "leGeneralOrderHandling\032\nmeta.proto\032\tfix."
    "proto\032\rsession.proto\032\014common.proto\"z\n\021Ac"
    "ctIdSourceUnion\022D\n\016acct_id_source\030\001 \001(\0162"
    ",.SingleGeneralOrderHandling.AcctIdSourc"
    "eEnum\022\037\n\027acct_id_source_sfixed64\030\002 \001(\020\"u"
    "\n\016SettlTypeUnion\022=\n\nsettl_type\030\001 \001(\0162).S"
    "ingleGeneralOrderHandling.SettlTypeEnum\022"
    "$\n\020settl_type_tenor\030\002 \001(\0132\n.fix.Tenor\"\200\001"
    "\n\023TargetStrategyUnion\022G\n\017target_strategy"
    "\030\001 \001(\0162..SingleGeneralOrderHandling.Targ"
    "etStrategyEnum\022 \n\030target_strategy_sfixed"
    "64\030\002 \001(\020\"\233,\n\016NewOrderSingle\022\034\n\007account\030\001"
    " \001(\tB\013\235\254\033\001\000\000\000\240\254\033\017\022\036\n\tcl_ord_id\030\002 \001(\tB\013\235\254"
    "\033\013\000\000\000\240\254\033\017\022\035\n\010currency\030\003 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010"
    "\022#\n\016ex_destination\030\004 \001(\tB\013\235\254\033d\000\000\000\240\254\033\t\022J\n"
    "\texec_inst\030\005 \003(\0162(.SingleGeneralOrderHan"
    "dling.ExecInstEnumB\r\020\001\235\254\033\022\000\000\000\240\254\033\030\022J\n\nhan"
    "dl_inst\030\006 \001(\0162).SingleGeneralOrderHandli"
    "ng.HandlInstEnumB\013\235\254\033\025\000\000\000\240\254\033\000\022\033\n\006ioi_id\030"
    "\007 \001(\tB\013\235\254\033\027\000\000\000\240\254\033\017\022\"\n\tmax_floor\030\010 \001(\020B\017\235"
    "\254\033o\000\000\000\240\254\033\016\270\254\033\007\022\032\n\022max_floor_exponent\030\t \001"
    "(\017\022\034\n\007min_qty\030\n \001(\020B\013\235\254\033n\000\000\000\240\254\033\016\022\030\n\020min_"
    "qty_exponent\030\013 \001(\017\022F\n\010ord_type\030\014 \001(\0162\'.S"
    "ingleGeneralOrderHandling.OrdTypeEnumB\013\235"
    "\254\033(\000\000\000\240\254\033\000\022\032\n\005price\030\r \001(\020B\013\235\254\033,\000\000\000\240\254\033\014\022\026"
    "\n\016price_exponent\030\016 \001(\017\022N\n\014process_code\030\017"
    " \001(\0162+.SingleGeneralOrderHandling.Proces"
    "sCodeEnumB\013\235\254\033Q\000\000\000\240\254\033\000\022\037\n\nsettl_date\030\020 \001"
    "(\017B\013\235\254\033@\000\000\000\240\254\033\n\022J\n\nsettl_type\030\021 \001(\0162).Si"
    "ngleGeneralOrderHandling.SettlTypeEnumB\013"
    "\235\254\033\?\000\000\000\240\254\033\017\022\?\n\004side\030\022 \001(\0162$.SingleGenera"
    "lOrderHandling.SideEnumB\013\235\254\0336\000\000\000\240\254\033\000\0226\n\017"
    "standard_header\030\023 \001(\0132\027.Session.Standard"
    "HeaderB\004\250\254\033\000\0228\n\020standard_trailer\030\024 \001(\0132\030"
    ".Session.StandardTrailerB\004\250\254\033\000\022\034\n\007stop_p"
    "x\030\025 \001(\020B\013\235\254\033c\000\000\000\240\254\033\014\022\030\n\020stop_px_exponent"
    "\030\026 \001(\017\022\031\n\004text\030\027 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022O\n\rtim"
    "e_in_force\030\030 \001(\0162+.SingleGeneralOrderHan"
    "dling.TimeInForceEnumB\013\235\254\033;\000\000\000\240\254\033\000\022 \n\013ex"
    "pire_time\030\031 \001(\020B\013\235\254\033~\000\000\000\240\254\033\021\022\036\n\tforex_re"
    "q\030\032 \001(\010B\013\235\254\033y\000\000\000\240\254\033\007\022 \n\013locate_reqd\030\033 \001("
    "\010B\013\235\254\033r\000\000\000\240\254\033\007\022\"\n\rprev_close_px\030\034 \001(\020B\013\235"
    "\254\033\214\000\000\000\240\254\033\014\022\036\n\026prev_close_px_exponent\030\035 \001"
    "(\017\022\035\n\010quote_id\030\036 \001(\tB\013\235\254\033u\000\000\000\240\254\033\017\022#\n\016set"
    "tl_currency\030\037 \001(\tB\013\235\254\033x\000\000\000\240\254\033\010\022]\n\024covere"
    "d_or_uncovered\030  \001(\01622.SingleGeneralOrde"
    "rHandling.CoveredOrUncoveredEnumB\013\235\254\033\313\000\000"
    "\000\240\254\033\003\022!\n\010max_show\030! \001(\020B\017\235\254\033\322\000\000\000\240\254\033\016\270\254\033\007"
    "\022\031\n\021max_show_exponent\030\" \001(\017\022#\n\norder_qty"
    "2\030# \001(\020B\017\235\254\033\300\000\000\000\240\254\033\016\270\254\033\007\022\033\n\023order_qty2_e"
    "xponent\030$ \001(\017\022T\n\017position_effect\030% \001(\0162."
    ".SingleGeneralOrderHandling.PositionEffe"
    "ctEnumB\013\235\254\033M\000\000\000\240\254\033\000\022$\n\013settl_date2\030& \001(\017"
    "B\017\235\254\033\301\000\000\000\240\254\033\n\270\254\033\007\022\"\n\rcompliance_id\030\' \001(\t"
    "B\013\235\254\033x\001\000\000\240\254\033\017\022#\n\016effective_time\030( \001(\020B\013\235"
    "\254\033\250\000\000\000\240\254\033\021\022!\n\014encoded_text\030) \001(\014B\013\235\254\033c\001\000"
    "\000\240\254\033\001\022%\n\020encoded_text_len\030* \001(\007B\013\235\254\033b\001\000\000"
    "\240\254\033\022\022 \n\013expire_date\030+ \001(\017B\013\235\254\033\260\001\000\000\240\254\033\n\022S"
    "\n\017gt_booking_inst\030, \001(\0162-.SingleGeneralO"
    "rderHandling.GtBookingInstEnumB\013\235\254\033\253\001\000\000\240"
    "\254\033\003\022#\n\016solicited_flag\030- \001(\010B\013\235\254\033y\001\000\000\240\254\033\007"
    "\022\"\n\rtransact_time\030. \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022N\n\014"
    "account_type\030/ \001(\0162+.SingleGeneralOrderH"
    "andling.AccountTypeEnumB\013\235\254\033E\002\000\000\240\254\033\003\022N\n\014"
    "booking_unit\0300 \001(\0162+.SingleGeneralOrderH"
    "andling.BookingUnitEnumB\013\235\254\033N\002\000\000\240\254\033\000\022\\\n\023"
    "cancellation_rights\0301 \001(\01622.SingleGenera"
    "lOrderHandling.CancellationRightsEnumB\013\235"
    "\254\033\340\001\000\000\240\254\033\000\022L\n\013cash_margin\0302 \001(\0162*.Single"
    "GeneralOrderHandling.CashMarginEnumB\013\235\254\033"
    " \002\000\000\240\254\033\000\022#\n\016cl_ord_link_id\0303 \001(\tB\013\235\254\033G\002\000"
    "\000\240\254\033\017\022a\n\026clearing_fee_indicator\0304 \001(\01624."
    "SingleGeneralOrderHandling.ClearingFeeIn"
    "dicatorEnumB\013\235\254\033{\002\000\000\240\254\033\017\0225\n\017commission_d"
    "ata\0305 \001(\0132\026.Common.CommissionDataB\004\250\254\033\005\022"
    "[\n\023cust_order_capacity\0306 \001(\01621.SingleGen"
    "eralOrderHandling.CustOrderCapacityEnumB"
    "\013\235\254\033F\002\000\000\240\254\033\003\022U\n\020day_booking_inst\0307 \001(\0162."
    ".SingleGeneralOrderHandling.DayBookingIn"
    "stEnumB\013\235\254\033M\002\000\000\240\254\033\000\022 \n\013designation\0308 \001(\t"
    "B\013\235\254\033\356\001\000\000\240\254\033\017\022,\n\ninstrument\0309 \001(\0132\022.Comm"
    "on.InstrumentB\004\250\254\033\005\022c\n\027money_laundering_"
    "status\030: \001(\01625.SingleGeneralOrderHandlin"
    "g.MoneyLaunderingStatusEnumB\013\235\254\033\341\001\000\000\240\254\033\000"
    "\022R\n\016order_capacity\030; \001(\0162-.SingleGeneral"
    "OrderHandling.OrderCapacityEnumB\013\235\254\033\020\002\000\000"
    "\240\254\033\000\0222\n\016order_qty_data\030< \001(\0132\024.Common.Or"
    "derQtyDataB\004\250\254\033\005\022\\\n\022order_restrictions\030="
    " \003(\01621.SingleGeneralOrderHandling.OrderR"
    "estrictionsEnumB\r\020\001\235\254\033\021\002\000\000\240\254\033\030\022)\n\007partie"
    "s\030> \003(\0132\017.Common.PartiesB\007\235\254\033\305\001\000\000\022T\n\017pre"
    "alloc_method\030\? \001(\0162..SingleGeneralOrderH"
    "andling.PreallocMethodEnumB\013\235\254\033O\002\000\000\240\254\033\000\022"
    "\037\n\006price2\030@ \001(\020B\017\235\254\033\200\002\000\000\240\254\033\014\270\254\033\007\022\027\n\017pric"
    "e2_exponent\030A \001(\017\022J\n\nprice_type\030B \001(\0162)."
    "SingleGeneralOrderHandling.PriceTypeEnum"
    "B\013\235\254\033\247\001\000\000\240\254\033\003\022\036\n\tregist_id\030C \001(\tB\013\235\254\033\001\002\000"
    "\000\240\254\033\017\022(\n\023secondary_cl_ord_id\030D \001(\tB\013\235\254\033\016"
    "\002\000\000\240\254\033\017\022P\n\036spread_or_benchmark_curve_dat"
    "a\030E \001(\0132\".Common.SpreadOrBenchmarkCurveD"
    "ataB\004\250\254\033\005\0223\n\014stipulations\030F \003(\0132\024.Common"
    ".StipulationsB\007\235\254\033\350\000\000\000\022+\n\026trade_originat"
    "ion_date\030G \001(\017B\013\235\254\033\345\000\000\000\240\254\033\n\022+\n\nyield_dat"
    "a\030H \001(\0132\021.Common.YieldDataB\004\250\254\033\005\022Q\n\016acct"
    "_id_source\030I \001(\0162,.SingleGeneralOrderHan"
    "dling.AcctIdSourceEnumB\013\235\254\033\224\002\000\000\240\254\033\003\022\035\n\010a"
    "lloc_id\030J \001(\tB\013\235\254\033F\000\000\000\240\254\033\017\022N\n\014booking_ty"
    "pe\030K \001(\0162+.SingleGeneralOrderHandling.Bo"
    "okingTypeEnumB\013\235\254\033\007\003\000\000\240\254\033\003\022(\n\023cust_direc"
    "ted_order\030L \001(\010B\013\235\254\033\005\004\000\000\240\254\033\007\022d\n\030cust_ord"
    "er_handling_inst\030M \001(\01625.SingleGeneralOr"
    "derHandling.CustOrderHandlingInstEnumB\013\235"
    "\254\033\007\004\000\000\240\254\033\013\022E\n\027discretion_instructions\030N "
    "\001(\0132\036.Common.DiscretionInstructionsB\004\250\254\033"
    "\006\022=\n\023display_instruction\030O \001(\0132\032.Common."
    "DisplayInstructionB\004\250\254\033\006\022d\n\030ex_destinati"
    "on_id_source\030P \001(\01625.SingleGeneralOrderH"
    "andling.ExDestinationIdSourceEnumB\013\235\254\033m\004"
    "\000\000\240\254\033\000\0229\n\021financing_details\030Q \001(\0132\030.Comm"
    "on.FinancingDetailsB\004\250\254\033\006\022+\n\026manual_orde"
    "r_indicator\030R \001(\010B\013\235\254\033\004\004\000\000\240\254\033\007\022$\n\017match_"
    "increment\030S \001(\020B\013\235\254\033A\004\000\000\240\254\033\016\022 \n\030match_in"
    "crement_exponent\030T \001(\017\022%\n\020max_price_leve"
    "ls\030U \001(\020B\013\235\254\033B\004\000\000\240\254\033\003\022h\n\032order_handling_"
    "inst_source\030V \001(\01627.SingleGeneralOrderHa"
    "ndling.OrderHandlingInstSourceEnumB\013\235\254\033\010"
    "\004\000\000\240\254\033\003\022+\n\022participation_rate\030W \001(\020B\017\235\254\033"
    "Q\003\000\000\240\254\033\024\270\254\033\007\022#\n\033participation_rate_expon"
    "ent\030X \001(\017\0227\n\020peg_instructions\030Y \001(\0132\027.Co"
    "mmon.PegInstructionsB\004\250\254\033\006\0223\n\rpre_alloc_"
    "grp\030Z \003(\0132\023.Common.PreAllocGrpB\007\235\254\033N\000\000\000\022"
    "(\n\023pre_trade_anonymity\030[ \001(\010B\013\235\254\033C\004\000\000\240\254\033"
    "\007\022a\n\026price_protection_scope\030\\ \001(\01624.Sing"
    "leGeneralOrderHandling.PriceProtectionSc"
    "opeEnumB\013\235\254\033D\004\000\000\240\254\033\000\022F\n\010qty_type\030] \001(\0162\'"
    ".SingleGeneralOrderHandling.QtyTypeEnumB"
    "\013\235\254\033V\003\000\000\240\254\033\003\022%\n\020received_dept_id\030^ \001(\tB\013"
    "\235\254\033\006\004\000\000\240\254\033\017\022!\n\014ref_order_id\030_ \001(\tB\013\235\254\0338\004"
    "\000\000\240\254\033\017\022Z\n\023ref_order_id_source\030` \001(\01620.Si"
    "ngleGeneralOrderHandling.RefOrderIdSourc"
    "eEnumB\013\235\254\0339\004\000\000\240\254\033\000\022G\n\027strategy_parameter"
    "s_grp\030a \003(\0132\035.Common.StrategyParametersG"
    "rpB\007\235\254\033\275\003\000\000\022T\n\017target_strategy\030b \001(\0162..S"
    "ingleGeneralOrderHandling.TargetStrategy"
    "EnumB\013\235\254\033O\003\000\000\240\254\033\003\0223\n\032target_strategy_par"
    "ameters\030c \001(\tB\017\235\254\033P\003\000\000\240\254\033\017\270\254\033\007\022\037\n\ntrade_"
    "date\030d \001(\017B\013\235\254\033K\000\000\000\240\254\033\n\022=\n\022trd_reg_times"
    "tamps\030e \003(\0132\030.Common.TrdRegTimestampsB\007\235"
    "\254\033\000\003\000\000\0221\n\014trdg_ses_grp\030f \003(\0132\022.Common.Tr"
    "dgSesGrpB\007\235\254\033\202\001\000\000\022C\n\026triggering_instruct"
    "ion\030g \001(\0132\035.Common.TriggeringInstruction"
    "B\004\250\254\033\006\0227\n\017und_instrmt_grp\030h \003(\0132\025.Common"
    ".UndInstrmtGrpB\007\235\254\033\307\002\000\000:\005\312\355\032\001D\"\254*\n\031Order"
    "CancelReplaceRequest\022\034\n\007account\030\001 \001(\tB\013\235"
    "\254\033\001\000\000\000\240\254\033\017\022\036\n\tcl_ord_id\030\002 \001(\tB\013\235\254\033\013\000\000\000\240\254"
    "\033\017\022\035\n\010currency\030\003 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022J\n\texe"
    "c_inst\030\004 \003(\0162(.SingleGeneralOrderHandlin"
    "g.ExecInstEnumB\r\020\001\235\254\033\022\000\000\000\240\254\033\030\022J\n\nhandl_i"
    "nst\030\005 \001(\0162).SingleGeneralOrderHandling.H"
    "andlInstEnumB\013\235\254\033\025\000\000\000\240\254\033\000\022\034\n\007list_id\030\006 \001"
    "(\tB\013\235\254\033B\000\000\000\240\254\033\017\022F\n\010ord_type\030\007 \001(\0162\'.Sing"
    "leGeneralOrderHandling.OrdTypeEnumB\013\235\254\033("
    "\000\000\000\240\254\033\000\022\035\n\010order_id\030\010 \001(\tB\013\235\254\033%\000\000\000\240\254\033\017\022#"
    "\n\016orig_cl_ord_id\030\t \001(\tB\013\235\254\033)\000\000\000\240\254\033\017\022\032\n\005p"
    "rice\030\n \001(\020B\013\235\254\033,\000\000\000\240\254\033\014\022\026\n\016price_exponen"
    "t\030\013 \001(\017\022\037\n\nsettl_date\030\014 \001(\017B\013\235\254\033@\000\000\000\240\254\033\n"
    "\022J\n\nsettl_type\030\r \001(\0162).SingleGeneralOrde"
    "rHandling.SettlTypeEnumB\013\235\254\033\?\000\000\000\240\254\033\017\022\?\n\004"
    "side\030\016 \001(\0162$.SingleGeneralOrderHandling."
    "SideEnumB\013\235\254\0336\000\000\000\240\254\033\000\0226\n\017standard_header"
    "\030\017 \001(\0132\027.Session.StandardHeaderB\004\250\254\033\000\0228\n"
    "\020standard_trailer\030\020 \001(\0132\030.Session.Standa"
    "rdTrailerB\004\250\254\033\000\022\034\n\007stop_px\030\021 \001(\020B\013\235\254\033c\000\000"
    "\000\240\254\033\014\022\030\n\020stop_px_exponent\030\022 \001(\017\022\031\n\004text\030"
    "\023 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022O\n\rtime_in_force\030\024 \001("
    "\0162+.SingleGeneralOrderHandling.TimeInFor"
    "ceEnumB\013\235\254\033;\000\000\000\240\254\033\000\022#\n\016ex_destination\030\025 "
    "\001(\tB\013\235\254\033d\000\000\000\240\254\033\t\022\"\n\tmax_floor\030\026 \001(\020B\017\235\254\033"
    "o\000\000\000\240\254\033\016\270\254\033\007\022\032\n\022max_floor_exponent\030\027 \001(\017"
    "\022\034\n\007min_qty\030\030 \001(\020B\013\235\254\033n\000\000\000\240\254\033\016\022\030\n\020min_qt"
    "y_exponent\030\031 \001(\017\022 \n\013expire_time\030\032 \001(\020B\013\235"
    "\254\033~\000\000\000\240\254\033\021\022\036\n\tforex_req\030\033 \001(\010B\013\235\254\033y\000\000\000\240\254"
    "\033\007\022#\n\016settl_currency\030\034 \001(\tB\013\235\254\033x\000\000\000\240\254\033\010\022"
    "]\n\024covered_or_uncovered\030\035 \001(\01622.SingleGe"
    "neralOrderHandling.CoveredOrUncoveredEnu"
    "mB\013\235\254\033\313\000\000\000\240\254\033\003\022 \n\013locate_reqd\030\036 \001(\010B\013\235\254\033"
    "r\000\000\000\240\254\033\007\022!\n\010max_show\030\037 \001(\020B\017\235\254\033\322\000\000\000\240\254\033\016\270"
    "\254\033\007\022\031\n\021max_show_exponent\030  \001(\017\022#\n\norder_"
    "qty2\030! \001(\020B\017\235\254\033\300\000\000\000\240\254\033\016\270\254\033\007\022\033\n\023order_qty"
    "2_exponent\030\" \001(\017\022T\n\017position_effect\030# \001("
    "\0162..SingleGeneralOrderHandling.PositionE"
    "ffectEnumB\013\235\254\033M\000\000\000\240\254\033\000\022$\n\013settl_date2\030$ "
    "\001(\017B\017\235\254\033\301\000\000\000\240\254\033\n\270\254\033\007\022\"\n\rcompliance_id\030% "
    "\001(\tB\013\235\254\033x\001\000\000\240\254\033\017\022#\n\016effective_time\030& \001(\020"
    "B\013\235\254\033\250\000\000\000\240\254\033\021\022!\n\014encoded_text\030\' \001(\014B\013\235\254\033"
    "c\001\000\000\240\254\033\001\022%\n\020encoded_text_len\030( \001(\007B\013\235\254\033b"
    "\001\000\000\240\254\033\022\022 \n\013expire_date\030) \001(\017B\013\235\254\033\260\001\000\000\240\254\033"
    "\n\022S\n\017gt_booking_inst\030* \001(\0162-.SingleGener"
    "alOrderHandling.GtBookingInstEnumB\013\235\254\033\253\001"
    "\000\000\240\254\033\003\022#\n\016solicited_flag\030+ \001(\010B\013\235\254\033y\001\000\000\240"
    "\254\033\007\022\"\n\rtransact_time\030, \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022"
    "N\n\014account_type\030- \001(\0162+.SingleGeneralOrd"
    "erHandling.AccountTypeEnumB\013\235\254\033E\002\000\000\240\254\033\003\022"
    "N\n\014booking_unit\030. \001(\0162+.SingleGeneralOrd"
    "erHandling.BookingUnitEnumB\013\235\254\033N\002\000\000\240\254\033\000\022"
    "\\\n\023cancellation_rights\030/ \001(\01622.SingleGen"
    "eralOrderHandling.CancellationRightsEnum"
    "B\013\235\254\033\340\001\000\000\240\254\033\000\022L\n\013cash_margin\0300 \001(\0162*.Sin"
    "gleGeneralOrderHandling.CashMarginEnumB\013"
    "\235\254\033 \002\000\000\240\254\033\000\022#\n\016cl_ord_link_id\0301 \001(\tB\013\235\254\033"
    "G\002\000\000\240\254\033\017\022a\n\026clearing_fee_indicator\0302 \001(\016"
    "24.SingleGeneralOrderHandling.ClearingFe"
    "eIndicatorEnumB\013\235\254\033{\002\000\000\240\254\033\017\0225\n\017commissio"
    "n_data\0303 \001(\0132\026.Common.CommissionDataB\004\250\254"
    "\033\005\022[\n\023cust_order_capacity\0304 \001(\01621.Single"
    "GeneralOrderHandling.CustOrderCapacityEn"
    "umB\013\235\254\033F\002\000\000\240\254\033\003\022U\n\020day_booking_inst\0305 \001("
    "\0162..SingleGeneralOrderHandling.DayBookin"
    "gInstEnumB\013\235\254\033M\002\000\000\240\254\033\000\022 \n\013designation\0306 "
    "\001(\tB\013\235\254\033\356\001\000\000\240\254\033\017\022,\n\ninstrument\0307 \001(\0132\022.C"
    "ommon.InstrumentB\004\250\254\033\005\022c\n\027money_launderi"
    "ng_status\0308 \001(\01625.SingleGeneralOrderHand"
    "ling.MoneyLaunderingStatusEnumB\013\235\254\033\341\001\000\000\240"
    "\254\033\000\022R\n\016order_capacity\0309 \001(\0162-.SingleGene"
    "ralOrderHandling.OrderCapacityEnumB\013\235\254\033\020"
    "\002\000\000\240\254\033\000\0222\n\016order_qty_data\030: \001(\0132\024.Common"
    ".OrderQtyDataB\004\250\254\033\005\022\\\n\022order_restriction"
    "s\030; \003(\01621.SingleGeneralOrderHandling.Ord"
    "erRestrictionsEnumB\r\020\001\235\254\033\021\002\000\000\240\254\033\030\022&\n\021ori"
    "g_ord_mod_time\030< \001(\020B\013\235\254\033J\002\000\000\240\254\033\021\022)\n\007par"
    "ties\030= \003(\0132\017.Common.PartiesB\007\235\254\033\305\001\000\000\022T\n\017"
    "prealloc_method\030> \001(\0162..SingleGeneralOrd"
    "erHandling.PreallocMethodEnumB\013\235\254\033O\002\000\000\240\254"
    "\033\000\022\037\n\006price2\030\? \001(\020B\017\235\254\033\200\002\000\000\240\254\033\014\270\254\033\007\022\027\n\017p"
    "rice2_exponent\030@ \001(\017\022J\n\nprice_type\030A \001(\016"
    "2).SingleGeneralOrderHandling.PriceTypeE"
    "numB\013\235\254\033\247\001\000\000\240\254\033\003\022\036\n\tregist_id\030B \001(\tB\013\235\254\033"
    "\001\002\000\000\240\254\033\017\022(\n\023secondary_cl_ord_id\030C \001(\tB\013\235"
    "\254\033\016\002\000\000\240\254\033\017\022P\n\036spread_or_benchmark_curve_"
    "data\030D \001(\0132\".Common.SpreadOrBenchmarkCur"
    "veDataB\004\250\254\033\005\022+\n\026trade_origination_date\030E"
    " \001(\017B\013\235\254\033\345\000\000\000\240\254\033\n\022+\n\nyield_data\030F \001(\0132\021."
    "Common.YieldDataB\004\250\254\033\005\022Q\n\016acct_id_source"
    "\030G \001(\0162,.SingleGeneralOrderHandling.Acct"
    "IdSourceEnumB\013\235\254\033\224\002\000\000\240\254\033\003\022\035\n\010alloc_id\030H "
    "\001(\tB\013\235\254\033F\000\000\000\240\254\033\017\022N\n\014booking_type\030I \001(\0162+"
    ".SingleGeneralOrderHandling.BookingTypeE"
    "numB\013\235\254\033\007\003\000\000\240\254\033\003\022(\n\023cust_directed_order\030"
    "J \001(\010B\013\235\254\033\005\004\000\000\240\254\033\007\022d\n\030cust_order_handlin"
    "g_inst\030K \001(\01625.SingleGeneralOrderHandlin"
    "g.CustOrderHandlingInstEnumB\013\235\254\033\007\004\000\000\240\254\033\013"
    "\022E\n\027discretion_instructions\030L \001(\0132\036.Comm"
    "on.DiscretionInstructionsB\004\250\254\033\006\022=\n\023displ"
    "ay_instruction\030M \001(\0132\032.Common.DisplayIns"
    "tructionB\004\250\254\033\006\022d\n\030ex_destination_id_sour"
    "ce\030N \001(\01625.SingleGeneralOrderHandling.Ex"
    "DestinationIdSourceEnumB\013\235\254\033m\004\000\000\240\254\033\000\0229\n\021"
    "financing_details\030O \001(\0132\030.Common.Financi"
    "ngDetailsB\004\250\254\033\006\022+\n\026manual_order_indicato"
    "r\030P \001(\010B\013\235\254\033\004\004\000\000\240\254\033\007\022$\n\017match_increment\030"
    "Q \001(\020B\013\235\254\033A\004\000\000\240\254\033\016\022 \n\030match_increment_ex"
    "ponent\030R \001(\017\022%\n\020max_price_levels\030S \001(\020B\013"
    "\235\254\033B\004\000\000\240\254\033\003\022h\n\032order_handling_inst_sourc"
    "e\030T \001(\01627.SingleGeneralOrderHandling.Ord"
    "erHandlingInstSourceEnumB\013\235\254\033\010\004\000\000\240\254\033\003\022+\n"
    "\022participation_rate\030U \001(\020B\017\235\254\033Q\003\000\000\240\254\033\024\270\254"
    "\033\007\022#\n\033participation_rate_exponent\030V \001(\017\022"
    "7\n\020peg_instructions\030W \001(\0132\027.Common.PegIn"
    "structionsB\004\250\254\033\006\0223\n\rpre_alloc_grp\030X \003(\0132"
    "\023.Common.PreAllocGrpB\007\235\254\033N\000\000\000\022(\n\023pre_tra"
    "de_anonymity\030Y \001(\010B\013\235\254\033C\004\000\000\240\254\033\007\022a\n\026price"
    "_protection_scope\030Z \001(\01624.SingleGeneralO"
    "rderHandling.PriceProtectionScopeEnumB\013\235"
    "\254\033D\004\000\000\240\254\033\000\022F\n\010qty_type\030[ \001(\0162\'.SingleGen"
    "eralOrderHandling.QtyTypeEnumB\013\235\254\033V\003\000\000\240\254"
    "\033\003\022%\n\020received_dept_id\030\\ \001(\tB\013\235\254\033\006\004\000\000\240\254\033"
    "\017\022G\n\027strategy_parameters_grp\030] \003(\0132\035.Com"
    "mon.StrategyParametersGrpB\007\235\254\033\275\003\000\000\022T\n\017ta"
    "rget_strategy\030^ \001(\0162..SingleGeneralOrder"
    "Handling.TargetStrategyEnumB\013\235\254\033O\003\000\000\240\254\033\003"
    "\0223\n\032target_strategy_parameters\030_ \001(\tB\017\235\254"
    "\033P\003\000\000\240\254\033\017\270\254\033\007\022\037\n\ntrade_date\030` \001(\017B\013\235\254\033K\000"
    "\000\000\240\254\033\n\022=\n\022trd_reg_timestamps\030a \003(\0132\030.Com"
    "mon.TrdRegTimestampsB\007\235\254\033\000\003\000\000\0221\n\014trdg_se"
    "s_grp\030b \003(\0132\022.Common.TrdgSesGrpB\007\235\254\033\202\001\000\000"
    "\022C\n\026triggering_instruction\030c \001(\0132\035.Commo"
    "n.TriggeringInstructionB\004\250\254\033\006\0227\n\017und_ins"
    "trmt_grp\030d \003(\0132\025.Common.UndInstrmtGrpB\007\235"
    "\254\033\307\002\000\000:\005\312\355\032\001G\"\266\010\n\022OrderCancelRequest\022\036\n\t"
    "cl_ord_id\030\001 \001(\tB\013\235\254\033\013\000\000\000\240\254\033\017\022\034\n\007list_id\030"
    "\002 \001(\tB\013\235\254\033B\000\000\000\240\254\033\017\022\035\n\010order_id\030\003 \001(\tB\013\235\254"
    "\033%\000\000\000\240\254\033\017\022#\n\016orig_cl_ord_id\030\004 \001(\tB\013\235\254\033)\000"
    "\000\000\240\254\033\017\022\?\n\004side\030\005 \001(\0162$.SingleGeneralOrde"
    "rHandling.SideEnumB\013\235\254\0336\000\000\000\240\254\033\000\0226\n\017stand"
    "ard_header\030\006 \001(\0132\027.Session.StandardHeade"
    "rB\004\250\254\033\000\0228\n\020standard_trailer\030\007 \001(\0132\030.Sess"
    "ion.StandardTrailerB\004\250\254\033\000\022\031\n\004text\030\010 \001(\tB"
    "\013\235\254\033:\000\000\000\240\254\033\017\022\034\n\007account\030\t \001(\tB\013\235\254\033\001\000\000\000\240\254"
    "\033\017\022\"\n\rcompliance_id\030\n \001(\tB\013\235\254\033x\001\000\000\240\254\033\017\022!"
    "\n\014encoded_text\030\013 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020enc"
    "oded_text_len\030\014 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022\"\n\rtran"
    "sact_time\030\r \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022N\n\014account_"
    "type\030\016 \001(\0162+.SingleGeneralOrderHandling."
    "AccountTypeEnumB\013\235\254\033E\002\000\000\240\254\033\003\022#\n\016cl_ord_l"
    "ink_id\030\017 \001(\tB\013\235\254\033G\002\000\000\240\254\033\017\022,\n\ninstrument\030"
    "\020 \001(\0132\022.Common.InstrumentB\004\250\254\033\005\0222\n\016order"
    "_qty_data\030\021 \001(\0132\024.Common.OrderQtyDataB\004\250"
    "\254\033\005\022&\n\021orig_ord_mod_time\030\022 \001(\020B\013\235\254\033J\002\000\000\240"
    "\254\033\021\022)\n\007parties\030\023 \003(\0132\017.Common.PartiesB\007\235"
    "\254\033\305\001\000\000\022(\n\023secondary_cl_ord_id\030\024 \001(\tB\013\235\254\033"
    "\016\002\000\000\240\254\033\017\022Q\n\016acct_id_source\030\025 \001(\0162,.Singl"
    "eGeneralOrderHandling.AcctIdSourceEnumB\013"
    "\235\254\033\224\002\000\000\240\254\033\003\0229\n\021financing_details\030\026 \001(\0132\030"
    ".Common.FinancingDetailsB\004\250\254\033\006\0227\n\017und_in"
    "strmt_grp\030\027 \003(\0132\025.Common.UndInstrmtGrpB\007"
    "\235\254\033\307\002\000\000:\005\312\355\032\001F\"z\n\021CxlRejReasonUnion\022D\n\016c"
    "xl_rej_reason\030\001 \001(\0162,.SingleGeneralOrder"
    "Handling.CxlRejReasonEnum\022\037\n\027cxl_rej_rea"
    "son_sfixed64\030\002 \001(\020\"\351\010\n\021OrderCancelReject"
    "\022\036\n\tcl_ord_id\030\001 \001(\tB\013\235\254\033\013\000\000\000\240\254\033\017\022Q\n\016cxl_"
    "rej_reason\030\002 \001(\0162,.SingleGeneralOrderHan"
    "dling.CxlRejReasonEnumB\013\235\254\033f\000\000\000\240\254\033\003\022\034\n\007l"
    "ist_id\030\003 \001(\tB\013\235\254\033B\000\000\000\240\254\033\017\022\035\n\010order_id\030\004 "
    "\001(\tB\013\235\254\033%\000\000\000\240\254\033\017\0226\n\017standard_header\030\005 \001("
    "\0132\027.Session.StandardHeaderB\004\250\254\033\000\0228\n\020stan"
    "dard_trailer\030\006 \001(\0132\030.Session.StandardTra"
    "ilerB\004\250\254\033\000\022\031\n\004text\030\007 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022J\n"
    "\nord_status\030\010 \001(\0162).SingleGeneralOrderHa"
    "ndling.OrdStatusEnumB\013\235\254\033\'\000\000\000\240\254\033\000\022#\n\016ori"
    "g_cl_ord_id\030\t \001(\tB\013\235\254\033)\000\000\000\240\254\033\017\022\'\n\022second"
    "ary_order_id\030\n \001(\tB\013\235\254\033\306\000\000\000\240\254\033\017\022\034\n\007accou"
    "nt\030\013 \001(\tB\013\235\254\033\001\000\000\000\240\254\033\017\022Z\n\023cxl_rej_respons"
    "e_to\030\014 \001(\01620.SingleGeneralOrderHandling."
    "CxlRejResponseToEnumB\013\235\254\033\262\001\000\000\240\254\033\000\022!\n\014enc"
    "oded_text\030\r \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_"
    "text_len\030\016 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022\"\n\rtransact_"
    "time\030\017 \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022N\n\014account_type\030"
    "\020 \001(\0162+.SingleGeneralOrderHandling.Accou"
    "ntTypeEnumB\013\235\254\033E\002\000\000\240\254\033\003\022#\n\016cl_ord_link_i"
    "d\030\021 \001(\tB\013\235\254\033G\002\000\000\240\254\033\017\022&\n\021orig_ord_mod_tim"
    "e\030\022 \001(\020B\013\235\254\033J\002\000\000\240\254\033\021\022(\n\023secondary_cl_ord"
    "_id\030\023 \001(\tB\013\235\254\033\016\002\000\000\240\254\033\017\022+\n\026trade_originat"
    "ion_date\030\024 \001(\017B\013\235\254\033\345\000\000\000\240\254\033\n\022&\n\021working_i"
    "ndicator\030\025 \001(\010B\013\235\254\033|\002\000\000\240\254\033\007\022Q\n\016acct_id_s"
    "ource\030\026 \001(\0162,.SingleGeneralOrderHandling"
    ".AcctIdSourceEnumB\013\235\254\033\224\002\000\000\240\254\033\003\022\037\n\ntrade_"
    "date\030\027 \001(\017B\013\235\254\033K\000\000\000\240\254\033\n:\005\312\355\032\0019\"\202\002\n\010Fills"
    "Grp\022!\n\014fill_exec_id\030\001 \001(\tB\013\235\254\033S\005\000\000\240\254\033\017\022\034"
    "\n\007fill_px\030\002 \001(\020B\013\235\254\033T\005\000\000\240\254\033\014\022\030\n\020fill_px_"
    "exponent\030\003 \001(\017\022\035\n\010fill_qty\030\004 \001(\020B\013\235\254\033U\005\000"
    "\000\240\254\033\016\022\031\n\021fill_qty_exponent\030\005 \001(\017\0228\n\017nest"
    "ed_parties4\030\006 \003(\0132\026.Common.NestedParties"
    "4B\007\235\254\033\206\005\000\000\022\'\n\022fill_liquidity_ind\030\007 \001(\020B\013"
    "\235\254\033\243\005\000\000\240\254\033\003\"z\n\021OrdRejReasonUnion\022D\n\016ord_"
    "rej_reason\030\001 \001(\0162,.SingleGeneralOrderHan"
    "dling.OrdRejReasonEnum\022\037\n\027ord_rej_reason"
    "_sfixed64\030\002 \001(\020\"\236\001\n\032ExecRestatementReaso"
    "nUnion\022V\n\027exec_restatement_reason\030\001 \001(\0162"
    "5.SingleGeneralOrderHandling.ExecRestate"
    "mentReasonEnum\022(\n exec_restatement_reaso"
    "n_sfixed64\030\002 \001(\020\"\350Q\n\017ExecutionReport\022\034\n\007"
    "account\030\001 \001(\tB\013\235\254\033\001\000\000\000\240\254\033\017\022\"\n\006avg_px\030\002 \001"
    "(\020B\022\235\254\033\006\000\000\000\240\254\033\014\335\363\030\374\377\377\377\022\036\n\tcl_ord_id\030\003 \001("
    "\tB\013\235\254\033\013\000\000\000\240\254\033\017\022\034\n\007cum_qty\030\004 \001(\020B\013\235\254\033\016\000\000\000"
    "\240\254\033\016\022\030\n\020cum_qty_exponent\030\005 \001(\017\022\035\n\010curren"
    "cy\030\006 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022\034\n\007exec_id\030\007 \001(\tB\013"
    "\235\254\033\021\000\000\000\240\254\033\017\022J\n\texec_inst\030\010 \003(\0162(.SingleG"
    "eneralOrderHandling.ExecInstEnumB\r\020\001\235\254\033\022"
    "\000\000\000\240\254\033\030\022 \n\013exec_ref_id\030\t \001(\tB\013\235\254\033\023\000\000\000\240\254\033"
    "\017\022P\n\rlast_capacity\030\n \001(\0162,.SingleGeneral"
    "OrderHandling.LastCapacityEnumB\013\235\254\033\035\000\000\000\240"
    "\254\033\000\022\035\n\010last_mkt\030\013 \001(\tB\013\235\254\033\036\000\000\000\240\254\033\t\022\034\n\007la"
    "st_px\030\014 \001(\001B\013\235\254\033\037\000\000\000\240\254\033\014\022\035\n\010last_qty\030\r \001"
    "(\020B\013\235\254\033 \000\000\000\240\254\033\016\022\031\n\021last_qty_exponent\030\016 \001"
    "(\017\022\034\n\007list_id\030\017 \001(\tB\013\235\254\033B\000\000\000\240\254\033\017\022Q\n\016ord_"
    "rej_reason\030\020 \001(\0162,.SingleGeneralOrderHan"
    "dling.OrdRejReasonEnumB\013\235\254\033g\000\000\000\240\254\033\003\022J\n\no"
    "rd_status\030\021 \001(\0162).SingleGeneralOrderHand"
    "ling.OrdStatusEnumB\013\235\254\033\'\000\000\000\240\254\033\000\022F\n\010ord_t"
    "ype\030\022 \001(\0162\'.SingleGeneralOrderHandling.O"
    "rdTypeEnumB\013\235\254\033(\000\000\000\240\254\033\000\022\035\n\010order_id\030\023 \001("
    "\tB\013\235\254\033%\000\000\000\240\254\033\017\022\032\n\005price\030\024 \001(\020B\013\235\254\033,\000\000\000\240\254"
    "\033\014\022\026\n\016price_exponent\030\025 \001(\017\022\037\n\nsettl_date"
    "\030\026 \001(\017B\013\235\254\033@\000\000\000\240\254\033\n\022J\n\nsettl_type\030\027 \001(\0162"
    ").SingleGeneralOrderHandling.SettlTypeEn"
    "umB\013\235\254\033\?\000\000\000\240\254\033\017\022\?\n\004side\030\030 \001(\0162$.SingleGe"
    "neralOrderHandling.SideEnumB\013\235\254\0336\000\000\000\240\254\033\000"
    "\0226\n\017standard_header\030\031 \001(\0132\027.Session.Stan"
    "dardHeaderB\004\250\254\033\000\0228\n\020standard_trailer\030\032 \001"
    "(\0132\030.Session.StandardTrailerB\004\250\254\033\000\022\034\n\007st"
    "op_px\030\033 \001(\020B\013\235\254\033c\000\000\000\240\254\033\014\022\030\n\020stop_px_expo"
    "nent\030\034 \001(\017\022\031\n\004text\030\035 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022O\n"
    "\rtime_in_force\030\036 \001(\0162+.SingleGeneralOrde"
    "rHandling.TimeInForceEnumB\013\235\254\033;\000\000\000\240\254\033\000\022\037"
    "\n\ntrade_date\030\037 \001(\017B\013\235\254\033K\000\000\000\240\254\033\n\022\"\n\rtrans"
    "act_time\030  \001(\020B\013\235\254\033<\000\000\000\240\254\033\021\022#\n\016report_to"
    "_exch\030! \001(\010B\013\235\254\033q\000\000\000\240\254\033\007\022 \n\013expire_time\030"
    "\" \001(\020B\013\235\254\033~\000\000\000\240\254\033\021\022\036\n\tnet_money\030# \001(\020B\013\235"
    "\254\033v\000\000\000\240\254\033\006\022\032\n\022net_money_exponent\030$ \001(\017\022#"
    "\n\016settl_curr_amt\030% \001(\020B\013\235\254\033w\000\000\000\240\254\033\006\022\037\n\027s"
    "ettl_curr_amt_exponent\030& \001(\017\022#\n\016settl_cu"
    "rrency\030\' \001(\tB\013\235\254\033x\000\000\000\240\254\033\010\022H\n\texec_type\030("
    " \001(\0162(.SingleGeneralOrderHandling.ExecTy"
    "peEnumB\013\235\254\033\226\000\000\000\240\254\033\000\022(\n\023last_forward_poin"
    "ts\030) \001(\020B\013\235\254\033\303\000\000\000\240\254\033\r\022$\n\034last_forward_po"
    "ints_exponent\030* \001(\017\022#\n\016last_spot_rate\030+ "
    "\001(\020B\013\235\254\033\302\000\000\000\240\254\033\014\022\037\n\027last_spot_rate_expon"
    "ent\030, \001(\017\022\037\n\nleaves_qty\030- \001(\020B\013\235\254\033\227\000\000\000\240\254"
    "\033\016\022\033\n\023leaves_qty_exponent\030. \001(\017\022#\n\016orig_"
    "cl_ord_id\030/ \001(\tB\013\235\254\033)\000\000\000\240\254\033\017\022\'\n\022secondar"
    "y_order_id\0300 \001(\tB\013\235\254\033\306\000\000\000\240\254\033\017\022\'\n\022settl_c"
    "urr_fx_rate\0301 \001(\001B\013\235\254\033\233\000\000\000\240\254\033\002\022a\n\027settl_"
    "curr_fx_rate_calc\0302 \001(\01623.SingleGeneralO"
    "rderHandling.SettlCurrFxRateCalcEnumB\013\235\254"
    "\033\234\000\000\000\240\254\033\000\022\"\n\rcompliance_id\0303 \001(\tB\013\235\254\033x\001\000"
    "\000\240\254\033\017\022\037\n\nday_avg_px\0304 \001(\020B\013\235\254\033\252\001\000\000\240\254\033\014\022\033"
    "\n\023day_avg_px_exponent\0305 \001(\017\022 \n\013day_cum_q"
    "ty\0306 \001(\020B\013\235\254\033\251\001\000\000\240\254\033\016\022\034\n\024day_cum_qty_exp"
    "onent\0307 \001(\017\022\"\n\rday_order_qty\0308 \001(\020B\013\235\254\033\250"
    "\001\000\000\240\254\033\016\022\036\n\026day_order_qty_exponent\0309 \001(\017\022"
    "#\n\016effective_time\030: \001(\020B\013\235\254\033\250\000\000\000\240\254\033\021\022!\n\014"
    "encoded_text\030; \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encod"
    "ed_text_len\030< \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022c\n\027exec_r"
    "estatement_reason\030= \001(\01625.SingleGeneralO"
    "rderHandling.ExecRestatementReasonEnumB\013"
    "\235\254\033z\001\000\000\240\254\033\003\022 \n\013expire_date\030> \001(\017B\013\235\254\033\260\001\000"
    "\000\240\254\033\n\022S\n\017gt_booking_inst\030\? \001(\0162-.SingleG"
    "eneralOrderHandling.GtBookingInstEnumB\013\235"
    "\254\033\253\001\000\000\240\254\033\003\022$\n\017gross_trade_amt\030@ \001(\020B\013\235\254\033"
    "}\001\000\000\240\254\033\006\022 \n\030gross_trade_amt_exponent\030A \001"
    "(\017\022J\n\nhandl_inst\030B \001(\0162).SingleGeneralOr"
    "derHandling.HandlInstEnumB\013\235\254\033\025\000\000\000\240\254\033\000\022\""
    "\n\tmax_floor\030C \001(\020B\017\235\254\033o\000\000\000\240\254\033\016\270\254\033\007\022\032\n\022ma"
    "x_floor_exponent\030D \001(\017\022!\n\010max_show\030E \001(\020"
    "B\017\235\254\033\322\000\000\000\240\254\033\016\270\254\033\007\022\031\n\021max_show_exponent\030F"
    " \001(\017\022\034\n\007min_qty\030G \001(\020B\013\235\254\033n\000\000\000\240\254\033\016\022\030\n\020mi"
    "n_qty_exponent\030H \001(\017\022d\n\030multi_leg_report"
    "ing_type\030I \001(\01625.SingleGeneralOrderHandl"
    "ing.MultiLegReportingTypeEnumB\013\235\254\033\272\001\000\000\240\254"
    "\033\000\022#\n\norder_qty2\030J \001(\020B\017\235\254\033\300\000\000\000\240\254\033\016\270\254\033\007\022"
    "\033\n\023order_qty2_exponent\030K \001(\017\022T\n\017position"
    "_effect\030L \001(\0162..SingleGeneralOrderHandli"
    "ng.PositionEffectEnumB\013\235\254\033M\000\000\000\240\254\033\000\022$\n\013se"
    "ttl_date2\030M \001(\017B\017\235\254\033\301\000\000\000\240\254\033\n\270\254\033\007\022#\n\016soli"
    "cited_flag\030N \001(\010B\013\235\254\033y\001\000\000\240\254\033\007\022Y\n\022trading"
    "_session_id\030O \001(\01620.SingleGeneralOrderHa"
    "ndling.TradingSessionIdEnumB\013\235\254\033P\001\000\000\240\254\033\017"
    "\022N\n\014account_type\030P \001(\0162+.SingleGeneralOr"
    "derHandling.AccountTypeEnumB\013\235\254\033E\002\000\000\240\254\033\003"
    "\022)\n\024accrued_interest_amt\030Q \001(\020B\013\235\254\033\237\000\000\000\240"
    "\254\033\006\022%\n\035accrued_interest_amt_exponent\030R \001"
    "(\017\022*\n\025accrued_interest_rate\030S \001(\020B\013\235\254\033\236\000"
    "\000\000\240\254\033\024\022&\n\036accrued_interest_rate_exponent"
    "\030T \001(\017\022\'\n\022basis_feature_date\030U \001(\017B\013\235\254\033\003"
    "\001\000\000\240\254\033\n\022(\n\023basis_feature_price\030V \001(\020B\013\235\254"
    "\033\004\001\000\000\240\254\033\014\022$\n\034basis_feature_price_exponen"
    "t\030W \001(\017\022N\n\014booking_unit\030X \001(\0162+.SingleGe"
    "neralOrderHandling.BookingUnitEnumB\013\235\254\033N"
    "\002\000\000\240\254\033\000\022\\\n\023cancellation_rights\030Y \001(\01622.S"
    "ingleGeneralOrderHandling.CancellationRi"
    "ghtsEnumB\013\235\254\033\340\001\000\000\240\254\033\000\022L\n\013cash_margin\030Z \001"
    "(\0162*.SingleGeneralOrderHandling.CashMarg"
    "inEnumB\013\235\254\033 \002\000\000\240\254\033\000\022#\n\016cl_ord_link_id\030[ "
    "\001(\tB\013\235\254\033G\002\000\000\240\254\033\017\022a\n\026clearing_fee_indicat"
    "or\030\\ \001(\01624.SingleGeneralOrderHandling.Cl"
    "earingFeeIndicatorEnumB\013\235\254\033{\002\000\000\240\254\033\017\0225\n\017c"
    "ommission_data\030] \001(\0132\026.Common.Commission"
    "DataB\004\250\254\033\005\022\037\n\nconcession\030^ \001(\020B\013\235\254\033\356\000\000\000\240"
    "\254\033\006\022\033\n\023concession_exponent\030_ \001(\017\022\035\n\010cros"
    "s_id\030` \001(\tB\013\235\254\033$\002\000\000\240\254\033\017\022J\n\ncross_type\030a "
    "\001(\0162).SingleGeneralOrderHandling.CrossTy"
    "peEnumB\013\235\254\033%\002\000\000\240\254\033\003\022[\n\023cust_order_capaci"
    "ty\030b \001(\01621.SingleGeneralOrderHandling.Cu"
    "stOrderCapacityEnumB\013\235\254\033F\002\000\000\240\254\033\003\022U\n\020day_"
    "booking_inst\030c \001(\0162..SingleGeneralOrderH"
    "andling.DayBookingInstEnumB\013\235\254\033M\002\000\000\240\254\033\000\022"
    " \n\013designation\030d \001(\tB\013\235\254\033\356\001\000\000\240\254\033\017\022\034\n\007ex_"
    "date\030e \001(\017B\013\235\254\033\346\000\000\000\240\254\033\n\022*\n\025exec_price_ad"
    "justment\030f \001(\001B\013\235\254\033\345\001\000\000\240\254\033\002\022S\n\017exec_pric"
    "e_type\030g \001(\0162-.SingleGeneralOrderHandlin"
    "g.ExecPriceTypeEnumB\013\235\254\033\344\001\000\000\240\254\033\000\022)\n\024exec"
    "_valuation_point\030h \001(\020B\013\235\254\033\003\002\000\000\240\254\033\021\022,\n\ni"
    "nstrument\030i \001(\0132\022.Common.InstrumentB\004\250\254\033"
    "\005\022-\n\024last_forward_points2\030j \001(\020B\017\235\254\033\201\002\000\000"
    "\240\254\033\r\270\254\033\007\022%\n\035last_forward_points2_exponen"
    "t\030k \001(\017\022c\n\027money_laundering_status\030l \001(\016"
    "25.SingleGeneralOrderHandling.MoneyLaund"
    "eringStatusEnumB\013\235\254\033\341\001\000\000\240\254\033\000\022&\n\021num_days"
    "_interest\030m \001(\020B\013\235\254\033\235\000\000\000\240\254\033\003\022R\n\016order_ca"
    "pacity\030n \001(\0162-.SingleGeneralOrderHandlin"
    "g.OrderCapacityEnumB\013\235\254\033\020\002\000\000\240\254\033\000\0222\n\016orde"
    "r_qty_data\030o \001(\0132\024.Common.OrderQtyDataB\004"
    "\250\254\033\005\022\\\n\022order_restrictions\030p \003(\01621.Singl"
    "eGeneralOrderHandling.OrderRestrictionsE"
    "numB\r\020\001\235\254\033\021\002\000\000\240\254\033\030\022\"\n\rorig_cross_id\030q \001("
    "\tB\013\235\254\033\'\002\000\000\240\254\033\017\022)\n\007parties\030r \003(\0132\017.Common"
    ".PartiesB\007\235\254\033\305\001\000\000\022T\n\017prealloc_method\030s \001"
    "(\0162..SingleGeneralOrderHandling.Prealloc"
    "MethodEnumB\013\235\254\033O\002\000\000\240\254\033\000\022&\n\021price_improve"
    "ment\030t \001(\020B\013\235\254\033\177\002\000\000\240\254\033\r\022\"\n\032price_improve"
    "ment_exponent\030u \001(\017\022J\n\nprice_type\030v \001(\0162"
    ").SingleGeneralOrderHandling.PriceTypeEn"
    "umB\013\235\254\033\247\001\000\000\240\254\033\003\022Z\n\022priority_indicator\030w "
    "\001(\01621.SingleGeneralOrderHandling.Priorit"
    "yIndicatorEnumB\013\235\254\033~\002\000\000\240\254\033\003\022\036\n\tregist_id"
    "\030x \001(\tB\013\235\254\033\001\002\000\000\240\254\033\017\022(\n\023secondary_cl_ord_"
    "id\030y \001(\tB\013\235\254\033\016\002\000\000\240\254\033\017\022&\n\021secondary_exec_"
    "id\030z \001(\tB\013\235\254\033\017\002\000\000\240\254\033\017\022P\n\036spread_or_bench"
    "mark_curve_data\030{ \001(\0132\".Common.SpreadOrB"
    "enchmarkCurveDataB\004\250\254\033\005\0223\n\014stipulations\030"
    "| \003(\0132\024.Common.StipulationsB\007\235\254\033\350\000\000\000\022#\n\016"
    "total_takedown\030} \001(\020B\013\235\254\033\355\000\000\000\240\254\033\006\022\037\n\027tot"
    "al_takedown_exponent\030~ \001(\017\022+\n\026trade_orig"
    "ination_date\030\177 \001(\017B\013\235\254\033\345\000\000\000\240\254\033\n\022(\n\022trade"
    "d_flat_switch\030\200\001 \001(\010B\013\235\254\033\002\001\000\000\240\254\033\007\022a\n\026tra"
    "ding_session_sub_id\030\201\001 \001(\01623.SingleGener"
    "alOrderHandling.TradingSessionSubIdEnumB"
    "\013\235\254\033q\002\000\000\240\254\033\017\022$\n\016trans_bkd_time\030\202\001 \001(\020B\013\235"
    "\254\033\343\001\000\000\240\254\033\021\022(\n\022underlying_last_px\030\203\001 \001(\020B"
    "\013\235\254\033\213\002\000\000\240\254\033\014\022$\n\033underlying_last_px_expon"
    "ent\030\204\001 \001(\017\022)\n\023underlying_last_qty\030\205\001 \001(\020"
    "B\013\235\254\033\214\002\000\000\240\254\033\016\022%\n\034underlying_last_qty_exp"
    "onent\030\206\001 \001(\017\022\'\n\021working_indicator\030\207\001 \001(\010"
    "B\013\235\254\033|\002\000\000\240\254\033\007\022,\n\nyield_data\030\210\001 \001(\0132\021.Com"
    "mon.YieldDataB\004\250\254\033\005\022R\n\016acct_id_source\030\211\001"
    " \001(\0162,.SingleGeneralOrderHandling.AcctId"
    "SourceEnumB\013\235\254\033\224\002\000\000\240\254\033\003\022)\n\023aggressor_ind"
    "icator\030\212\001 \001(\010B\013\235\254\033!\004\000\000\240\254\033\007\022O\n\014booking_ty"
    "pe\030\213\001 \001(\0162+.SingleGeneralOrderHandling.B"
    "ookingTypeEnumB\013\235\254\033\007\003\000\000\240\254\033\003\022-\n\027calculate"
    "d_ccy_last_qty\030\214\001 \001(\020B\013\235\254\033 \004\000\000\240\254\033\016\022)\n ca"
    "lculated_ccy_last_qty_exponent\030\215\001 \001(\017\0222\n"
    "\014cont_amt_grp\030\216\001 \003(\0132\022.Common.ContAmtGrp"
    "B\007\235\254\033\006\002\000\000\022/\n\ncontra_grp\030\217\001 \003(\0132\021.Common."
    "ContraGrpB\007\235\254\033~\001\000\000\022(\n\022copy_msg_indicator"
    "\030\220\001 \001(\010B\013\235\254\033\035\003\000\000\240\254\033\007\022)\n\023cust_directed_or"
    "der\030\221\001 \001(\010B\013\235\254\033\005\004\000\000\240\254\033\007\022e\n\030cust_order_ha"
    "ndling_inst\030\222\001 \001(\01625.SingleGeneralOrderH"
    "andling.CustOrderHandlingInstEnumB\013\235\254\033\007\004"
    "\000\000\240\254\033\013\022F\n\027discretion_instructions\030\223\001 \001(\013"
    "2\036.Common.DiscretionInstructionsB\004\250\254\033\006\022&"
    "\n\020discretion_price\030\224\001 \001(\020B\013\235\254\033M\003\000\000\240\254\033\014\022\""
    "\n\031discretion_price_exponent\030\225\001 \001(\017\022>\n\023di"
    "splay_instruction\030\226\001 \001(\0132\032.Common.Displa"
    "yInstructionB\004\250\254\033\006\022.\n\030end_accrued_intere"
    "st_amt\030\227\001 \001(\020B\013\235\254\033\230\003\000\000\240\254\033\006\022*\n!end_accrue"
    "d_interest_amt_exponent\030\230\001 \001(\017\022\036\n\010end_ca"
    "sh\030\231\001 \001(\020B\013\235\254\033\232\003\000\000\240\254\033\006\022\032\n\021end_cash_expon"
    "ent\030\232\001 \001(\017\022:\n\021financing_details\030\233\001 \001(\0132\030"
    ".Common.FinancingDetailsB\004\250\254\033\006\022#\n\rhost_c"
    "ross_id\030\234\001 \001(\tB\013\235\254\033\301\003\000\000\240\254\033\017\022A\n\024instrmt_l"
    "eg_exec_grp\030\235\001 \003(\0132\031.Common.InstrmtLegEx"
    "ecGrpB\007\235\254\033+\002\000\000\022*\n\024interest_at_maturity\030\236"
    "\001 \001(\020B\013\235\254\033\342\002\000\000\240\254\033\006\022&\n\035interest_at_maturi"
    "ty_exponent\030\237\001 \001(\017\022Z\n\022last_liquidity_ind"
    "\030\240\001 \001(\01620.SingleGeneralOrderHandling.Las"
    "tLiquidityIndEnumB\013\235\254\033S\003\000\000\240\254\033\003\022!\n\013last_p"
    "ar_px\030\241\001 \001(\020B\013\235\254\033\235\002\000\000\240\254\033\014\022\035\n\024last_par_px"
    "_exponent\030\242\001 \001(\017\022(\n\022last_rpt_requested\030\243"
    "\001 \001(\010B\013\235\254\033\220\003\000\000\240\254\033\007\022&\n\020last_swap_points\030\244"
    "\001 \001(\020B\013\235\254\033/\004\000\000\240\254\033\r\022\"\n\031last_swap_points_e"
    "xponent\030\245\001 \001(\017\022G\n\010lot_type\030\246\001 \001(\0162\'.Sing"
    "leGeneralOrderHandling.LotTypeEnumB\013\235\254\033E"
    "\004\000\000\240\254\033\000\022,\n\026manual_order_indicator\030\247\001 \001(\010"
    "B\013\235\254\033\004\004\000\000\240\254\033\007\022(\n\022mass_status_req_id\030\250\001 \001"
    "(\tB\013\235\254\033H\002\000\000\240\254\033\017\022%\n\017match_increment\030\251\001 \001("
    "\020B\013\235\254\033A\004\000\000\240\254\033\016\022!\n\030match_increment_expone"
    "nt\030\252\001 \001(\017\022K\n\nmatch_type\030\253\001 \001(\0162).SingleG"
    "eneralOrderHandling.MatchTypeEnumB\013\235\254\033>\002"
    "\000\000\240\254\033\017\022&\n\020max_price_levels\030\254\001 \001(\020B\013\235\254\033B\004"
    "\000\000\240\254\033\003\0224\n\rmisc_fees_grp\030\255\001 \003(\0132\023.Common."
    "MiscFeesGrpB\007\235\254\033\210\000\000\000\022\'\n\021ord_status_req_i"
    "d\030\256\001 \001(\tB\013\235\254\033\026\003\000\000\240\254\033\017\022S\n\016order_category\030"
    "\257\001 \001(\0162-.SingleGeneralOrderHandling.Orde"
    "rCategoryEnumB\013\235\254\033[\004\000\000\240\254\033\000\022i\n\032order_hand"
    "ling_inst_source\030\260\001 \001(\01627.SingleGeneralO"
    "rderHandling.OrderHandlingInstSourceEnum"
    "B\013\235\254\033\010\004\000\000\240\254\033\003\022,\n\022participation_rate\030\261\001 \001"
    "(\020B\017\235\254\033Q\003\000\000\240\254\033\024\270\254\033\007\022$\n\033participation_rat"
    "e_exponent\030\262\001 \001(\017\0228\n\020peg_instructions\030\263\001"
    " \001(\0132\027.Common.PegInstructionsB\004\250\254\033\006\022\"\n\014p"
    "egged_price\030\264\001 \001(\020B\013\235\254\033G\003\000\000\240\254\033\014\022\036\n\025pegge"
    "d_price_exponent\030\265\001 \001(\017\022&\n\020pegged_ref_pr"
    "ice\030\266\001 \001(\020B\013\235\254\033G\004\000\000\240\254\033\014\022\"\n\031pegged_ref_pr"
    "ice_exponent\030\267\001 \001(\017\022)\n\023pre_trade_anonymi"
    "ty\030\270\001 \001(\010B\013\235\254\033C\004\000\000\240\254\033\007\022b\n\026price_protecti"
    "on_scope\030\271\001 \001(\01624.SingleGeneralOrderHand"
    "ling.PriceProtectionScopeEnumB\013\235\254\033D\004\000\000\240\254"
    "\033\000\022G\n\010qty_type\030\272\001 \001(\0162\'.SingleGeneralOrd"
    "erHandling.QtyTypeEnumB\013\235\254\033V\003\000\000\240\254\033\003\022#\n\rq"
    "uote_resp_id\030\273\001 \001(\tB\013\235\254\033\265\002\000\000\240\254\033\017\022&\n\020rece"
    "ived_dept_id\030\274\001 \001(\tB\013\235\254\033\006\004\000\000\240\254\033\017\022 \n\nstar"
    "t_cash\030\275\001 \001(\020B\013\235\254\033\231\003\000\000\240\254\033\006\022\034\n\023start_cash"
    "_exponent\030\276\001 \001(\017\022H\n\027strategy_parameters_"
    "grp\030\277\001 \003(\0132\035.Common.StrategyParametersGr"
    "pB\007\235\254\033\275\003\000\000\022U\n\017target_strategy\030\300\001 \001(\0162..S"
    "ingleGeneralOrderHandling.TargetStrategy"
    "EnumB\013\235\254\033O\003\000\000\240\254\033\003\0224\n\032target_strategy_par"
    "ameters\030\301\001 \001(\tB\017\235\254\033P\003\000\000\240\254\033\017\270\254\033\007\0221\n\033targe"
    "t_strategy_performance\030\302\001 \001(\001B\013\235\254\033R\003\000\000\240\254"
    "\033\002\022\"\n\014time_bracket\030\303\001 \001(\tB\013\235\254\033\257\003\000\000\240\254\033\017\022%"
    "\n\017tot_num_reports\030\304\001 \001(\020B\013\235\254\033\217\003\000\000\240\254\033\003\022>\n"
    "\022trd_reg_timestamps\030\305\001 \003(\0132\030.Common.TrdR"
    "egTimestampsB\007\235\254\033\000\003\000\000\022D\n\026triggering_inst"
    "ruction\030\306\001 \001(\0132\035.Common.TriggeringInstru"
    "ctionB\004\250\254\033\006\0228\n\017und_instrmt_grp\030\307\001 \003(\0132\025."
    "Common.UndInstrmtGrpB\007\235\254\033\307\002\000\000\022\036\n\010alloc_i"
    "d\030\310\001 \001(\tB\013\235\254\033F\000\000\000\240\254\033\017\022O\n\034application_seq"
    "uence_control\030\311\001 \001(\0132\".Common.Applicatio"
    "nSequenceControlB\004\250\254\033\007\022$\n\016dividend_yield"
    "\030\312\001 \001(\020B\013\235\254\033d\005\000\000\240\254\033\024\022 \n\027dividend_yield_e"
    "xponent\030\313\001 \001(\017\022A\n\tfills_grp\030\314\001 \003(\0132$.Sin"
    "gleGeneralOrderHandling.FillsGrpB\007\235\254\033R\005\000"
    "\000\022#\n\rlast_fragment\030\315\001 \001(\010B\013\235\254\033}\003\000\000\240\254\033\007\0224"
    "\n\rpre_alloc_grp\030\316\001 \003(\0132\023.Common.PreAlloc"
    "GrpB\007\235\254\033N\000\000\000\022!\n\013price_delta\030\317\001 \001(\001B\013\235\254\033+"
    "\003\000\000\240\254\033\002\022$\n\016risk_free_rate\030\320\001 \001(\001B\013\235\254\033\246\004\000"
    "\000\240\254\033\002\022(\n\022time_to_expiration\030\321\001 \001(\001B\013\235\254\033\245"
    "\004\000\000\240\254\033\002\022\"\n\014tot_no_fills\030\322\001 \001(\020B\013\235\254\033Q\005\000\000\240"
    "\254\033\003\022\"\n\014trd_match_id\030\323\001 \001(\tB\013\235\254\033p\003\000\000\240\254\033\017\022"
    " \n\nvolatility\030\324\001 \001(\001B\013\235\254\033\244\004\000\000\240\254\033\002\0221\n\013rat"
    "e_source\030\325\001 \003(\0132\022.Common.RateSourceB\007\235\254\033"
    "\245\005\000\000:\005\312\355\032\0018\"\302\005\n\022OrderStatusRequest\022\036\n\tcl"
    "_ord_id\030\001 \001(\tB\013\235\254\033\013\000\000\000\240\254\033\017\022\035\n\010order_id\030\002"
    " \001(\tB\013\235\254\033%\000\000\000\240\254\033\017\022\?\n\004side\030\003 \001(\0162$.Single"
    "GeneralOrderHandling.SideEnumB\013\235\254\0336\000\000\000\240\254"
    "\033\000\0226\n\017standard_header\030\004 \001(\0132\027.Session.St"
    "andardHeaderB\004\250\254\033\000\0228\n\020standard_trailer\030\005"
    " \001(\0132\030.Session.StandardTrailerB\004\250\254\033\000\022\034\n\007"
    "account\030\006 \001(\tB\013\235\254\033\001\000\000\000\240\254\033\017\022#\n\016cl_ord_lin"
    "k_id\030\007 \001(\tB\013\235\254\033G\002\000\000\240\254\033\017\022,\n\ninstrument\030\010 "
    "\001(\0132\022.Common.InstrumentB\004\250\254\033\005\022)\n\007parties"
    "\030\t \003(\0132\017.Common.PartiesB\007\235\254\033\305\001\000\000\022(\n\023seco"
    "ndary_cl_ord_id\030\n \001(\tB\013\235\254\033\016\002\000\000\240\254\033\017\022Q\n\016ac"
    "ct_id_source\030\013 \001(\0162,.SingleGeneralOrderH"
    "andling.AcctIdSourceEnumB\013\235\254\033\224\002\000\000\240\254\033\003\0229\n"
    "\021financing_details\030\014 \001(\0132\030.Common.Financ"
    "ingDetailsB\004\250\254\033\006\022&\n\021ord_status_req_id\030\r "
    "\001(\tB\013\235\254\033\026\003\000\000\240\254\033\017\0227\n\017und_instrmt_grp\030\016 \003("
    "\0132\025.Common.UndInstrmtGrpB\007\235\254\033\307\002\000\000:\005\312\355\032\001H"
    "\"\362\010\n\030ExecutionAcknowledgement\022\"\n\006avg_px\030"
    "\001 \001(\020B\022\235\254\033\006\000\000\000\240\254\033\014\335\363\030\374\377\377\377\022\036\n\tcl_ord_id\030\002"
    " \001(\tB\013\235\254\033\013\000\000\000\240\254\033\017\022\034\n\007cum_qty\030\003 \001(\020B\013\235\254\033\016"
    "\000\000\000\240\254\033\016\022\030\n\020cum_qty_exponent\030\004 \001(\017\022G\n\010dkr"
    "eason\030\005 \001(\0162(.SingleGeneralOrderHandling"
    ".DKReasonEnumB\013\235\254\033\177\000\000\000\240\254\033\000\022!\n\014encoded_te"
    "xt\030\006 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_le"
    "n\030\007 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022S\n\017exec_ack_status\030"
    "\010 \001(\0162-.SingleGeneralOrderHandling.ExecA"
    "ckStatusEnumB\013\235\254\033\014\004\000\000\240\254\033\000\022\034\n\007exec_id\030\t \001"
    "(\tB\013\235\254\033\021\000\000\000\240\254\033\017\0227\n\017instrmt_leg_grp\030\n \003(\013"
    "2\025.Common.InstrmtLegGrpB\007\235\254\033+\002\000\000\022,\n\ninst"
    "rument\030\013 \001(\0132\022.Common.InstrumentB\004\250\254\033\006\022 "
    "\n\013last_par_px\030\014 \001(\020B\013\235\254\033\235\002\000\000\240\254\033\014\022\034\n\024last"
    "_par_px_exponent\030\r \001(\017\022\034\n\007last_px\030\016 \001(\001B"
    "\013\235\254\033\037\000\000\000\240\254\033\014\022\035\n\010last_qty\030\017 \001(\020B\013\235\254\033 \000\000\000\240"
    "\254\033\016\022\031\n\021last_qty_exponent\030\020 \001(\017\022\035\n\010order_"
    "id\030\021 \001(\tB\013\235\254\033%\000\000\000\240\254\033\017\0222\n\016order_qty_data\030"
    "\022 \001(\0132\024.Common.OrderQtyDataB\004\250\254\033\006\022J\n\npri"
    "ce_type\030\023 \001(\0162).SingleGeneralOrderHandli"
    "ng.PriceTypeEnumB\013\235\254\033\247\001\000\000\240\254\033\003\022\'\n\022seconda"
    "ry_order_id\030\024 \001(\tB\013\235\254\033\306\000\000\000\240\254\033\017\022\?\n\004side\030\025"
    " \001(\0162$.SingleGeneralOrderHandling.SideEn"
    "umB\013\235\254\0336\000\000\000\240\254\033\000\0226\n\017standard_header\030\026 \001(\013"
    "2\027.Session.StandardHeaderB\004\250\254\033\006\0228\n\020stand"
    "ard_trailer\030\027 \001(\0132\030.Session.StandardTrai"
    "lerB\004\250\254\033\006\022\031\n\004text\030\030 \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\0227\n\017"
    "und_instrmt_grp\030\031 \003(\0132\025.Common.UndInstrm"
    "tGrpB\007\235\254\033\307\002\000\000:\006\312\355\032\002BN\"\211\006\n\rDontKnowTrade\022"
    "G\n\010dkreason\030\001 \001(\0162(.SingleGeneralOrderHa"
    "ndling.DKReasonEnumB\013\235\254\033\177\000\000\000\240\254\033\000\022\034\n\007exec"
    "_id\030\002 \001(\tB\013\235\254\033\021\000\000\000\240\254\033\017\022\034\n\007last_px\030\003 \001(\001B"
    "\013\235\254\033\037\000\000\000\240\254\033\014\022\035\n\010last_qty\030\004 \001(\020B\013\235\254\033 \000\000\000\240"
    "\254\033\016\022\031\n\021last_qty_exponent\030\005 \001(\017\022\035\n\010order_"
    "id\030\006 \001(\tB\013\235\254\033%\000\000\000\240\254\033\017\022\?\n\004side\030\007 \001(\0162$.Si"
    "ngleGeneralOrderHandling.SideEnumB\013\235\254\0336\000"
    "\000\000\240\254\033\000\0226\n\017standard_header\030\010 \001(\0132\027.Sessio"
    "n.StandardHeaderB\004\250\254\033\002\0228\n\020standard_trail"
    "er\030\t \001(\0132\030.Session.StandardTrailerB\004\250\254\033\002"
    "\022\031\n\004text\030\n \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022!\n\014encoded_t"
    "ext\030\013 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_l"
    "en\030\014 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022,\n\ninstrument\030\r \001("
    "\0132\022.Common.InstrumentB\004\250\254\033\005\0222\n\016order_qty"
    "_data\030\016 \001(\0132\024.Common.OrderQtyDataB\004\250\254\033\005\022"
    "7\n\017instrmt_leg_grp\030\017 \003(\0132\025.Common.Instrm"
    "tLegGrpB\007\235\254\033+\002\000\000\022\'\n\022secondary_order_id\030\020"
    " \001(\tB\013\235\254\033\306\000\000\000\240\254\033\017\0227\n\017und_instrmt_grp\030\021 \003"
    "(\0132\025.Common.UndInstrmtGrpB\007\235\254\033\307\002\000\000:\005\312\355\032\001"
    "Q*\333\001\n\020AcctIdSourceEnum\022\035\n\022ACCT_ID_SOURCE"
    "_BIC\020\000\032\005\242\224#\0011\022\"\n\027ACCT_ID_SOURCE_DTCCCODE"
    "\020\001\032\005\242\224#\0015\022\037\n\024ACCT_ID_SOURCE_OMGEO\020\002\032\005\242\224#"
    "\0014\022 \n\024ACCT_ID_SOURCE_OTHER\020\003\032\006\242\224#\00299\022\"\n\027"
    "ACCT_ID_SOURCE_SID_CODE\020\004\032\005\242\224#\0012\022\035\n\022ACCT"
    "_ID_SOURCE_TFM\020\005\032\005\242\224#\0013*\351\002\n\017AccountTypeE"
    "num\022-\n\"ACCOUNT_TYPE_CARRIED_CUSTOMER_SID"
    "E\020\000\032\005\242\224#\0011\0221\n&ACCOUNT_TYPE_CARRIED_NON_C"
    "USTOMER_SIDE\020\001\032\005\242\224#\0012\022@\n5ACCOUNT_TYPE_CA"
    "RRIED_NON_CUSTOMER_SIDE_CROSS_MARGINED\020\002"
    "\032\005\242\224#\0016\022$\n\031ACCOUNT_TYPE_FLOOR_TRADER\020\003\032\005"
    "\242\224#\0014\022$\n\031ACCOUNT_TYPE_HOUSE_TRADER\020\004\032\005\242\224"
    "#\0013\0223\n(ACCOUNT_TYPE_HOUSE_TRADER_CROSS_M"
    "ARGINED\020\005\032\005\242\224#\0017\0221\n&ACCOUNT_TYPE_JOINT_B"
    "ACK_OFFICE_ACCOUNT\020\006\032\005\242\224#\0018*\245\001\n\022DayBooki"
    "ngInstEnum\022 \n\025DAY_BOOKING_INST_AUTO\020\000\032\005\242"
    "\224#\0010\022E\n:DAY_BOOKING_INST_SPEAK_WITH_ORDE"
    "R_INITIATOR_BEFORE_BOOKING\020\001\032\005\242\224#\0011\022&\n\033D"
    "AY_BOOKING_INST_ACCUMULATE\020\002\032\005\242\224#\0012*\325\001\n\017"
    "BookingUnitEnum\022<\n1BOOKING_UNIT_AGGREGAT"
    "E_EXECUTIONS_FOR_THIS_SYMBOL\020\000\032\005\242\224#\0012\022B\n"
    "7BOOKING_UNIT_AGGREGATE_PARTIAL_EXECUTIO"
    "NS_ON_THIS_ORDER\020\001\032\005\242\224#\0011\022@\n5BOOKING_UNI"
    "T_EACH_PARTIAL_EXECUTION_IS_ABOOKABLE_UN"
    "IT\020\002\032\005\242\224#\0010*e\n\022PreallocMethodEnum\022*\n\037PRE"
    "ALLOC_METHOD_DO_NOT_PRO_RATA\020\000\032\005\242\224#\0011\022#\n"
    "\030PREALLOC_METHOD_PRO_RATA\020\001\032\005\242\224#\0010*\242\003\n\rS"
    "ettlTypeEnum\022\032\n\017SETTL_TYPE_CASH\020\000\032\005\242\224#\0011"
    "\022\034\n\021SETTL_TYPE_FUTURE\020\001\032\005\242\224#\0016\022\036\n\023SETTL_"
    "TYPE_NEXT_DAY\020\002\032\005\242\224#\0012\022\035\n\022SETTL_TYPE_REG"
    "ULAR\020\003\032\005\242\224#\0010\022$\n\031SETTL_TYPE_SELLERS_OPTI"
    "ON\020\004\032\005\242\224#\0018\022\034\n\021SETTL_TYPE_TPLUS2\020\005\032\005\242\224#\001"
    "3\022\034\n\021SETTL_TYPE_TPLUS3\020\006\032\005\242\224#\0014\022\034\n\021SETTL"
    "_TYPE_TPLUS4\020\007\032\005\242\224#\0015\022(\n\035SETTL_TYPE_WHEN"
    "_AND_IF_ISSUED\020\010\032\005\242\224#\0017\022\034\n\021SETTL_TYPE_TP"
    "LUS5\020\t\032\005\242\224#\0019\022-\n\"SETTL_TYPE_FX_SPOT_NEXT"
    "_SETTLEMENT\020\n\032\005\242\224#\001C\022!\n\026SETTL_TYPE_BROKE"
    "N_DATE\020\013\032\005\242\224#\001B*v\n\016CashMarginEnum\022\033\n\020CAS"
    "H_MARGIN_CASH\020\000\032\005\242\224#\0011\022#\n\030CASH_MARGIN_MA"
    "RGIN_CLOSE\020\001\032\005\242\224#\0013\022\"\n\027CASH_MARGIN_MARGI"
    "N_OPEN\020\002\032\005\242\224#\0012*\240\006\n\030ClearingFeeIndicator"
    "Enum\022;\n0CLEARING_FEE_INDICATOR_ALL_OTHER"
    "_OWNERSHIP_TYPES\020\000\032\005\242\224#\001M\022,\n!CLEARING_FE"
    "E_INDICATOR_CBOEMEMBER\020\001\032\005\242\224#\001B\022C\n8CLEAR"
    "ING_FEE_INDICATOR_EQUITY_MEMBER_AND_CLEA"
    "RING_MEMBER\020\002\032\005\242\224#\001E\0225\n*CLEARING_FEE_IND"
    "ICATOR_FIFTH_YEAR_DELEGATE\020\003\032\005\242\224#\0015\0222\n\'C"
    "LEARING_FEE_INDICATOR_FIRMS106HAND106J\020\004"
    "\032\005\242\224#\001H\0225\n*CLEARING_FEE_INDICATOR_FIRST_"
    "YEAR_DELEGATE\020\005\032\005\242\224#\0011\0226\n+CLEARING_FEE_I"
    "NDICATOR_FOURTH_YEAR_DELEGATE\020\006\032\005\242\224#\0014\022;"
    "\n0CLEARING_FEE_INDICATOR_FULL_AND_ASSOCI"
    "ATE_MEMBER\020\007\032\005\242\224#\001F\022%\n\032CLEARING_FEE_INDI"
    "CATOR_GIM\020\010\032\005\242\224#\001I\0225\n*CLEARING_FEE_INDIC"
    "ATOR_LESSEE106FEMPLOYEES\020\t\032\005\242\224#\001L\0229\n.CLE"
    "ARING_FEE_INDICATOR_NON_MEMBER_AND_CUSTO"
    "MER\020\n\032\005\242\224#\001C\0226\n+CLEARING_FEE_INDICATOR_S"
    "ECOND_YEAR_DELEGATE\020\013\032\005\242\224#\0012\0225\n*CLEARING"
    "_FEE_INDICATOR_SIXTH_YEAR_DELEGATE\020\014\032\005\242\224"
    "#\0019\0225\n*CLEARING_FEE_INDICATOR_THIRD_YEAR"
    "_DELEGATE\020\r\032\005\242\224#\0013*\251\001\n\rHandlInstEnum\0229\n."
    "HANDL_INST_AUTOMATED_EXECUTION_INTERVENT"
    "ION_OK\020\000\032\005\242\224#\0012\0229\n.HANDL_INST_AUTOMATED_"
    "EXECUTION_NO_INTERVENTION\020\001\032\005\242\224#\0011\022\"\n\027HA"
    "NDL_INST_MANUAL_ORDER\020\002\032\005\242\224#\0013*\232\022\n\014ExecI"
    "nstEnum\022 \n\025EXEC_INST_ALL_OR_NONE\020\000\032\005\242\224#\001"
    "G\022\037\n\024EXEC_INST_CALL_FIRST\020\001\032\005\242\224#\001C\022$\n\031EX"
    "EC_INST_DO_NOT_INCREASE\020\002\032\005\242\224#\001E\022\"\n\027EXEC"
    "_INST_DO_NOT_REDUCE\020\003\032\005\242\224#\001F\022\035\n\022EXEC_INS"
    "T_GO_ALONG\020\004\032\005\242\224#\0013\022\031\n\016EXEC_INST_HELD\020\005\032"
    "\005\242\224#\0015\022\035\n\022EXEC_INST_NO_CROSS\020\006\032\005\242\224#\001A\022\035\n"
    "\022EXEC_INST_NOT_HELD\020\007\032\005\242\224#\0011\022\037\n\024EXEC_INS"
    "T_OKTO_CROSS\020\010\032\005\242\224#\001B\022!\n\026EXEC_INST_OVER_"
    "THE_DAY\020\t\032\005\242\224#\0014\0220\n%EXEC_INST_PARTICIPAT"
    "E_DO_NOT_INITIATE\020\n\032\005\242\224#\0016\022&\n\033EXEC_INST_"
    "PERCENT_OF_VOLUME\020\013\032\005\242\224#\001D\022%\n\032EXEC_INST_"
    "STAY_ON_BID_SIDE\020\014\032\005\242\224#\0019\022\'\n\034EXEC_INST_S"
    "TAY_ON_OFFER_SIDE\020\r\032\005\242\224#\0010\022!\n\026EXEC_INST_"
    "STRICT_SCALE\020\016\032\005\242\224#\0017\022!\n\026EXEC_INST_TRY_T"
    "O_SCALE\020\017\032\005\242\224#\0018\022\031\n\016EXEC_INST_WORK\020\020\032\005\242\224"
    "#\0012\022&\n\033EXEC_INST_INSTITUTIONS_ONLY\020\021\032\005\242\224"
    "#\001I\022!\n\022EXEC_INST_LAST_PEG\020\022\032\t\242\224#\001L\270\224#\007\022#"
    "\n\024EXEC_INST_MARKET_PEG\020\023\032\t\242\224#\001P\270\224#\007\022&\n\027E"
    "XEC_INST_MID_PRICE_PEG\020\024\032\t\242\224#\001M\270\224#\007\022#\n\030E"
    "XEC_INST_NON_NEGOTIABLE\020\025\032\005\242\224#\001N\022$\n\025EXEC"
    "_INST_OPENING_PEG\020\026\032\t\242\224#\001O\270\224#\007\022$\n\025EXEC_I"
    "NST_PRIMARY_PEG\020\027\032\t\242\224#\001R\270\224#\007\022\034\n\021EXEC_INS"
    "T_SUSPEND\020\030\032\005\242\224#\001S\0221\n&EXEC_INST_CUSTOMER"
    "_DISPLAY_INSTRUCTION\020\031\032\005\242\224#\001U\022\034\n\021EXEC_IN"
    "ST_NETTING\020\032\032\005\242\224#\001V\022$\n\025EXEC_INST_PEG_TO_"
    "VWAP\020\033\032\t\242\224#\001W\270\224#\007\022-\n\"EXEC_INST_CANCEL_ON"
    "_SYSTEM_FAILURE\020\034\032\005\242\224#\001Q\022+\n EXEC_INST_CA"
    "NCEL_ON_TRADING_HALT\020\035\032\005\242\224#\001K\0220\n%EXEC_IN"
    "ST_REINSTATE_ON_SYSTEM_FAILURE\020\036\032\005\242\224#\001H\022"
    ".\n#EXEC_INST_REINSTATE_ON_TRADING_HALT\020\037"
    "\032\005\242\224#\001J\022 \n\025EXEC_INST_TRADE_ALONG\020 \032\005\242\224#\001"
    "X\022 \n\025EXEC_INST_TRY_TO_STOP\020!\032\005\242\224#\001Y\022\'\n\034E"
    "XEC_INST_CANCEL_IF_NOT_BEST\020\"\032\005\242\224#\001Z\0221\n&"
    "EXEC_INST_IGNORE_PRICE_VALIDITY_CHECKS\020#"
    "\032\005\242\224#\001c\022+\n\034EXEC_INST_PEG_TO_LIMIT_PRICE\020"
    "$\032\t\242\224#\001d\270\224#\007\022!\n\026EXEC_INST_STRICT_LIMIT\020%"
    "\032\005\242\224#\001b\022*\n\033EXEC_INST_TRAILING_STOP_PEG\020&"
    "\032\t\242\224#\001a\270\224#\007\022,\n!EXEC_INST_WORK_TO_TARGET_"
    "STRATEGY\020\'\032\005\242\224#\001e\022&\n\033EXEC_INST_INTERMARK"
    "ET_SWEEP\020(\032\005\242\224#\001f\022\?\n4EXEC_INST_SINGLE_EX"
    "ECUTION_REQUESTED_FOR_BLOCK_TRADE\020)\032\005\242\224#"
    "\001j\022-\n\"EXEC_INST_EXTERNAL_ROUTING_ALLOWED"
    "\020*\032\005\242\224#\001g\0221\n&EXEC_INST_EXTERNAL_ROUTING_"
    "NOT_ALLOWED\020+\032\005\242\224#\001h\022#\n\030EXEC_INST_IMBALA"
    "NCE_ONLY\020,\032\005\242\224#\001i\022#\n\030EXEC_INST_BEST_EXEC"
    "UTION\020-\032\005\242\224#\001k\022N\n\?EXEC_INST_FIXED_PEG_TO"
    "_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDE"
    "R\020.\032\t\242\224#\001T\270\224#\007\022.\n#EXEC_INST_CANCEL_ON_CO"
    "NNECTION_LOSS\020/\032\005\242\224#\001o\0221\n&EXEC_INST_REIN"
    "STATE_ON_CONNECTION_LOSS\0200\032\005\242\224#\001n\022,\n!EXE"
    "C_INST_RELEASE_FROM_SUSPENSION\0201\032\005\242\224#\001q\022"
    "/\n$EXEC_INST_SUSPEND_ON_CONNECTION_LOSS\020"
    "2\032\005\242\224#\001p\022.\n#EXEC_INST_SUSPEND_ON_SYSTEM_"
    "FAILURE\0203\032\005\242\224#\001l\022,\n!EXEC_INST_SUSPEND_ON"
    "_TRADING_HALT\0204\032\005\242\224#\001m\022-\n\"EXEC_INST_EXEC"
    "UTE_AS_DELTA_NEUTRAL\0205\032\005\242\224#\001r\0220\n%EXEC_IN"
    "ST_EXECUTE_AS_DURATION_NEUTRAL\0206\032\005\242\224#\001s\022"
    "*\n\037EXEC_INST_EXECUTE_AS_FX_NEUTRAL\0207\032\005\242\224"
    "#\001t*\214\002\n\031ExDestinationIdSourceEnum\022\'\n\034EX_"
    "DESTINATION_ID_SOURCE_BIC\020\000\032\005\242\224#\001B\0226\n+EX"
    "_DESTINATION_ID_SOURCE_GENERAL_IDENTIFIE"
    "R\020\001\032\005\242\224#\001C\0224\n)EX_DESTINATION_ID_SOURCE_I"
    "SO_COUNTRY_CODE\020\002\032\005\242\224#\001E\022\'\n\034EX_DESTINATI"
    "ON_ID_SOURCE_MIC\020\003\032\005\242\224#\001G\022/\n$EX_DESTINAT"
    "ION_ID_SOURCE_PROPRIETARY\020\004\032\005\242\224#\001D*\233\002\n\017P"
    "rocessCodeEnum\022\037\n\024PROCESS_CODE_REGULAR\020\000"
    "\032\005\242\224#\0010\022#\n\030PROCESS_CODE_SOFT_DOLLAR\020\001\032\005\242"
    "\224#\0011\022+\n PROCESS_CODE_SOFT_DOLLAR_STEP_IN"
    "\020\002\032\005\242\224#\0014\022,\n!PROCESS_CODE_SOFT_DOLLAR_ST"
    "EP_OUT\020\003\032\005\242\224#\0015\022\037\n\024PROCESS_CODE_STEP_IN\020"
    "\004\032\005\242\224#\0012\022 \n\025PROCESS_CODE_STEP_OUT\020\005\032\005\242\224#"
    "\0013\022$\n\031PROCESS_CODE_PLAN_SPONSOR\020\006\032\005\242\224#\0016"
    "*\266\003\n\010SideEnum\022\023\n\010SIDE_BUY\020\000\032\005\242\224#\0011\022\031\n\016SI"
    "DE_BUY_MINUS\020\001\032\005\242\224#\0013\022\024\n\tSIDE_SELL\020\002\032\005\242\224"
    "#\0012\022\031\n\016SIDE_SELL_PLUS\020\003\032\005\242\224#\0014\022\032\n\017SIDE_S"
    "ELL_SHORT\020\004\032\005\242\224#\0015\022!\n\026SIDE_SELL_SHORT_EX"
    "EMPT\020\005\032\005\242\224#\0016\022\025\n\nSIDE_CROSS\020\006\032\005\242\224#\0018\022\033\n\020"
    "SIDE_UNDISCLOSED\020\007\032\005\242\224#\0017\022\033\n\020SIDE_CROSS_"
    "SHORT\020\010\032\005\242\224#\0019\022\032\n\017SIDE_AS_DEFINED\020\t\032\005\242\224#"
    "\001B\022\"\n\027SIDE_CROSS_SHORT_EXEMPT\020\n\032\005\242\224#\001A\022\030"
    "\n\rSIDE_OPPOSITE\020\013\032\005\242\224#\001C\022\026\n\013SIDE_BORROW\020"
    "\014\032\005\242\224#\001G\022\024\n\tSIDE_LEND\020\r\032\005\242\224#\001F\022\026\n\013SIDE_R"
    "EDEEM\020\016\032\005\242\224#\001E\022\031\n\016SIDE_SUBSCRIBE\020\017\032\005\242\224#\001"
    "D*G\n\016LocateReqdEnum\022\031\n\016LOCATE_REQD_NO\020\000\032"
    "\005\242\224#\001N\022\032\n\017LOCATE_REQD_YES\020\001\032\005\242\224#\001Y*{\n\013Qt"
    "yTypeEnum\022\035\n\022QTY_TYPE_CONTRACTS\020\000\032\005\242\224#\0011"
    "\022\031\n\016QTY_TYPE_UNITS\020\001\032\005\242\224#\0010\0222\n\'QTY_TYPE_"
    "UNITS_OF_MEASURE_PER_TIME_UNIT\020\002\032\005\242\224#\0012*"
    "\227\007\n\013OrdTypeEnum\022\031\n\016ORD_TYPE_LIMIT\020\000\032\005\242\224#"
    "\0012\022&\n\027ORD_TYPE_LIMIT_ON_CLOSE\020\001\032\t\242\224#\001B\270\224"
    "#\005\022\'\n\030ORD_TYPE_LIMIT_OR_BETTER\020\002\032\t\242\224#\0017\270"
    "\224#\006\022)\n\036ORD_TYPE_LIMIT_WITH_OR_WITHOUT\020\003\032"
    "\005\242\224#\0018\022\032\n\017ORD_TYPE_MARKET\020\004\032\005\242\224#\0011\022\'\n\030OR"
    "D_TYPE_MARKET_ON_CLOSE\020\005\032\t\242\224#\0015\270\224#\005\022\034\n\021O"
    "RD_TYPE_ON_BASIS\020\006\032\005\242\224#\0019\022 \n\021ORD_TYPE_ON"
    "_CLOSE\020\007\032\t\242\224#\001A\270\224#\005\022\030\n\rORD_TYPE_STOP\020\010\032\005"
    "\242\224#\0013\022\036\n\023ORD_TYPE_STOP_LIMIT\020\t\032\005\242\224#\0014\022#\n"
    "\030ORD_TYPE_WITH_OR_WITHOUT\020\n\032\005\242\224#\0016\022\032\n\017OR"
    "D_TYPE_PEGGED\020\013\032\005\242\224#\001P\022$\n\025ORD_TYPE_FOREX"
    "_MARKET\020\014\032\t\242\224#\001C\270\224#\005\022(\n\035ORD_TYPE_PREVIOU"
    "SLY_INDICATED\020\r\032\005\242\224#\001E\022%\n\032ORD_TYPE_PREVI"
    "OUSLY_QUOTED\020\016\032\005\242\224#\001D\022#\n\024ORD_TYPE_FOREX_"
    "LIMIT\020\017\032\t\242\224#\001F\270\224#\005\022/\n ORD_TYPE_FOREX_PRE"
    "VIOUSLY_QUOTED\020\020\032\t\242\224#\001H\270\224#\005\022\036\n\023ORD_TYPE_"
    "FOREX_SWAP\020\021\032\005\242\224#\001G\022\032\n\017ORD_TYPE_FUNARI\020\022"
    "\032\005\242\224#\001I\022%\n\032ORD_TYPE_MARKET_IF_TOUCHED\020\023\032"
    "\005\242\224#\001J\0222\n\'ORD_TYPE_MARKET_WITH_LEFT_OVER"
    "_AS_LIMIT\020\024\032\005\242\224#\001K\022-\n\"ORD_TYPE_NEXT_FUND"
    "_VALUATION_POINT\020\025\032\005\242\224#\001M\0221\n&ORD_TYPE_PR"
    "EVIOUS_FUND_VALUATION_POINT\020\026\032\005\242\224#\001L\022+\n "
    "ORD_TYPE_COUNTER_ORDER_SELECTION\020\027\032\005\242\224#\001"
    "Q*\203\006\n\rPriceTypeEnum\022\"\n\027PRICE_TYPE_FIXED_"
    "AMOUNT\020\000\032\005\242\224#\0013\022\036\n\023PRICE_TYPE_PER_UNIT\020\001"
    "\032\005\242\224#\0012\022 \n\025PRICE_TYPE_PERCENTAGE\020\002\032\005\242\224#\001"
    "1\022\036\n\023PRICE_TYPE_DISCOUNT\020\003\032\005\242\224#\0014\022\035\n\022PRI"
    "CE_TYPE_PREMIUM\020\004\032\005\242\224#\0015\022\034\n\021PRICE_TYPE_S"
    "PREAD\020\005\032\005\242\224#\0016\022\036\n\023PRICE_TYPE_TEDPRICE\020\006\032"
    "\005\242\224#\0017\022\036\n\023PRICE_TYPE_TEDYIELD\020\007\032\005\242\224#\0018\0220"
    "\n$PRICE_TYPE_FIXED_CABINET_TRADE_PRICE\020\010"
    "\032\006\242\224#\00210\0223\n\'PRICE_TYPE_VARIABLE_CABINET_"
    "TRADE_PRICE\020\t\032\006\242\224#\00211\022\033\n\020PRICE_TYPE_YIEL"
    "D\020\n\032\005\242\224#\0019\022.\n\"PRICE_TYPE_PRODUCT_TICKS_I"
    "N_EIGHTS\020\013\032\006\242\224#\00215\022/\n#PRICE_TYPE_PRODUCT"
    "_TICKS_IN_FOURTHS\020\014\032\006\242\224#\00214\022-\n!PRICE_TYP"
    "E_PRODUCT_TICKS_IN_HALFS\020\r\032\006\242\224#\00213\0229\n-PR"
    "ICE_TYPE_PRODUCT_TICKS_IN_ONE_TWENTY_EIG"
    "HTS\020\016\032\006\242\224#\00219\0222\n&PRICE_TYPE_PRODUCT_TICK"
    "S_IN_SIXTEENTHS\020\017\032\006\242\224#\00216\0224\n(PRICE_TYPE_"
    "PRODUCT_TICKS_IN_SIXTY_FORTHS\020\020\032\006\242\224#\00218\022"
    "6\n*PRICE_TYPE_PRODUCT_TICKS_IN_THIRTY_SE"
    "CONDS\020\021\032\006\242\224#\00217*\301\001\n\030PriceProtectionScope"
    "Enum\022(\n\035PRICE_PROTECTION_SCOPE_GLOBAL\020\000\032"
    "\005\242\224#\0013\022\'\n\034PRICE_PROTECTION_SCOPE_LOCAL\020\001"
    "\032\005\242\224#\0011\022*\n\037PRICE_PROTECTION_SCOPE_NATION"
    "AL\020\002\032\005\242\224#\0012\022&\n\033PRICE_PROTECTION_SCOPE_NO"
    "NE\020\003\032\005\242\224#\0010*i\n\021SolicitedFlagEnum\022+\n SOLI"
    "CITED_FLAG_WAS_NOT_SOLICITED\020\000\032\005\242\224#\001N\022\'\n"
    "\034SOLICITED_FLAG_WAS_SOLICITED\020\001\032\005\242\224#\001Y*\253"
    "\003\n\017TimeInForceEnum\022\'\n\034TIME_IN_FORCE_AT_T"
    "HE_OPENING\020\000\032\005\242\224#\0012\022\034\n\021TIME_IN_FORCE_DAY"
    "\020\001\032\005\242\224#\0010\022%\n\032TIME_IN_FORCE_FILL_OR_KILL\020"
    "\002\032\005\242\224#\0014\022)\n\036TIME_IN_FORCE_GOOD_TILL_CANC"
    "EL\020\003\032\005\242\224#\0011\022+\n TIME_IN_FORCE_GOOD_TILL_C"
    "ROSSING\020\004\032\005\242\224#\0015\022,\n!TIME_IN_FORCE_IMMEDI"
    "ATE_OR_CANCEL\020\005\032\005\242\224#\0013\022\'\n\034TIME_IN_FORCE_"
    "GOOD_TILL_DATE\020\006\032\005\242\224#\0016\022%\n\032TIME_IN_FORCE"
    "_AT_THE_CLOSE\020\007\032\005\242\224#\0017\022$\n\031TIME_IN_FORCE_"
    "AT_CROSSING\020\010\032\005\242\224#\0019\022.\n#TIME_IN_FORCE_GO"
    "OD_THROUGH_CROSSING\020\t\032\005\242\224#\0018*\340\001\n\021GtBooki"
    "ngInstEnum\022=\n2GT_BOOKING_INST_ACCUMULATE"
    "_UNTIL_FILLED_OR_EXPIRED\020\000\032\005\242\224#\0011\022H\n=GT_"
    "BOOKING_INST_ACCUMULATE_UNTIL_VERBALLLY_"
    "NOTIFIED_OTHERWISE\020\001\032\005\242\224#\0012\022B\n7GT_BOOKIN"
    "G_INST_BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXE"
    "CUTION\020\002\032\005\242\224#\0010*\207\002\n\021OrderCapacityEnum\022 \n"
    "\025ORDER_CAPACITY_AGENCY\020\000\032\005\242\224#\001A\0220\n%ORDER"
    "_CAPACITY_AGENT_FOR_OTHER_MEMBER\020\001\032\005\242\224#\001"
    "W\022$\n\031ORDER_CAPACITY_INDIVIDUAL\020\002\032\005\242\224#\001I\022"
    "#\n\030ORDER_CAPACITY_PRINCIPAL\020\003\032\005\242\224#\001P\022%\n\032"
    "ORDER_CAPACITY_PROPRIETARY\020\004\032\005\242\224#\001G\022,\n!O"
    "RDER_CAPACITY_RISKLESS_PRINCIPAL\020\005\032\005\242\224#\001"
    "R*\306\006\n\025OrderRestrictionsEnum\022N\nCORDER_RES"
    "TRICTIONS_ACTING_AS_MARKET_MAKER_OR_SPEC"
    "IALIST_IN_SECURITY\020\000\032\005\242\224#\0015\022P\nEORDER_RES"
    "TRICTIONS_ACTING_AS_MARKET_MAKER_OR_SPEC"
    "IALIST_IN_UNDERLYING\020\001\032\005\242\224#\0016\0224\n)ORDER_R"
    "ESTRICTIONS_COMPETING_MARKET_MAKER\020\002\032\005\242\224"
    "#\0014\022E\n:ORDER_RESTRICTIONS_EXTERNAL_INTER"
    "_CONNECTED_MARKET_LINKAGE\020\003\032\005\242\224#\0019\0229\n.OR"
    "DER_RESTRICTIONS_EXTERNAL_MARKET_PARTICI"
    "PANT\020\004\032\005\242\224#\0018\022,\n!ORDER_RESTRICTIONS_FORE"
    "IGN_ENTITY\020\005\032\005\242\224#\0017\022-\n\"ORDER_RESTRICTION"
    "S_INDEX_ARBITRAGE\020\006\032\005\242\224#\0012\0221\n&ORDER_REST"
    "RICTIONS_NON_INDEX_ARBITRAGE\020\007\032\005\242\224#\0013\022+\n"
    " ORDER_RESTRICTIONS_PROGRAM_TRADE\020\010\032\005\242\224#"
    "\0011\0220\n%ORDER_RESTRICTIONS_RISKLESS_ARBITR"
    "AGE\020\t\032\005\242\224#\001A\022)\n\036ORDER_RESTRICTIONS_ALGOR"
    "ITHMIC\020\n\032\005\242\224#\001E\022-\n\"ORDER_RESTRICTIONS_NO"
    "N_ALGORITHMIC\020\013\032\005\242\224#\001D\0227\n,ORDER_RESTRICT"
    "IONS_ISSUE_PRICE_STABILIZATION\020\014\032\005\242\224#\001C\022"
    ",\n!ORDER_RESTRICTIONS_ISSUER_HOLDING\020\r\032\005"
    "\242\224#\001B\022#\n\030ORDER_RESTRICTIONS_CROSS\020\016\032\005\242\224#"
    "\001F*\232\002\n\025CustOrderCapacityEnum\022(\n\035CUST_ORD"
    "ER_CAPACITY_ALL_OTHER\020\000\032\005\242\224#\0014\022P\nECUST_O"
    "RDER_CAPACITY_CLEARING_FIRM_TRADING_FOR_"
    "ITS_PROPRIETARY_ACCOUNT\020\001\032\005\242\224#\0012\022@\n5CUST"
    "_ORDER_CAPACITY_MEMBER_TRADING_FOR_ANOTH"
    "ER_MEMBER\020\002\032\005\242\224#\0013\022C\n8CUST_ORDER_CAPACIT"
    "Y_MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT\020\003"
    "\032\005\242\224#\0011*\207\001\n\014ForexReqEnum\022>\n3FOREX_REQ_DO"
    "_NOT_EXECUTE_FOREX_AFTER_SECURITY_TRADE\020"
    "\000\032\005\242\224#\001N\0227\n,FOREX_REQ_EXECUTE_FOREX_AFTE"
    "R_SECURITY_TRADE\020\001\032\005\242\224#\001Y*\202\001\n\017BookingTyp"
    "eEnum\022\033\n\020BOOKING_TYPE_CFD\020\000\032\005\242\224#\0011\022\'\n\034BO"
    "OKING_TYPE_REGULAR_BOOKING\020\001\032\005\242\224#\0010\022)\n\036B"
    "OOKING_TYPE_TOTAL_RETURN_SWAP\020\002\032\005\242\224#\0012*\364"
    "\001\n\022PositionEffectEnum\022 \n\025POSITION_EFFECT"
    "_CLOSE\020\000\032\005\242\224#\001C\022\037\n\024POSITION_EFFECT_OPEN\020"
    "\001\032\005\242\224#\001O\022\037\n\024POSITION_EFFECT_FIFO\020\002\032\005\242\224#\001"
    "F\022!\n\026POSITION_EFFECT_ROLLED\020\003\032\005\242\224#\001R\0223\n("
    "POSITION_EFFECT_CLOSE_BUT_NOTIFY_ON_OPEN"
    "\020\004\032\005\242\224#\001N\022\"\n\027POSITION_EFFECT_DEFAULT\020\005\032\005"
    "\242\224#\001D*l\n\026CoveredOrUncoveredEnum\022\'\n\034COVER"
    "ED_OR_UNCOVERED_COVERED\020\000\032\005\242\224#\0010\022)\n\036COVE"
    "RED_OR_UNCOVERED_UNCOVERED\020\001\032\005\242\224#\0011*\220\001\n\022"
    "TargetStrategyEnum\0221\n&TARGET_STRATEGY_MI"
    "NINIZE_MARKET_IMPACT\020\000\032\005\242\224#\0013\022&\n\033TARGET_"
    "STRATEGY_PARTICIPATE\020\001\032\005\242\224#\0012\022\037\n\024TARGET_"
    "STRATEGY_VWAP\020\002\032\005\242\224#\0011*\323\001\n\026CancellationR"
    "ightsEnum\0220\n%CANCELLATION_RIGHTS_NO_EXEC"
    "UTION_ONLY\020\000\032\005\242\224#\001N\022/\n$CANCELLATION_RIGH"
    "TS_NO_INSTITUTIONAL\020\001\032\005\242\224#\001O\0222\n\'CANCELLA"
    "TION_RIGHTS_NO_WAIVER_AGREEMENT\020\002\032\005\242\224#\001M"
    "\022\"\n\027CANCELLATION_RIGHTS_YES\020\003\032\005\242\224#\001Y*\231\002\n"
    "\031MoneyLaunderingStatusEnum\0224\n)MONEY_LAUN"
    "DERING_STATUS_EXEMPT_AUTHORISED\020\000\032\005\242\224#\0013"
    "\0225\n*MONEY_LAUNDERING_STATUS_EXEMPT_BELOW"
    "_LIMIT\020\001\032\005\242\224#\0011\0224\n)MONEY_LAUNDERING_STAT"
    "US_EXEMPT_MONEY_TYPE\020\002\032\005\242\224#\0012\022.\n#MONEY_L"
    "AUNDERING_STATUS_NOT_CHECKED\020\003\032\005\242\224#\001N\022)\n"
    "\036MONEY_LAUNDERING_STATUS_PASSED\020\004\032\005\242\224#\001Y"
    "*\237\n\n\031CustOrderHandlingInstEnum\0222\n%CUST_O"
    "RDER_HANDLING_INST_ADD_ON_ORDER\020\000\032\007\242\224#\003A"
    "DD\0221\n$CUST_ORDER_HANDLING_INST_ALL_OR_NO"
    "NE\020\001\032\007\242\224#\003AON\0223\n&CUST_ORDER_HANDLING_INS"
    "T_CASH_NOT_HELD\020\002\032\007\242\224#\003CNH\0224\n\'CUST_ORDER"
    "_HANDLING_INST_DIRECTED_ORDER\020\003\032\007\242\224#\003DIR"
    "\022G\n:CUST_ORDER_HANDLING_INST_EXCHANGE_FO"
    "R_PHYSICAL_TRANSACTION\020\004\032\007\242\224#\003E.W\0222\n%CUS"
    "T_ORDER_HANDLING_INST_FILL_OR_KILL\020\005\032\007\242\224"
    "#\003FOK\0223\n\'CUST_ORDER_HANDLING_INST_IMBALA"
    "NCE_ONLY\020\006\032\006\242\224#\002IO\0229\n,CUST_ORDER_HANDLIN"
    "G_INST_IMMEDIATE_OR_CANCEL\020\007\032\007\242\224#\003IOC\0224\n"
    "\'CUST_ORDER_HANDLING_INST_LIMIT_ON_CLOSE"
    "\020\010\032\007\242\224#\003LOC\0223\n&CUST_ORDER_HANDLING_INST_"
    "LIMIT_ON_OPEN\020\t\032\007\242\224#\003LOO\0225\n(CUST_ORDER_H"
    "ANDLING_INST_MARKET_AT_CLOSE\020\n\032\007\242\224#\003MAC\022"
    "4\n\'CUST_ORDER_HANDLING_INST_MARKET_AT_OP"
    "EN\020\013\032\007\242\224#\003MAO\0225\n(CUST_ORDER_HANDLING_INS"
    "T_MARKET_ON_CLOSE\020\014\032\007\242\224#\003MOC\0224\n\'CUST_ORD"
    "ER_HANDLING_INST_MARKET_ON_OPEN\020\r\032\007\242\224#\003M"
    "OO\0226\n)CUST_ORDER_HANDLING_INST_MINIMUM_Q"
    "UANTITY\020\016\032\007\242\224#\003MQT\022-\n!CUST_ORDER_HANDLIN"
    "G_INST_NOT_HELD\020\017\032\006\242\224#\002NH\0222\n%CUST_ORDER_"
    "HANDLING_INST_OVER_THE_DAY\020\020\032\007\242\224#\003OVD\022,\n"
    "\037CUST_ORDER_HANDLING_INST_PEGGED\020\021\032\007\242\224#\003"
    "PEG\0228\n+CUST_ORDER_HANDLING_INST_RESERVE_"
    "SIZE_ORDER\020\022\032\007\242\224#\003RSV\022+\n\036CUST_ORDER_HAND"
    "LING_INST_SCALE\020\023\032\007\242\224#\003SCL\022<\n/CUST_ORDER"
    "_HANDLING_INST_STOP_STOCK_TRANSACTION\020\024\032"
    "\007\242\224#\003S.W\0220\n#CUST_ORDER_HANDLING_INST_TIM"
    "E_ORDER\020\025\032\007\242\224#\003TMO\0222\n&CUST_ORDER_HANDLIN"
    "G_INST_TRAILING_STOP\020\026\032\006\242\224#\002TS\022*\n\035CUST_O"
    "RDER_HANDLING_INST_WORK\020\027\032\007\242\224#\003WRK*M\n\033Or"
    "derHandlingInstSourceEnum\022.\n#ORDER_HANDL"
    "ING_INST_SOURCE_NASDOATS\020\000\032\005\242\224#\0011*\377\001\n\024Re"
    "fOrderIdSourceEnum\022*\n\037REF_ORDER_ID_SOURC"
    "E_MD_ENTRY_ID\020\000\032\005\242\224#\0012\022\'\n\034REF_ORDER_ID_S"
    "OURCE_ORDER_ID\020\001\032\005\242\224#\0011\022-\n\"REF_ORDER_ID_"
    "SOURCE_QUOTE_ENTRY_ID\020\002\032\005\242\224#\0013\0221\n&REF_OR"
    "DER_ID_SOURCE_SECONDARY_ORDER_ID\020\003\032\005\242\224#\001"
    "0\0220\n%REF_ORDER_ID_SOURCE_ORIGINAL_ORDER_"
    "ID\020\004\032\005\242\224#\0014*\225\004\n\rOrdStatusEnum\022\036\n\023ORD_STA"
    "TUS_CANCELED\020\000\032\005\242\224#\0014\022\"\n\027ORD_STATUS_DONE"
    "_FOR_DAY\020\001\032\005\242\224#\0013\022\034\n\021ORD_STATUS_FILLED\020\002"
    "\032\005\242\224#\0012\022\031\n\016ORD_STATUS_NEW\020\003\032\005\242\224#\0010\022&\n\033OR"
    "D_STATUS_PARTIALLY_FILLED\020\004\032\005\242\224#\0011\022$\n\031OR"
    "D_STATUS_PENDING_CANCEL\020\005\032\005\242\224#\0016\022\036\n\023ORD_"
    "STATUS_REJECTED\020\006\032\005\242\224#\0018\022\035\n\022ORD_STATUS_S"
    "TOPPED\020\007\032\005\242\224#\0017\022!\n\026ORD_STATUS_PENDING_NE"
    "W\020\010\032\005\242\224#\001A\022\037\n\024ORD_STATUS_SUSPENDED\020\t\032\005\242\224"
    "#\0019\022 \n\025ORD_STATUS_CALCULATED\020\n\032\005\242\224#\001B\022\035\n"
    "\022ORD_STATUS_EXPIRED\020\013\032\005\242\224#\001C\022*\n\037ORD_STAT"
    "US_ACCEPTED_FOR_BIDDING\020\014\032\005\242\224#\001D\022%\n\032ORD_"
    "STATUS_PENDING_REPLACE\020\r\032\005\242\224#\001E\022\"\n\023ORD_S"
    "TATUS_REPLACED\020\016\032\t\242\224#\0015\270\224#\005*f\n\024WorkingIn"
    "dicatorEnum\022(\n\035WORKING_INDICATOR_NOT_WOR"
    "KING\020\000\032\005\242\224#\001N\022$\n\031WORKING_INDICATOR_WORKI"
    "NG\020\001\032\005\242\224#\001Y*x\n\024CxlRejResponseToEnum\022+\n C"
    "XL_REJ_RESPONSE_TO_ORDER_CANCEL\020\000\032\005\242\224#\0012"
    "\0223\n(CXL_REJ_RESPONSE_TO_ORDER_CANCEL_REQ"
    "UEST\020\001\032\005\242\224#\0011*\271\004\n\020CxlRejReasonEnum\022,\n!CX"
    "L_REJ_REASON_TOO_LATE_TO_CANCEL\020\000\032\005\242\224#\0010"
    "\022\'\n\034CXL_REJ_REASON_UNKNOWN_ORDER\020\001\032\005\242\224#\001"
    "1\022\'\n\034CXL_REJ_REASON_BROKER_CREDIT\020\002\032\005\242\224#"
    "\0012\0229\n.CXL_REJ_REASON_ORDER_ALREADY_IN_PE"
    "NDING_STATUS\020\003\032\005\242\224#\0013\022-\n\"CXL_REJ_REASON_"
    "DUPLICATE_CL_ORD_ID\020\004\032\005\242\224#\0016\022+\n CXL_REJ_"
    "REASON_ORIG_ORD_MOD_TIME\020\005\032\005\242\224#\0015\022E\n:CXL"
    "_REJ_REASON_UNABLE_TO_PROCESS_ORDER_MASS"
    "_CANCEL_REQUEST\020\006\032\005\242\224#\0014\022 \n\024CXL_REJ_REAS"
    "ON_OTHER\020\007\032\006\242\224#\00299\0222\n&CXL_REJ_REASON_INV"
    "ALID_PRICE_INCREMENT\020\010\032\006\242\224#\00218\0225\n*CXL_RE"
    "J_REASON_PRICE_EXCEEDS_CURRENT_PRICE\020\t\032\005"
    "\242\224#\0017\022:\n/CXL_REJ_REASON_PRICE_EXCEEDS_CU"
    "RRENT_PRICE_BAND\020\n\032\005\242\224#\0018*r\n\024LastRptRequ"
    "estedEnum\022*\n\037LAST_RPT_REQUESTED_LAST_MES"
    "SAGE\020\000\032\005\242\224#\001Y\022.\n#LAST_RPT_REQUESTED_NOT_"
    "LAST_MESSAGE\020\001\032\005\242\224#\001N*\237\001\n\rCrossTypeEnum\022"
    "\037\n\024CROSS_TYPE_CROSS_AON\020\000\032\005\242\224#\0011\022\037\n\024CROS"
    "S_TYPE_CROSS_IOC\020\001\032\005\242\224#\0012\022$\n\031CROSS_TYPE_"
    "CROSS_ONE_SIDE\020\002\032\005\242\224#\0013\022&\n\033CROSS_TYPE_CR"
    "OSS_SAME_PRICE\020\003\032\005\242\224#\0014*\326\005\n\014ExecTypeEnum"
    "\022\037\n\024EXEC_TYPE_CALCULATED\020\000\032\005\242\224#\001B\022\035\n\022EXE"
    "C_TYPE_CANCELED\020\001\032\005\242\224#\0014\022!\n\026EXEC_TYPE_DO"
    "NE_FOR_DAY\020\002\032\005\242\224#\0013\022\034\n\021EXEC_TYPE_EXPIRED"
    "\020\003\032\005\242\224#\001C\022\030\n\rEXEC_TYPE_NEW\020\004\032\005\242\224#\0010\022#\n\030E"
    "XEC_TYPE_PENDING_CANCEL\020\005\032\005\242\224#\0016\022 \n\025EXEC"
    "_TYPE_PENDING_NEW\020\006\032\005\242\224#\001A\022\035\n\022EXEC_TYPE_"
    "REJECTED\020\007\032\005\242\224#\0018\022\035\n\022EXEC_TYPE_REPLACED\020"
    "\010\032\005\242\224#\0015\022\034\n\021EXEC_TYPE_STOPPED\020\t\032\005\242\224#\0017\022\036"
    "\n\023EXEC_TYPE_SUSPENDED\020\n\032\005\242\224#\0019\022$\n\031EXEC_T"
    "YPE_PENDING_REPLACE\020\013\032\005\242\224#\001E\022\035\n\022EXEC_TYP"
    "E_RESTATED\020\014\032\005\242\224#\001D\022!\n\026EXEC_TYPE_ORDER_S"
    "TATUS\020\r\032\005\242\224#\001I\022\032\n\017EXEC_TYPE_TRADE\020\016\032\005\242\224#"
    "\001F\022!\n\026EXEC_TYPE_TRADE_CANCEL\020\017\032\005\242\224#\001H\022\"\n"
    "\027EXEC_TYPE_TRADE_CORRECT\020\020\032\005\242\224#\001G\0228\n-EXE"
    "C_TYPE_TRADE_HAS_BEEN_RELEASED_TO_CLEARI"
    "NG\020\021\032\005\242\224#\001K\022,\n!EXEC_TYPE_TRADE_IN_ACLEAR"
    "ING_HOLD\020\022\032\005\242\224#\001J\0225\n*EXEC_TYPE_TRIGGERED"
    "_OR_ACTIVATED_BY_SYSTEM\020\023\032\005\242\224#\001L*\240\007\n\020Ord"
    "RejReasonEnum\022\'\n\034ORD_REJ_REASON_BROKER_C"
    "REDIT\020\000\032\005\242\224#\0010\022)\n\036ORD_REJ_REASON_EXCHANG"
    "E_CLOSED\020\001\032\005\242\224#\0012\022-\n\"ORD_REJ_REASON_ORDE"
    "R_EXCEEDS_LIMIT\020\002\032\005\242\224#\0013\022(\n\035ORD_REJ_REAS"
    "ON_UNKNOWN_SYMBOL\020\003\032\005\242\224#\0011\022+\n ORD_REJ_RE"
    "ASON_TOO_LATE_TO_ENTER\020\004\032\005\242\224#\0014\022)\n\036ORD_R"
    "EJ_REASON_DUPLICATE_ORDER\020\005\032\005\242\224#\0016\022\'\n\034OR"
    "D_REJ_REASON_UNKNOWN_ORDER\020\006\032\005\242\224#\0015\022C\n8O"
    "RD_REJ_REASON_DUPLICATE_OF_AVERBALLY_COM"
    "MUNICATED_ORDER\020\007\032\005\242\224#\0017\022%\n\032ORD_REJ_REAS"
    "ON_STALE_ORDER\020\010\032\005\242\224#\0018\022.\n\"ORD_REJ_REASO"
    "N_INVALID_INVESTOR_ID\020\t\032\006\242\224#\00210\022.\n\"ORD_R"
    "EJ_REASON_SURVEILLENCE_OPTION\020\n\032\006\242\224#\00212\022"
    ".\n#ORD_REJ_REASON_TRADE_ALONG_REQUIRED\020\013"
    "\032\005\242\224#\0019\022;\n/ORD_REJ_REASON_UNSUPPORTED_OR"
    "DER_CHARACTERISTIC\020\014\032\006\242\224#\00211\0227\n+ORD_REJ_"
    "REASON_INCORRECT_ALLOCATED_QUANTITY\020\r\032\006\242"
    "\224#\00214\022-\n!ORD_REJ_REASON_INCORRECT_QUANTI"
    "TY\020\016\032\006\242\224#\00213\022 \n\024ORD_REJ_REASON_OTHER\020\017\032\006"
    "\242\224#\00299\022*\n\036ORD_REJ_REASON_UNKNOWN_ACCOUNT"
    "\020\020\032\006\242\224#\00215\0222\n&ORD_REJ_REASON_INVALID_PRI"
    "CE_INCREMENT\020\021\032\006\242\224#\00218\022;\n/ORD_REJ_REASON"
    "_PRICE_EXCEEDS_CURRENT_PRICE_BAND\020\022\032\006\242\224#"
    "\00216*\277\005\n\031ExecRestatementReasonEnum\0220\n%EXE"
    "C_RESTATEMENT_REASON_BROKER_OPTION\020\000\032\005\242\224"
    "#\0014\0226\n+EXEC_RESTATEMENT_REASON_GT_CORPOR"
    "ATE_ACTION\020\001\032\005\242\224#\0010\022-\n\"EXEC_RESTATEMENT_"
    "REASON_GT_RENEWAL\020\002\032\005\242\224#\0011\022\?\n4EXEC_RESTA"
    "TEMENT_REASON_PARTIAL_DECLINE_OF_ORDER_Q"
    "TY\020\003\032\005\242\224#\0015\0225\n*EXEC_RESTATEMENT_REASON_R"
    "EPRICING_OF_ORDER\020\004\032\005\242\224#\0013\0220\n%EXEC_RESTA"
    "TEMENT_REASON_VERBAL_CHANGE\020\005\032\005\242\224#\0012\022;\n0"
    "EXEC_RESTATEMENT_REASON_CANCEL_ON_SYSTEM"
    "_FAILURE\020\006\032\005\242\224#\0017\0229\n.EXEC_RESTATEMENT_RE"
    "ASON_CANCEL_ON_TRADING_HALT\020\007\032\005\242\224#\0016\022)\n\036"
    "EXEC_RESTATEMENT_REASON_MARKET\020\010\032\005\242\224#\0018\022"
    "+\n EXEC_RESTATEMENT_REASON_CANCELED\020\t\032\005\242"
    "\224#\0019\022)\n\035EXEC_RESTATEMENT_REASON_OTHER\020\n\032"
    "\006\242\224#\00299\0223\n\'EXEC_RESTATEMENT_REASON_WAREH"
    "OUSE_RECAP\020\013\032\006\242\224#\00210\022/\n#EXEC_RESTATEMENT"
    "_REASON_PEG_REFRESH\020\014\032\006\242\224#\00211*\366\t\n\rMatchT"
    "ypeEnum\0228\n,MATCH_TYPE_A1EXACT_MATCH_SUMM"
    "ARIZED_QUANTITY\020\000\032\006\242\224#\002S1\0228\n,MATCH_TYPE_"
    "A2EXACT_MATCH_SUMMARIZED_QUANTITY\020\001\032\006\242\224#"
    "\002S2\0228\n,MATCH_TYPE_A3EXACT_MATCH_SUMMARIZ"
    "ED_QUANTITY\020\002\032\006\242\224#\002S3\0228\n,MATCH_TYPE_A4EX"
    "ACT_MATCH_SUMMARIZED_QUANTITY\020\003\032\006\242\224#\002S4\022"
    "8\n,MATCH_TYPE_A5EXACT_MATCH_SUMMARIZED_Q"
    "UANTITY\020\004\032\006\242\224#\002S5\022(\n\034MATCH_TYPE_ACTACCEP"
    "TED_TRADE\020\005\032\006\242\224#\002M3\022*\n\036MATCH_TYPE_ACTDEF"
    "AULT_AFTER_M2\020\006\032\006\242\224#\002M5\022\'\n\033MATCH_TYPE_AC"
    "TDEFAULT_TRADE\020\007\032\006\242\224#\002M4\022!\n\025MATCH_TYPE_A"
    "CTM6MATCH\020\010\032\006\242\224#\002M6\0225\n)MATCH_TYPE_EXACT_"
    "MATCH_MINUS_BADGES_TIMES\020\t\032\006\242\224#\002M1\022.\n\"MA"
    "TCH_TYPE_EXACT_MATCH_PLUS2BADGES\020\n\032\006\242\224#\002"
    "A4\0228\n,MATCH_TYPE_EXACT_MATCH_PLUS2BADGES"
    "_EXEC_TIME\020\013\032\006\242\224#\002A3\022.\n\"MATCH_TYPE_EXACT"
    "_MATCH_PLUS4BADGES\020\014\032\006\242\224#\002A2\0228\n,MATCH_TY"
    "PE_EXACT_MATCH_PLUS4BADGES_EXEC_TIME\020\r\032\006"
    "\242\224#\002A1\0221\n%MATCH_TYPE_EXACT_MATCH_PLUS_EX"
    "EC_TIME\020\016\032\006\242\224#\002A5\022#\n\027MATCH_TYPE_OCSLOCKE"
    "D_IN\020\017\032\006\242\224#\002MT\022\?\n3MATCH_TYPE_STAMPED_ADV"
    "ISORIES_OR_SPECIALIST_ACCEPTS\020\020\032\006\242\224#\002AQ\022"
    ":\n.MATCH_TYPE_SUMMARIZED_MATCH_MINUS_BAD"
    "GES_TIMES\020\021\032\006\242\224#\002M2\022 \n\025MATCH_TYPE_AUTO_M"
    "ATCH\020\022\032\005\242\224#\0014\022\"\n\027MATCH_TYPE_CALL_AUCTION"
    "\020\023\032\005\242\224#\0017\022,\n!MATCH_TYPE_CONFIRMED_TRADE_"
    "REPORT\020\024\032\005\242\224#\0013\022-\n\"MATCH_TYPE_COUNTER_OR"
    "DER_SELECTION\020\025\032\005\242\224#\0016\022#\n\030MATCH_TYPE_CRO"
    "SS_AUCTION\020\026\032\005\242\224#\0015\022,\n!MATCH_TYPE_ONE_PA"
    "RTY_TRADE_REPORT\020\027\032\005\242\224#\0011\022,\n!MATCH_TYPE_"
    "TWO_PARTY_TRADE_REPORT\020\030\032\005\242\224#\0012\022\035\n\022MATCH"
    "_TYPE_ISSUING\020\031\032\005\242\224#\0018*\201\003\n\021OrderCategory"
    "Enum\022%\n\032ORDER_CATEGORY_CROSS_ORDER\020\000\032\005\242\224"
    "#\0018\022\'\n\034ORDER_CATEGORY_IMPLIED_ORDER\020\001\032\005\242"
    "\224#\0017\022&\n\033ORDER_CATEGORY_LINKED_ORDER\020\002\032\005\242"
    "\224#\0015\022(\n\035ORDER_CATEGORY_MULTILEG_ORDER\020\003\032"
    "\005\242\224#\0014\022\037\n\024ORDER_CATEGORY_ORDER\020\004\032\005\242\224#\0011\022"
    "4\n)ORDER_CATEGORY_PRIVATELY_NEGOTIATED_T"
    "RADE\020\005\032\005\242\224#\0013\022\037\n\024ORDER_CATEGORY_QUOTE\020\006\032"
    "\005\242\224#\0012\022\'\n\034ORDER_CATEGORY_QUOTE_REQUEST\020\007"
    "\032\005\242\224#\0016\022)\n\036ORDER_CATEGORY_STREAMING_PRIC"
    "E\020\010\032\005\242\224#\0019*\222\001\n\013LotTypeEnum\022\035\n\022LOT_TYPE_B"
    "LOCK_LOT\020\000\032\005\242\224#\0013\022\033\n\020LOT_TYPE_ODD_LOT\020\001\032"
    "\005\242\224#\0011\022\035\n\022LOT_TYPE_ROUND_LOT\020\002\032\005\242\224#\0012\022(\n"
    "\035LOT_TYPE_ROUND_LOT_BASED_UPON\020\003\032\005\242\224#\0014*"
    "\220\001\n\026AggressorIndicatorEnum\022;\n0AGGRESSOR_"
    "INDICATOR_ORDER_INITIATOR_IS_AGGRESSOR\020\000"
    "\032\005\242\224#\001Y\0229\n.AGGRESSOR_INDICATOR_ORDER_INI"
    "TIATOR_IS_PASSIVE\020\001\032\005\242\224#\001N*\203\002\n\024TradingSe"
    "ssionIdEnum\022)\n\036TRADING_SESSION_ID_AFTER_"
    "HOURS\020\000\032\005\242\224#\0016\022\'\n\034TRADING_SESSION_ID_AFT"
    "ERNOON\020\001\032\005\242\224#\0014\022!\n\026TRADING_SESSION_ID_DA"
    "Y\020\002\032\005\242\224#\0011\022%\n\032TRADING_SESSION_ID_EVENING"
    "\020\003\032\005\242\224#\0015\022&\n\033TRADING_SESSION_ID_HALF_DAY"
    "\020\004\032\005\242\224#\0012\022%\n\032TRADING_SESSION_ID_MORNING\020"
    "\005\032\005\242\224#\0013*\203\003\n\027TradingSessionSubIdEnum\022<\n1"
    "TRADING_SESSION_SUB_ID_CLOSING_OR_CLOSIN"
    "G_AUCTION\020\000\032\005\242\224#\0014\022,\n!TRADING_SESSION_SU"
    "B_ID_CONTINUOUS\020\001\032\005\242\224#\0013\0222\n\'TRADING_SESS"
    "ION_SUB_ID_INTRADAY_AUCTION\020\002\032\005\242\224#\0016\022<\n1"
    "TRADING_SESSION_SUB_ID_OPENING_OR_OPENIN"
    "G_AUCTION\020\003\032\005\242\224#\0012\022.\n#TRADING_SESSION_SU"
    "B_ID_POST_TRADING\020\004\032\005\242\224#\0015\022-\n\"TRADING_SE"
    "SSION_SUB_ID_PRE_TRADING\020\005\032\005\242\224#\0011\022+\n TRA"
    "DING_SESSION_SUB_ID_QUIESCENT\020\006\032\005\242\224#\0017*\254"
    "\001\n\020LastCapacityEnum\022\036\n\023LAST_CAPACITY_AGE"
    "NT\020\000\032\005\242\224#\0011\022\'\n\034LAST_CAPACITY_CROSS_AS_AG"
    "ENT\020\001\032\005\242\224#\0012\022+\n LAST_CAPACITY_CROSS_AS_P"
    "RINCIPAL\020\002\032\005\242\224#\0013\022\"\n\027LAST_CAPACITY_PRINC"
    "IPAL\020\003\032\005\242\224#\0014*d\n\020LastFragmentEnum\022%\n\032LAS"
    "T_FRAGMENT_LAST_MESSAGE\020\000\032\005\242\224#\001Y\022)\n\036LAST"
    "_FRAGMENT_NOT_LAST_MESSAGE\020\001\032\005\242\224#\001N*h\n\020R"
    "eportToExchEnum\022*\n\037REPORT_TO_EXCH_RECEIV"
    "ER_REPORTS\020\000\032\005\242\224#\001Y\022(\n\035REPORT_TO_EXCH_SE"
    "NDER_REPORTS\020\001\032\005\242\224#\001N*p\n\024TradedFlatSwitc"
    "hEnum\022-\n\"TRADED_FLAT_SWITCH_NOT_TRADED_F"
    "LAT\020\000\032\005\242\224#\001N\022)\n\036TRADED_FLAT_SWITCH_TRADE"
    "D_FLAT\020\001\032\005\242\224#\001Y*q\n\027SettlCurrFxRateCalcEn"
    "um\022)\n\036SETTL_CURR_FX_RATE_CALC_DIVIDE\020\000\032\005"
    "\242\224#\001D\022+\n SETTL_CURR_FX_RATE_CALC_MULTIPL"
    "Y\020\001\032\005\242\224#\001M*\323\001\n\031MultiLegReportingTypeEnum"
    "\022I\n>MULTI_LEG_REPORTING_TYPE_INDIVIDUAL_"
    "LEG_OF_AMULTI_LEG_SECURITY\020\000\032\005\242\224#\0012\0226\n+M"
    "ULTI_LEG_REPORTING_TYPE_MULTI_LEG_SECURI"
    "TY\020\001\032\005\242\224#\0013\0223\n(MULTI_LEG_REPORTING_TYPE_"
    "SINGLE_SECURITY\020\002\032\005\242\224#\0011*\273\003\n\021ExecPriceTy"
    "peEnum\022$\n\031EXEC_PRICE_TYPE_BID_PRICE\020\000\032\005\242"
    "\224#\001B\022)\n\036EXEC_PRICE_TYPE_CREATION_PRICE\020\001"
    "\032\005\242\224#\001C\022@\n5EXEC_PRICE_TYPE_CREATION_PRIC"
    "E_PLUS_ADJUSTMENT_AMOUNT\020\002\032\005\242\224#\001E\022A\n6EXE"
    "C_PRICE_TYPE_CREATION_PRICE_PLUS_ADJUSTM"
    "ENT_PERCENT\020\003\032\005\242\224#\001D\022&\n\033EXEC_PRICE_TYPE_"
    "OFFER_PRICE\020\004\032\005\242\224#\001O\022>\n3EXEC_PRICE_TYPE_"
    "OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT\020\005\032\005\242"
    "\224#\001Q\022\?\n4EXEC_PRICE_TYPE_OFFER_PRICE_MINU"
    "S_ADJUSTMENT_PERCENT\020\006\032\005\242\224#\001P\022\'\n\034EXEC_PR"
    "ICE_TYPE_SINGLE_PRICE\020\007\032\005\242\224#\001S*\220\001\n\025Prior"
    "ityIndicatorEnum\022E\n:PRIORITY_INDICATOR_L"
    "OST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE\020\000"
    "\032\005\242\224#\0011\0220\n%PRIORITY_INDICATOR_PRIORITY_U"
    "NCHANGED\020\001\032\005\242\224#\0010*\321\001\n\024LastLiquidityIndEn"
    "um\022-\n\"LAST_LIQUIDITY_IND_ADDED_LIQUIDITY"
    "\020\000\032\005\242\224#\0011\0222\n\'LAST_LIQUIDITY_IND_LIQUIDIT"
    "Y_ROUTED_OUT\020\001\032\005\242\224#\0013\022/\n$LAST_LIQUIDITY_"
    "IND_REMOVED_LIQUIDITY\020\002\032\005\242\224#\0012\022%\n\032LAST_L"
    "IQUIDITY_IND_AUCTION\020\003\032\005\242\224#\0014*}\n\021ExecAck"
    "StatusEnum\022#\n\030EXEC_ACK_STATUS_ACCEPTED\020\000"
    "\032\005\242\224#\0011\022\036\n\023EXEC_ACK_STATUS_DON\020\001\032\005\242\224#\0012\022"
    "#\n\030EXEC_ACK_STATUS_RECEIVED\020\002\032\005\242\224#\0010*\225\002\n"
    "\014DKReasonEnum\022%\n\032DKREASON_NO_MATCHING_OR"
    "DER\020\000\032\005\242\224#\001D\022\031\n\016DKREASON_OTHER\020\001\032\005\242\224#\001Z\022"
    "\'\n\034DKREASON_PRICE_EXCEEDS_LIMIT\020\002\032\005\242\224#\001E"
    "\022*\n\037DKREASON_QUANTITY_EXCEEDS_ORDER\020\003\032\005\242"
    "\224#\001C\022\"\n\027DKREASON_UNKNOWN_SYMBOL\020\004\032\005\242\224#\001A"
    "\022\036\n\023DKREASON_WRONG_SIDE\020\005\032\005\242\224#\001B\022*\n\037DKRE"
    "ASON_CALCULATION_DIFFERENCE\020\006\032\005\242\224#\001FB8\n\032"
    "org.fixprotocol.componentsB\032SingleGenera"
    "lOrderHandling", 49334);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "singlegeneralorderhandling.proto", &protobuf_RegisterTypes);
  AcctIdSourceUnion::default_instance_ = new AcctIdSourceUnion();
  SettlTypeUnion::default_instance_ = new SettlTypeUnion();
  TargetStrategyUnion::default_instance_ = new TargetStrategyUnion();
  NewOrderSingle::default_instance_ = new NewOrderSingle();
  OrderCancelReplaceRequest::default_instance_ = new OrderCancelReplaceRequest();
  OrderCancelRequest::default_instance_ = new OrderCancelRequest();
  CxlRejReasonUnion::default_instance_ = new CxlRejReasonUnion();
  OrderCancelReject::default_instance_ = new OrderCancelReject();
  FillsGrp::default_instance_ = new FillsGrp();
  OrdRejReasonUnion::default_instance_ = new OrdRejReasonUnion();
  ExecRestatementReasonUnion::default_instance_ = new ExecRestatementReasonUnion();
  ExecutionReport::default_instance_ = new ExecutionReport();
  OrderStatusRequest::default_instance_ = new OrderStatusRequest();
  ExecutionAcknowledgement::default_instance_ = new ExecutionAcknowledgement();
  DontKnowTrade::default_instance_ = new DontKnowTrade();
  AcctIdSourceUnion::default_instance_->InitAsDefaultInstance();
  SettlTypeUnion::default_instance_->InitAsDefaultInstance();
  TargetStrategyUnion::default_instance_->InitAsDefaultInstance();
  NewOrderSingle::default_instance_->InitAsDefaultInstance();
  OrderCancelReplaceRequest::default_instance_->InitAsDefaultInstance();
  OrderCancelRequest::default_instance_->InitAsDefaultInstance();
  CxlRejReasonUnion::default_instance_->InitAsDefaultInstance();
  OrderCancelReject::default_instance_->InitAsDefaultInstance();
  FillsGrp::default_instance_->InitAsDefaultInstance();
  OrdRejReasonUnion::default_instance_->InitAsDefaultInstance();
  ExecRestatementReasonUnion::default_instance_->InitAsDefaultInstance();
  ExecutionReport::default_instance_->InitAsDefaultInstance();
  OrderStatusRequest::default_instance_->InitAsDefaultInstance();
  ExecutionAcknowledgement::default_instance_->InitAsDefaultInstance();
  DontKnowTrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_singlegeneralorderhandling_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_singlegeneralorderhandling_2eproto {
  StaticDescriptorInitializer_singlegeneralorderhandling_2eproto() {
    protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  }
} static_descriptor_initializer_singlegeneralorderhandling_2eproto_;
const ::google::protobuf::EnumDescriptor* AcctIdSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcctIdSourceEnum_descriptor_;
}
bool AcctIdSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AccountTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountTypeEnum_descriptor_;
}
bool AccountTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DayBookingInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayBookingInstEnum_descriptor_;
}
bool DayBookingInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BookingUnitEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookingUnitEnum_descriptor_;
}
bool BookingUnitEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PreallocMethodEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreallocMethodEnum_descriptor_;
}
bool PreallocMethodEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SettlTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlTypeEnum_descriptor_;
}
bool SettlTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CashMarginEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashMarginEnum_descriptor_;
}
bool CashMarginEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ClearingFeeIndicatorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearingFeeIndicatorEnum_descriptor_;
}
bool ClearingFeeIndicatorEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HandlInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandlInstEnum_descriptor_;
}
bool HandlInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecInstEnum_descriptor_;
}
bool ExecInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExDestinationIdSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExDestinationIdSourceEnum_descriptor_;
}
bool ExDestinationIdSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProcessCodeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessCodeEnum_descriptor_;
}
bool ProcessCodeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SideEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SideEnum_descriptor_;
}
bool SideEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LocateReqdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocateReqdEnum_descriptor_;
}
bool LocateReqdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QtyTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QtyTypeEnum_descriptor_;
}
bool QtyTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrdTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdTypeEnum_descriptor_;
}
bool OrdTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceTypeEnum_descriptor_;
}
bool PriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriceProtectionScopeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriceProtectionScopeEnum_descriptor_;
}
bool PriceProtectionScopeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SolicitedFlagEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolicitedFlagEnum_descriptor_;
}
bool SolicitedFlagEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TimeInForceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeInForceEnum_descriptor_;
}
bool TimeInForceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GtBookingInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GtBookingInstEnum_descriptor_;
}
bool GtBookingInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderCapacityEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCapacityEnum_descriptor_;
}
bool OrderCapacityEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderRestrictionsEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderRestrictionsEnum_descriptor_;
}
bool OrderRestrictionsEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustOrderCapacityEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustOrderCapacityEnum_descriptor_;
}
bool CustOrderCapacityEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ForexReqEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForexReqEnum_descriptor_;
}
bool ForexReqEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BookingTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BookingTypeEnum_descriptor_;
}
bool BookingTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PositionEffectEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PositionEffectEnum_descriptor_;
}
bool PositionEffectEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CoveredOrUncoveredEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoveredOrUncoveredEnum_descriptor_;
}
bool CoveredOrUncoveredEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TargetStrategyEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetStrategyEnum_descriptor_;
}
bool TargetStrategyEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CancellationRightsEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancellationRightsEnum_descriptor_;
}
bool CancellationRightsEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MoneyLaunderingStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyLaunderingStatusEnum_descriptor_;
}
bool MoneyLaunderingStatusEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustOrderHandlingInstEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustOrderHandlingInstEnum_descriptor_;
}
bool CustOrderHandlingInstEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderHandlingInstSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderHandlingInstSourceEnum_descriptor_;
}
bool OrderHandlingInstSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RefOrderIdSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefOrderIdSourceEnum_descriptor_;
}
bool RefOrderIdSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrdStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdStatusEnum_descriptor_;
}
bool OrdStatusEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WorkingIndicatorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkingIndicatorEnum_descriptor_;
}
bool WorkingIndicatorEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CxlRejResponseToEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CxlRejResponseToEnum_descriptor_;
}
bool CxlRejResponseToEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CxlRejReasonEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CxlRejReasonEnum_descriptor_;
}
bool CxlRejReasonEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastRptRequestedEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastRptRequestedEnum_descriptor_;
}
bool LastRptRequestedEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CrossTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrossTypeEnum_descriptor_;
}
bool CrossTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecTypeEnum_descriptor_;
}
bool ExecTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrdRejReasonEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdRejReasonEnum_descriptor_;
}
bool OrdRejReasonEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecRestatementReasonEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecRestatementReasonEnum_descriptor_;
}
bool ExecRestatementReasonEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchTypeEnum_descriptor_;
}
bool MatchTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderCategoryEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCategoryEnum_descriptor_;
}
bool OrderCategoryEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LotTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotTypeEnum_descriptor_;
}
bool LotTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AggressorIndicatorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AggressorIndicatorEnum_descriptor_;
}
bool AggressorIndicatorEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionIdEnum_descriptor_;
}
bool TradingSessionIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionSubIdEnum_descriptor_;
}
bool TradingSessionSubIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastCapacityEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastCapacityEnum_descriptor_;
}
bool LastCapacityEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastFragmentEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastFragmentEnum_descriptor_;
}
bool LastFragmentEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportToExchEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportToExchEnum_descriptor_;
}
bool ReportToExchEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradedFlatSwitchEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradedFlatSwitchEnum_descriptor_;
}
bool TradedFlatSwitchEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SettlCurrFxRateCalcEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlCurrFxRateCalcEnum_descriptor_;
}
bool SettlCurrFxRateCalcEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MultiLegReportingTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLegReportingTypeEnum_descriptor_;
}
bool MultiLegReportingTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecPriceTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecPriceTypeEnum_descriptor_;
}
bool ExecPriceTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PriorityIndicatorEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PriorityIndicatorEnum_descriptor_;
}
bool PriorityIndicatorEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastLiquidityIndEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastLiquidityIndEnum_descriptor_;
}
bool LastLiquidityIndEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExecAckStatusEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecAckStatusEnum_descriptor_;
}
bool ExecAckStatusEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DKReasonEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DKReasonEnum_descriptor_;
}
bool DKReasonEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AcctIdSourceUnion::kAcctIdSourceFieldNumber;
const int AcctIdSourceUnion::kAcctIdSourceSfixed64FieldNumber;
#endif  // !_MSC_VER

AcctIdSourceUnion::AcctIdSourceUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.AcctIdSourceUnion)
}

void AcctIdSourceUnion::InitAsDefaultInstance() {
}

AcctIdSourceUnion::AcctIdSourceUnion(const AcctIdSourceUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.AcctIdSourceUnion)
}

void AcctIdSourceUnion::SharedCtor() {
  _cached_size_ = 0;
  acct_id_source_ = 0;
  acct_id_source_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcctIdSourceUnion::~AcctIdSourceUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.AcctIdSourceUnion)
  SharedDtor();
}

void AcctIdSourceUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcctIdSourceUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcctIdSourceUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcctIdSourceUnion_descriptor_;
}

const AcctIdSourceUnion& AcctIdSourceUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

AcctIdSourceUnion* AcctIdSourceUnion::default_instance_ = NULL;

AcctIdSourceUnion* AcctIdSourceUnion::New() const {
  return new AcctIdSourceUnion;
}

void AcctIdSourceUnion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AcctIdSourceUnion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(acct_id_source_sfixed64_, acct_id_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcctIdSourceUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.AcctIdSourceUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_acct_id_source_sfixed64;
        break;
      }

      // optional sfixed64 acct_id_source_sfixed64 = 2;
      case 2: {
        if (tag == 17) {
         parse_acct_id_source_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &acct_id_source_sfixed64_)));
          set_has_acct_id_source_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.AcctIdSourceUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.AcctIdSourceUnion)
  return false;
#undef DO_
}

void AcctIdSourceUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.AcctIdSourceUnion)
  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 1;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->acct_id_source(), output);
  }

  // optional sfixed64 acct_id_source_sfixed64 = 2;
  if (has_acct_id_source_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->acct_id_source_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.AcctIdSourceUnion)
}

::google::protobuf::uint8* AcctIdSourceUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.AcctIdSourceUnion)
  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 1;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->acct_id_source(), target);
  }

  // optional sfixed64 acct_id_source_sfixed64 = 2;
  if (has_acct_id_source_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->acct_id_source_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.AcctIdSourceUnion)
  return target;
}

int AcctIdSourceUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 1;
    if (has_acct_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional sfixed64 acct_id_source_sfixed64 = 2;
    if (has_acct_id_source_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcctIdSourceUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcctIdSourceUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcctIdSourceUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcctIdSourceUnion::MergeFrom(const AcctIdSourceUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_acct_id_source_sfixed64()) {
      set_acct_id_source_sfixed64(from.acct_id_source_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcctIdSourceUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcctIdSourceUnion::CopyFrom(const AcctIdSourceUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcctIdSourceUnion::IsInitialized() const {

  return true;
}

void AcctIdSourceUnion::Swap(AcctIdSourceUnion* other) {
  if (other != this) {
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(acct_id_source_sfixed64_, other->acct_id_source_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcctIdSourceUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcctIdSourceUnion_descriptor_;
  metadata.reflection = AcctIdSourceUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SettlTypeUnion::kSettlTypeFieldNumber;
const int SettlTypeUnion::kSettlTypeTenorFieldNumber;
#endif  // !_MSC_VER

SettlTypeUnion::SettlTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.SettlTypeUnion)
}

void SettlTypeUnion::InitAsDefaultInstance() {
  settl_type_tenor_ = const_cast< ::fix::Tenor*>(&::fix::Tenor::default_instance());
}

SettlTypeUnion::SettlTypeUnion(const SettlTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.SettlTypeUnion)
}

void SettlTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  settl_type_ = 0;
  settl_type_tenor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettlTypeUnion::~SettlTypeUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.SettlTypeUnion)
  SharedDtor();
}

void SettlTypeUnion::SharedDtor() {
  if (this != default_instance_) {
    delete settl_type_tenor_;
  }
}

void SettlTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettlTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettlTypeUnion_descriptor_;
}

const SettlTypeUnion& SettlTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

SettlTypeUnion* SettlTypeUnion::default_instance_ = NULL;

SettlTypeUnion* SettlTypeUnion::New() const {
  return new SettlTypeUnion;
}

void SettlTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    settl_type_ = 0;
    if (has_settl_type_tenor()) {
      if (settl_type_tenor_ != NULL) settl_type_tenor_->::fix::Tenor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettlTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.SettlTypeUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SettlTypeEnum_IsValid(value)) {
            set_settl_type(static_cast< ::SingleGeneralOrderHandling::SettlTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_settl_type_tenor;
        break;
      }

      // optional .fix.Tenor settl_type_tenor = 2;
      case 2: {
        if (tag == 18) {
         parse_settl_type_tenor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settl_type_tenor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.SettlTypeUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.SettlTypeUnion)
  return false;
#undef DO_
}

void SettlTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.SettlTypeUnion)
  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 1;
  if (has_settl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->settl_type(), output);
  }

  // optional .fix.Tenor settl_type_tenor = 2;
  if (has_settl_type_tenor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->settl_type_tenor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.SettlTypeUnion)
}

::google::protobuf::uint8* SettlTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.SettlTypeUnion)
  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 1;
  if (has_settl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->settl_type(), target);
  }

  // optional .fix.Tenor settl_type_tenor = 2;
  if (has_settl_type_tenor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->settl_type_tenor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.SettlTypeUnion)
  return target;
}

int SettlTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 1;
    if (has_settl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_type());
    }

    // optional .fix.Tenor settl_type_tenor = 2;
    if (has_settl_type_tenor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settl_type_tenor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettlTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettlTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettlTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettlTypeUnion::MergeFrom(const SettlTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settl_type()) {
      set_settl_type(from.settl_type());
    }
    if (from.has_settl_type_tenor()) {
      mutable_settl_type_tenor()->::fix::Tenor::MergeFrom(from.settl_type_tenor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettlTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettlTypeUnion::CopyFrom(const SettlTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettlTypeUnion::IsInitialized() const {

  return true;
}

void SettlTypeUnion::Swap(SettlTypeUnion* other) {
  if (other != this) {
    std::swap(settl_type_, other->settl_type_);
    std::swap(settl_type_tenor_, other->settl_type_tenor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettlTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettlTypeUnion_descriptor_;
  metadata.reflection = SettlTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TargetStrategyUnion::kTargetStrategyFieldNumber;
const int TargetStrategyUnion::kTargetStrategySfixed64FieldNumber;
#endif  // !_MSC_VER

TargetStrategyUnion::TargetStrategyUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.TargetStrategyUnion)
}

void TargetStrategyUnion::InitAsDefaultInstance() {
}

TargetStrategyUnion::TargetStrategyUnion(const TargetStrategyUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.TargetStrategyUnion)
}

void TargetStrategyUnion::SharedCtor() {
  _cached_size_ = 0;
  target_strategy_ = 0;
  target_strategy_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TargetStrategyUnion::~TargetStrategyUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.TargetStrategyUnion)
  SharedDtor();
}

void TargetStrategyUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TargetStrategyUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TargetStrategyUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TargetStrategyUnion_descriptor_;
}

const TargetStrategyUnion& TargetStrategyUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

TargetStrategyUnion* TargetStrategyUnion::default_instance_ = NULL;

TargetStrategyUnion* TargetStrategyUnion::New() const {
  return new TargetStrategyUnion;
}

void TargetStrategyUnion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TargetStrategyUnion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(target_strategy_sfixed64_, target_strategy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TargetStrategyUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.TargetStrategyUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TargetStrategyEnum_IsValid(value)) {
            set_target_strategy(static_cast< ::SingleGeneralOrderHandling::TargetStrategyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_target_strategy_sfixed64;
        break;
      }

      // optional sfixed64 target_strategy_sfixed64 = 2;
      case 2: {
        if (tag == 17) {
         parse_target_strategy_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &target_strategy_sfixed64_)));
          set_has_target_strategy_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.TargetStrategyUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.TargetStrategyUnion)
  return false;
#undef DO_
}

void TargetStrategyUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.TargetStrategyUnion)
  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 1;
  if (has_target_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->target_strategy(), output);
  }

  // optional sfixed64 target_strategy_sfixed64 = 2;
  if (has_target_strategy_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->target_strategy_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.TargetStrategyUnion)
}

::google::protobuf::uint8* TargetStrategyUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.TargetStrategyUnion)
  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 1;
  if (has_target_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->target_strategy(), target);
  }

  // optional sfixed64 target_strategy_sfixed64 = 2;
  if (has_target_strategy_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->target_strategy_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.TargetStrategyUnion)
  return target;
}

int TargetStrategyUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 1;
    if (has_target_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_strategy());
    }

    // optional sfixed64 target_strategy_sfixed64 = 2;
    if (has_target_strategy_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetStrategyUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TargetStrategyUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TargetStrategyUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TargetStrategyUnion::MergeFrom(const TargetStrategyUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_strategy()) {
      set_target_strategy(from.target_strategy());
    }
    if (from.has_target_strategy_sfixed64()) {
      set_target_strategy_sfixed64(from.target_strategy_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TargetStrategyUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TargetStrategyUnion::CopyFrom(const TargetStrategyUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetStrategyUnion::IsInitialized() const {

  return true;
}

void TargetStrategyUnion::Swap(TargetStrategyUnion* other) {
  if (other != this) {
    std::swap(target_strategy_, other->target_strategy_);
    std::swap(target_strategy_sfixed64_, other->target_strategy_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TargetStrategyUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TargetStrategyUnion_descriptor_;
  metadata.reflection = TargetStrategyUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewOrderSingle::kAccountFieldNumber;
const int NewOrderSingle::kClOrdIdFieldNumber;
const int NewOrderSingle::kCurrencyFieldNumber;
const int NewOrderSingle::kExDestinationFieldNumber;
const int NewOrderSingle::kExecInstFieldNumber;
const int NewOrderSingle::kHandlInstFieldNumber;
const int NewOrderSingle::kIoiIdFieldNumber;
const int NewOrderSingle::kMaxFloorFieldNumber;
const int NewOrderSingle::kMaxFloorExponentFieldNumber;
const int NewOrderSingle::kMinQtyFieldNumber;
const int NewOrderSingle::kMinQtyExponentFieldNumber;
const int NewOrderSingle::kOrdTypeFieldNumber;
const int NewOrderSingle::kPriceFieldNumber;
const int NewOrderSingle::kPriceExponentFieldNumber;
const int NewOrderSingle::kProcessCodeFieldNumber;
const int NewOrderSingle::kSettlDateFieldNumber;
const int NewOrderSingle::kSettlTypeFieldNumber;
const int NewOrderSingle::kSideFieldNumber;
const int NewOrderSingle::kStandardHeaderFieldNumber;
const int NewOrderSingle::kStandardTrailerFieldNumber;
const int NewOrderSingle::kStopPxFieldNumber;
const int NewOrderSingle::kStopPxExponentFieldNumber;
const int NewOrderSingle::kTextFieldNumber;
const int NewOrderSingle::kTimeInForceFieldNumber;
const int NewOrderSingle::kExpireTimeFieldNumber;
const int NewOrderSingle::kForexReqFieldNumber;
const int NewOrderSingle::kLocateReqdFieldNumber;
const int NewOrderSingle::kPrevClosePxFieldNumber;
const int NewOrderSingle::kPrevClosePxExponentFieldNumber;
const int NewOrderSingle::kQuoteIdFieldNumber;
const int NewOrderSingle::kSettlCurrencyFieldNumber;
const int NewOrderSingle::kCoveredOrUncoveredFieldNumber;
const int NewOrderSingle::kMaxShowFieldNumber;
const int NewOrderSingle::kMaxShowExponentFieldNumber;
const int NewOrderSingle::kOrderQty2FieldNumber;
const int NewOrderSingle::kOrderQty2ExponentFieldNumber;
const int NewOrderSingle::kPositionEffectFieldNumber;
const int NewOrderSingle::kSettlDate2FieldNumber;
const int NewOrderSingle::kComplianceIdFieldNumber;
const int NewOrderSingle::kEffectiveTimeFieldNumber;
const int NewOrderSingle::kEncodedTextFieldNumber;
const int NewOrderSingle::kEncodedTextLenFieldNumber;
const int NewOrderSingle::kExpireDateFieldNumber;
const int NewOrderSingle::kGtBookingInstFieldNumber;
const int NewOrderSingle::kSolicitedFlagFieldNumber;
const int NewOrderSingle::kTransactTimeFieldNumber;
const int NewOrderSingle::kAccountTypeFieldNumber;
const int NewOrderSingle::kBookingUnitFieldNumber;
const int NewOrderSingle::kCancellationRightsFieldNumber;
const int NewOrderSingle::kCashMarginFieldNumber;
const int NewOrderSingle::kClOrdLinkIdFieldNumber;
const int NewOrderSingle::kClearingFeeIndicatorFieldNumber;
const int NewOrderSingle::kCommissionDataFieldNumber;
const int NewOrderSingle::kCustOrderCapacityFieldNumber;
const int NewOrderSingle::kDayBookingInstFieldNumber;
const int NewOrderSingle::kDesignationFieldNumber;
const int NewOrderSingle::kInstrumentFieldNumber;
const int NewOrderSingle::kMoneyLaunderingStatusFieldNumber;
const int NewOrderSingle::kOrderCapacityFieldNumber;
const int NewOrderSingle::kOrderQtyDataFieldNumber;
const int NewOrderSingle::kOrderRestrictionsFieldNumber;
const int NewOrderSingle::kPartiesFieldNumber;
const int NewOrderSingle::kPreallocMethodFieldNumber;
const int NewOrderSingle::kPrice2FieldNumber;
const int NewOrderSingle::kPrice2ExponentFieldNumber;
const int NewOrderSingle::kPriceTypeFieldNumber;
const int NewOrderSingle::kRegistIdFieldNumber;
const int NewOrderSingle::kSecondaryClOrdIdFieldNumber;
const int NewOrderSingle::kSpreadOrBenchmarkCurveDataFieldNumber;
const int NewOrderSingle::kStipulationsFieldNumber;
const int NewOrderSingle::kTradeOriginationDateFieldNumber;
const int NewOrderSingle::kYieldDataFieldNumber;
const int NewOrderSingle::kAcctIdSourceFieldNumber;
const int NewOrderSingle::kAllocIdFieldNumber;
const int NewOrderSingle::kBookingTypeFieldNumber;
const int NewOrderSingle::kCustDirectedOrderFieldNumber;
const int NewOrderSingle::kCustOrderHandlingInstFieldNumber;
const int NewOrderSingle::kDiscretionInstructionsFieldNumber;
const int NewOrderSingle::kDisplayInstructionFieldNumber;
const int NewOrderSingle::kExDestinationIdSourceFieldNumber;
const int NewOrderSingle::kFinancingDetailsFieldNumber;
const int NewOrderSingle::kManualOrderIndicatorFieldNumber;
const int NewOrderSingle::kMatchIncrementFieldNumber;
const int NewOrderSingle::kMatchIncrementExponentFieldNumber;
const int NewOrderSingle::kMaxPriceLevelsFieldNumber;
const int NewOrderSingle::kOrderHandlingInstSourceFieldNumber;
const int NewOrderSingle::kParticipationRateFieldNumber;
const int NewOrderSingle::kParticipationRateExponentFieldNumber;
const int NewOrderSingle::kPegInstructionsFieldNumber;
const int NewOrderSingle::kPreAllocGrpFieldNumber;
const int NewOrderSingle::kPreTradeAnonymityFieldNumber;
const int NewOrderSingle::kPriceProtectionScopeFieldNumber;
const int NewOrderSingle::kQtyTypeFieldNumber;
const int NewOrderSingle::kReceivedDeptIdFieldNumber;
const int NewOrderSingle::kRefOrderIdFieldNumber;
const int NewOrderSingle::kRefOrderIdSourceFieldNumber;
const int NewOrderSingle::kStrategyParametersGrpFieldNumber;
const int NewOrderSingle::kTargetStrategyFieldNumber;
const int NewOrderSingle::kTargetStrategyParametersFieldNumber;
const int NewOrderSingle::kTradeDateFieldNumber;
const int NewOrderSingle::kTrdRegTimestampsFieldNumber;
const int NewOrderSingle::kTrdgSesGrpFieldNumber;
const int NewOrderSingle::kTriggeringInstructionFieldNumber;
const int NewOrderSingle::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

NewOrderSingle::NewOrderSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.NewOrderSingle)
}

void NewOrderSingle::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  commission_data_ = const_cast< ::Common::CommissionData*>(&::Common::CommissionData::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  discretion_instructions_ = const_cast< ::Common::DiscretionInstructions*>(&::Common::DiscretionInstructions::default_instance());
  display_instruction_ = const_cast< ::Common::DisplayInstruction*>(&::Common::DisplayInstruction::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  peg_instructions_ = const_cast< ::Common::PegInstructions*>(&::Common::PegInstructions::default_instance());
  triggering_instruction_ = const_cast< ::Common::TriggeringInstruction*>(&::Common::TriggeringInstruction::default_instance());
}

NewOrderSingle::NewOrderSingle(const NewOrderSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.NewOrderSingle)
}

void NewOrderSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ex_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handl_inst_ = 0;
  ioi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_floor_ = GOOGLE_LONGLONG(0);
  max_floor_exponent_ = 0;
  min_qty_ = GOOGLE_LONGLONG(0);
  min_qty_exponent_ = 0;
  ord_type_ = 0;
  price_ = GOOGLE_LONGLONG(0);
  price_exponent_ = 0;
  process_code_ = 0;
  settl_date_ = 0;
  settl_type_ = 0;
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  stop_px_ = GOOGLE_LONGLONG(0);
  stop_px_exponent_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_in_force_ = 0;
  expire_time_ = GOOGLE_LONGLONG(0);
  forex_req_ = false;
  locate_reqd_ = false;
  prev_close_px_ = GOOGLE_LONGLONG(0);
  prev_close_px_exponent_ = 0;
  quote_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  covered_or_uncovered_ = 0;
  max_show_ = GOOGLE_LONGLONG(0);
  max_show_exponent_ = 0;
  order_qty2_ = GOOGLE_LONGLONG(0);
  order_qty2_exponent_ = 0;
  position_effect_ = 0;
  settl_date2_ = 0;
  compliance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effective_time_ = GOOGLE_LONGLONG(0);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  expire_date_ = 0;
  gt_booking_inst_ = 0;
  solicited_flag_ = false;
  transact_time_ = GOOGLE_LONGLONG(0);
  account_type_ = 0;
  booking_unit_ = 0;
  cancellation_rights_ = 0;
  cash_margin_ = 0;
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearing_fee_indicator_ = 0;
  commission_data_ = NULL;
  cust_order_capacity_ = 0;
  day_booking_inst_ = 0;
  designation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_ = NULL;
  money_laundering_status_ = 0;
  order_capacity_ = 0;
  order_qty_data_ = NULL;
  prealloc_method_ = 0;
  price2_ = GOOGLE_LONGLONG(0);
  price2_exponent_ = 0;
  price_type_ = 0;
  regist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spread_or_benchmark_curve_data_ = NULL;
  trade_origination_date_ = 0;
  yield_data_ = NULL;
  acct_id_source_ = 0;
  alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  booking_type_ = 0;
  cust_directed_order_ = false;
  cust_order_handling_inst_ = 0;
  discretion_instructions_ = NULL;
  display_instruction_ = NULL;
  ex_destination_id_source_ = 0;
  financing_details_ = NULL;
  manual_order_indicator_ = false;
  match_increment_ = GOOGLE_LONGLONG(0);
  match_increment_exponent_ = 0;
  max_price_levels_ = GOOGLE_LONGLONG(0);
  order_handling_inst_source_ = 0;
  participation_rate_ = GOOGLE_LONGLONG(0);
  participation_rate_exponent_ = 0;
  peg_instructions_ = NULL;
  pre_trade_anonymity_ = false;
  price_protection_scope_ = 0;
  qty_type_ = 0;
  received_dept_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ref_order_id_source_ = 0;
  target_strategy_ = 0;
  target_strategy_parameters_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_date_ = 0;
  triggering_instruction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewOrderSingle::~NewOrderSingle() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.NewOrderSingle)
  SharedDtor();
}

void NewOrderSingle::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (ex_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ex_destination_;
  }
  if (ioi_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ioi_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (quote_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quote_id_;
  }
  if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete settl_currency_;
  }
  if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compliance_id_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete designation_;
  }
  if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regist_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alloc_id_;
  }
  if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete received_dept_id_;
  }
  if (ref_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ref_order_id_;
  }
  if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_strategy_parameters_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete commission_data_;
    delete instrument_;
    delete order_qty_data_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
    delete discretion_instructions_;
    delete display_instruction_;
    delete financing_details_;
    delete peg_instructions_;
    delete triggering_instruction_;
  }
}

void NewOrderSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewOrderSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewOrderSingle_descriptor_;
}

const NewOrderSingle& NewOrderSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

NewOrderSingle* NewOrderSingle::default_instance_ = NULL;

NewOrderSingle* NewOrderSingle::New() const {
  return new NewOrderSingle;
}

void NewOrderSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewOrderSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_ex_destination()) {
      if (ex_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ex_destination_->clear();
      }
    }
    handl_inst_ = 0;
    if (has_ioi_id()) {
      if (ioi_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ioi_id_->clear();
      }
    }
    max_floor_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(min_qty_, settl_date_);
    max_floor_exponent_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(side_, stop_px_);
    settl_type_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    time_in_force_ = 0;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(prev_close_px_exponent_, prev_close_px_);
    ZR_(forex_req_, locate_reqd_);
    expire_time_ = GOOGLE_LONGLONG(0);
    if (has_quote_id()) {
      if (quote_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quote_id_->clear();
      }
    }
    if (has_settl_currency()) {
      if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        settl_currency_->clear();
      }
    }
    covered_or_uncovered_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(max_show_exponent_, position_effect_);
    ZR_(effective_time_, settl_date2_);
    max_show_ = GOOGLE_LONGLONG(0);
    if (has_compliance_id()) {
      if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compliance_id_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(gt_booking_inst_, booking_unit_);
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    expire_date_ = 0;
    solicited_flag_ = false;
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(cash_margin_, clearing_fee_indicator_);
    ZR_(cust_order_capacity_, day_booking_inst_);
    cancellation_rights_ = 0;
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    if (has_commission_data()) {
      if (commission_data_ != NULL) commission_data_->::Common::CommissionData::Clear();
    }
    if (has_designation()) {
      if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        designation_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & 3472883712) {
    ZR_(money_laundering_status_, order_capacity_);
    ZR_(price2_, prealloc_method_);
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 223) {
    ZR_(price_type_, trade_origination_date_);
    price2_exponent_ = 0;
    if (has_regist_id()) {
      if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regist_id_->clear();
      }
    }
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(acct_id_source_, booking_type_);
    ZR_(cust_order_handling_inst_, ex_destination_id_source_);
    if (has_alloc_id()) {
      if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alloc_id_->clear();
      }
    }
    cust_directed_order_ = false;
    if (has_discretion_instructions()) {
      if (discretion_instructions_ != NULL) discretion_instructions_->::Common::DiscretionInstructions::Clear();
    }
    if (has_display_instruction()) {
      if (display_instruction_ != NULL) display_instruction_->::Common::DisplayInstruction::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    ZR_(match_increment_, manual_order_indicator_);
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    participation_rate_exponent_ = 0;
  }
  if (_has_bits_[88 / 32] & 4244635648) {
    ZR_(price_protection_scope_, qty_type_);
    if (has_peg_instructions()) {
      if (peg_instructions_ != NULL) peg_instructions_->::Common::PegInstructions::Clear();
    }
    pre_trade_anonymity_ = false;
    if (has_received_dept_id()) {
      if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        received_dept_id_->clear();
      }
    }
    if (has_ref_order_id()) {
      if (ref_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ref_order_id_->clear();
      }
    }
    ref_order_id_source_ = 0;
  }
  if (_has_bits_[96 / 32] & 78) {
    target_strategy_ = 0;
    if (has_target_strategy_parameters()) {
      if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_strategy_parameters_->clear();
      }
    }
    trade_date_ = 0;
    if (has_triggering_instruction()) {
      if (triggering_instruction_ != NULL) triggering_instruction_->::Common::TriggeringInstruction::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  exec_inst_.Clear();
  order_restrictions_.Clear();
  parties_.Clear();
  stipulations_.Clear();
  pre_alloc_grp_.Clear();
  strategy_parameters_grp_.Clear();
  trd_reg_timestamps_.Clear();
  trdg_ses_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewOrderSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.NewOrderSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cl_ord_id;
        break;
      }

      // optional string cl_ord_id = 2;
      case 2: {
        if (tag == 18) {
         parse_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }

      // optional string currency = 3;
      case 3: {
        if (tag == 26) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ex_destination;
        break;
      }

      // optional string ex_destination = 4;
      case 4: {
        if (tag == 34) {
         parse_ex_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ex_destination().data(), this->ex_destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ex_destination");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exec_inst;
        break;
      }

      // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_exec_inst:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
              add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 40) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
            add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handl_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 6;
      case 6: {
        if (tag == 48) {
         parse_handl_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::HandlInstEnum_IsValid(value)) {
            set_handl_inst(static_cast< ::SingleGeneralOrderHandling::HandlInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ioi_id;
        break;
      }

      // optional string ioi_id = 7;
      case 7: {
        if (tag == 58) {
         parse_ioi_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ioi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ioi_id().data(), this->ioi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ioi_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_max_floor;
        break;
      }

      // optional sfixed64 max_floor = 8;
      case 8: {
        if (tag == 65) {
         parse_max_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_floor_)));
          set_has_max_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_max_floor_exponent;
        break;
      }

      // optional sfixed32 max_floor_exponent = 9;
      case 9: {
        if (tag == 77) {
         parse_max_floor_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_floor_exponent_)));
          set_has_max_floor_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_min_qty;
        break;
      }

      // optional sfixed64 min_qty = 10;
      case 10: {
        if (tag == 81) {
         parse_min_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_qty_)));
          set_has_min_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_min_qty_exponent;
        break;
      }

      // optional sfixed32 min_qty_exponent = 11;
      case 11: {
        if (tag == 93) {
         parse_min_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_qty_exponent_)));
          set_has_min_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ord_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 12;
      case 12: {
        if (tag == 96) {
         parse_ord_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdTypeEnum_IsValid(value)) {
            set_ord_type(static_cast< ::SingleGeneralOrderHandling::OrdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_price;
        break;
      }

      // optional sfixed64 price = 13;
      case 13: {
        if (tag == 105) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_price_exponent;
        break;
      }

      // optional sfixed32 price_exponent = 14;
      case 14: {
        if (tag == 117) {
         parse_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_exponent_)));
          set_has_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_process_code;
        break;
      }

      // optional .SingleGeneralOrderHandling.ProcessCodeEnum process_code = 15;
      case 15: {
        if (tag == 120) {
         parse_process_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ProcessCodeEnum_IsValid(value)) {
            set_process_code(static_cast< ::SingleGeneralOrderHandling::ProcessCodeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_settl_date;
        break;
      }

      // optional sfixed32 settl_date = 16;
      case 16: {
        if (tag == 133) {
         parse_settl_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date_)));
          set_has_settl_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_settl_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 17;
      case 17: {
        if (tag == 136) {
         parse_settl_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SettlTypeEnum_IsValid(value)) {
            set_settl_type(static_cast< ::SingleGeneralOrderHandling::SettlTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 18;
      case 18: {
        if (tag == 144) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 19;
      case 19: {
        if (tag == 154) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 20;
      case 20: {
        if (tag == 162) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_stop_px;
        break;
      }

      // optional sfixed64 stop_px = 21;
      case 21: {
        if (tag == 169) {
         parse_stop_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &stop_px_)));
          set_has_stop_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_stop_px_exponent;
        break;
      }

      // optional sfixed32 stop_px_exponent = 22;
      case 22: {
        if (tag == 181) {
         parse_stop_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stop_px_exponent_)));
          set_has_stop_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_text;
        break;
      }

      // optional string text = 23;
      case 23: {
        if (tag == 186) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_time_in_force;
        break;
      }

      // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 24;
      case 24: {
        if (tag == 192) {
         parse_time_in_force:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TimeInForceEnum_IsValid(value)) {
            set_time_in_force(static_cast< ::SingleGeneralOrderHandling::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(201)) goto parse_expire_time;
        break;
      }

      // optional sfixed64 expire_time = 25;
      case 25: {
        if (tag == 201) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_forex_req;
        break;
      }

      // optional bool forex_req = 26;
      case 26: {
        if (tag == 208) {
         parse_forex_req:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forex_req_)));
          set_has_forex_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_locate_reqd;
        break;
      }

      // optional bool locate_reqd = 27;
      case 27: {
        if (tag == 216) {
         parse_locate_reqd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locate_reqd_)));
          set_has_locate_reqd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(225)) goto parse_prev_close_px;
        break;
      }

      // optional sfixed64 prev_close_px = 28;
      case 28: {
        if (tag == 225) {
         parse_prev_close_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &prev_close_px_)));
          set_has_prev_close_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_prev_close_px_exponent;
        break;
      }

      // optional sfixed32 prev_close_px_exponent = 29;
      case 29: {
        if (tag == 237) {
         parse_prev_close_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &prev_close_px_exponent_)));
          set_has_prev_close_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_quote_id;
        break;
      }

      // optional string quote_id = 30;
      case 30: {
        if (tag == 242) {
         parse_quote_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quote_id().data(), this->quote_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quote_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_settl_currency;
        break;
      }

      // optional string settl_currency = 31;
      case 31: {
        if (tag == 250) {
         parse_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->settl_currency().data(), this->settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "settl_currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_covered_or_uncovered;
        break;
      }

      // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 32;
      case 32: {
        if (tag == 256) {
         parse_covered_or_uncovered:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CoveredOrUncoveredEnum_IsValid(value)) {
            set_covered_or_uncovered(static_cast< ::SingleGeneralOrderHandling::CoveredOrUncoveredEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_max_show;
        break;
      }

      // optional sfixed64 max_show = 33;
      case 33: {
        if (tag == 265) {
         parse_max_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_show_)));
          set_has_max_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_max_show_exponent;
        break;
      }

      // optional sfixed32 max_show_exponent = 34;
      case 34: {
        if (tag == 277) {
         parse_max_show_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_show_exponent_)));
          set_has_max_show_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_order_qty2;
        break;
      }

      // optional sfixed64 order_qty2 = 35;
      case 35: {
        if (tag == 281) {
         parse_order_qty2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &order_qty2_)));
          set_has_order_qty2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_order_qty2_exponent;
        break;
      }

      // optional sfixed32 order_qty2_exponent = 36;
      case 36: {
        if (tag == 293) {
         parse_order_qty2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_qty2_exponent_)));
          set_has_order_qty2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_position_effect;
        break;
      }

      // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 37;
      case 37: {
        if (tag == 296) {
         parse_position_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PositionEffectEnum_IsValid(value)) {
            set_position_effect(static_cast< ::SingleGeneralOrderHandling::PositionEffectEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_settl_date2;
        break;
      }

      // optional sfixed32 settl_date2 = 38;
      case 38: {
        if (tag == 309) {
         parse_settl_date2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date2_)));
          set_has_settl_date2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_compliance_id;
        break;
      }

      // optional string compliance_id = 39;
      case 39: {
        if (tag == 314) {
         parse_compliance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compliance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compliance_id().data(), this->compliance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compliance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_effective_time;
        break;
      }

      // optional sfixed64 effective_time = 40;
      case 40: {
        if (tag == 321) {
         parse_effective_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &effective_time_)));
          set_has_effective_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(330)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 41;
      case 41: {
        if (tag == 330) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 42;
      case 42: {
        if (tag == 341) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(349)) goto parse_expire_date;
        break;
      }

      // optional sfixed32 expire_date = 43;
      case 43: {
        if (tag == 349) {
         parse_expire_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &expire_date_)));
          set_has_expire_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_gt_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 44;
      case 44: {
        if (tag == 352) {
         parse_gt_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::GtBookingInstEnum_IsValid(value)) {
            set_gt_booking_inst(static_cast< ::SingleGeneralOrderHandling::GtBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_solicited_flag;
        break;
      }

      // optional bool solicited_flag = 45;
      case 45: {
        if (tag == 360) {
         parse_solicited_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solicited_flag_)));
          set_has_solicited_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(369)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 46;
      case 46: {
        if (tag == 369) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_account_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 47;
      case 47: {
        if (tag == 376) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AccountTypeEnum_IsValid(value)) {
            set_account_type(static_cast< ::SingleGeneralOrderHandling::AccountTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(47, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_booking_unit;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 48;
      case 48: {
        if (tag == 384) {
         parse_booking_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingUnitEnum_IsValid(value)) {
            set_booking_unit(static_cast< ::SingleGeneralOrderHandling::BookingUnitEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(48, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_cancellation_rights;
        break;
      }

      // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 49;
      case 49: {
        if (tag == 392) {
         parse_cancellation_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CancellationRightsEnum_IsValid(value)) {
            set_cancellation_rights(static_cast< ::SingleGeneralOrderHandling::CancellationRightsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(49, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_cash_margin;
        break;
      }

      // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 50;
      case 50: {
        if (tag == 400) {
         parse_cash_margin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CashMarginEnum_IsValid(value)) {
            set_cash_margin(static_cast< ::SingleGeneralOrderHandling::CashMarginEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 51;
      case 51: {
        if (tag == 410) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_clearing_fee_indicator;
        break;
      }

      // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 52;
      case 52: {
        if (tag == 416) {
         parse_clearing_fee_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum_IsValid(value)) {
            set_clearing_fee_indicator(static_cast< ::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(52, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_commission_data;
        break;
      }

      // optional .Common.CommissionData commission_data = 53;
      case 53: {
        if (tag == 426) {
         parse_commission_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commission_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_cust_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 54;
      case 54: {
        if (tag == 432) {
         parse_cust_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderCapacityEnum_IsValid(value)) {
            set_cust_order_capacity(static_cast< ::SingleGeneralOrderHandling::CustOrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(54, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_day_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 55;
      case 55: {
        if (tag == 440) {
         parse_day_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::DayBookingInstEnum_IsValid(value)) {
            set_day_booking_inst(static_cast< ::SingleGeneralOrderHandling::DayBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(55, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(450)) goto parse_designation;
        break;
      }

      // optional string designation = 56;
      case 56: {
        if (tag == 450) {
         parse_designation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->designation().data(), this->designation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "designation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 57;
      case 57: {
        if (tag == 458) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_money_laundering_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 58;
      case 58: {
        if (tag == 464) {
         parse_money_laundering_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum_IsValid(value)) {
            set_money_laundering_status(static_cast< ::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(58, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 59;
      case 59: {
        if (tag == 472) {
         parse_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderCapacityEnum_IsValid(value)) {
            set_order_capacity(static_cast< ::SingleGeneralOrderHandling::OrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 60;
      case 60: {
        if (tag == 482) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_order_restrictions;
        break;
      }

      // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 61 [packed = true];
      case 61: {
        if (tag == 490) {
         parse_order_restrictions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
              add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 488) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
            add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(61, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 62;
      case 62: {
        if (tag == 498) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(498)) goto parse_parties;
        if (input->ExpectTag(504)) goto parse_prealloc_method;
        break;
      }

      // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 63;
      case 63: {
        if (tag == 504) {
         parse_prealloc_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PreallocMethodEnum_IsValid(value)) {
            set_prealloc_method(static_cast< ::SingleGeneralOrderHandling::PreallocMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(63, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(513)) goto parse_price2;
        break;
      }

      // optional sfixed64 price2 = 64;
      case 64: {
        if (tag == 513) {
         parse_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(525)) goto parse_price2_exponent;
        break;
      }

      // optional sfixed32 price2_exponent = 65;
      case 65: {
        if (tag == 525) {
         parse_price2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price2_exponent_)));
          set_has_price2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_price_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 66;
      case 66: {
        if (tag == 528) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::SingleGeneralOrderHandling::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(66, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_regist_id;
        break;
      }

      // optional string regist_id = 67;
      case 67: {
        if (tag == 538) {
         parse_regist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regist_id().data(), this->regist_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regist_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 68;
      case 68: {
        if (tag == 546) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(554)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 69;
      case 69: {
        if (tag == 554) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 70;
      case 70: {
        if (tag == 562) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_stipulations;
        if (input->ExpectTag(573)) goto parse_trade_origination_date;
        break;
      }

      // optional sfixed32 trade_origination_date = 71;
      case 71: {
        if (tag == 573) {
         parse_trade_origination_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_origination_date_)));
          set_has_trade_origination_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 72;
      case 72: {
        if (tag == 578) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 73;
      case 73: {
        if (tag == 584) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(594)) goto parse_alloc_id;
        break;
      }

      // optional string alloc_id = 74;
      case 74: {
        if (tag == 594) {
         parse_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alloc_id().data(), this->alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alloc_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_booking_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 75;
      case 75: {
        if (tag == 600) {
         parse_booking_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingTypeEnum_IsValid(value)) {
            set_booking_type(static_cast< ::SingleGeneralOrderHandling::BookingTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(75, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_cust_directed_order;
        break;
      }

      // optional bool cust_directed_order = 76;
      case 76: {
        if (tag == 608) {
         parse_cust_directed_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cust_directed_order_)));
          set_has_cust_directed_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_cust_order_handling_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 77;
      case 77: {
        if (tag == 616) {
         parse_cust_order_handling_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderHandlingInstEnum_IsValid(value)) {
            set_cust_order_handling_inst(static_cast< ::SingleGeneralOrderHandling::CustOrderHandlingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(77, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(626)) goto parse_discretion_instructions;
        break;
      }

      // optional .Common.DiscretionInstructions discretion_instructions = 78;
      case 78: {
        if (tag == 626) {
         parse_discretion_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discretion_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_display_instruction;
        break;
      }

      // optional .Common.DisplayInstruction display_instruction = 79;
      case 79: {
        if (tag == 634) {
         parse_display_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_ex_destination_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 80;
      case 80: {
        if (tag == 640) {
         parse_ex_destination_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExDestinationIdSourceEnum_IsValid(value)) {
            set_ex_destination_id_source(static_cast< ::SingleGeneralOrderHandling::ExDestinationIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(80, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(650)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 81;
      case 81: {
        if (tag == 650) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(656)) goto parse_manual_order_indicator;
        break;
      }

      // optional bool manual_order_indicator = 82;
      case 82: {
        if (tag == 656) {
         parse_manual_order_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_order_indicator_)));
          set_has_manual_order_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(665)) goto parse_match_increment;
        break;
      }

      // optional sfixed64 match_increment = 83;
      case 83: {
        if (tag == 665) {
         parse_match_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &match_increment_)));
          set_has_match_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(677)) goto parse_match_increment_exponent;
        break;
      }

      // optional sfixed32 match_increment_exponent = 84;
      case 84: {
        if (tag == 677) {
         parse_match_increment_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &match_increment_exponent_)));
          set_has_match_increment_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(681)) goto parse_max_price_levels;
        break;
      }

      // optional sfixed64 max_price_levels = 85;
      case 85: {
        if (tag == 681) {
         parse_max_price_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_price_levels_)));
          set_has_max_price_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(688)) goto parse_order_handling_inst_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 86;
      case 86: {
        if (tag == 688) {
         parse_order_handling_inst_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum_IsValid(value)) {
            set_order_handling_inst_source(static_cast< ::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(86, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(697)) goto parse_participation_rate;
        break;
      }

      // optional sfixed64 participation_rate = 87;
      case 87: {
        if (tag == 697) {
         parse_participation_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &participation_rate_)));
          set_has_participation_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(709)) goto parse_participation_rate_exponent;
        break;
      }

      // optional sfixed32 participation_rate_exponent = 88;
      case 88: {
        if (tag == 709) {
         parse_participation_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &participation_rate_exponent_)));
          set_has_participation_rate_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(714)) goto parse_peg_instructions;
        break;
      }

      // optional .Common.PegInstructions peg_instructions = 89;
      case 89: {
        if (tag == 714) {
         parse_peg_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peg_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_pre_alloc_grp;
        break;
      }

      // repeated .Common.PreAllocGrp pre_alloc_grp = 90;
      case 90: {
        if (tag == 722) {
         parse_pre_alloc_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre_alloc_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(722)) goto parse_pre_alloc_grp;
        if (input->ExpectTag(728)) goto parse_pre_trade_anonymity;
        break;
      }

      // optional bool pre_trade_anonymity = 91;
      case 91: {
        if (tag == 728) {
         parse_pre_trade_anonymity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_trade_anonymity_)));
          set_has_pre_trade_anonymity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_price_protection_scope;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 92;
      case 92: {
        if (tag == 736) {
         parse_price_protection_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceProtectionScopeEnum_IsValid(value)) {
            set_price_protection_scope(static_cast< ::SingleGeneralOrderHandling::PriceProtectionScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(92, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(744)) goto parse_qty_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 93;
      case 93: {
        if (tag == 744) {
         parse_qty_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::QtyTypeEnum_IsValid(value)) {
            set_qty_type(static_cast< ::SingleGeneralOrderHandling::QtyTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(93, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(754)) goto parse_received_dept_id;
        break;
      }

      // optional string received_dept_id = 94;
      case 94: {
        if (tag == 754) {
         parse_received_dept_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_received_dept_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->received_dept_id().data(), this->received_dept_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "received_dept_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(762)) goto parse_ref_order_id;
        break;
      }

      // optional string ref_order_id = 95;
      case 95: {
        if (tag == 762) {
         parse_ref_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ref_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ref_order_id().data(), this->ref_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ref_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(768)) goto parse_ref_order_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.RefOrderIdSourceEnum ref_order_id_source = 96;
      case 96: {
        if (tag == 768) {
         parse_ref_order_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::RefOrderIdSourceEnum_IsValid(value)) {
            set_ref_order_id_source(static_cast< ::SingleGeneralOrderHandling::RefOrderIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(96, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_strategy_parameters_grp;
        break;
      }

      // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 97;
      case 97: {
        if (tag == 778) {
         parse_strategy_parameters_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategy_parameters_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_strategy_parameters_grp;
        if (input->ExpectTag(784)) goto parse_target_strategy;
        break;
      }

      // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 98;
      case 98: {
        if (tag == 784) {
         parse_target_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TargetStrategyEnum_IsValid(value)) {
            set_target_strategy(static_cast< ::SingleGeneralOrderHandling::TargetStrategyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(98, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_target_strategy_parameters;
        break;
      }

      // optional string target_strategy_parameters = 99;
      case 99: {
        if (tag == 794) {
         parse_target_strategy_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_strategy_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_strategy_parameters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(805)) goto parse_trade_date;
        break;
      }

      // optional sfixed32 trade_date = 100;
      case 100: {
        if (tag == 805) {
         parse_trade_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_date_)));
          set_has_trade_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_trd_reg_timestamps;
        break;
      }

      // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 101;
      case 101: {
        if (tag == 810) {
         parse_trd_reg_timestamps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trd_reg_timestamps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_trd_reg_timestamps;
        if (input->ExpectTag(818)) goto parse_trdg_ses_grp;
        break;
      }

      // repeated .Common.TrdgSesGrp trdg_ses_grp = 102;
      case 102: {
        if (tag == 818) {
         parse_trdg_ses_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trdg_ses_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_trdg_ses_grp;
        if (input->ExpectTag(826)) goto parse_triggering_instruction;
        break;
      }

      // optional .Common.TriggeringInstruction triggering_instruction = 103;
      case 103: {
        if (tag == 826) {
         parse_triggering_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triggering_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 104;
      case 104: {
        if (tag == 834) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.NewOrderSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.NewOrderSingle)
  return false;
#undef DO_
}

void NewOrderSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.NewOrderSingle)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cl_ord_id(), output);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency(), output);
  }

  // optional string ex_destination = 4;
  if (has_ex_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_destination().data(), this->ex_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ex_destination(), output);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 5 [packed = true];
  if (this->exec_inst_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_exec_inst_cached_byte_size_);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->exec_inst(i), output);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 6;
  if (has_handl_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->handl_inst(), output);
  }

  // optional string ioi_id = 7;
  if (has_ioi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ioi_id().data(), this->ioi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ioi_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->ioi_id(), output);
  }

  // optional sfixed64 max_floor = 8;
  if (has_max_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->max_floor(), output);
  }

  // optional sfixed32 max_floor_exponent = 9;
  if (has_max_floor_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->max_floor_exponent(), output);
  }

  // optional sfixed64 min_qty = 10;
  if (has_min_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->min_qty(), output);
  }

  // optional sfixed32 min_qty_exponent = 11;
  if (has_min_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->min_qty_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 12;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->ord_type(), output);
  }

  // optional sfixed64 price = 13;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->price(), output);
  }

  // optional sfixed32 price_exponent = 14;
  if (has_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->price_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.ProcessCodeEnum process_code = 15;
  if (has_process_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->process_code(), output);
  }

  // optional sfixed32 settl_date = 16;
  if (has_settl_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(16, this->settl_date(), output);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 17;
  if (has_settl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->settl_type(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 18;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 19;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 20;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->standard_trailer(), output);
  }

  // optional sfixed64 stop_px = 21;
  if (has_stop_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->stop_px(), output);
  }

  // optional sfixed32 stop_px_exponent = 22;
  if (has_stop_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(22, this->stop_px_exponent(), output);
  }

  // optional string text = 23;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->text(), output);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 24;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->time_in_force(), output);
  }

  // optional sfixed64 expire_time = 25;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(25, this->expire_time(), output);
  }

  // optional bool forex_req = 26;
  if (has_forex_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->forex_req(), output);
  }

  // optional bool locate_reqd = 27;
  if (has_locate_reqd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->locate_reqd(), output);
  }

  // optional sfixed64 prev_close_px = 28;
  if (has_prev_close_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(28, this->prev_close_px(), output);
  }

  // optional sfixed32 prev_close_px_exponent = 29;
  if (has_prev_close_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(29, this->prev_close_px_exponent(), output);
  }

  // optional string quote_id = 30;
  if (has_quote_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_id().data(), this->quote_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quote_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->quote_id(), output);
  }

  // optional string settl_currency = 31;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      31, this->settl_currency(), output);
  }

  // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 32;
  if (has_covered_or_uncovered()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->covered_or_uncovered(), output);
  }

  // optional sfixed64 max_show = 33;
  if (has_max_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(33, this->max_show(), output);
  }

  // optional sfixed32 max_show_exponent = 34;
  if (has_max_show_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(34, this->max_show_exponent(), output);
  }

  // optional sfixed64 order_qty2 = 35;
  if (has_order_qty2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(35, this->order_qty2(), output);
  }

  // optional sfixed32 order_qty2_exponent = 36;
  if (has_order_qty2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(36, this->order_qty2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 37;
  if (has_position_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->position_effect(), output);
  }

  // optional sfixed32 settl_date2 = 38;
  if (has_settl_date2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(38, this->settl_date2(), output);
  }

  // optional string compliance_id = 39;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->compliance_id(), output);
  }

  // optional sfixed64 effective_time = 40;
  if (has_effective_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(40, this->effective_time(), output);
  }

  // optional bytes encoded_text = 41;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      41, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 42;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(42, this->encoded_text_len(), output);
  }

  // optional sfixed32 expire_date = 43;
  if (has_expire_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(43, this->expire_date(), output);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 44;
  if (has_gt_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->gt_booking_inst(), output);
  }

  // optional bool solicited_flag = 45;
  if (has_solicited_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->solicited_flag(), output);
  }

  // optional sfixed64 transact_time = 46;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(46, this->transact_time(), output);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 47;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->account_type(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 48;
  if (has_booking_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      48, this->booking_unit(), output);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 49;
  if (has_cancellation_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      49, this->cancellation_rights(), output);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 50;
  if (has_cash_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->cash_margin(), output);
  }

  // optional string cl_ord_link_id = 51;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->cl_ord_link_id(), output);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 52;
  if (has_clearing_fee_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->clearing_fee_indicator(), output);
  }

  // optional .Common.CommissionData commission_data = 53;
  if (has_commission_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->commission_data(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 54;
  if (has_cust_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      54, this->cust_order_capacity(), output);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 55;
  if (has_day_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      55, this->day_booking_inst(), output);
  }

  // optional string designation = 56;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      56, this->designation(), output);
  }

  // optional .Common.Instrument instrument = 57;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->instrument(), output);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 58;
  if (has_money_laundering_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      58, this->money_laundering_status(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 59;
  if (has_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      59, this->order_capacity(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 60;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->order_qty_data(), output);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 61 [packed = true];
  if (this->order_restrictions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      61,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_order_restrictions_cached_byte_size_);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->order_restrictions(i), output);
  }

  // repeated .Common.Parties parties = 62;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->parties(i), output);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 63;
  if (has_prealloc_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->prealloc_method(), output);
  }

  // optional sfixed64 price2 = 64;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(64, this->price2(), output);
  }

  // optional sfixed32 price2_exponent = 65;
  if (has_price2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(65, this->price2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 66;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      66, this->price_type(), output);
  }

  // optional string regist_id = 67;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67, this->regist_id(), output);
  }

  // optional string secondary_cl_ord_id = 68;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      68, this->secondary_cl_ord_id(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 69;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      69, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 70;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->stipulations(i), output);
  }

  // optional sfixed32 trade_origination_date = 71;
  if (has_trade_origination_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(71, this->trade_origination_date(), output);
  }

  // optional .Common.YieldData yield_data = 72;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->yield_data(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 73;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->acct_id_source(), output);
  }

  // optional string alloc_id = 74;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      74, this->alloc_id(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 75;
  if (has_booking_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->booking_type(), output);
  }

  // optional bool cust_directed_order = 76;
  if (has_cust_directed_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->cust_directed_order(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 77;
  if (has_cust_order_handling_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      77, this->cust_order_handling_inst(), output);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 78;
  if (has_discretion_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      78, this->discretion_instructions(), output);
  }

  // optional .Common.DisplayInstruction display_instruction = 79;
  if (has_display_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->display_instruction(), output);
  }

  // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 80;
  if (has_ex_destination_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      80, this->ex_destination_id_source(), output);
  }

  // optional .Common.FinancingDetails financing_details = 81;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      81, this->financing_details(), output);
  }

  // optional bool manual_order_indicator = 82;
  if (has_manual_order_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->manual_order_indicator(), output);
  }

  // optional sfixed64 match_increment = 83;
  if (has_match_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(83, this->match_increment(), output);
  }

  // optional sfixed32 match_increment_exponent = 84;
  if (has_match_increment_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(84, this->match_increment_exponent(), output);
  }

  // optional sfixed64 max_price_levels = 85;
  if (has_max_price_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(85, this->max_price_levels(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 86;
  if (has_order_handling_inst_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      86, this->order_handling_inst_source(), output);
  }

  // optional sfixed64 participation_rate = 87;
  if (has_participation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(87, this->participation_rate(), output);
  }

  // optional sfixed32 participation_rate_exponent = 88;
  if (has_participation_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(88, this->participation_rate_exponent(), output);
  }

  // optional .Common.PegInstructions peg_instructions = 89;
  if (has_peg_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      89, this->peg_instructions(), output);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 90;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->pre_alloc_grp(i), output);
  }

  // optional bool pre_trade_anonymity = 91;
  if (has_pre_trade_anonymity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(91, this->pre_trade_anonymity(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 92;
  if (has_price_protection_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      92, this->price_protection_scope(), output);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 93;
  if (has_qty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      93, this->qty_type(), output);
  }

  // optional string received_dept_id = 94;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      94, this->received_dept_id(), output);
  }

  // optional string ref_order_id = 95;
  if (has_ref_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_order_id().data(), this->ref_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      95, this->ref_order_id(), output);
  }

  // optional .SingleGeneralOrderHandling.RefOrderIdSourceEnum ref_order_id_source = 96;
  if (has_ref_order_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      96, this->ref_order_id_source(), output);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 97;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      97, this->strategy_parameters_grp(i), output);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 98;
  if (has_target_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      98, this->target_strategy(), output);
  }

  // optional string target_strategy_parameters = 99;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      99, this->target_strategy_parameters(), output);
  }

  // optional sfixed32 trade_date = 100;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(100, this->trade_date(), output);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 101;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->trd_reg_timestamps(i), output);
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 102;
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->trdg_ses_grp(i), output);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 103;
  if (has_triggering_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->triggering_instruction(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 104;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.NewOrderSingle)
}

::google::protobuf::uint8* NewOrderSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.NewOrderSingle)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cl_ord_id(), target);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }

  // optional string ex_destination = 4;
  if (has_ex_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_destination().data(), this->ex_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ex_destination(), target);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 5 [packed = true];
  if (this->exec_inst_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _exec_inst_cached_byte_size_, target);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->exec_inst(i), target);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 6;
  if (has_handl_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->handl_inst(), target);
  }

  // optional string ioi_id = 7;
  if (has_ioi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ioi_id().data(), this->ioi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ioi_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ioi_id(), target);
  }

  // optional sfixed64 max_floor = 8;
  if (has_max_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->max_floor(), target);
  }

  // optional sfixed32 max_floor_exponent = 9;
  if (has_max_floor_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->max_floor_exponent(), target);
  }

  // optional sfixed64 min_qty = 10;
  if (has_min_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->min_qty(), target);
  }

  // optional sfixed32 min_qty_exponent = 11;
  if (has_min_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->min_qty_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 12;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->ord_type(), target);
  }

  // optional sfixed64 price = 13;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->price(), target);
  }

  // optional sfixed32 price_exponent = 14;
  if (has_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->price_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.ProcessCodeEnum process_code = 15;
  if (has_process_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->process_code(), target);
  }

  // optional sfixed32 settl_date = 16;
  if (has_settl_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(16, this->settl_date(), target);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 17;
  if (has_settl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->settl_type(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 18;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 19;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 20;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->standard_trailer(), target);
  }

  // optional sfixed64 stop_px = 21;
  if (has_stop_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->stop_px(), target);
  }

  // optional sfixed32 stop_px_exponent = 22;
  if (has_stop_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(22, this->stop_px_exponent(), target);
  }

  // optional string text = 23;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->text(), target);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 24;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->time_in_force(), target);
  }

  // optional sfixed64 expire_time = 25;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(25, this->expire_time(), target);
  }

  // optional bool forex_req = 26;
  if (has_forex_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->forex_req(), target);
  }

  // optional bool locate_reqd = 27;
  if (has_locate_reqd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->locate_reqd(), target);
  }

  // optional sfixed64 prev_close_px = 28;
  if (has_prev_close_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(28, this->prev_close_px(), target);
  }

  // optional sfixed32 prev_close_px_exponent = 29;
  if (has_prev_close_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(29, this->prev_close_px_exponent(), target);
  }

  // optional string quote_id = 30;
  if (has_quote_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_id().data(), this->quote_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quote_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->quote_id(), target);
  }

  // optional string settl_currency = 31;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->settl_currency(), target);
  }

  // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 32;
  if (has_covered_or_uncovered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->covered_or_uncovered(), target);
  }

  // optional sfixed64 max_show = 33;
  if (has_max_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(33, this->max_show(), target);
  }

  // optional sfixed32 max_show_exponent = 34;
  if (has_max_show_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(34, this->max_show_exponent(), target);
  }

  // optional sfixed64 order_qty2 = 35;
  if (has_order_qty2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(35, this->order_qty2(), target);
  }

  // optional sfixed32 order_qty2_exponent = 36;
  if (has_order_qty2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(36, this->order_qty2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 37;
  if (has_position_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->position_effect(), target);
  }

  // optional sfixed32 settl_date2 = 38;
  if (has_settl_date2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(38, this->settl_date2(), target);
  }

  // optional string compliance_id = 39;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->compliance_id(), target);
  }

  // optional sfixed64 effective_time = 40;
  if (has_effective_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(40, this->effective_time(), target);
  }

  // optional bytes encoded_text = 41;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        41, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 42;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(42, this->encoded_text_len(), target);
  }

  // optional sfixed32 expire_date = 43;
  if (has_expire_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(43, this->expire_date(), target);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 44;
  if (has_gt_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->gt_booking_inst(), target);
  }

  // optional bool solicited_flag = 45;
  if (has_solicited_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->solicited_flag(), target);
  }

  // optional sfixed64 transact_time = 46;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(46, this->transact_time(), target);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 47;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->account_type(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 48;
  if (has_booking_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      48, this->booking_unit(), target);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 49;
  if (has_cancellation_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      49, this->cancellation_rights(), target);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 50;
  if (has_cash_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->cash_margin(), target);
  }

  // optional string cl_ord_link_id = 51;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->cl_ord_link_id(), target);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 52;
  if (has_clearing_fee_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->clearing_fee_indicator(), target);
  }

  // optional .Common.CommissionData commission_data = 53;
  if (has_commission_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->commission_data(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 54;
  if (has_cust_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      54, this->cust_order_capacity(), target);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 55;
  if (has_day_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      55, this->day_booking_inst(), target);
  }

  // optional string designation = 56;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        56, this->designation(), target);
  }

  // optional .Common.Instrument instrument = 57;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->instrument(), target);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 58;
  if (has_money_laundering_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      58, this->money_laundering_status(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 59;
  if (has_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      59, this->order_capacity(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 60;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->order_qty_data(), target);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 61 [packed = true];
  if (this->order_restrictions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      61,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _order_restrictions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->order_restrictions(i), target);
  }

  // repeated .Common.Parties parties = 62;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->parties(i), target);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 63;
  if (has_prealloc_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->prealloc_method(), target);
  }

  // optional sfixed64 price2 = 64;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(64, this->price2(), target);
  }

  // optional sfixed32 price2_exponent = 65;
  if (has_price2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(65, this->price2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 66;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      66, this->price_type(), target);
  }

  // optional string regist_id = 67;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67, this->regist_id(), target);
  }

  // optional string secondary_cl_ord_id = 68;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        68, this->secondary_cl_ord_id(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 69;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 70;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->stipulations(i), target);
  }

  // optional sfixed32 trade_origination_date = 71;
  if (has_trade_origination_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(71, this->trade_origination_date(), target);
  }

  // optional .Common.YieldData yield_data = 72;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->yield_data(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 73;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->acct_id_source(), target);
  }

  // optional string alloc_id = 74;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        74, this->alloc_id(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 75;
  if (has_booking_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->booking_type(), target);
  }

  // optional bool cust_directed_order = 76;
  if (has_cust_directed_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->cust_directed_order(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 77;
  if (has_cust_order_handling_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      77, this->cust_order_handling_inst(), target);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 78;
  if (has_discretion_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->discretion_instructions(), target);
  }

  // optional .Common.DisplayInstruction display_instruction = 79;
  if (has_display_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->display_instruction(), target);
  }

  // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 80;
  if (has_ex_destination_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      80, this->ex_destination_id_source(), target);
  }

  // optional .Common.FinancingDetails financing_details = 81;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->financing_details(), target);
  }

  // optional bool manual_order_indicator = 82;
  if (has_manual_order_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->manual_order_indicator(), target);
  }

  // optional sfixed64 match_increment = 83;
  if (has_match_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(83, this->match_increment(), target);
  }

  // optional sfixed32 match_increment_exponent = 84;
  if (has_match_increment_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(84, this->match_increment_exponent(), target);
  }

  // optional sfixed64 max_price_levels = 85;
  if (has_max_price_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(85, this->max_price_levels(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 86;
  if (has_order_handling_inst_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      86, this->order_handling_inst_source(), target);
  }

  // optional sfixed64 participation_rate = 87;
  if (has_participation_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(87, this->participation_rate(), target);
  }

  // optional sfixed32 participation_rate_exponent = 88;
  if (has_participation_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(88, this->participation_rate_exponent(), target);
  }

  // optional .Common.PegInstructions peg_instructions = 89;
  if (has_peg_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, this->peg_instructions(), target);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 90;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->pre_alloc_grp(i), target);
  }

  // optional bool pre_trade_anonymity = 91;
  if (has_pre_trade_anonymity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(91, this->pre_trade_anonymity(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 92;
  if (has_price_protection_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      92, this->price_protection_scope(), target);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 93;
  if (has_qty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      93, this->qty_type(), target);
  }

  // optional string received_dept_id = 94;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        94, this->received_dept_id(), target);
  }

  // optional string ref_order_id = 95;
  if (has_ref_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ref_order_id().data(), this->ref_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ref_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        95, this->ref_order_id(), target);
  }

  // optional .SingleGeneralOrderHandling.RefOrderIdSourceEnum ref_order_id_source = 96;
  if (has_ref_order_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      96, this->ref_order_id_source(), target);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 97;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        97, this->strategy_parameters_grp(i), target);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 98;
  if (has_target_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      98, this->target_strategy(), target);
  }

  // optional string target_strategy_parameters = 99;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        99, this->target_strategy_parameters(), target);
  }

  // optional sfixed32 trade_date = 100;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(100, this->trade_date(), target);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 101;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->trd_reg_timestamps(i), target);
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 102;
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->trdg_ses_grp(i), target);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 103;
  if (has_triggering_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->triggering_instruction(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 104;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.NewOrderSingle)
  return target;
}

int NewOrderSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string cl_ord_id = 2;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional string currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string ex_destination = 4;
    if (has_ex_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_destination());
    }

    // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 6;
    if (has_handl_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->handl_inst());
    }

    // optional string ioi_id = 7;
    if (has_ioi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ioi_id());
    }

    // optional sfixed64 max_floor = 8;
    if (has_max_floor()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 max_floor_exponent = 9;
    if (has_max_floor_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 min_qty = 10;
    if (has_min_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 min_qty_exponent = 11;
    if (has_min_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 12;
    if (has_ord_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_type());
    }

    // optional sfixed64 price = 13;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 price_exponent = 14;
    if (has_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional .SingleGeneralOrderHandling.ProcessCodeEnum process_code = 15;
    if (has_process_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process_code());
    }

    // optional sfixed32 settl_date = 16;
    if (has_settl_date()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 17;
    if (has_settl_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_type());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 18;
    if (has_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 19;
    if (has_standard_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 20;
    if (has_standard_trailer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional sfixed64 stop_px = 21;
    if (has_stop_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 stop_px_exponent = 22;
    if (has_stop_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional string text = 23;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 24;
    if (has_time_in_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_in_force());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed64 expire_time = 25;
    if (has_expire_time()) {
      total_size += 2 + 8;
    }

    // optional bool forex_req = 26;
    if (has_forex_req()) {
      total_size += 2 + 1;
    }

    // optional bool locate_reqd = 27;
    if (has_locate_reqd()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 prev_close_px = 28;
    if (has_prev_close_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 prev_close_px_exponent = 29;
    if (has_prev_close_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional string quote_id = 30;
    if (has_quote_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quote_id());
    }

    // optional string settl_currency = 31;
    if (has_settl_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settl_currency());
    }

    // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 32;
    if (has_covered_or_uncovered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->covered_or_uncovered());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sfixed64 max_show = 33;
    if (has_max_show()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 max_show_exponent = 34;
    if (has_max_show_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 order_qty2 = 35;
    if (has_order_qty2()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 order_qty2_exponent = 36;
    if (has_order_qty2_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 37;
    if (has_position_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_effect());
    }

    // optional sfixed32 settl_date2 = 38;
    if (has_settl_date2()) {
      total_size += 2 + 4;
    }

    // optional string compliance_id = 39;
    if (has_compliance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compliance_id());
    }

    // optional sfixed64 effective_time = 40;
    if (has_effective_time()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bytes encoded_text = 41;
    if (has_encoded_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 42;
    if (has_encoded_text_len()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 expire_date = 43;
    if (has_expire_date()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 44;
    if (has_gt_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gt_booking_inst());
    }

    // optional bool solicited_flag = 45;
    if (has_solicited_flag()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 transact_time = 46;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 47;
    if (has_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 48;
    if (has_booking_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_unit());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 49;
    if (has_cancellation_rights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cancellation_rights());
    }

    // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 50;
    if (has_cash_margin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cash_margin());
    }

    // optional string cl_ord_link_id = 51;
    if (has_cl_ord_link_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 52;
    if (has_clearing_fee_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clearing_fee_indicator());
    }

    // optional .Common.CommissionData commission_data = 53;
    if (has_commission_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commission_data());
    }

    // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 54;
    if (has_cust_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_capacity());
    }

    // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 55;
    if (has_day_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_booking_inst());
    }

    // optional string designation = 56;
    if (has_designation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designation());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .Common.Instrument instrument = 57;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 58;
    if (has_money_laundering_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->money_laundering_status());
    }

    // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 59;
    if (has_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_capacity());
    }

    // optional .Common.OrderQtyData order_qty_data = 60;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 63;
    if (has_prealloc_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prealloc_method());
    }

    // optional sfixed64 price2 = 64;
    if (has_price2()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional sfixed32 price2_exponent = 65;
    if (has_price2_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 66;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional string regist_id = 67;
    if (has_regist_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regist_id());
    }

    // optional string secondary_cl_ord_id = 68;
    if (has_secondary_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 69;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional sfixed32 trade_origination_date = 71;
    if (has_trade_origination_date()) {
      total_size += 2 + 4;
    }

    // optional .Common.YieldData yield_data = 72;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 73;
    if (has_acct_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional string alloc_id = 74;
    if (has_alloc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alloc_id());
    }

    // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 75;
    if (has_booking_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_type());
    }

    // optional bool cust_directed_order = 76;
    if (has_cust_directed_order()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 77;
    if (has_cust_order_handling_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_handling_inst());
    }

    // optional .Common.DiscretionInstructions discretion_instructions = 78;
    if (has_discretion_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discretion_instructions());
    }

    // optional .Common.DisplayInstruction display_instruction = 79;
    if (has_display_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display_instruction());
    }

    // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 80;
    if (has_ex_destination_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ex_destination_id_source());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .Common.FinancingDetails financing_details = 81;
    if (has_financing_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional bool manual_order_indicator = 82;
    if (has_manual_order_indicator()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 match_increment = 83;
    if (has_match_increment()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 match_increment_exponent = 84;
    if (has_match_increment_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 max_price_levels = 85;
    if (has_max_price_levels()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 86;
    if (has_order_handling_inst_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_handling_inst_source());
    }

    // optional sfixed64 participation_rate = 87;
    if (has_participation_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 participation_rate_exponent = 88;
    if (has_participation_rate_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .Common.PegInstructions peg_instructions = 89;
    if (has_peg_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peg_instructions());
    }

    // optional bool pre_trade_anonymity = 91;
    if (has_pre_trade_anonymity()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 92;
    if (has_price_protection_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_protection_scope());
    }

    // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 93;
    if (has_qty_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qty_type());
    }

    // optional string received_dept_id = 94;
    if (has_received_dept_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->received_dept_id());
    }

    // optional string ref_order_id = 95;
    if (has_ref_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ref_order_id());
    }

    // optional .SingleGeneralOrderHandling.RefOrderIdSourceEnum ref_order_id_source = 96;
    if (has_ref_order_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ref_order_id_source());
    }

  }
  if (_has_bits_[97 / 32] & (0xffu << (97 % 32))) {
    // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 98;
    if (has_target_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_strategy());
    }

    // optional string target_strategy_parameters = 99;
    if (has_target_strategy_parameters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_strategy_parameters());
    }

    // optional sfixed32 trade_date = 100;
    if (has_trade_date()) {
      total_size += 2 + 4;
    }

    // optional .Common.TriggeringInstruction triggering_instruction = 103;
    if (has_triggering_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triggering_instruction());
    }

  }
  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->exec_inst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->exec_inst(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exec_inst_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 61 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->order_restrictions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->order_restrictions(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _order_restrictions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Common.Parties parties = 62;
  total_size += 2 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.Stipulations stipulations = 70;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 90;
  total_size += 2 * this->pre_alloc_grp_size();
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pre_alloc_grp(i));
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 97;
  total_size += 2 * this->strategy_parameters_grp_size();
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy_parameters_grp(i));
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 101;
  total_size += 2 * this->trd_reg_timestamps_size();
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trd_reg_timestamps(i));
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 102;
  total_size += 2 * this->trdg_ses_grp_size();
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trdg_ses_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 104;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewOrderSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewOrderSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewOrderSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewOrderSingle::MergeFrom(const NewOrderSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  exec_inst_.MergeFrom(from.exec_inst_);
  order_restrictions_.MergeFrom(from.order_restrictions_);
  parties_.MergeFrom(from.parties_);
  stipulations_.MergeFrom(from.stipulations_);
  pre_alloc_grp_.MergeFrom(from.pre_alloc_grp_);
  strategy_parameters_grp_.MergeFrom(from.strategy_parameters_grp_);
  trd_reg_timestamps_.MergeFrom(from.trd_reg_timestamps_);
  trdg_ses_grp_.MergeFrom(from.trdg_ses_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_ex_destination()) {
      set_ex_destination(from.ex_destination());
    }
    if (from.has_handl_inst()) {
      set_handl_inst(from.handl_inst());
    }
    if (from.has_ioi_id()) {
      set_ioi_id(from.ioi_id());
    }
    if (from.has_max_floor()) {
      set_max_floor(from.max_floor());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_floor_exponent()) {
      set_max_floor_exponent(from.max_floor_exponent());
    }
    if (from.has_min_qty()) {
      set_min_qty(from.min_qty());
    }
    if (from.has_min_qty_exponent()) {
      set_min_qty_exponent(from.min_qty_exponent());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_exponent()) {
      set_price_exponent(from.price_exponent());
    }
    if (from.has_process_code()) {
      set_process_code(from.process_code());
    }
    if (from.has_settl_date()) {
      set_settl_date(from.settl_date());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_settl_type()) {
      set_settl_type(from.settl_type());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_stop_px()) {
      set_stop_px(from.stop_px());
    }
    if (from.has_stop_px_exponent()) {
      set_stop_px_exponent(from.stop_px_exponent());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_forex_req()) {
      set_forex_req(from.forex_req());
    }
    if (from.has_locate_reqd()) {
      set_locate_reqd(from.locate_reqd());
    }
    if (from.has_prev_close_px()) {
      set_prev_close_px(from.prev_close_px());
    }
    if (from.has_prev_close_px_exponent()) {
      set_prev_close_px_exponent(from.prev_close_px_exponent());
    }
    if (from.has_quote_id()) {
      set_quote_id(from.quote_id());
    }
    if (from.has_settl_currency()) {
      set_settl_currency(from.settl_currency());
    }
    if (from.has_covered_or_uncovered()) {
      set_covered_or_uncovered(from.covered_or_uncovered());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_show()) {
      set_max_show(from.max_show());
    }
    if (from.has_max_show_exponent()) {
      set_max_show_exponent(from.max_show_exponent());
    }
    if (from.has_order_qty2()) {
      set_order_qty2(from.order_qty2());
    }
    if (from.has_order_qty2_exponent()) {
      set_order_qty2_exponent(from.order_qty2_exponent());
    }
    if (from.has_position_effect()) {
      set_position_effect(from.position_effect());
    }
    if (from.has_settl_date2()) {
      set_settl_date2(from.settl_date2());
    }
    if (from.has_compliance_id()) {
      set_compliance_id(from.compliance_id());
    }
    if (from.has_effective_time()) {
      set_effective_time(from.effective_time());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_expire_date()) {
      set_expire_date(from.expire_date());
    }
    if (from.has_gt_booking_inst()) {
      set_gt_booking_inst(from.gt_booking_inst());
    }
    if (from.has_solicited_flag()) {
      set_solicited_flag(from.solicited_flag());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_booking_unit()) {
      set_booking_unit(from.booking_unit());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_cancellation_rights()) {
      set_cancellation_rights(from.cancellation_rights());
    }
    if (from.has_cash_margin()) {
      set_cash_margin(from.cash_margin());
    }
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_clearing_fee_indicator()) {
      set_clearing_fee_indicator(from.clearing_fee_indicator());
    }
    if (from.has_commission_data()) {
      mutable_commission_data()->::Common::CommissionData::MergeFrom(from.commission_data());
    }
    if (from.has_cust_order_capacity()) {
      set_cust_order_capacity(from.cust_order_capacity());
    }
    if (from.has_day_booking_inst()) {
      set_day_booking_inst(from.day_booking_inst());
    }
    if (from.has_designation()) {
      set_designation(from.designation());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_money_laundering_status()) {
      set_money_laundering_status(from.money_laundering_status());
    }
    if (from.has_order_capacity()) {
      set_order_capacity(from.order_capacity());
    }
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_prealloc_method()) {
      set_prealloc_method(from.prealloc_method());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_price2_exponent()) {
      set_price2_exponent(from.price2_exponent());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_regist_id()) {
      set_regist_id(from.regist_id());
    }
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_trade_origination_date()) {
      set_trade_origination_date(from.trade_origination_date());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_alloc_id()) {
      set_alloc_id(from.alloc_id());
    }
    if (from.has_booking_type()) {
      set_booking_type(from.booking_type());
    }
    if (from.has_cust_directed_order()) {
      set_cust_directed_order(from.cust_directed_order());
    }
    if (from.has_cust_order_handling_inst()) {
      set_cust_order_handling_inst(from.cust_order_handling_inst());
    }
    if (from.has_discretion_instructions()) {
      mutable_discretion_instructions()->::Common::DiscretionInstructions::MergeFrom(from.discretion_instructions());
    }
    if (from.has_display_instruction()) {
      mutable_display_instruction()->::Common::DisplayInstruction::MergeFrom(from.display_instruction());
    }
    if (from.has_ex_destination_id_source()) {
      set_ex_destination_id_source(from.ex_destination_id_source());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_manual_order_indicator()) {
      set_manual_order_indicator(from.manual_order_indicator());
    }
    if (from.has_match_increment()) {
      set_match_increment(from.match_increment());
    }
    if (from.has_match_increment_exponent()) {
      set_match_increment_exponent(from.match_increment_exponent());
    }
    if (from.has_max_price_levels()) {
      set_max_price_levels(from.max_price_levels());
    }
    if (from.has_order_handling_inst_source()) {
      set_order_handling_inst_source(from.order_handling_inst_source());
    }
    if (from.has_participation_rate()) {
      set_participation_rate(from.participation_rate());
    }
    if (from.has_participation_rate_exponent()) {
      set_participation_rate_exponent(from.participation_rate_exponent());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_peg_instructions()) {
      mutable_peg_instructions()->::Common::PegInstructions::MergeFrom(from.peg_instructions());
    }
    if (from.has_pre_trade_anonymity()) {
      set_pre_trade_anonymity(from.pre_trade_anonymity());
    }
    if (from.has_price_protection_scope()) {
      set_price_protection_scope(from.price_protection_scope());
    }
    if (from.has_qty_type()) {
      set_qty_type(from.qty_type());
    }
    if (from.has_received_dept_id()) {
      set_received_dept_id(from.received_dept_id());
    }
    if (from.has_ref_order_id()) {
      set_ref_order_id(from.ref_order_id());
    }
    if (from.has_ref_order_id_source()) {
      set_ref_order_id_source(from.ref_order_id_source());
    }
  }
  if (from._has_bits_[97 / 32] & (0xffu << (97 % 32))) {
    if (from.has_target_strategy()) {
      set_target_strategy(from.target_strategy());
    }
    if (from.has_target_strategy_parameters()) {
      set_target_strategy_parameters(from.target_strategy_parameters());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_triggering_instruction()) {
      mutable_triggering_instruction()->::Common::TriggeringInstruction::MergeFrom(from.triggering_instruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewOrderSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrderSingle::CopyFrom(const NewOrderSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderSingle::IsInitialized() const {

  return true;
}

void NewOrderSingle::Swap(NewOrderSingle* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(currency_, other->currency_);
    std::swap(ex_destination_, other->ex_destination_);
    exec_inst_.Swap(&other->exec_inst_);
    std::swap(handl_inst_, other->handl_inst_);
    std::swap(ioi_id_, other->ioi_id_);
    std::swap(max_floor_, other->max_floor_);
    std::swap(max_floor_exponent_, other->max_floor_exponent_);
    std::swap(min_qty_, other->min_qty_);
    std::swap(min_qty_exponent_, other->min_qty_exponent_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(price_, other->price_);
    std::swap(price_exponent_, other->price_exponent_);
    std::swap(process_code_, other->process_code_);
    std::swap(settl_date_, other->settl_date_);
    std::swap(settl_type_, other->settl_type_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(stop_px_, other->stop_px_);
    std::swap(stop_px_exponent_, other->stop_px_exponent_);
    std::swap(text_, other->text_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(forex_req_, other->forex_req_);
    std::swap(locate_reqd_, other->locate_reqd_);
    std::swap(prev_close_px_, other->prev_close_px_);
    std::swap(prev_close_px_exponent_, other->prev_close_px_exponent_);
    std::swap(quote_id_, other->quote_id_);
    std::swap(settl_currency_, other->settl_currency_);
    std::swap(covered_or_uncovered_, other->covered_or_uncovered_);
    std::swap(max_show_, other->max_show_);
    std::swap(max_show_exponent_, other->max_show_exponent_);
    std::swap(order_qty2_, other->order_qty2_);
    std::swap(order_qty2_exponent_, other->order_qty2_exponent_);
    std::swap(position_effect_, other->position_effect_);
    std::swap(settl_date2_, other->settl_date2_);
    std::swap(compliance_id_, other->compliance_id_);
    std::swap(effective_time_, other->effective_time_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(expire_date_, other->expire_date_);
    std::swap(gt_booking_inst_, other->gt_booking_inst_);
    std::swap(solicited_flag_, other->solicited_flag_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(account_type_, other->account_type_);
    std::swap(booking_unit_, other->booking_unit_);
    std::swap(cancellation_rights_, other->cancellation_rights_);
    std::swap(cash_margin_, other->cash_margin_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(clearing_fee_indicator_, other->clearing_fee_indicator_);
    std::swap(commission_data_, other->commission_data_);
    std::swap(cust_order_capacity_, other->cust_order_capacity_);
    std::swap(day_booking_inst_, other->day_booking_inst_);
    std::swap(designation_, other->designation_);
    std::swap(instrument_, other->instrument_);
    std::swap(money_laundering_status_, other->money_laundering_status_);
    std::swap(order_capacity_, other->order_capacity_);
    std::swap(order_qty_data_, other->order_qty_data_);
    order_restrictions_.Swap(&other->order_restrictions_);
    parties_.Swap(&other->parties_);
    std::swap(prealloc_method_, other->prealloc_method_);
    std::swap(price2_, other->price2_);
    std::swap(price2_exponent_, other->price2_exponent_);
    std::swap(price_type_, other->price_type_);
    std::swap(regist_id_, other->regist_id_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(trade_origination_date_, other->trade_origination_date_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(alloc_id_, other->alloc_id_);
    std::swap(booking_type_, other->booking_type_);
    std::swap(cust_directed_order_, other->cust_directed_order_);
    std::swap(cust_order_handling_inst_, other->cust_order_handling_inst_);
    std::swap(discretion_instructions_, other->discretion_instructions_);
    std::swap(display_instruction_, other->display_instruction_);
    std::swap(ex_destination_id_source_, other->ex_destination_id_source_);
    std::swap(financing_details_, other->financing_details_);
    std::swap(manual_order_indicator_, other->manual_order_indicator_);
    std::swap(match_increment_, other->match_increment_);
    std::swap(match_increment_exponent_, other->match_increment_exponent_);
    std::swap(max_price_levels_, other->max_price_levels_);
    std::swap(order_handling_inst_source_, other->order_handling_inst_source_);
    std::swap(participation_rate_, other->participation_rate_);
    std::swap(participation_rate_exponent_, other->participation_rate_exponent_);
    std::swap(peg_instructions_, other->peg_instructions_);
    pre_alloc_grp_.Swap(&other->pre_alloc_grp_);
    std::swap(pre_trade_anonymity_, other->pre_trade_anonymity_);
    std::swap(price_protection_scope_, other->price_protection_scope_);
    std::swap(qty_type_, other->qty_type_);
    std::swap(received_dept_id_, other->received_dept_id_);
    std::swap(ref_order_id_, other->ref_order_id_);
    std::swap(ref_order_id_source_, other->ref_order_id_source_);
    strategy_parameters_grp_.Swap(&other->strategy_parameters_grp_);
    std::swap(target_strategy_, other->target_strategy_);
    std::swap(target_strategy_parameters_, other->target_strategy_parameters_);
    std::swap(trade_date_, other->trade_date_);
    trd_reg_timestamps_.Swap(&other->trd_reg_timestamps_);
    trdg_ses_grp_.Swap(&other->trdg_ses_grp_);
    std::swap(triggering_instruction_, other->triggering_instruction_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewOrderSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewOrderSingle_descriptor_;
  metadata.reflection = NewOrderSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCancelReplaceRequest::kAccountFieldNumber;
const int OrderCancelReplaceRequest::kClOrdIdFieldNumber;
const int OrderCancelReplaceRequest::kCurrencyFieldNumber;
const int OrderCancelReplaceRequest::kExecInstFieldNumber;
const int OrderCancelReplaceRequest::kHandlInstFieldNumber;
const int OrderCancelReplaceRequest::kListIdFieldNumber;
const int OrderCancelReplaceRequest::kOrdTypeFieldNumber;
const int OrderCancelReplaceRequest::kOrderIdFieldNumber;
const int OrderCancelReplaceRequest::kOrigClOrdIdFieldNumber;
const int OrderCancelReplaceRequest::kPriceFieldNumber;
const int OrderCancelReplaceRequest::kPriceExponentFieldNumber;
const int OrderCancelReplaceRequest::kSettlDateFieldNumber;
const int OrderCancelReplaceRequest::kSettlTypeFieldNumber;
const int OrderCancelReplaceRequest::kSideFieldNumber;
const int OrderCancelReplaceRequest::kStandardHeaderFieldNumber;
const int OrderCancelReplaceRequest::kStandardTrailerFieldNumber;
const int OrderCancelReplaceRequest::kStopPxFieldNumber;
const int OrderCancelReplaceRequest::kStopPxExponentFieldNumber;
const int OrderCancelReplaceRequest::kTextFieldNumber;
const int OrderCancelReplaceRequest::kTimeInForceFieldNumber;
const int OrderCancelReplaceRequest::kExDestinationFieldNumber;
const int OrderCancelReplaceRequest::kMaxFloorFieldNumber;
const int OrderCancelReplaceRequest::kMaxFloorExponentFieldNumber;
const int OrderCancelReplaceRequest::kMinQtyFieldNumber;
const int OrderCancelReplaceRequest::kMinQtyExponentFieldNumber;
const int OrderCancelReplaceRequest::kExpireTimeFieldNumber;
const int OrderCancelReplaceRequest::kForexReqFieldNumber;
const int OrderCancelReplaceRequest::kSettlCurrencyFieldNumber;
const int OrderCancelReplaceRequest::kCoveredOrUncoveredFieldNumber;
const int OrderCancelReplaceRequest::kLocateReqdFieldNumber;
const int OrderCancelReplaceRequest::kMaxShowFieldNumber;
const int OrderCancelReplaceRequest::kMaxShowExponentFieldNumber;
const int OrderCancelReplaceRequest::kOrderQty2FieldNumber;
const int OrderCancelReplaceRequest::kOrderQty2ExponentFieldNumber;
const int OrderCancelReplaceRequest::kPositionEffectFieldNumber;
const int OrderCancelReplaceRequest::kSettlDate2FieldNumber;
const int OrderCancelReplaceRequest::kComplianceIdFieldNumber;
const int OrderCancelReplaceRequest::kEffectiveTimeFieldNumber;
const int OrderCancelReplaceRequest::kEncodedTextFieldNumber;
const int OrderCancelReplaceRequest::kEncodedTextLenFieldNumber;
const int OrderCancelReplaceRequest::kExpireDateFieldNumber;
const int OrderCancelReplaceRequest::kGtBookingInstFieldNumber;
const int OrderCancelReplaceRequest::kSolicitedFlagFieldNumber;
const int OrderCancelReplaceRequest::kTransactTimeFieldNumber;
const int OrderCancelReplaceRequest::kAccountTypeFieldNumber;
const int OrderCancelReplaceRequest::kBookingUnitFieldNumber;
const int OrderCancelReplaceRequest::kCancellationRightsFieldNumber;
const int OrderCancelReplaceRequest::kCashMarginFieldNumber;
const int OrderCancelReplaceRequest::kClOrdLinkIdFieldNumber;
const int OrderCancelReplaceRequest::kClearingFeeIndicatorFieldNumber;
const int OrderCancelReplaceRequest::kCommissionDataFieldNumber;
const int OrderCancelReplaceRequest::kCustOrderCapacityFieldNumber;
const int OrderCancelReplaceRequest::kDayBookingInstFieldNumber;
const int OrderCancelReplaceRequest::kDesignationFieldNumber;
const int OrderCancelReplaceRequest::kInstrumentFieldNumber;
const int OrderCancelReplaceRequest::kMoneyLaunderingStatusFieldNumber;
const int OrderCancelReplaceRequest::kOrderCapacityFieldNumber;
const int OrderCancelReplaceRequest::kOrderQtyDataFieldNumber;
const int OrderCancelReplaceRequest::kOrderRestrictionsFieldNumber;
const int OrderCancelReplaceRequest::kOrigOrdModTimeFieldNumber;
const int OrderCancelReplaceRequest::kPartiesFieldNumber;
const int OrderCancelReplaceRequest::kPreallocMethodFieldNumber;
const int OrderCancelReplaceRequest::kPrice2FieldNumber;
const int OrderCancelReplaceRequest::kPrice2ExponentFieldNumber;
const int OrderCancelReplaceRequest::kPriceTypeFieldNumber;
const int OrderCancelReplaceRequest::kRegistIdFieldNumber;
const int OrderCancelReplaceRequest::kSecondaryClOrdIdFieldNumber;
const int OrderCancelReplaceRequest::kSpreadOrBenchmarkCurveDataFieldNumber;
const int OrderCancelReplaceRequest::kTradeOriginationDateFieldNumber;
const int OrderCancelReplaceRequest::kYieldDataFieldNumber;
const int OrderCancelReplaceRequest::kAcctIdSourceFieldNumber;
const int OrderCancelReplaceRequest::kAllocIdFieldNumber;
const int OrderCancelReplaceRequest::kBookingTypeFieldNumber;
const int OrderCancelReplaceRequest::kCustDirectedOrderFieldNumber;
const int OrderCancelReplaceRequest::kCustOrderHandlingInstFieldNumber;
const int OrderCancelReplaceRequest::kDiscretionInstructionsFieldNumber;
const int OrderCancelReplaceRequest::kDisplayInstructionFieldNumber;
const int OrderCancelReplaceRequest::kExDestinationIdSourceFieldNumber;
const int OrderCancelReplaceRequest::kFinancingDetailsFieldNumber;
const int OrderCancelReplaceRequest::kManualOrderIndicatorFieldNumber;
const int OrderCancelReplaceRequest::kMatchIncrementFieldNumber;
const int OrderCancelReplaceRequest::kMatchIncrementExponentFieldNumber;
const int OrderCancelReplaceRequest::kMaxPriceLevelsFieldNumber;
const int OrderCancelReplaceRequest::kOrderHandlingInstSourceFieldNumber;
const int OrderCancelReplaceRequest::kParticipationRateFieldNumber;
const int OrderCancelReplaceRequest::kParticipationRateExponentFieldNumber;
const int OrderCancelReplaceRequest::kPegInstructionsFieldNumber;
const int OrderCancelReplaceRequest::kPreAllocGrpFieldNumber;
const int OrderCancelReplaceRequest::kPreTradeAnonymityFieldNumber;
const int OrderCancelReplaceRequest::kPriceProtectionScopeFieldNumber;
const int OrderCancelReplaceRequest::kQtyTypeFieldNumber;
const int OrderCancelReplaceRequest::kReceivedDeptIdFieldNumber;
const int OrderCancelReplaceRequest::kStrategyParametersGrpFieldNumber;
const int OrderCancelReplaceRequest::kTargetStrategyFieldNumber;
const int OrderCancelReplaceRequest::kTargetStrategyParametersFieldNumber;
const int OrderCancelReplaceRequest::kTradeDateFieldNumber;
const int OrderCancelReplaceRequest::kTrdRegTimestampsFieldNumber;
const int OrderCancelReplaceRequest::kTrdgSesGrpFieldNumber;
const int OrderCancelReplaceRequest::kTriggeringInstructionFieldNumber;
const int OrderCancelReplaceRequest::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

OrderCancelReplaceRequest::OrderCancelReplaceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
}

void OrderCancelReplaceRequest::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  commission_data_ = const_cast< ::Common::CommissionData*>(&::Common::CommissionData::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  discretion_instructions_ = const_cast< ::Common::DiscretionInstructions*>(&::Common::DiscretionInstructions::default_instance());
  display_instruction_ = const_cast< ::Common::DisplayInstruction*>(&::Common::DisplayInstruction::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  peg_instructions_ = const_cast< ::Common::PegInstructions*>(&::Common::PegInstructions::default_instance());
  triggering_instruction_ = const_cast< ::Common::TriggeringInstruction*>(&::Common::TriggeringInstruction::default_instance());
}

OrderCancelReplaceRequest::OrderCancelReplaceRequest(const OrderCancelReplaceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
}

void OrderCancelReplaceRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handl_inst_ = 0;
  list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_type_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = GOOGLE_LONGLONG(0);
  price_exponent_ = 0;
  settl_date_ = 0;
  settl_type_ = 0;
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  stop_px_ = GOOGLE_LONGLONG(0);
  stop_px_exponent_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_in_force_ = 0;
  ex_destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_floor_ = GOOGLE_LONGLONG(0);
  max_floor_exponent_ = 0;
  min_qty_ = GOOGLE_LONGLONG(0);
  min_qty_exponent_ = 0;
  expire_time_ = GOOGLE_LONGLONG(0);
  forex_req_ = false;
  settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  covered_or_uncovered_ = 0;
  locate_reqd_ = false;
  max_show_ = GOOGLE_LONGLONG(0);
  max_show_exponent_ = 0;
  order_qty2_ = GOOGLE_LONGLONG(0);
  order_qty2_exponent_ = 0;
  position_effect_ = 0;
  settl_date2_ = 0;
  compliance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  effective_time_ = GOOGLE_LONGLONG(0);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  expire_date_ = 0;
  gt_booking_inst_ = 0;
  solicited_flag_ = false;
  transact_time_ = GOOGLE_LONGLONG(0);
  account_type_ = 0;
  booking_unit_ = 0;
  cancellation_rights_ = 0;
  cash_margin_ = 0;
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearing_fee_indicator_ = 0;
  commission_data_ = NULL;
  cust_order_capacity_ = 0;
  day_booking_inst_ = 0;
  designation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_ = NULL;
  money_laundering_status_ = 0;
  order_capacity_ = 0;
  order_qty_data_ = NULL;
  orig_ord_mod_time_ = GOOGLE_LONGLONG(0);
  prealloc_method_ = 0;
  price2_ = GOOGLE_LONGLONG(0);
  price2_exponent_ = 0;
  price_type_ = 0;
  regist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spread_or_benchmark_curve_data_ = NULL;
  trade_origination_date_ = 0;
  yield_data_ = NULL;
  acct_id_source_ = 0;
  alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  booking_type_ = 0;
  cust_directed_order_ = false;
  cust_order_handling_inst_ = 0;
  discretion_instructions_ = NULL;
  display_instruction_ = NULL;
  ex_destination_id_source_ = 0;
  financing_details_ = NULL;
  manual_order_indicator_ = false;
  match_increment_ = GOOGLE_LONGLONG(0);
  match_increment_exponent_ = 0;
  max_price_levels_ = GOOGLE_LONGLONG(0);
  order_handling_inst_source_ = 0;
  participation_rate_ = GOOGLE_LONGLONG(0);
  participation_rate_exponent_ = 0;
  peg_instructions_ = NULL;
  pre_trade_anonymity_ = false;
  price_protection_scope_ = 0;
  qty_type_ = 0;
  received_dept_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_strategy_ = 0;
  target_strategy_parameters_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_date_ = 0;
  triggering_instruction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCancelReplaceRequest::~OrderCancelReplaceRequest() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  SharedDtor();
}

void OrderCancelReplaceRequest::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orig_cl_ord_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (ex_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ex_destination_;
  }
  if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete settl_currency_;
  }
  if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compliance_id_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete designation_;
  }
  if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regist_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alloc_id_;
  }
  if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete received_dept_id_;
  }
  if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_strategy_parameters_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete commission_data_;
    delete instrument_;
    delete order_qty_data_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
    delete discretion_instructions_;
    delete display_instruction_;
    delete financing_details_;
    delete peg_instructions_;
    delete triggering_instruction_;
  }
}

void OrderCancelReplaceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCancelReplaceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCancelReplaceRequest_descriptor_;
}

const OrderCancelReplaceRequest& OrderCancelReplaceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

OrderCancelReplaceRequest* OrderCancelReplaceRequest::default_instance_ = NULL;

OrderCancelReplaceRequest* OrderCancelReplaceRequest::New() const {
  return new OrderCancelReplaceRequest;
}

void OrderCancelReplaceRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderCancelReplaceRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(handl_inst_, ord_type_);
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_list_id()) {
      if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(price_, side_);
    if (has_orig_cl_ord_id()) {
      if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orig_cl_ord_id_->clear();
      }
    }
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(stop_px_exponent_, time_in_force_);
    ZR_(max_floor_, max_floor_exponent_);
    stop_px_ = GOOGLE_LONGLONG(0);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_ex_destination()) {
      if (ex_destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ex_destination_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(min_qty_exponent_, expire_time_);
    ZR_(covered_or_uncovered_, max_show_);
    ZR_(forex_req_, locate_reqd_);
    if (has_settl_currency()) {
      if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        settl_currency_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(order_qty2_, position_effect_);
    ZR_(effective_time_, encoded_text_len_);
    if (has_compliance_id()) {
      if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compliance_id_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(expire_date_, gt_booking_inst_);
    ZR_(account_type_, cancellation_rights_);
    solicited_flag_ = false;
    cash_margin_ = 0;
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(cust_order_capacity_, day_booking_inst_);
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    clearing_fee_indicator_ = 0;
    if (has_commission_data()) {
      if (commission_data_ != NULL) commission_data_->::Common::CommissionData::Clear();
    }
    if (has_designation()) {
      if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        designation_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    money_laundering_status_ = 0;
  }
  if (_has_bits_[56 / 32] & 3942645760) {
    ZR_(price2_, price2_exponent_);
    order_capacity_ = 0;
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
    orig_ord_mod_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(price_type_, trade_origination_date_);
    if (has_regist_id()) {
      if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regist_id_->clear();
      }
    }
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    acct_id_source_ = 0;
    if (has_alloc_id()) {
      if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alloc_id_->clear();
      }
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(cust_order_handling_inst_, ex_destination_id_source_);
    booking_type_ = 0;
    cust_directed_order_ = false;
    if (has_discretion_instructions()) {
      if (discretion_instructions_ != NULL) discretion_instructions_->::Common::DiscretionInstructions::Clear();
    }
    if (has_display_instruction()) {
      if (display_instruction_ != NULL) display_instruction_->::Common::DisplayInstruction::Clear();
    }
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    manual_order_indicator_ = false;
  }
  if (_has_bits_[80 / 32] & 8323072) {
    ZR_(match_increment_, participation_rate_);
    participation_rate_exponent_ = 0;
    if (has_peg_instructions()) {
      if (peg_instructions_ != NULL) peg_instructions_->::Common::PegInstructions::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4009754624) {
    ZR_(price_protection_scope_, qty_type_);
    ZR_(target_strategy_, trade_date_);
    pre_trade_anonymity_ = false;
    if (has_received_dept_id()) {
      if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        received_dept_id_->clear();
      }
    }
    if (has_target_strategy_parameters()) {
      if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_strategy_parameters_->clear();
      }
    }
  }
  if (has_triggering_instruction()) {
    if (triggering_instruction_ != NULL) triggering_instruction_->::Common::TriggeringInstruction::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  exec_inst_.Clear();
  order_restrictions_.Clear();
  parties_.Clear();
  pre_alloc_grp_.Clear();
  strategy_parameters_grp_.Clear();
  trd_reg_timestamps_.Clear();
  trdg_ses_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCancelReplaceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cl_ord_id;
        break;
      }

      // optional string cl_ord_id = 2;
      case 2: {
        if (tag == 18) {
         parse_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }

      // optional string currency = 3;
      case 3: {
        if (tag == 26) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exec_inst;
        break;
      }

      // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_exec_inst:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
              add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 32) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
            add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_handl_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 5;
      case 5: {
        if (tag == 40) {
         parse_handl_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::HandlInstEnum_IsValid(value)) {
            set_handl_inst(static_cast< ::SingleGeneralOrderHandling::HandlInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_list_id;
        break;
      }

      // optional string list_id = 6;
      case 6: {
        if (tag == 50) {
         parse_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_id().data(), this->list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "list_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ord_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 7;
      case 7: {
        if (tag == 56) {
         parse_ord_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdTypeEnum_IsValid(value)) {
            set_ord_type(static_cast< ::SingleGeneralOrderHandling::OrdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_order_id;
        break;
      }

      // optional string order_id = 8;
      case 8: {
        if (tag == 66) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_orig_cl_ord_id;
        break;
      }

      // optional string orig_cl_ord_id = 9;
      case 9: {
        if (tag == 74) {
         parse_orig_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orig_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_price;
        break;
      }

      // optional sfixed64 price = 10;
      case 10: {
        if (tag == 81) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_price_exponent;
        break;
      }

      // optional sfixed32 price_exponent = 11;
      case 11: {
        if (tag == 93) {
         parse_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_exponent_)));
          set_has_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_settl_date;
        break;
      }

      // optional sfixed32 settl_date = 12;
      case 12: {
        if (tag == 101) {
         parse_settl_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date_)));
          set_has_settl_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_settl_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 13;
      case 13: {
        if (tag == 104) {
         parse_settl_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SettlTypeEnum_IsValid(value)) {
            set_settl_type(static_cast< ::SingleGeneralOrderHandling::SettlTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 14;
      case 14: {
        if (tag == 112) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 15;
      case 15: {
        if (tag == 122) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 16;
      case 16: {
        if (tag == 130) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_stop_px;
        break;
      }

      // optional sfixed64 stop_px = 17;
      case 17: {
        if (tag == 137) {
         parse_stop_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &stop_px_)));
          set_has_stop_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_stop_px_exponent;
        break;
      }

      // optional sfixed32 stop_px_exponent = 18;
      case 18: {
        if (tag == 149) {
         parse_stop_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stop_px_exponent_)));
          set_has_stop_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_text;
        break;
      }

      // optional string text = 19;
      case 19: {
        if (tag == 154) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_time_in_force;
        break;
      }

      // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 20;
      case 20: {
        if (tag == 160) {
         parse_time_in_force:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TimeInForceEnum_IsValid(value)) {
            set_time_in_force(static_cast< ::SingleGeneralOrderHandling::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_ex_destination;
        break;
      }

      // optional string ex_destination = 21;
      case 21: {
        if (tag == 170) {
         parse_ex_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ex_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ex_destination().data(), this->ex_destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ex_destination");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_max_floor;
        break;
      }

      // optional sfixed64 max_floor = 22;
      case 22: {
        if (tag == 177) {
         parse_max_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_floor_)));
          set_has_max_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_max_floor_exponent;
        break;
      }

      // optional sfixed32 max_floor_exponent = 23;
      case 23: {
        if (tag == 189) {
         parse_max_floor_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_floor_exponent_)));
          set_has_max_floor_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_min_qty;
        break;
      }

      // optional sfixed64 min_qty = 24;
      case 24: {
        if (tag == 193) {
         parse_min_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_qty_)));
          set_has_min_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_min_qty_exponent;
        break;
      }

      // optional sfixed32 min_qty_exponent = 25;
      case 25: {
        if (tag == 205) {
         parse_min_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_qty_exponent_)));
          set_has_min_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(209)) goto parse_expire_time;
        break;
      }

      // optional sfixed64 expire_time = 26;
      case 26: {
        if (tag == 209) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_forex_req;
        break;
      }

      // optional bool forex_req = 27;
      case 27: {
        if (tag == 216) {
         parse_forex_req:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &forex_req_)));
          set_has_forex_req();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_settl_currency;
        break;
      }

      // optional string settl_currency = 28;
      case 28: {
        if (tag == 226) {
         parse_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->settl_currency().data(), this->settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "settl_currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_covered_or_uncovered;
        break;
      }

      // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 29;
      case 29: {
        if (tag == 232) {
         parse_covered_or_uncovered:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CoveredOrUncoveredEnum_IsValid(value)) {
            set_covered_or_uncovered(static_cast< ::SingleGeneralOrderHandling::CoveredOrUncoveredEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_locate_reqd;
        break;
      }

      // optional bool locate_reqd = 30;
      case 30: {
        if (tag == 240) {
         parse_locate_reqd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locate_reqd_)));
          set_has_locate_reqd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(249)) goto parse_max_show;
        break;
      }

      // optional sfixed64 max_show = 31;
      case 31: {
        if (tag == 249) {
         parse_max_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_show_)));
          set_has_max_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_max_show_exponent;
        break;
      }

      // optional sfixed32 max_show_exponent = 32;
      case 32: {
        if (tag == 261) {
         parse_max_show_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_show_exponent_)));
          set_has_max_show_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(265)) goto parse_order_qty2;
        break;
      }

      // optional sfixed64 order_qty2 = 33;
      case 33: {
        if (tag == 265) {
         parse_order_qty2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &order_qty2_)));
          set_has_order_qty2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(277)) goto parse_order_qty2_exponent;
        break;
      }

      // optional sfixed32 order_qty2_exponent = 34;
      case 34: {
        if (tag == 277) {
         parse_order_qty2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_qty2_exponent_)));
          set_has_order_qty2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_position_effect;
        break;
      }

      // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 35;
      case 35: {
        if (tag == 280) {
         parse_position_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PositionEffectEnum_IsValid(value)) {
            set_position_effect(static_cast< ::SingleGeneralOrderHandling::PositionEffectEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_settl_date2;
        break;
      }

      // optional sfixed32 settl_date2 = 36;
      case 36: {
        if (tag == 293) {
         parse_settl_date2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date2_)));
          set_has_settl_date2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_compliance_id;
        break;
      }

      // optional string compliance_id = 37;
      case 37: {
        if (tag == 298) {
         parse_compliance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compliance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compliance_id().data(), this->compliance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compliance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(305)) goto parse_effective_time;
        break;
      }

      // optional sfixed64 effective_time = 38;
      case 38: {
        if (tag == 305) {
         parse_effective_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &effective_time_)));
          set_has_effective_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 39;
      case 39: {
        if (tag == 314) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(325)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 40;
      case 40: {
        if (tag == 325) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(333)) goto parse_expire_date;
        break;
      }

      // optional sfixed32 expire_date = 41;
      case 41: {
        if (tag == 333) {
         parse_expire_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &expire_date_)));
          set_has_expire_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_gt_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 42;
      case 42: {
        if (tag == 336) {
         parse_gt_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::GtBookingInstEnum_IsValid(value)) {
            set_gt_booking_inst(static_cast< ::SingleGeneralOrderHandling::GtBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(42, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_solicited_flag;
        break;
      }

      // optional bool solicited_flag = 43;
      case 43: {
        if (tag == 344) {
         parse_solicited_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solicited_flag_)));
          set_has_solicited_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(353)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 44;
      case 44: {
        if (tag == 353) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_account_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 45;
      case 45: {
        if (tag == 360) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AccountTypeEnum_IsValid(value)) {
            set_account_type(static_cast< ::SingleGeneralOrderHandling::AccountTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(45, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_booking_unit;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 46;
      case 46: {
        if (tag == 368) {
         parse_booking_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingUnitEnum_IsValid(value)) {
            set_booking_unit(static_cast< ::SingleGeneralOrderHandling::BookingUnitEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_cancellation_rights;
        break;
      }

      // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 47;
      case 47: {
        if (tag == 376) {
         parse_cancellation_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CancellationRightsEnum_IsValid(value)) {
            set_cancellation_rights(static_cast< ::SingleGeneralOrderHandling::CancellationRightsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(47, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_cash_margin;
        break;
      }

      // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 48;
      case 48: {
        if (tag == 384) {
         parse_cash_margin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CashMarginEnum_IsValid(value)) {
            set_cash_margin(static_cast< ::SingleGeneralOrderHandling::CashMarginEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(48, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 49;
      case 49: {
        if (tag == 394) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_clearing_fee_indicator;
        break;
      }

      // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 50;
      case 50: {
        if (tag == 400) {
         parse_clearing_fee_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum_IsValid(value)) {
            set_clearing_fee_indicator(static_cast< ::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_commission_data;
        break;
      }

      // optional .Common.CommissionData commission_data = 51;
      case 51: {
        if (tag == 410) {
         parse_commission_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commission_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_cust_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 52;
      case 52: {
        if (tag == 416) {
         parse_cust_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderCapacityEnum_IsValid(value)) {
            set_cust_order_capacity(static_cast< ::SingleGeneralOrderHandling::CustOrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(52, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_day_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 53;
      case 53: {
        if (tag == 424) {
         parse_day_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::DayBookingInstEnum_IsValid(value)) {
            set_day_booking_inst(static_cast< ::SingleGeneralOrderHandling::DayBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_designation;
        break;
      }

      // optional string designation = 54;
      case 54: {
        if (tag == 434) {
         parse_designation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->designation().data(), this->designation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "designation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 55;
      case 55: {
        if (tag == 442) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_money_laundering_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 56;
      case 56: {
        if (tag == 448) {
         parse_money_laundering_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum_IsValid(value)) {
            set_money_laundering_status(static_cast< ::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(56, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 57;
      case 57: {
        if (tag == 456) {
         parse_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderCapacityEnum_IsValid(value)) {
            set_order_capacity(static_cast< ::SingleGeneralOrderHandling::OrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(57, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(466)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 58;
      case 58: {
        if (tag == 466) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_order_restrictions;
        break;
      }

      // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 59 [packed = true];
      case 59: {
        if (tag == 474) {
         parse_order_restrictions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
              add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 472) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
            add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(59, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(481)) goto parse_orig_ord_mod_time;
        break;
      }

      // optional sfixed64 orig_ord_mod_time = 60;
      case 60: {
        if (tag == 481) {
         parse_orig_ord_mod_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orig_ord_mod_time_)));
          set_has_orig_ord_mod_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 61;
      case 61: {
        if (tag == 490) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(490)) goto parse_parties;
        if (input->ExpectTag(496)) goto parse_prealloc_method;
        break;
      }

      // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 62;
      case 62: {
        if (tag == 496) {
         parse_prealloc_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PreallocMethodEnum_IsValid(value)) {
            set_prealloc_method(static_cast< ::SingleGeneralOrderHandling::PreallocMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(62, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(505)) goto parse_price2;
        break;
      }

      // optional sfixed64 price2 = 63;
      case 63: {
        if (tag == 505) {
         parse_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price2_)));
          set_has_price2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(517)) goto parse_price2_exponent;
        break;
      }

      // optional sfixed32 price2_exponent = 64;
      case 64: {
        if (tag == 517) {
         parse_price2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price2_exponent_)));
          set_has_price2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_price_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 65;
      case 65: {
        if (tag == 520) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::SingleGeneralOrderHandling::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(65, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(530)) goto parse_regist_id;
        break;
      }

      // optional string regist_id = 66;
      case 66: {
        if (tag == 530) {
         parse_regist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regist_id().data(), this->regist_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regist_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 67;
      case 67: {
        if (tag == 538) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 68;
      case 68: {
        if (tag == 546) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(557)) goto parse_trade_origination_date;
        break;
      }

      // optional sfixed32 trade_origination_date = 69;
      case 69: {
        if (tag == 557) {
         parse_trade_origination_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_origination_date_)));
          set_has_trade_origination_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 70;
      case 70: {
        if (tag == 562) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 71;
      case 71: {
        if (tag == 568) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(71, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_alloc_id;
        break;
      }

      // optional string alloc_id = 72;
      case 72: {
        if (tag == 578) {
         parse_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alloc_id().data(), this->alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alloc_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_booking_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 73;
      case 73: {
        if (tag == 584) {
         parse_booking_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingTypeEnum_IsValid(value)) {
            set_booking_type(static_cast< ::SingleGeneralOrderHandling::BookingTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_cust_directed_order;
        break;
      }

      // optional bool cust_directed_order = 74;
      case 74: {
        if (tag == 592) {
         parse_cust_directed_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cust_directed_order_)));
          set_has_cust_directed_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_cust_order_handling_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 75;
      case 75: {
        if (tag == 600) {
         parse_cust_order_handling_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderHandlingInstEnum_IsValid(value)) {
            set_cust_order_handling_inst(static_cast< ::SingleGeneralOrderHandling::CustOrderHandlingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(75, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_discretion_instructions;
        break;
      }

      // optional .Common.DiscretionInstructions discretion_instructions = 76;
      case 76: {
        if (tag == 610) {
         parse_discretion_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discretion_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(618)) goto parse_display_instruction;
        break;
      }

      // optional .Common.DisplayInstruction display_instruction = 77;
      case 77: {
        if (tag == 618) {
         parse_display_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_ex_destination_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 78;
      case 78: {
        if (tag == 624) {
         parse_ex_destination_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExDestinationIdSourceEnum_IsValid(value)) {
            set_ex_destination_id_source(static_cast< ::SingleGeneralOrderHandling::ExDestinationIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(78, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(634)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 79;
      case 79: {
        if (tag == 634) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_manual_order_indicator;
        break;
      }

      // optional bool manual_order_indicator = 80;
      case 80: {
        if (tag == 640) {
         parse_manual_order_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_order_indicator_)));
          set_has_manual_order_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(649)) goto parse_match_increment;
        break;
      }

      // optional sfixed64 match_increment = 81;
      case 81: {
        if (tag == 649) {
         parse_match_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &match_increment_)));
          set_has_match_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(661)) goto parse_match_increment_exponent;
        break;
      }

      // optional sfixed32 match_increment_exponent = 82;
      case 82: {
        if (tag == 661) {
         parse_match_increment_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &match_increment_exponent_)));
          set_has_match_increment_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(665)) goto parse_max_price_levels;
        break;
      }

      // optional sfixed64 max_price_levels = 83;
      case 83: {
        if (tag == 665) {
         parse_max_price_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_price_levels_)));
          set_has_max_price_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(672)) goto parse_order_handling_inst_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 84;
      case 84: {
        if (tag == 672) {
         parse_order_handling_inst_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum_IsValid(value)) {
            set_order_handling_inst_source(static_cast< ::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(84, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(681)) goto parse_participation_rate;
        break;
      }

      // optional sfixed64 participation_rate = 85;
      case 85: {
        if (tag == 681) {
         parse_participation_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &participation_rate_)));
          set_has_participation_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(693)) goto parse_participation_rate_exponent;
        break;
      }

      // optional sfixed32 participation_rate_exponent = 86;
      case 86: {
        if (tag == 693) {
         parse_participation_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &participation_rate_exponent_)));
          set_has_participation_rate_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_peg_instructions;
        break;
      }

      // optional .Common.PegInstructions peg_instructions = 87;
      case 87: {
        if (tag == 698) {
         parse_peg_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peg_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_pre_alloc_grp;
        break;
      }

      // repeated .Common.PreAllocGrp pre_alloc_grp = 88;
      case 88: {
        if (tag == 706) {
         parse_pre_alloc_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre_alloc_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_pre_alloc_grp;
        if (input->ExpectTag(712)) goto parse_pre_trade_anonymity;
        break;
      }

      // optional bool pre_trade_anonymity = 89;
      case 89: {
        if (tag == 712) {
         parse_pre_trade_anonymity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_trade_anonymity_)));
          set_has_pre_trade_anonymity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_price_protection_scope;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 90;
      case 90: {
        if (tag == 720) {
         parse_price_protection_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceProtectionScopeEnum_IsValid(value)) {
            set_price_protection_scope(static_cast< ::SingleGeneralOrderHandling::PriceProtectionScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(90, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(728)) goto parse_qty_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 91;
      case 91: {
        if (tag == 728) {
         parse_qty_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::QtyTypeEnum_IsValid(value)) {
            set_qty_type(static_cast< ::SingleGeneralOrderHandling::QtyTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(91, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(738)) goto parse_received_dept_id;
        break;
      }

      // optional string received_dept_id = 92;
      case 92: {
        if (tag == 738) {
         parse_received_dept_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_received_dept_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->received_dept_id().data(), this->received_dept_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "received_dept_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_strategy_parameters_grp;
        break;
      }

      // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 93;
      case 93: {
        if (tag == 746) {
         parse_strategy_parameters_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategy_parameters_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_strategy_parameters_grp;
        if (input->ExpectTag(752)) goto parse_target_strategy;
        break;
      }

      // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 94;
      case 94: {
        if (tag == 752) {
         parse_target_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TargetStrategyEnum_IsValid(value)) {
            set_target_strategy(static_cast< ::SingleGeneralOrderHandling::TargetStrategyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(94, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(762)) goto parse_target_strategy_parameters;
        break;
      }

      // optional string target_strategy_parameters = 95;
      case 95: {
        if (tag == 762) {
         parse_target_strategy_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_strategy_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_strategy_parameters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(773)) goto parse_trade_date;
        break;
      }

      // optional sfixed32 trade_date = 96;
      case 96: {
        if (tag == 773) {
         parse_trade_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_date_)));
          set_has_trade_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_trd_reg_timestamps;
        break;
      }

      // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 97;
      case 97: {
        if (tag == 778) {
         parse_trd_reg_timestamps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trd_reg_timestamps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(778)) goto parse_trd_reg_timestamps;
        if (input->ExpectTag(786)) goto parse_trdg_ses_grp;
        break;
      }

      // repeated .Common.TrdgSesGrp trdg_ses_grp = 98;
      case 98: {
        if (tag == 786) {
         parse_trdg_ses_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trdg_ses_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_trdg_ses_grp;
        if (input->ExpectTag(794)) goto parse_triggering_instruction;
        break;
      }

      // optional .Common.TriggeringInstruction triggering_instruction = 99;
      case 99: {
        if (tag == 794) {
         parse_triggering_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triggering_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 100;
      case 100: {
        if (tag == 802) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  return false;
#undef DO_
}

void OrderCancelReplaceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cl_ord_id(), output);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency(), output);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 4 [packed = true];
  if (this->exec_inst_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_exec_inst_cached_byte_size_);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->exec_inst(i), output);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 5;
  if (has_handl_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->handl_inst(), output);
  }

  // optional string list_id = 6;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->list_id(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 7;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->ord_type(), output);
  }

  // optional string order_id = 8;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->order_id(), output);
  }

  // optional string orig_cl_ord_id = 9;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->orig_cl_ord_id(), output);
  }

  // optional sfixed64 price = 10;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->price(), output);
  }

  // optional sfixed32 price_exponent = 11;
  if (has_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->price_exponent(), output);
  }

  // optional sfixed32 settl_date = 12;
  if (has_settl_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->settl_date(), output);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 13;
  if (has_settl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->settl_type(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 14;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 15;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 16;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->standard_trailer(), output);
  }

  // optional sfixed64 stop_px = 17;
  if (has_stop_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(17, this->stop_px(), output);
  }

  // optional sfixed32 stop_px_exponent = 18;
  if (has_stop_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(18, this->stop_px_exponent(), output);
  }

  // optional string text = 19;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->text(), output);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 20;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->time_in_force(), output);
  }

  // optional string ex_destination = 21;
  if (has_ex_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_destination().data(), this->ex_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->ex_destination(), output);
  }

  // optional sfixed64 max_floor = 22;
  if (has_max_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(22, this->max_floor(), output);
  }

  // optional sfixed32 max_floor_exponent = 23;
  if (has_max_floor_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(23, this->max_floor_exponent(), output);
  }

  // optional sfixed64 min_qty = 24;
  if (has_min_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(24, this->min_qty(), output);
  }

  // optional sfixed32 min_qty_exponent = 25;
  if (has_min_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(25, this->min_qty_exponent(), output);
  }

  // optional sfixed64 expire_time = 26;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(26, this->expire_time(), output);
  }

  // optional bool forex_req = 27;
  if (has_forex_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->forex_req(), output);
  }

  // optional string settl_currency = 28;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      28, this->settl_currency(), output);
  }

  // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 29;
  if (has_covered_or_uncovered()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->covered_or_uncovered(), output);
  }

  // optional bool locate_reqd = 30;
  if (has_locate_reqd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->locate_reqd(), output);
  }

  // optional sfixed64 max_show = 31;
  if (has_max_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(31, this->max_show(), output);
  }

  // optional sfixed32 max_show_exponent = 32;
  if (has_max_show_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(32, this->max_show_exponent(), output);
  }

  // optional sfixed64 order_qty2 = 33;
  if (has_order_qty2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(33, this->order_qty2(), output);
  }

  // optional sfixed32 order_qty2_exponent = 34;
  if (has_order_qty2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(34, this->order_qty2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 35;
  if (has_position_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->position_effect(), output);
  }

  // optional sfixed32 settl_date2 = 36;
  if (has_settl_date2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(36, this->settl_date2(), output);
  }

  // optional string compliance_id = 37;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->compliance_id(), output);
  }

  // optional sfixed64 effective_time = 38;
  if (has_effective_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(38, this->effective_time(), output);
  }

  // optional bytes encoded_text = 39;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      39, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 40;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(40, this->encoded_text_len(), output);
  }

  // optional sfixed32 expire_date = 41;
  if (has_expire_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(41, this->expire_date(), output);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 42;
  if (has_gt_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->gt_booking_inst(), output);
  }

  // optional bool solicited_flag = 43;
  if (has_solicited_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->solicited_flag(), output);
  }

  // optional sfixed64 transact_time = 44;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(44, this->transact_time(), output);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 45;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      45, this->account_type(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 46;
  if (has_booking_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->booking_unit(), output);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 47;
  if (has_cancellation_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      47, this->cancellation_rights(), output);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 48;
  if (has_cash_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      48, this->cash_margin(), output);
  }

  // optional string cl_ord_link_id = 49;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->cl_ord_link_id(), output);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 50;
  if (has_clearing_fee_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->clearing_fee_indicator(), output);
  }

  // optional .Common.CommissionData commission_data = 51;
  if (has_commission_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->commission_data(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 52;
  if (has_cust_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      52, this->cust_order_capacity(), output);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 53;
  if (has_day_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->day_booking_inst(), output);
  }

  // optional string designation = 54;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->designation(), output);
  }

  // optional .Common.Instrument instrument = 55;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      55, this->instrument(), output);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 56;
  if (has_money_laundering_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      56, this->money_laundering_status(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 57;
  if (has_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      57, this->order_capacity(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 58;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->order_qty_data(), output);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 59 [packed = true];
  if (this->order_restrictions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      59,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_order_restrictions_cached_byte_size_);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->order_restrictions(i), output);
  }

  // optional sfixed64 orig_ord_mod_time = 60;
  if (has_orig_ord_mod_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(60, this->orig_ord_mod_time(), output);
  }

  // repeated .Common.Parties parties = 61;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      61, this->parties(i), output);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 62;
  if (has_prealloc_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      62, this->prealloc_method(), output);
  }

  // optional sfixed64 price2 = 63;
  if (has_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(63, this->price2(), output);
  }

  // optional sfixed32 price2_exponent = 64;
  if (has_price2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(64, this->price2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 65;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      65, this->price_type(), output);
  }

  // optional string regist_id = 66;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      66, this->regist_id(), output);
  }

  // optional string secondary_cl_ord_id = 67;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67, this->secondary_cl_ord_id(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 68;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      68, this->spread_or_benchmark_curve_data(), output);
  }

  // optional sfixed32 trade_origination_date = 69;
  if (has_trade_origination_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(69, this->trade_origination_date(), output);
  }

  // optional .Common.YieldData yield_data = 70;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->yield_data(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 71;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      71, this->acct_id_source(), output);
  }

  // optional string alloc_id = 72;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      72, this->alloc_id(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 73;
  if (has_booking_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->booking_type(), output);
  }

  // optional bool cust_directed_order = 74;
  if (has_cust_directed_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->cust_directed_order(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 75;
  if (has_cust_order_handling_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->cust_order_handling_inst(), output);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 76;
  if (has_discretion_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      76, this->discretion_instructions(), output);
  }

  // optional .Common.DisplayInstruction display_instruction = 77;
  if (has_display_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      77, this->display_instruction(), output);
  }

  // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 78;
  if (has_ex_destination_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      78, this->ex_destination_id_source(), output);
  }

  // optional .Common.FinancingDetails financing_details = 79;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      79, this->financing_details(), output);
  }

  // optional bool manual_order_indicator = 80;
  if (has_manual_order_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->manual_order_indicator(), output);
  }

  // optional sfixed64 match_increment = 81;
  if (has_match_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(81, this->match_increment(), output);
  }

  // optional sfixed32 match_increment_exponent = 82;
  if (has_match_increment_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(82, this->match_increment_exponent(), output);
  }

  // optional sfixed64 max_price_levels = 83;
  if (has_max_price_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(83, this->max_price_levels(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 84;
  if (has_order_handling_inst_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      84, this->order_handling_inst_source(), output);
  }

  // optional sfixed64 participation_rate = 85;
  if (has_participation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(85, this->participation_rate(), output);
  }

  // optional sfixed32 participation_rate_exponent = 86;
  if (has_participation_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(86, this->participation_rate_exponent(), output);
  }

  // optional .Common.PegInstructions peg_instructions = 87;
  if (has_peg_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, this->peg_instructions(), output);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 88;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88, this->pre_alloc_grp(i), output);
  }

  // optional bool pre_trade_anonymity = 89;
  if (has_pre_trade_anonymity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->pre_trade_anonymity(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 90;
  if (has_price_protection_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      90, this->price_protection_scope(), output);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 91;
  if (has_qty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      91, this->qty_type(), output);
  }

  // optional string received_dept_id = 92;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      92, this->received_dept_id(), output);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 93;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, this->strategy_parameters_grp(i), output);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 94;
  if (has_target_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      94, this->target_strategy(), output);
  }

  // optional string target_strategy_parameters = 95;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      95, this->target_strategy_parameters(), output);
  }

  // optional sfixed32 trade_date = 96;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(96, this->trade_date(), output);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 97;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      97, this->trd_reg_timestamps(i), output);
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 98;
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      98, this->trdg_ses_grp(i), output);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 99;
  if (has_triggering_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, this->triggering_instruction(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 100;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
}

::google::protobuf::uint8* OrderCancelReplaceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cl_ord_id(), target);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 4 [packed = true];
  if (this->exec_inst_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _exec_inst_cached_byte_size_, target);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->exec_inst(i), target);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 5;
  if (has_handl_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->handl_inst(), target);
  }

  // optional string list_id = 6;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->list_id(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 7;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->ord_type(), target);
  }

  // optional string order_id = 8;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->order_id(), target);
  }

  // optional string orig_cl_ord_id = 9;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->orig_cl_ord_id(), target);
  }

  // optional sfixed64 price = 10;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->price(), target);
  }

  // optional sfixed32 price_exponent = 11;
  if (has_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->price_exponent(), target);
  }

  // optional sfixed32 settl_date = 12;
  if (has_settl_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->settl_date(), target);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 13;
  if (has_settl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->settl_type(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 14;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 15;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 16;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->standard_trailer(), target);
  }

  // optional sfixed64 stop_px = 17;
  if (has_stop_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(17, this->stop_px(), target);
  }

  // optional sfixed32 stop_px_exponent = 18;
  if (has_stop_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(18, this->stop_px_exponent(), target);
  }

  // optional string text = 19;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->text(), target);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 20;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->time_in_force(), target);
  }

  // optional string ex_destination = 21;
  if (has_ex_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ex_destination().data(), this->ex_destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ex_destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->ex_destination(), target);
  }

  // optional sfixed64 max_floor = 22;
  if (has_max_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(22, this->max_floor(), target);
  }

  // optional sfixed32 max_floor_exponent = 23;
  if (has_max_floor_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(23, this->max_floor_exponent(), target);
  }

  // optional sfixed64 min_qty = 24;
  if (has_min_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(24, this->min_qty(), target);
  }

  // optional sfixed32 min_qty_exponent = 25;
  if (has_min_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(25, this->min_qty_exponent(), target);
  }

  // optional sfixed64 expire_time = 26;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(26, this->expire_time(), target);
  }

  // optional bool forex_req = 27;
  if (has_forex_req()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->forex_req(), target);
  }

  // optional string settl_currency = 28;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->settl_currency(), target);
  }

  // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 29;
  if (has_covered_or_uncovered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->covered_or_uncovered(), target);
  }

  // optional bool locate_reqd = 30;
  if (has_locate_reqd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->locate_reqd(), target);
  }

  // optional sfixed64 max_show = 31;
  if (has_max_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(31, this->max_show(), target);
  }

  // optional sfixed32 max_show_exponent = 32;
  if (has_max_show_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(32, this->max_show_exponent(), target);
  }

  // optional sfixed64 order_qty2 = 33;
  if (has_order_qty2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(33, this->order_qty2(), target);
  }

  // optional sfixed32 order_qty2_exponent = 34;
  if (has_order_qty2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(34, this->order_qty2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 35;
  if (has_position_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->position_effect(), target);
  }

  // optional sfixed32 settl_date2 = 36;
  if (has_settl_date2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(36, this->settl_date2(), target);
  }

  // optional string compliance_id = 37;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->compliance_id(), target);
  }

  // optional sfixed64 effective_time = 38;
  if (has_effective_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(38, this->effective_time(), target);
  }

  // optional bytes encoded_text = 39;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        39, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 40;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(40, this->encoded_text_len(), target);
  }

  // optional sfixed32 expire_date = 41;
  if (has_expire_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(41, this->expire_date(), target);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 42;
  if (has_gt_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->gt_booking_inst(), target);
  }

  // optional bool solicited_flag = 43;
  if (has_solicited_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->solicited_flag(), target);
  }

  // optional sfixed64 transact_time = 44;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(44, this->transact_time(), target);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 45;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      45, this->account_type(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 46;
  if (has_booking_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->booking_unit(), target);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 47;
  if (has_cancellation_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      47, this->cancellation_rights(), target);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 48;
  if (has_cash_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      48, this->cash_margin(), target);
  }

  // optional string cl_ord_link_id = 49;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->cl_ord_link_id(), target);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 50;
  if (has_clearing_fee_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->clearing_fee_indicator(), target);
  }

  // optional .Common.CommissionData commission_data = 51;
  if (has_commission_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->commission_data(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 52;
  if (has_cust_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      52, this->cust_order_capacity(), target);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 53;
  if (has_day_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->day_booking_inst(), target);
  }

  // optional string designation = 54;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->designation(), target);
  }

  // optional .Common.Instrument instrument = 55;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->instrument(), target);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 56;
  if (has_money_laundering_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      56, this->money_laundering_status(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 57;
  if (has_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      57, this->order_capacity(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 58;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->order_qty_data(), target);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 59 [packed = true];
  if (this->order_restrictions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      59,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _order_restrictions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->order_restrictions(i), target);
  }

  // optional sfixed64 orig_ord_mod_time = 60;
  if (has_orig_ord_mod_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(60, this->orig_ord_mod_time(), target);
  }

  // repeated .Common.Parties parties = 61;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->parties(i), target);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 62;
  if (has_prealloc_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      62, this->prealloc_method(), target);
  }

  // optional sfixed64 price2 = 63;
  if (has_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(63, this->price2(), target);
  }

  // optional sfixed32 price2_exponent = 64;
  if (has_price2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(64, this->price2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 65;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      65, this->price_type(), target);
  }

  // optional string regist_id = 66;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        66, this->regist_id(), target);
  }

  // optional string secondary_cl_ord_id = 67;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67, this->secondary_cl_ord_id(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 68;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->spread_or_benchmark_curve_data(), target);
  }

  // optional sfixed32 trade_origination_date = 69;
  if (has_trade_origination_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(69, this->trade_origination_date(), target);
  }

  // optional .Common.YieldData yield_data = 70;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->yield_data(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 71;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      71, this->acct_id_source(), target);
  }

  // optional string alloc_id = 72;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        72, this->alloc_id(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 73;
  if (has_booking_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->booking_type(), target);
  }

  // optional bool cust_directed_order = 74;
  if (has_cust_directed_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(74, this->cust_directed_order(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 75;
  if (has_cust_order_handling_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->cust_order_handling_inst(), target);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 76;
  if (has_discretion_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->discretion_instructions(), target);
  }

  // optional .Common.DisplayInstruction display_instruction = 77;
  if (has_display_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->display_instruction(), target);
  }

  // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 78;
  if (has_ex_destination_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      78, this->ex_destination_id_source(), target);
  }

  // optional .Common.FinancingDetails financing_details = 79;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->financing_details(), target);
  }

  // optional bool manual_order_indicator = 80;
  if (has_manual_order_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->manual_order_indicator(), target);
  }

  // optional sfixed64 match_increment = 81;
  if (has_match_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(81, this->match_increment(), target);
  }

  // optional sfixed32 match_increment_exponent = 82;
  if (has_match_increment_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(82, this->match_increment_exponent(), target);
  }

  // optional sfixed64 max_price_levels = 83;
  if (has_max_price_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(83, this->max_price_levels(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 84;
  if (has_order_handling_inst_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      84, this->order_handling_inst_source(), target);
  }

  // optional sfixed64 participation_rate = 85;
  if (has_participation_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(85, this->participation_rate(), target);
  }

  // optional sfixed32 participation_rate_exponent = 86;
  if (has_participation_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(86, this->participation_rate_exponent(), target);
  }

  // optional .Common.PegInstructions peg_instructions = 87;
  if (has_peg_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->peg_instructions(), target);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 88;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, this->pre_alloc_grp(i), target);
  }

  // optional bool pre_trade_anonymity = 89;
  if (has_pre_trade_anonymity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(89, this->pre_trade_anonymity(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 90;
  if (has_price_protection_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      90, this->price_protection_scope(), target);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 91;
  if (has_qty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      91, this->qty_type(), target);
  }

  // optional string received_dept_id = 92;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        92, this->received_dept_id(), target);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 93;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, this->strategy_parameters_grp(i), target);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 94;
  if (has_target_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      94, this->target_strategy(), target);
  }

  // optional string target_strategy_parameters = 95;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        95, this->target_strategy_parameters(), target);
  }

  // optional sfixed32 trade_date = 96;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(96, this->trade_date(), target);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 97;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        97, this->trd_reg_timestamps(i), target);
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 98;
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, this->trdg_ses_grp(i), target);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 99;
  if (has_triggering_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->triggering_instruction(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 100;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.OrderCancelReplaceRequest)
  return target;
}

int OrderCancelReplaceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string cl_ord_id = 2;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional string currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 5;
    if (has_handl_inst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->handl_inst());
    }

    // optional string list_id = 6;
    if (has_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_id());
    }

    // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 7;
    if (has_ord_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_type());
    }

    // optional string order_id = 8;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string orig_cl_ord_id = 9;
    if (has_orig_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_cl_ord_id());
    }

    // optional sfixed64 price = 10;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 price_exponent = 11;
    if (has_price_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 settl_date = 12;
    if (has_settl_date()) {
      total_size += 1 + 4;
    }

    // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 13;
    if (has_settl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_type());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 14;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 15;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 16;
    if (has_standard_trailer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional sfixed64 stop_px = 17;
    if (has_stop_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 stop_px_exponent = 18;
    if (has_stop_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional string text = 19;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 20;
    if (has_time_in_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_in_force());
    }

    // optional string ex_destination = 21;
    if (has_ex_destination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ex_destination());
    }

    // optional sfixed64 max_floor = 22;
    if (has_max_floor()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 max_floor_exponent = 23;
    if (has_max_floor_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 min_qty = 24;
    if (has_min_qty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional sfixed32 min_qty_exponent = 25;
    if (has_min_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 expire_time = 26;
    if (has_expire_time()) {
      total_size += 2 + 8;
    }

    // optional bool forex_req = 27;
    if (has_forex_req()) {
      total_size += 2 + 1;
    }

    // optional string settl_currency = 28;
    if (has_settl_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settl_currency());
    }

    // optional .SingleGeneralOrderHandling.CoveredOrUncoveredEnum covered_or_uncovered = 29;
    if (has_covered_or_uncovered()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->covered_or_uncovered());
    }

    // optional bool locate_reqd = 30;
    if (has_locate_reqd()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 max_show = 31;
    if (has_max_show()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 max_show_exponent = 32;
    if (has_max_show_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional sfixed64 order_qty2 = 33;
    if (has_order_qty2()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 order_qty2_exponent = 34;
    if (has_order_qty2_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 35;
    if (has_position_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_effect());
    }

    // optional sfixed32 settl_date2 = 36;
    if (has_settl_date2()) {
      total_size += 2 + 4;
    }

    // optional string compliance_id = 37;
    if (has_compliance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compliance_id());
    }

    // optional sfixed64 effective_time = 38;
    if (has_effective_time()) {
      total_size += 2 + 8;
    }

    // optional bytes encoded_text = 39;
    if (has_encoded_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 40;
    if (has_encoded_text_len()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional sfixed32 expire_date = 41;
    if (has_expire_date()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 42;
    if (has_gt_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gt_booking_inst());
    }

    // optional bool solicited_flag = 43;
    if (has_solicited_flag()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 transact_time = 44;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 45;
    if (has_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 46;
    if (has_booking_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_unit());
    }

    // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 47;
    if (has_cancellation_rights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cancellation_rights());
    }

    // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 48;
    if (has_cash_margin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cash_margin());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string cl_ord_link_id = 49;
    if (has_cl_ord_link_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 50;
    if (has_clearing_fee_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clearing_fee_indicator());
    }

    // optional .Common.CommissionData commission_data = 51;
    if (has_commission_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commission_data());
    }

    // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 52;
    if (has_cust_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_capacity());
    }

    // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 53;
    if (has_day_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_booking_inst());
    }

    // optional string designation = 54;
    if (has_designation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designation());
    }

    // optional .Common.Instrument instrument = 55;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 56;
    if (has_money_laundering_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->money_laundering_status());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 57;
    if (has_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_capacity());
    }

    // optional .Common.OrderQtyData order_qty_data = 58;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional sfixed64 orig_ord_mod_time = 60;
    if (has_orig_ord_mod_time()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 62;
    if (has_prealloc_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prealloc_method());
    }

    // optional sfixed64 price2 = 63;
    if (has_price2()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 price2_exponent = 64;
    if (has_price2_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 65;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional string regist_id = 66;
    if (has_regist_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regist_id());
    }

    // optional string secondary_cl_ord_id = 67;
    if (has_secondary_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 68;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional sfixed32 trade_origination_date = 69;
    if (has_trade_origination_date()) {
      total_size += 2 + 4;
    }

    // optional .Common.YieldData yield_data = 70;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 71;
    if (has_acct_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional string alloc_id = 72;
    if (has_alloc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alloc_id());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 73;
    if (has_booking_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_type());
    }

    // optional bool cust_directed_order = 74;
    if (has_cust_directed_order()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 75;
    if (has_cust_order_handling_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_handling_inst());
    }

    // optional .Common.DiscretionInstructions discretion_instructions = 76;
    if (has_discretion_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discretion_instructions());
    }

    // optional .Common.DisplayInstruction display_instruction = 77;
    if (has_display_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display_instruction());
    }

    // optional .SingleGeneralOrderHandling.ExDestinationIdSourceEnum ex_destination_id_source = 78;
    if (has_ex_destination_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ex_destination_id_source());
    }

    // optional .Common.FinancingDetails financing_details = 79;
    if (has_financing_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional bool manual_order_indicator = 80;
    if (has_manual_order_indicator()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional sfixed64 match_increment = 81;
    if (has_match_increment()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 match_increment_exponent = 82;
    if (has_match_increment_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 max_price_levels = 83;
    if (has_max_price_levels()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 84;
    if (has_order_handling_inst_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_handling_inst_source());
    }

    // optional sfixed64 participation_rate = 85;
    if (has_participation_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 participation_rate_exponent = 86;
    if (has_participation_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.PegInstructions peg_instructions = 87;
    if (has_peg_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peg_instructions());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional bool pre_trade_anonymity = 89;
    if (has_pre_trade_anonymity()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 90;
    if (has_price_protection_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_protection_scope());
    }

    // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 91;
    if (has_qty_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qty_type());
    }

    // optional string received_dept_id = 92;
    if (has_received_dept_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->received_dept_id());
    }

    // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 94;
    if (has_target_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_strategy());
    }

    // optional string target_strategy_parameters = 95;
    if (has_target_strategy_parameters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_strategy_parameters());
    }

    // optional sfixed32 trade_date = 96;
    if (has_trade_date()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[98 / 32] & (0xffu << (98 % 32))) {
    // optional .Common.TriggeringInstruction triggering_instruction = 99;
    if (has_triggering_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triggering_instruction());
    }

  }
  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->exec_inst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->exec_inst(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exec_inst_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 59 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->order_restrictions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->order_restrictions(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _order_restrictions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Common.Parties parties = 61;
  total_size += 2 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 88;
  total_size += 2 * this->pre_alloc_grp_size();
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pre_alloc_grp(i));
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 93;
  total_size += 2 * this->strategy_parameters_grp_size();
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy_parameters_grp(i));
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 97;
  total_size += 2 * this->trd_reg_timestamps_size();
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trd_reg_timestamps(i));
  }

  // repeated .Common.TrdgSesGrp trdg_ses_grp = 98;
  total_size += 2 * this->trdg_ses_grp_size();
  for (int i = 0; i < this->trdg_ses_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trdg_ses_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 100;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCancelReplaceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCancelReplaceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCancelReplaceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCancelReplaceRequest::MergeFrom(const OrderCancelReplaceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  exec_inst_.MergeFrom(from.exec_inst_);
  order_restrictions_.MergeFrom(from.order_restrictions_);
  parties_.MergeFrom(from.parties_);
  pre_alloc_grp_.MergeFrom(from.pre_alloc_grp_);
  strategy_parameters_grp_.MergeFrom(from.strategy_parameters_grp_);
  trd_reg_timestamps_.MergeFrom(from.trd_reg_timestamps_);
  trdg_ses_grp_.MergeFrom(from.trdg_ses_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_handl_inst()) {
      set_handl_inst(from.handl_inst());
    }
    if (from.has_list_id()) {
      set_list_id(from.list_id());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orig_cl_ord_id()) {
      set_orig_cl_ord_id(from.orig_cl_ord_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_exponent()) {
      set_price_exponent(from.price_exponent());
    }
    if (from.has_settl_date()) {
      set_settl_date(from.settl_date());
    }
    if (from.has_settl_type()) {
      set_settl_type(from.settl_type());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stop_px()) {
      set_stop_px(from.stop_px());
    }
    if (from.has_stop_px_exponent()) {
      set_stop_px_exponent(from.stop_px_exponent());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
    if (from.has_ex_destination()) {
      set_ex_destination(from.ex_destination());
    }
    if (from.has_max_floor()) {
      set_max_floor(from.max_floor());
    }
    if (from.has_max_floor_exponent()) {
      set_max_floor_exponent(from.max_floor_exponent());
    }
    if (from.has_min_qty()) {
      set_min_qty(from.min_qty());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_min_qty_exponent()) {
      set_min_qty_exponent(from.min_qty_exponent());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_forex_req()) {
      set_forex_req(from.forex_req());
    }
    if (from.has_settl_currency()) {
      set_settl_currency(from.settl_currency());
    }
    if (from.has_covered_or_uncovered()) {
      set_covered_or_uncovered(from.covered_or_uncovered());
    }
    if (from.has_locate_reqd()) {
      set_locate_reqd(from.locate_reqd());
    }
    if (from.has_max_show()) {
      set_max_show(from.max_show());
    }
    if (from.has_max_show_exponent()) {
      set_max_show_exponent(from.max_show_exponent());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_order_qty2()) {
      set_order_qty2(from.order_qty2());
    }
    if (from.has_order_qty2_exponent()) {
      set_order_qty2_exponent(from.order_qty2_exponent());
    }
    if (from.has_position_effect()) {
      set_position_effect(from.position_effect());
    }
    if (from.has_settl_date2()) {
      set_settl_date2(from.settl_date2());
    }
    if (from.has_compliance_id()) {
      set_compliance_id(from.compliance_id());
    }
    if (from.has_effective_time()) {
      set_effective_time(from.effective_time());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_expire_date()) {
      set_expire_date(from.expire_date());
    }
    if (from.has_gt_booking_inst()) {
      set_gt_booking_inst(from.gt_booking_inst());
    }
    if (from.has_solicited_flag()) {
      set_solicited_flag(from.solicited_flag());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_booking_unit()) {
      set_booking_unit(from.booking_unit());
    }
    if (from.has_cancellation_rights()) {
      set_cancellation_rights(from.cancellation_rights());
    }
    if (from.has_cash_margin()) {
      set_cash_margin(from.cash_margin());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_clearing_fee_indicator()) {
      set_clearing_fee_indicator(from.clearing_fee_indicator());
    }
    if (from.has_commission_data()) {
      mutable_commission_data()->::Common::CommissionData::MergeFrom(from.commission_data());
    }
    if (from.has_cust_order_capacity()) {
      set_cust_order_capacity(from.cust_order_capacity());
    }
    if (from.has_day_booking_inst()) {
      set_day_booking_inst(from.day_booking_inst());
    }
    if (from.has_designation()) {
      set_designation(from.designation());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_money_laundering_status()) {
      set_money_laundering_status(from.money_laundering_status());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_order_capacity()) {
      set_order_capacity(from.order_capacity());
    }
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_orig_ord_mod_time()) {
      set_orig_ord_mod_time(from.orig_ord_mod_time());
    }
    if (from.has_prealloc_method()) {
      set_prealloc_method(from.prealloc_method());
    }
    if (from.has_price2()) {
      set_price2(from.price2());
    }
    if (from.has_price2_exponent()) {
      set_price2_exponent(from.price2_exponent());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_regist_id()) {
      set_regist_id(from.regist_id());
    }
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_trade_origination_date()) {
      set_trade_origination_date(from.trade_origination_date());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_alloc_id()) {
      set_alloc_id(from.alloc_id());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_booking_type()) {
      set_booking_type(from.booking_type());
    }
    if (from.has_cust_directed_order()) {
      set_cust_directed_order(from.cust_directed_order());
    }
    if (from.has_cust_order_handling_inst()) {
      set_cust_order_handling_inst(from.cust_order_handling_inst());
    }
    if (from.has_discretion_instructions()) {
      mutable_discretion_instructions()->::Common::DiscretionInstructions::MergeFrom(from.discretion_instructions());
    }
    if (from.has_display_instruction()) {
      mutable_display_instruction()->::Common::DisplayInstruction::MergeFrom(from.display_instruction());
    }
    if (from.has_ex_destination_id_source()) {
      set_ex_destination_id_source(from.ex_destination_id_source());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_manual_order_indicator()) {
      set_manual_order_indicator(from.manual_order_indicator());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_match_increment()) {
      set_match_increment(from.match_increment());
    }
    if (from.has_match_increment_exponent()) {
      set_match_increment_exponent(from.match_increment_exponent());
    }
    if (from.has_max_price_levels()) {
      set_max_price_levels(from.max_price_levels());
    }
    if (from.has_order_handling_inst_source()) {
      set_order_handling_inst_source(from.order_handling_inst_source());
    }
    if (from.has_participation_rate()) {
      set_participation_rate(from.participation_rate());
    }
    if (from.has_participation_rate_exponent()) {
      set_participation_rate_exponent(from.participation_rate_exponent());
    }
    if (from.has_peg_instructions()) {
      mutable_peg_instructions()->::Common::PegInstructions::MergeFrom(from.peg_instructions());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_pre_trade_anonymity()) {
      set_pre_trade_anonymity(from.pre_trade_anonymity());
    }
    if (from.has_price_protection_scope()) {
      set_price_protection_scope(from.price_protection_scope());
    }
    if (from.has_qty_type()) {
      set_qty_type(from.qty_type());
    }
    if (from.has_received_dept_id()) {
      set_received_dept_id(from.received_dept_id());
    }
    if (from.has_target_strategy()) {
      set_target_strategy(from.target_strategy());
    }
    if (from.has_target_strategy_parameters()) {
      set_target_strategy_parameters(from.target_strategy_parameters());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
  }
  if (from._has_bits_[98 / 32] & (0xffu << (98 % 32))) {
    if (from.has_triggering_instruction()) {
      mutable_triggering_instruction()->::Common::TriggeringInstruction::MergeFrom(from.triggering_instruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCancelReplaceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancelReplaceRequest::CopyFrom(const OrderCancelReplaceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancelReplaceRequest::IsInitialized() const {

  return true;
}

void OrderCancelReplaceRequest::Swap(OrderCancelReplaceRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(currency_, other->currency_);
    exec_inst_.Swap(&other->exec_inst_);
    std::swap(handl_inst_, other->handl_inst_);
    std::swap(list_id_, other->list_id_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(order_id_, other->order_id_);
    std::swap(orig_cl_ord_id_, other->orig_cl_ord_id_);
    std::swap(price_, other->price_);
    std::swap(price_exponent_, other->price_exponent_);
    std::swap(settl_date_, other->settl_date_);
    std::swap(settl_type_, other->settl_type_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(stop_px_, other->stop_px_);
    std::swap(stop_px_exponent_, other->stop_px_exponent_);
    std::swap(text_, other->text_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(ex_destination_, other->ex_destination_);
    std::swap(max_floor_, other->max_floor_);
    std::swap(max_floor_exponent_, other->max_floor_exponent_);
    std::swap(min_qty_, other->min_qty_);
    std::swap(min_qty_exponent_, other->min_qty_exponent_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(forex_req_, other->forex_req_);
    std::swap(settl_currency_, other->settl_currency_);
    std::swap(covered_or_uncovered_, other->covered_or_uncovered_);
    std::swap(locate_reqd_, other->locate_reqd_);
    std::swap(max_show_, other->max_show_);
    std::swap(max_show_exponent_, other->max_show_exponent_);
    std::swap(order_qty2_, other->order_qty2_);
    std::swap(order_qty2_exponent_, other->order_qty2_exponent_);
    std::swap(position_effect_, other->position_effect_);
    std::swap(settl_date2_, other->settl_date2_);
    std::swap(compliance_id_, other->compliance_id_);
    std::swap(effective_time_, other->effective_time_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(expire_date_, other->expire_date_);
    std::swap(gt_booking_inst_, other->gt_booking_inst_);
    std::swap(solicited_flag_, other->solicited_flag_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(account_type_, other->account_type_);
    std::swap(booking_unit_, other->booking_unit_);
    std::swap(cancellation_rights_, other->cancellation_rights_);
    std::swap(cash_margin_, other->cash_margin_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(clearing_fee_indicator_, other->clearing_fee_indicator_);
    std::swap(commission_data_, other->commission_data_);
    std::swap(cust_order_capacity_, other->cust_order_capacity_);
    std::swap(day_booking_inst_, other->day_booking_inst_);
    std::swap(designation_, other->designation_);
    std::swap(instrument_, other->instrument_);
    std::swap(money_laundering_status_, other->money_laundering_status_);
    std::swap(order_capacity_, other->order_capacity_);
    std::swap(order_qty_data_, other->order_qty_data_);
    order_restrictions_.Swap(&other->order_restrictions_);
    std::swap(orig_ord_mod_time_, other->orig_ord_mod_time_);
    parties_.Swap(&other->parties_);
    std::swap(prealloc_method_, other->prealloc_method_);
    std::swap(price2_, other->price2_);
    std::swap(price2_exponent_, other->price2_exponent_);
    std::swap(price_type_, other->price_type_);
    std::swap(regist_id_, other->regist_id_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    std::swap(trade_origination_date_, other->trade_origination_date_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(alloc_id_, other->alloc_id_);
    std::swap(booking_type_, other->booking_type_);
    std::swap(cust_directed_order_, other->cust_directed_order_);
    std::swap(cust_order_handling_inst_, other->cust_order_handling_inst_);
    std::swap(discretion_instructions_, other->discretion_instructions_);
    std::swap(display_instruction_, other->display_instruction_);
    std::swap(ex_destination_id_source_, other->ex_destination_id_source_);
    std::swap(financing_details_, other->financing_details_);
    std::swap(manual_order_indicator_, other->manual_order_indicator_);
    std::swap(match_increment_, other->match_increment_);
    std::swap(match_increment_exponent_, other->match_increment_exponent_);
    std::swap(max_price_levels_, other->max_price_levels_);
    std::swap(order_handling_inst_source_, other->order_handling_inst_source_);
    std::swap(participation_rate_, other->participation_rate_);
    std::swap(participation_rate_exponent_, other->participation_rate_exponent_);
    std::swap(peg_instructions_, other->peg_instructions_);
    pre_alloc_grp_.Swap(&other->pre_alloc_grp_);
    std::swap(pre_trade_anonymity_, other->pre_trade_anonymity_);
    std::swap(price_protection_scope_, other->price_protection_scope_);
    std::swap(qty_type_, other->qty_type_);
    std::swap(received_dept_id_, other->received_dept_id_);
    strategy_parameters_grp_.Swap(&other->strategy_parameters_grp_);
    std::swap(target_strategy_, other->target_strategy_);
    std::swap(target_strategy_parameters_, other->target_strategy_parameters_);
    std::swap(trade_date_, other->trade_date_);
    trd_reg_timestamps_.Swap(&other->trd_reg_timestamps_);
    trdg_ses_grp_.Swap(&other->trdg_ses_grp_);
    std::swap(triggering_instruction_, other->triggering_instruction_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCancelReplaceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCancelReplaceRequest_descriptor_;
  metadata.reflection = OrderCancelReplaceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCancelRequest::kClOrdIdFieldNumber;
const int OrderCancelRequest::kListIdFieldNumber;
const int OrderCancelRequest::kOrderIdFieldNumber;
const int OrderCancelRequest::kOrigClOrdIdFieldNumber;
const int OrderCancelRequest::kSideFieldNumber;
const int OrderCancelRequest::kStandardHeaderFieldNumber;
const int OrderCancelRequest::kStandardTrailerFieldNumber;
const int OrderCancelRequest::kTextFieldNumber;
const int OrderCancelRequest::kAccountFieldNumber;
const int OrderCancelRequest::kComplianceIdFieldNumber;
const int OrderCancelRequest::kEncodedTextFieldNumber;
const int OrderCancelRequest::kEncodedTextLenFieldNumber;
const int OrderCancelRequest::kTransactTimeFieldNumber;
const int OrderCancelRequest::kAccountTypeFieldNumber;
const int OrderCancelRequest::kClOrdLinkIdFieldNumber;
const int OrderCancelRequest::kInstrumentFieldNumber;
const int OrderCancelRequest::kOrderQtyDataFieldNumber;
const int OrderCancelRequest::kOrigOrdModTimeFieldNumber;
const int OrderCancelRequest::kPartiesFieldNumber;
const int OrderCancelRequest::kSecondaryClOrdIdFieldNumber;
const int OrderCancelRequest::kAcctIdSourceFieldNumber;
const int OrderCancelRequest::kFinancingDetailsFieldNumber;
const int OrderCancelRequest::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

OrderCancelRequest::OrderCancelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.OrderCancelRequest)
}

void OrderCancelRequest::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
}

OrderCancelRequest::OrderCancelRequest(const OrderCancelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.OrderCancelRequest)
}

void OrderCancelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  compliance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  transact_time_ = GOOGLE_LONGLONG(0);
  account_type_ = 0;
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_ = NULL;
  order_qty_data_ = NULL;
  orig_ord_mod_time_ = GOOGLE_LONGLONG(0);
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_id_source_ = 0;
  financing_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCancelRequest::~OrderCancelRequest() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.OrderCancelRequest)
  SharedDtor();
}

void OrderCancelRequest::SharedDtor() {
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orig_cl_ord_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compliance_id_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete order_qty_data_;
    delete financing_details_;
  }
}

void OrderCancelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCancelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCancelRequest_descriptor_;
}

const OrderCancelRequest& OrderCancelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

OrderCancelRequest* OrderCancelRequest::default_instance_ = NULL;

OrderCancelRequest* OrderCancelRequest::New() const {
  return new OrderCancelRequest;
}

void OrderCancelRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderCancelRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_list_id()) {
      if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    if (has_orig_cl_ord_id()) {
      if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orig_cl_ord_id_->clear();
      }
    }
    side_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_compliance_id()) {
      if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compliance_id_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    transact_time_ = GOOGLE_LONGLONG(0);
    account_type_ = 0;
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 3866624) {
    ZR_(acct_id_source_, orig_ord_mod_time_);
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  parties_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCancelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.OrderCancelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cl_ord_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list_id;
        break;
      }

      // optional string list_id = 2;
      case 2: {
        if (tag == 18) {
         parse_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_id().data(), this->list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "list_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_order_id;
        break;
      }

      // optional string order_id = 3;
      case 3: {
        if (tag == 26) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orig_cl_ord_id;
        break;
      }

      // optional string orig_cl_ord_id = 4;
      case 4: {
        if (tag == 34) {
         parse_orig_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orig_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 5;
      case 5: {
        if (tag == 40) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 6;
      case 6: {
        if (tag == 50) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 7;
      case 7: {
        if (tag == 58) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_text;
        break;
      }

      // optional string text = 8;
      case 8: {
        if (tag == 66) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_account;
        break;
      }

      // optional string account = 9;
      case 9: {
        if (tag == 74) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_compliance_id;
        break;
      }

      // optional string compliance_id = 10;
      case 10: {
        if (tag == 82) {
         parse_compliance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compliance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compliance_id().data(), this->compliance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compliance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 11;
      case 11: {
        if (tag == 90) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 12;
      case 12: {
        if (tag == 101) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 13;
      case 13: {
        if (tag == 105) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_account_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 14;
      case 14: {
        if (tag == 112) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AccountTypeEnum_IsValid(value)) {
            set_account_type(static_cast< ::SingleGeneralOrderHandling::AccountTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 15;
      case 15: {
        if (tag == 122) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 16;
      case 16: {
        if (tag == 130) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 17;
      case 17: {
        if (tag == 138) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_orig_ord_mod_time;
        break;
      }

      // optional sfixed64 orig_ord_mod_time = 18;
      case 18: {
        if (tag == 145) {
         parse_orig_ord_mod_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orig_ord_mod_time_)));
          set_has_orig_ord_mod_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 19;
      case 19: {
        if (tag == 154) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_parties;
        if (input->ExpectTag(162)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 20;
      case 20: {
        if (tag == 162) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 21;
      case 21: {
        if (tag == 168) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 22;
      case 22: {
        if (tag == 178) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 23;
      case 23: {
        if (tag == 186) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.OrderCancelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.OrderCancelRequest)
  return false;
#undef DO_
}

void OrderCancelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.OrderCancelRequest)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cl_ord_id(), output);
  }

  // optional string list_id = 2;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->list_id(), output);
  }

  // optional string order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->order_id(), output);
  }

  // optional string orig_cl_ord_id = 4;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orig_cl_ord_id(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 5;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 6;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 7;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->standard_trailer(), output);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->text(), output);
  }

  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->account(), output);
  }

  // optional string compliance_id = 10;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->compliance_id(), output);
  }

  // optional bytes encoded_text = 11;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 12;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->encoded_text_len(), output);
  }

  // optional sfixed64 transact_time = 13;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->transact_time(), output);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 14;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->account_type(), output);
  }

  // optional string cl_ord_link_id = 15;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->cl_ord_link_id(), output);
  }

  // optional .Common.Instrument instrument = 16;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->instrument(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 17;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->order_qty_data(), output);
  }

  // optional sfixed64 orig_ord_mod_time = 18;
  if (has_orig_ord_mod_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(18, this->orig_ord_mod_time(), output);
  }

  // repeated .Common.Parties parties = 19;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->parties(i), output);
  }

  // optional string secondary_cl_ord_id = 20;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->secondary_cl_ord_id(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 21;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->acct_id_source(), output);
  }

  // optional .Common.FinancingDetails financing_details = 22;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->financing_details(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 23;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.OrderCancelRequest)
}

::google::protobuf::uint8* OrderCancelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.OrderCancelRequest)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cl_ord_id(), target);
  }

  // optional string list_id = 2;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->list_id(), target);
  }

  // optional string order_id = 3;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->order_id(), target);
  }

  // optional string orig_cl_ord_id = 4;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orig_cl_ord_id(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 5;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 6;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 7;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->standard_trailer(), target);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text(), target);
  }

  // optional string account = 9;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->account(), target);
  }

  // optional string compliance_id = 10;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->compliance_id(), target);
  }

  // optional bytes encoded_text = 11;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 12;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->encoded_text_len(), target);
  }

  // optional sfixed64 transact_time = 13;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->transact_time(), target);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 14;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->account_type(), target);
  }

  // optional string cl_ord_link_id = 15;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cl_ord_link_id(), target);
  }

  // optional .Common.Instrument instrument = 16;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->instrument(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 17;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->order_qty_data(), target);
  }

  // optional sfixed64 orig_ord_mod_time = 18;
  if (has_orig_ord_mod_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(18, this->orig_ord_mod_time(), target);
  }

  // repeated .Common.Parties parties = 19;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->parties(i), target);
  }

  // optional string secondary_cl_ord_id = 20;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->secondary_cl_ord_id(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 21;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->acct_id_source(), target);
  }

  // optional .Common.FinancingDetails financing_details = 22;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->financing_details(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 23;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.OrderCancelRequest)
  return target;
}

int OrderCancelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cl_ord_id = 1;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional string list_id = 2;
    if (has_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_id());
    }

    // optional string order_id = 3;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional string orig_cl_ord_id = 4;
    if (has_orig_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_cl_ord_id());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 5;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 6;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 7;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string account = 9;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string compliance_id = 10;
    if (has_compliance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compliance_id());
    }

    // optional bytes encoded_text = 11;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 12;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 transact_time = 13;
    if (has_transact_time()) {
      total_size += 1 + 8;
    }

    // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 14;
    if (has_account_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

    // optional string cl_ord_link_id = 15;
    if (has_cl_ord_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional .Common.Instrument instrument = 16;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Common.OrderQtyData order_qty_data = 17;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional sfixed64 orig_ord_mod_time = 18;
    if (has_orig_ord_mod_time()) {
      total_size += 2 + 8;
    }

    // optional string secondary_cl_ord_id = 20;
    if (has_secondary_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 21;
    if (has_acct_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional .Common.FinancingDetails financing_details = 22;
    if (has_financing_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

  }
  // repeated .Common.Parties parties = 19;
  total_size += 2 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 23;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCancelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCancelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCancelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCancelRequest::MergeFrom(const OrderCancelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  parties_.MergeFrom(from.parties_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_list_id()) {
      set_list_id(from.list_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_orig_cl_ord_id()) {
      set_orig_cl_ord_id(from.orig_cl_ord_id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_compliance_id()) {
      set_compliance_id(from.compliance_id());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_orig_ord_mod_time()) {
      set_orig_ord_mod_time(from.orig_ord_mod_time());
    }
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCancelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancelRequest::CopyFrom(const OrderCancelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancelRequest::IsInitialized() const {

  return true;
}

void OrderCancelRequest::Swap(OrderCancelRequest* other) {
  if (other != this) {
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(list_id_, other->list_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(orig_cl_ord_id_, other->orig_cl_ord_id_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(account_, other->account_);
    std::swap(compliance_id_, other->compliance_id_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(account_type_, other->account_type_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(instrument_, other->instrument_);
    std::swap(order_qty_data_, other->order_qty_data_);
    std::swap(orig_ord_mod_time_, other->orig_ord_mod_time_);
    parties_.Swap(&other->parties_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(financing_details_, other->financing_details_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCancelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCancelRequest_descriptor_;
  metadata.reflection = OrderCancelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CxlRejReasonUnion::kCxlRejReasonFieldNumber;
const int CxlRejReasonUnion::kCxlRejReasonSfixed64FieldNumber;
#endif  // !_MSC_VER

CxlRejReasonUnion::CxlRejReasonUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.CxlRejReasonUnion)
}

void CxlRejReasonUnion::InitAsDefaultInstance() {
}

CxlRejReasonUnion::CxlRejReasonUnion(const CxlRejReasonUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.CxlRejReasonUnion)
}

void CxlRejReasonUnion::SharedCtor() {
  _cached_size_ = 0;
  cxl_rej_reason_ = 0;
  cxl_rej_reason_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CxlRejReasonUnion::~CxlRejReasonUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.CxlRejReasonUnion)
  SharedDtor();
}

void CxlRejReasonUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CxlRejReasonUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CxlRejReasonUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CxlRejReasonUnion_descriptor_;
}

const CxlRejReasonUnion& CxlRejReasonUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

CxlRejReasonUnion* CxlRejReasonUnion::default_instance_ = NULL;

CxlRejReasonUnion* CxlRejReasonUnion::New() const {
  return new CxlRejReasonUnion;
}

void CxlRejReasonUnion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CxlRejReasonUnion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cxl_rej_reason_sfixed64_, cxl_rej_reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CxlRejReasonUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.CxlRejReasonUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CxlRejReasonEnum_IsValid(value)) {
            set_cxl_rej_reason(static_cast< ::SingleGeneralOrderHandling::CxlRejReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cxl_rej_reason_sfixed64;
        break;
      }

      // optional sfixed64 cxl_rej_reason_sfixed64 = 2;
      case 2: {
        if (tag == 17) {
         parse_cxl_rej_reason_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cxl_rej_reason_sfixed64_)));
          set_has_cxl_rej_reason_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.CxlRejReasonUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.CxlRejReasonUnion)
  return false;
#undef DO_
}

void CxlRejReasonUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.CxlRejReasonUnion)
  // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 1;
  if (has_cxl_rej_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cxl_rej_reason(), output);
  }

  // optional sfixed64 cxl_rej_reason_sfixed64 = 2;
  if (has_cxl_rej_reason_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->cxl_rej_reason_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.CxlRejReasonUnion)
}

::google::protobuf::uint8* CxlRejReasonUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.CxlRejReasonUnion)
  // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 1;
  if (has_cxl_rej_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cxl_rej_reason(), target);
  }

  // optional sfixed64 cxl_rej_reason_sfixed64 = 2;
  if (has_cxl_rej_reason_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->cxl_rej_reason_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.CxlRejReasonUnion)
  return target;
}

int CxlRejReasonUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 1;
    if (has_cxl_rej_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cxl_rej_reason());
    }

    // optional sfixed64 cxl_rej_reason_sfixed64 = 2;
    if (has_cxl_rej_reason_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CxlRejReasonUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CxlRejReasonUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CxlRejReasonUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CxlRejReasonUnion::MergeFrom(const CxlRejReasonUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cxl_rej_reason()) {
      set_cxl_rej_reason(from.cxl_rej_reason());
    }
    if (from.has_cxl_rej_reason_sfixed64()) {
      set_cxl_rej_reason_sfixed64(from.cxl_rej_reason_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CxlRejReasonUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CxlRejReasonUnion::CopyFrom(const CxlRejReasonUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CxlRejReasonUnion::IsInitialized() const {

  return true;
}

void CxlRejReasonUnion::Swap(CxlRejReasonUnion* other) {
  if (other != this) {
    std::swap(cxl_rej_reason_, other->cxl_rej_reason_);
    std::swap(cxl_rej_reason_sfixed64_, other->cxl_rej_reason_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CxlRejReasonUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CxlRejReasonUnion_descriptor_;
  metadata.reflection = CxlRejReasonUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderCancelReject::kClOrdIdFieldNumber;
const int OrderCancelReject::kCxlRejReasonFieldNumber;
const int OrderCancelReject::kListIdFieldNumber;
const int OrderCancelReject::kOrderIdFieldNumber;
const int OrderCancelReject::kStandardHeaderFieldNumber;
const int OrderCancelReject::kStandardTrailerFieldNumber;
const int OrderCancelReject::kTextFieldNumber;
const int OrderCancelReject::kOrdStatusFieldNumber;
const int OrderCancelReject::kOrigClOrdIdFieldNumber;
const int OrderCancelReject::kSecondaryOrderIdFieldNumber;
const int OrderCancelReject::kAccountFieldNumber;
const int OrderCancelReject::kCxlRejResponseToFieldNumber;
const int OrderCancelReject::kEncodedTextFieldNumber;
const int OrderCancelReject::kEncodedTextLenFieldNumber;
const int OrderCancelReject::kTransactTimeFieldNumber;
const int OrderCancelReject::kAccountTypeFieldNumber;
const int OrderCancelReject::kClOrdLinkIdFieldNumber;
const int OrderCancelReject::kOrigOrdModTimeFieldNumber;
const int OrderCancelReject::kSecondaryClOrdIdFieldNumber;
const int OrderCancelReject::kTradeOriginationDateFieldNumber;
const int OrderCancelReject::kWorkingIndicatorFieldNumber;
const int OrderCancelReject::kAcctIdSourceFieldNumber;
const int OrderCancelReject::kTradeDateFieldNumber;
#endif  // !_MSC_VER

OrderCancelReject::OrderCancelReject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.OrderCancelReject)
}

void OrderCancelReject::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
}

OrderCancelReject::OrderCancelReject(const OrderCancelReject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.OrderCancelReject)
}

void OrderCancelReject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cxl_rej_reason_ = 0;
  list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_status_ = 0;
  orig_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cxl_rej_response_to_ = 0;
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  transact_time_ = GOOGLE_LONGLONG(0);
  account_type_ = 0;
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orig_ord_mod_time_ = GOOGLE_LONGLONG(0);
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trade_origination_date_ = 0;
  working_indicator_ = false;
  acct_id_source_ = 0;
  trade_date_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderCancelReject::~OrderCancelReject() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.OrderCancelReject)
  SharedDtor();
}

void OrderCancelReject::SharedDtor() {
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orig_cl_ord_id_;
  }
  if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_order_id_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
  }
}

void OrderCancelReject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderCancelReject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCancelReject_descriptor_;
}

const OrderCancelReject& OrderCancelReject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

OrderCancelReject* OrderCancelReject::default_instance_ = NULL;

OrderCancelReject* OrderCancelReject::New() const {
  return new OrderCancelReject;
}

void OrderCancelReject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrderCancelReject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cxl_rej_reason_, ord_status_);
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_list_id()) {
      if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(cxl_rej_response_to_, transact_time_);
    if (has_orig_cl_ord_id()) {
      if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orig_cl_ord_id_->clear();
      }
    }
    if (has_secondary_order_id()) {
      if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_order_id_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
    account_type_ = 0;
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(working_indicator_, trade_date_);
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    orig_ord_mod_time_ = GOOGLE_LONGLONG(0);
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    trade_origination_date_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderCancelReject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.OrderCancelReject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cl_ord_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cxl_rej_reason;
        break;
      }

      // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 2;
      case 2: {
        if (tag == 16) {
         parse_cxl_rej_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CxlRejReasonEnum_IsValid(value)) {
            set_cxl_rej_reason(static_cast< ::SingleGeneralOrderHandling::CxlRejReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list_id;
        break;
      }

      // optional string list_id = 3;
      case 3: {
        if (tag == 26) {
         parse_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_id().data(), this->list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "list_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_order_id;
        break;
      }

      // optional string order_id = 4;
      case 4: {
        if (tag == 34) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 5;
      case 5: {
        if (tag == 42) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 6;
      case 6: {
        if (tag == 50) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_text;
        break;
      }

      // optional string text = 7;
      case 7: {
        if (tag == 58) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ord_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 8;
      case 8: {
        if (tag == 64) {
         parse_ord_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdStatusEnum_IsValid(value)) {
            set_ord_status(static_cast< ::SingleGeneralOrderHandling::OrdStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_orig_cl_ord_id;
        break;
      }

      // optional string orig_cl_ord_id = 9;
      case 9: {
        if (tag == 74) {
         parse_orig_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orig_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_secondary_order_id;
        break;
      }

      // optional string secondary_order_id = 10;
      case 10: {
        if (tag == 82) {
         parse_secondary_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_order_id().data(), this->secondary_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_account;
        break;
      }

      // optional string account = 11;
      case 11: {
        if (tag == 90) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cxl_rej_response_to;
        break;
      }

      // optional .SingleGeneralOrderHandling.CxlRejResponseToEnum cxl_rej_response_to = 12;
      case 12: {
        if (tag == 96) {
         parse_cxl_rej_response_to:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CxlRejResponseToEnum_IsValid(value)) {
            set_cxl_rej_response_to(static_cast< ::SingleGeneralOrderHandling::CxlRejResponseToEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 13;
      case 13: {
        if (tag == 106) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 14;
      case 14: {
        if (tag == 117) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 15;
      case 15: {
        if (tag == 121) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_account_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 16;
      case 16: {
        if (tag == 128) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AccountTypeEnum_IsValid(value)) {
            set_account_type(static_cast< ::SingleGeneralOrderHandling::AccountTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 17;
      case 17: {
        if (tag == 138) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_orig_ord_mod_time;
        break;
      }

      // optional sfixed64 orig_ord_mod_time = 18;
      case 18: {
        if (tag == 145) {
         parse_orig_ord_mod_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &orig_ord_mod_time_)));
          set_has_orig_ord_mod_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 19;
      case 19: {
        if (tag == 154) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_trade_origination_date;
        break;
      }

      // optional sfixed32 trade_origination_date = 20;
      case 20: {
        if (tag == 165) {
         parse_trade_origination_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_origination_date_)));
          set_has_trade_origination_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_working_indicator;
        break;
      }

      // optional bool working_indicator = 21;
      case 21: {
        if (tag == 168) {
         parse_working_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &working_indicator_)));
          set_has_working_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 22;
      case 22: {
        if (tag == 176) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(189)) goto parse_trade_date;
        break;
      }

      // optional sfixed32 trade_date = 23;
      case 23: {
        if (tag == 189) {
         parse_trade_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_date_)));
          set_has_trade_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.OrderCancelReject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.OrderCancelReject)
  return false;
#undef DO_
}

void OrderCancelReject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.OrderCancelReject)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cl_ord_id(), output);
  }

  // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 2;
  if (has_cxl_rej_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cxl_rej_reason(), output);
  }

  // optional string list_id = 3;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->list_id(), output);
  }

  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->order_id(), output);
  }

  // optional .Session.StandardHeader standard_header = 5;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 6;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->standard_trailer(), output);
  }

  // optional string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->text(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 8;
  if (has_ord_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->ord_status(), output);
  }

  // optional string orig_cl_ord_id = 9;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->orig_cl_ord_id(), output);
  }

  // optional string secondary_order_id = 10;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->secondary_order_id(), output);
  }

  // optional string account = 11;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->account(), output);
  }

  // optional .SingleGeneralOrderHandling.CxlRejResponseToEnum cxl_rej_response_to = 12;
  if (has_cxl_rej_response_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->cxl_rej_response_to(), output);
  }

  // optional bytes encoded_text = 13;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 14;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->encoded_text_len(), output);
  }

  // optional sfixed64 transact_time = 15;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(15, this->transact_time(), output);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 16;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->account_type(), output);
  }

  // optional string cl_ord_link_id = 17;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->cl_ord_link_id(), output);
  }

  // optional sfixed64 orig_ord_mod_time = 18;
  if (has_orig_ord_mod_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(18, this->orig_ord_mod_time(), output);
  }

  // optional string secondary_cl_ord_id = 19;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->secondary_cl_ord_id(), output);
  }

  // optional sfixed32 trade_origination_date = 20;
  if (has_trade_origination_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(20, this->trade_origination_date(), output);
  }

  // optional bool working_indicator = 21;
  if (has_working_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->working_indicator(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 22;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->acct_id_source(), output);
  }

  // optional sfixed32 trade_date = 23;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(23, this->trade_date(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.OrderCancelReject)
}

::google::protobuf::uint8* OrderCancelReject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.OrderCancelReject)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cl_ord_id(), target);
  }

  // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 2;
  if (has_cxl_rej_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cxl_rej_reason(), target);
  }

  // optional string list_id = 3;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->list_id(), target);
  }

  // optional string order_id = 4;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->order_id(), target);
  }

  // optional .Session.StandardHeader standard_header = 5;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 6;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->standard_trailer(), target);
  }

  // optional string text = 7;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->text(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 8;
  if (has_ord_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->ord_status(), target);
  }

  // optional string orig_cl_ord_id = 9;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->orig_cl_ord_id(), target);
  }

  // optional string secondary_order_id = 10;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->secondary_order_id(), target);
  }

  // optional string account = 11;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->account(), target);
  }

  // optional .SingleGeneralOrderHandling.CxlRejResponseToEnum cxl_rej_response_to = 12;
  if (has_cxl_rej_response_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->cxl_rej_response_to(), target);
  }

  // optional bytes encoded_text = 13;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 14;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->encoded_text_len(), target);
  }

  // optional sfixed64 transact_time = 15;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(15, this->transact_time(), target);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 16;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->account_type(), target);
  }

  // optional string cl_ord_link_id = 17;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->cl_ord_link_id(), target);
  }

  // optional sfixed64 orig_ord_mod_time = 18;
  if (has_orig_ord_mod_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(18, this->orig_ord_mod_time(), target);
  }

  // optional string secondary_cl_ord_id = 19;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->secondary_cl_ord_id(), target);
  }

  // optional sfixed32 trade_origination_date = 20;
  if (has_trade_origination_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(20, this->trade_origination_date(), target);
  }

  // optional bool working_indicator = 21;
  if (has_working_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->working_indicator(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 22;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->acct_id_source(), target);
  }

  // optional sfixed32 trade_date = 23;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(23, this->trade_date(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.OrderCancelReject)
  return target;
}

int OrderCancelReject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cl_ord_id = 1;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional .SingleGeneralOrderHandling.CxlRejReasonEnum cxl_rej_reason = 2;
    if (has_cxl_rej_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cxl_rej_reason());
    }

    // optional string list_id = 3;
    if (has_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_id());
    }

    // optional string order_id = 4;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional .Session.StandardHeader standard_header = 5;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 6;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 7;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 8;
    if (has_ord_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string orig_cl_ord_id = 9;
    if (has_orig_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_cl_ord_id());
    }

    // optional string secondary_order_id = 10;
    if (has_secondary_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_order_id());
    }

    // optional string account = 11;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .SingleGeneralOrderHandling.CxlRejResponseToEnum cxl_rej_response_to = 12;
    if (has_cxl_rej_response_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cxl_rej_response_to());
    }

    // optional bytes encoded_text = 13;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 14;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 transact_time = 15;
    if (has_transact_time()) {
      total_size += 1 + 8;
    }

    // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 16;
    if (has_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string cl_ord_link_id = 17;
    if (has_cl_ord_link_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional sfixed64 orig_ord_mod_time = 18;
    if (has_orig_ord_mod_time()) {
      total_size += 2 + 8;
    }

    // optional string secondary_cl_ord_id = 19;
    if (has_secondary_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional sfixed32 trade_origination_date = 20;
    if (has_trade_origination_date()) {
      total_size += 2 + 4;
    }

    // optional bool working_indicator = 21;
    if (has_working_indicator()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 22;
    if (has_acct_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional sfixed32 trade_date = 23;
    if (has_trade_date()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderCancelReject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderCancelReject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderCancelReject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderCancelReject::MergeFrom(const OrderCancelReject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_cxl_rej_reason()) {
      set_cxl_rej_reason(from.cxl_rej_reason());
    }
    if (from.has_list_id()) {
      set_list_id(from.list_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_ord_status()) {
      set_ord_status(from.ord_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_orig_cl_ord_id()) {
      set_orig_cl_ord_id(from.orig_cl_ord_id());
    }
    if (from.has_secondary_order_id()) {
      set_secondary_order_id(from.secondary_order_id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cxl_rej_response_to()) {
      set_cxl_rej_response_to(from.cxl_rej_response_to());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_orig_ord_mod_time()) {
      set_orig_ord_mod_time(from.orig_ord_mod_time());
    }
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_trade_origination_date()) {
      set_trade_origination_date(from.trade_origination_date());
    }
    if (from.has_working_indicator()) {
      set_working_indicator(from.working_indicator());
    }
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderCancelReject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCancelReject::CopyFrom(const OrderCancelReject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCancelReject::IsInitialized() const {

  return true;
}

void OrderCancelReject::Swap(OrderCancelReject* other) {
  if (other != this) {
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(cxl_rej_reason_, other->cxl_rej_reason_);
    std::swap(list_id_, other->list_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(ord_status_, other->ord_status_);
    std::swap(orig_cl_ord_id_, other->orig_cl_ord_id_);
    std::swap(secondary_order_id_, other->secondary_order_id_);
    std::swap(account_, other->account_);
    std::swap(cxl_rej_response_to_, other->cxl_rej_response_to_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(account_type_, other->account_type_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(orig_ord_mod_time_, other->orig_ord_mod_time_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(trade_origination_date_, other->trade_origination_date_);
    std::swap(working_indicator_, other->working_indicator_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(trade_date_, other->trade_date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderCancelReject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderCancelReject_descriptor_;
  metadata.reflection = OrderCancelReject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FillsGrp::kFillExecIdFieldNumber;
const int FillsGrp::kFillPxFieldNumber;
const int FillsGrp::kFillPxExponentFieldNumber;
const int FillsGrp::kFillQtyFieldNumber;
const int FillsGrp::kFillQtyExponentFieldNumber;
const int FillsGrp::kNestedParties4FieldNumber;
const int FillsGrp::kFillLiquidityIndFieldNumber;
#endif  // !_MSC_VER

FillsGrp::FillsGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.FillsGrp)
}

void FillsGrp::InitAsDefaultInstance() {
}

FillsGrp::FillsGrp(const FillsGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.FillsGrp)
}

void FillsGrp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fill_exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fill_px_ = GOOGLE_LONGLONG(0);
  fill_px_exponent_ = 0;
  fill_qty_ = GOOGLE_LONGLONG(0);
  fill_qty_exponent_ = 0;
  fill_liquidity_ind_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FillsGrp::~FillsGrp() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.FillsGrp)
  SharedDtor();
}

void FillsGrp::SharedDtor() {
  if (fill_exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fill_exec_id_;
  }
  if (this != default_instance_) {
  }
}

void FillsGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FillsGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FillsGrp_descriptor_;
}

const FillsGrp& FillsGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

FillsGrp* FillsGrp::default_instance_ = NULL;

FillsGrp* FillsGrp::New() const {
  return new FillsGrp;
}

void FillsGrp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FillsGrp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(fill_px_, fill_qty_exponent_);
    if (has_fill_exec_id()) {
      if (fill_exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fill_exec_id_->clear();
      }
    }
    fill_liquidity_ind_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  nested_parties4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FillsGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.FillsGrp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fill_exec_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fill_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fill_exec_id().data(), this->fill_exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fill_exec_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_fill_px;
        break;
      }

      // optional sfixed64 fill_px = 2;
      case 2: {
        if (tag == 17) {
         parse_fill_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &fill_px_)));
          set_has_fill_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_fill_px_exponent;
        break;
      }

      // optional sfixed32 fill_px_exponent = 3;
      case 3: {
        if (tag == 29) {
         parse_fill_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &fill_px_exponent_)));
          set_has_fill_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_fill_qty;
        break;
      }

      // optional sfixed64 fill_qty = 4;
      case 4: {
        if (tag == 33) {
         parse_fill_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &fill_qty_)));
          set_has_fill_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_fill_qty_exponent;
        break;
      }

      // optional sfixed32 fill_qty_exponent = 5;
      case 5: {
        if (tag == 45) {
         parse_fill_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &fill_qty_exponent_)));
          set_has_fill_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nested_parties4;
        break;
      }

      // repeated .Common.NestedParties4 nested_parties4 = 6;
      case 6: {
        if (tag == 50) {
         parse_nested_parties4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nested_parties4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_nested_parties4;
        if (input->ExpectTag(57)) goto parse_fill_liquidity_ind;
        break;
      }

      // optional sfixed64 fill_liquidity_ind = 7;
      case 7: {
        if (tag == 57) {
         parse_fill_liquidity_ind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &fill_liquidity_ind_)));
          set_has_fill_liquidity_ind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.FillsGrp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.FillsGrp)
  return false;
#undef DO_
}

void FillsGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.FillsGrp)
  // optional string fill_exec_id = 1;
  if (has_fill_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fill_exec_id().data(), this->fill_exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fill_exec_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fill_exec_id(), output);
  }

  // optional sfixed64 fill_px = 2;
  if (has_fill_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->fill_px(), output);
  }

  // optional sfixed32 fill_px_exponent = 3;
  if (has_fill_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->fill_px_exponent(), output);
  }

  // optional sfixed64 fill_qty = 4;
  if (has_fill_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->fill_qty(), output);
  }

  // optional sfixed32 fill_qty_exponent = 5;
  if (has_fill_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->fill_qty_exponent(), output);
  }

  // repeated .Common.NestedParties4 nested_parties4 = 6;
  for (int i = 0; i < this->nested_parties4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nested_parties4(i), output);
  }

  // optional sfixed64 fill_liquidity_ind = 7;
  if (has_fill_liquidity_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->fill_liquidity_ind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.FillsGrp)
}

::google::protobuf::uint8* FillsGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.FillsGrp)
  // optional string fill_exec_id = 1;
  if (has_fill_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fill_exec_id().data(), this->fill_exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fill_exec_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fill_exec_id(), target);
  }

  // optional sfixed64 fill_px = 2;
  if (has_fill_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->fill_px(), target);
  }

  // optional sfixed32 fill_px_exponent = 3;
  if (has_fill_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->fill_px_exponent(), target);
  }

  // optional sfixed64 fill_qty = 4;
  if (has_fill_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->fill_qty(), target);
  }

  // optional sfixed32 fill_qty_exponent = 5;
  if (has_fill_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->fill_qty_exponent(), target);
  }

  // repeated .Common.NestedParties4 nested_parties4 = 6;
  for (int i = 0; i < this->nested_parties4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nested_parties4(i), target);
  }

  // optional sfixed64 fill_liquidity_ind = 7;
  if (has_fill_liquidity_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->fill_liquidity_ind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.FillsGrp)
  return target;
}

int FillsGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fill_exec_id = 1;
    if (has_fill_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fill_exec_id());
    }

    // optional sfixed64 fill_px = 2;
    if (has_fill_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 fill_px_exponent = 3;
    if (has_fill_px_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 fill_qty = 4;
    if (has_fill_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 fill_qty_exponent = 5;
    if (has_fill_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional sfixed64 fill_liquidity_ind = 7;
    if (has_fill_liquidity_ind()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.NestedParties4 nested_parties4 = 6;
  total_size += 1 * this->nested_parties4_size();
  for (int i = 0; i < this->nested_parties4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nested_parties4(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FillsGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FillsGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FillsGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FillsGrp::MergeFrom(const FillsGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  nested_parties4_.MergeFrom(from.nested_parties4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fill_exec_id()) {
      set_fill_exec_id(from.fill_exec_id());
    }
    if (from.has_fill_px()) {
      set_fill_px(from.fill_px());
    }
    if (from.has_fill_px_exponent()) {
      set_fill_px_exponent(from.fill_px_exponent());
    }
    if (from.has_fill_qty()) {
      set_fill_qty(from.fill_qty());
    }
    if (from.has_fill_qty_exponent()) {
      set_fill_qty_exponent(from.fill_qty_exponent());
    }
    if (from.has_fill_liquidity_ind()) {
      set_fill_liquidity_ind(from.fill_liquidity_ind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FillsGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillsGrp::CopyFrom(const FillsGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillsGrp::IsInitialized() const {

  return true;
}

void FillsGrp::Swap(FillsGrp* other) {
  if (other != this) {
    std::swap(fill_exec_id_, other->fill_exec_id_);
    std::swap(fill_px_, other->fill_px_);
    std::swap(fill_px_exponent_, other->fill_px_exponent_);
    std::swap(fill_qty_, other->fill_qty_);
    std::swap(fill_qty_exponent_, other->fill_qty_exponent_);
    nested_parties4_.Swap(&other->nested_parties4_);
    std::swap(fill_liquidity_ind_, other->fill_liquidity_ind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FillsGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FillsGrp_descriptor_;
  metadata.reflection = FillsGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrdRejReasonUnion::kOrdRejReasonFieldNumber;
const int OrdRejReasonUnion::kOrdRejReasonSfixed64FieldNumber;
#endif  // !_MSC_VER

OrdRejReasonUnion::OrdRejReasonUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.OrdRejReasonUnion)
}

void OrdRejReasonUnion::InitAsDefaultInstance() {
}

OrdRejReasonUnion::OrdRejReasonUnion(const OrdRejReasonUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.OrdRejReasonUnion)
}

void OrdRejReasonUnion::SharedCtor() {
  _cached_size_ = 0;
  ord_rej_reason_ = 0;
  ord_rej_reason_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdRejReasonUnion::~OrdRejReasonUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.OrdRejReasonUnion)
  SharedDtor();
}

void OrdRejReasonUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdRejReasonUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdRejReasonUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdRejReasonUnion_descriptor_;
}

const OrdRejReasonUnion& OrdRejReasonUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

OrdRejReasonUnion* OrdRejReasonUnion::default_instance_ = NULL;

OrdRejReasonUnion* OrdRejReasonUnion::New() const {
  return new OrdRejReasonUnion;
}

void OrdRejReasonUnion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OrdRejReasonUnion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ord_rej_reason_sfixed64_, ord_rej_reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrdRejReasonUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.OrdRejReasonUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdRejReasonEnum_IsValid(value)) {
            set_ord_rej_reason(static_cast< ::SingleGeneralOrderHandling::OrdRejReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ord_rej_reason_sfixed64;
        break;
      }

      // optional sfixed64 ord_rej_reason_sfixed64 = 2;
      case 2: {
        if (tag == 17) {
         parse_ord_rej_reason_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &ord_rej_reason_sfixed64_)));
          set_has_ord_rej_reason_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.OrdRejReasonUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.OrdRejReasonUnion)
  return false;
#undef DO_
}

void OrdRejReasonUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.OrdRejReasonUnion)
  // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 1;
  if (has_ord_rej_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ord_rej_reason(), output);
  }

  // optional sfixed64 ord_rej_reason_sfixed64 = 2;
  if (has_ord_rej_reason_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->ord_rej_reason_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.OrdRejReasonUnion)
}

::google::protobuf::uint8* OrdRejReasonUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.OrdRejReasonUnion)
  // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 1;
  if (has_ord_rej_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ord_rej_reason(), target);
  }

  // optional sfixed64 ord_rej_reason_sfixed64 = 2;
  if (has_ord_rej_reason_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->ord_rej_reason_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.OrdRejReasonUnion)
  return target;
}

int OrdRejReasonUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 1;
    if (has_ord_rej_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_rej_reason());
    }

    // optional sfixed64 ord_rej_reason_sfixed64 = 2;
    if (has_ord_rej_reason_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdRejReasonUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrdRejReasonUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrdRejReasonUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrdRejReasonUnion::MergeFrom(const OrdRejReasonUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ord_rej_reason()) {
      set_ord_rej_reason(from.ord_rej_reason());
    }
    if (from.has_ord_rej_reason_sfixed64()) {
      set_ord_rej_reason_sfixed64(from.ord_rej_reason_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrdRejReasonUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdRejReasonUnion::CopyFrom(const OrdRejReasonUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdRejReasonUnion::IsInitialized() const {

  return true;
}

void OrdRejReasonUnion::Swap(OrdRejReasonUnion* other) {
  if (other != this) {
    std::swap(ord_rej_reason_, other->ord_rej_reason_);
    std::swap(ord_rej_reason_sfixed64_, other->ord_rej_reason_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrdRejReasonUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdRejReasonUnion_descriptor_;
  metadata.reflection = OrdRejReasonUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecRestatementReasonUnion::kExecRestatementReasonFieldNumber;
const int ExecRestatementReasonUnion::kExecRestatementReasonSfixed64FieldNumber;
#endif  // !_MSC_VER

ExecRestatementReasonUnion::ExecRestatementReasonUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
}

void ExecRestatementReasonUnion::InitAsDefaultInstance() {
}

ExecRestatementReasonUnion::ExecRestatementReasonUnion(const ExecRestatementReasonUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
}

void ExecRestatementReasonUnion::SharedCtor() {
  _cached_size_ = 0;
  exec_restatement_reason_ = 0;
  exec_restatement_reason_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecRestatementReasonUnion::~ExecRestatementReasonUnion() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  SharedDtor();
}

void ExecRestatementReasonUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExecRestatementReasonUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecRestatementReasonUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecRestatementReasonUnion_descriptor_;
}

const ExecRestatementReasonUnion& ExecRestatementReasonUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

ExecRestatementReasonUnion* ExecRestatementReasonUnion::default_instance_ = NULL;

ExecRestatementReasonUnion* ExecRestatementReasonUnion::New() const {
  return new ExecRestatementReasonUnion;
}

void ExecRestatementReasonUnion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecRestatementReasonUnion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exec_restatement_reason_sfixed64_, exec_restatement_reason_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecRestatementReasonUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecRestatementReasonEnum_IsValid(value)) {
            set_exec_restatement_reason(static_cast< ::SingleGeneralOrderHandling::ExecRestatementReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_exec_restatement_reason_sfixed64;
        break;
      }

      // optional sfixed64 exec_restatement_reason_sfixed64 = 2;
      case 2: {
        if (tag == 17) {
         parse_exec_restatement_reason_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &exec_restatement_reason_sfixed64_)));
          set_has_exec_restatement_reason_sfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  return false;
#undef DO_
}

void ExecRestatementReasonUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 1;
  if (has_exec_restatement_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->exec_restatement_reason(), output);
  }

  // optional sfixed64 exec_restatement_reason_sfixed64 = 2;
  if (has_exec_restatement_reason_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->exec_restatement_reason_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
}

::google::protobuf::uint8* ExecRestatementReasonUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 1;
  if (has_exec_restatement_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->exec_restatement_reason(), target);
  }

  // optional sfixed64 exec_restatement_reason_sfixed64 = 2;
  if (has_exec_restatement_reason_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->exec_restatement_reason_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.ExecRestatementReasonUnion)
  return target;
}

int ExecRestatementReasonUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 1;
    if (has_exec_restatement_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exec_restatement_reason());
    }

    // optional sfixed64 exec_restatement_reason_sfixed64 = 2;
    if (has_exec_restatement_reason_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecRestatementReasonUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecRestatementReasonUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecRestatementReasonUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecRestatementReasonUnion::MergeFrom(const ExecRestatementReasonUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exec_restatement_reason()) {
      set_exec_restatement_reason(from.exec_restatement_reason());
    }
    if (from.has_exec_restatement_reason_sfixed64()) {
      set_exec_restatement_reason_sfixed64(from.exec_restatement_reason_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecRestatementReasonUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecRestatementReasonUnion::CopyFrom(const ExecRestatementReasonUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecRestatementReasonUnion::IsInitialized() const {

  return true;
}

void ExecRestatementReasonUnion::Swap(ExecRestatementReasonUnion* other) {
  if (other != this) {
    std::swap(exec_restatement_reason_, other->exec_restatement_reason_);
    std::swap(exec_restatement_reason_sfixed64_, other->exec_restatement_reason_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecRestatementReasonUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecRestatementReasonUnion_descriptor_;
  metadata.reflection = ExecRestatementReasonUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionReport::kAccountFieldNumber;
const int ExecutionReport::kAvgPxFieldNumber;
const int ExecutionReport::kClOrdIdFieldNumber;
const int ExecutionReport::kCumQtyFieldNumber;
const int ExecutionReport::kCumQtyExponentFieldNumber;
const int ExecutionReport::kCurrencyFieldNumber;
const int ExecutionReport::kExecIdFieldNumber;
const int ExecutionReport::kExecInstFieldNumber;
const int ExecutionReport::kExecRefIdFieldNumber;
const int ExecutionReport::kLastCapacityFieldNumber;
const int ExecutionReport::kLastMktFieldNumber;
const int ExecutionReport::kLastPxFieldNumber;
const int ExecutionReport::kLastQtyFieldNumber;
const int ExecutionReport::kLastQtyExponentFieldNumber;
const int ExecutionReport::kListIdFieldNumber;
const int ExecutionReport::kOrdRejReasonFieldNumber;
const int ExecutionReport::kOrdStatusFieldNumber;
const int ExecutionReport::kOrdTypeFieldNumber;
const int ExecutionReport::kOrderIdFieldNumber;
const int ExecutionReport::kPriceFieldNumber;
const int ExecutionReport::kPriceExponentFieldNumber;
const int ExecutionReport::kSettlDateFieldNumber;
const int ExecutionReport::kSettlTypeFieldNumber;
const int ExecutionReport::kSideFieldNumber;
const int ExecutionReport::kStandardHeaderFieldNumber;
const int ExecutionReport::kStandardTrailerFieldNumber;
const int ExecutionReport::kStopPxFieldNumber;
const int ExecutionReport::kStopPxExponentFieldNumber;
const int ExecutionReport::kTextFieldNumber;
const int ExecutionReport::kTimeInForceFieldNumber;
const int ExecutionReport::kTradeDateFieldNumber;
const int ExecutionReport::kTransactTimeFieldNumber;
const int ExecutionReport::kReportToExchFieldNumber;
const int ExecutionReport::kExpireTimeFieldNumber;
const int ExecutionReport::kNetMoneyFieldNumber;
const int ExecutionReport::kNetMoneyExponentFieldNumber;
const int ExecutionReport::kSettlCurrAmtFieldNumber;
const int ExecutionReport::kSettlCurrAmtExponentFieldNumber;
const int ExecutionReport::kSettlCurrencyFieldNumber;
const int ExecutionReport::kExecTypeFieldNumber;
const int ExecutionReport::kLastForwardPointsFieldNumber;
const int ExecutionReport::kLastForwardPointsExponentFieldNumber;
const int ExecutionReport::kLastSpotRateFieldNumber;
const int ExecutionReport::kLastSpotRateExponentFieldNumber;
const int ExecutionReport::kLeavesQtyFieldNumber;
const int ExecutionReport::kLeavesQtyExponentFieldNumber;
const int ExecutionReport::kOrigClOrdIdFieldNumber;
const int ExecutionReport::kSecondaryOrderIdFieldNumber;
const int ExecutionReport::kSettlCurrFxRateFieldNumber;
const int ExecutionReport::kSettlCurrFxRateCalcFieldNumber;
const int ExecutionReport::kComplianceIdFieldNumber;
const int ExecutionReport::kDayAvgPxFieldNumber;
const int ExecutionReport::kDayAvgPxExponentFieldNumber;
const int ExecutionReport::kDayCumQtyFieldNumber;
const int ExecutionReport::kDayCumQtyExponentFieldNumber;
const int ExecutionReport::kDayOrderQtyFieldNumber;
const int ExecutionReport::kDayOrderQtyExponentFieldNumber;
const int ExecutionReport::kEffectiveTimeFieldNumber;
const int ExecutionReport::kEncodedTextFieldNumber;
const int ExecutionReport::kEncodedTextLenFieldNumber;
const int ExecutionReport::kExecRestatementReasonFieldNumber;
const int ExecutionReport::kExpireDateFieldNumber;
const int ExecutionReport::kGtBookingInstFieldNumber;
const int ExecutionReport::kGrossTradeAmtFieldNumber;
const int ExecutionReport::kGrossTradeAmtExponentFieldNumber;
const int ExecutionReport::kHandlInstFieldNumber;
const int ExecutionReport::kMaxFloorFieldNumber;
const int ExecutionReport::kMaxFloorExponentFieldNumber;
const int ExecutionReport::kMaxShowFieldNumber;
const int ExecutionReport::kMaxShowExponentFieldNumber;
const int ExecutionReport::kMinQtyFieldNumber;
const int ExecutionReport::kMinQtyExponentFieldNumber;
const int ExecutionReport::kMultiLegReportingTypeFieldNumber;
const int ExecutionReport::kOrderQty2FieldNumber;
const int ExecutionReport::kOrderQty2ExponentFieldNumber;
const int ExecutionReport::kPositionEffectFieldNumber;
const int ExecutionReport::kSettlDate2FieldNumber;
const int ExecutionReport::kSolicitedFlagFieldNumber;
const int ExecutionReport::kTradingSessionIdFieldNumber;
const int ExecutionReport::kAccountTypeFieldNumber;
const int ExecutionReport::kAccruedInterestAmtFieldNumber;
const int ExecutionReport::kAccruedInterestAmtExponentFieldNumber;
const int ExecutionReport::kAccruedInterestRateFieldNumber;
const int ExecutionReport::kAccruedInterestRateExponentFieldNumber;
const int ExecutionReport::kBasisFeatureDateFieldNumber;
const int ExecutionReport::kBasisFeaturePriceFieldNumber;
const int ExecutionReport::kBasisFeaturePriceExponentFieldNumber;
const int ExecutionReport::kBookingUnitFieldNumber;
const int ExecutionReport::kCancellationRightsFieldNumber;
const int ExecutionReport::kCashMarginFieldNumber;
const int ExecutionReport::kClOrdLinkIdFieldNumber;
const int ExecutionReport::kClearingFeeIndicatorFieldNumber;
const int ExecutionReport::kCommissionDataFieldNumber;
const int ExecutionReport::kConcessionFieldNumber;
const int ExecutionReport::kConcessionExponentFieldNumber;
const int ExecutionReport::kCrossIdFieldNumber;
const int ExecutionReport::kCrossTypeFieldNumber;
const int ExecutionReport::kCustOrderCapacityFieldNumber;
const int ExecutionReport::kDayBookingInstFieldNumber;
const int ExecutionReport::kDesignationFieldNumber;
const int ExecutionReport::kExDateFieldNumber;
const int ExecutionReport::kExecPriceAdjustmentFieldNumber;
const int ExecutionReport::kExecPriceTypeFieldNumber;
const int ExecutionReport::kExecValuationPointFieldNumber;
const int ExecutionReport::kInstrumentFieldNumber;
const int ExecutionReport::kLastForwardPoints2FieldNumber;
const int ExecutionReport::kLastForwardPoints2ExponentFieldNumber;
const int ExecutionReport::kMoneyLaunderingStatusFieldNumber;
const int ExecutionReport::kNumDaysInterestFieldNumber;
const int ExecutionReport::kOrderCapacityFieldNumber;
const int ExecutionReport::kOrderQtyDataFieldNumber;
const int ExecutionReport::kOrderRestrictionsFieldNumber;
const int ExecutionReport::kOrigCrossIdFieldNumber;
const int ExecutionReport::kPartiesFieldNumber;
const int ExecutionReport::kPreallocMethodFieldNumber;
const int ExecutionReport::kPriceImprovementFieldNumber;
const int ExecutionReport::kPriceImprovementExponentFieldNumber;
const int ExecutionReport::kPriceTypeFieldNumber;
const int ExecutionReport::kPriorityIndicatorFieldNumber;
const int ExecutionReport::kRegistIdFieldNumber;
const int ExecutionReport::kSecondaryClOrdIdFieldNumber;
const int ExecutionReport::kSecondaryExecIdFieldNumber;
const int ExecutionReport::kSpreadOrBenchmarkCurveDataFieldNumber;
const int ExecutionReport::kStipulationsFieldNumber;
const int ExecutionReport::kTotalTakedownFieldNumber;
const int ExecutionReport::kTotalTakedownExponentFieldNumber;
const int ExecutionReport::kTradeOriginationDateFieldNumber;
const int ExecutionReport::kTradedFlatSwitchFieldNumber;
const int ExecutionReport::kTradingSessionSubIdFieldNumber;
const int ExecutionReport::kTransBkdTimeFieldNumber;
const int ExecutionReport::kUnderlyingLastPxFieldNumber;
const int ExecutionReport::kUnderlyingLastPxExponentFieldNumber;
const int ExecutionReport::kUnderlyingLastQtyFieldNumber;
const int ExecutionReport::kUnderlyingLastQtyExponentFieldNumber;
const int ExecutionReport::kWorkingIndicatorFieldNumber;
const int ExecutionReport::kYieldDataFieldNumber;
const int ExecutionReport::kAcctIdSourceFieldNumber;
const int ExecutionReport::kAggressorIndicatorFieldNumber;
const int ExecutionReport::kBookingTypeFieldNumber;
const int ExecutionReport::kCalculatedCcyLastQtyFieldNumber;
const int ExecutionReport::kCalculatedCcyLastQtyExponentFieldNumber;
const int ExecutionReport::kContAmtGrpFieldNumber;
const int ExecutionReport::kContraGrpFieldNumber;
const int ExecutionReport::kCopyMsgIndicatorFieldNumber;
const int ExecutionReport::kCustDirectedOrderFieldNumber;
const int ExecutionReport::kCustOrderHandlingInstFieldNumber;
const int ExecutionReport::kDiscretionInstructionsFieldNumber;
const int ExecutionReport::kDiscretionPriceFieldNumber;
const int ExecutionReport::kDiscretionPriceExponentFieldNumber;
const int ExecutionReport::kDisplayInstructionFieldNumber;
const int ExecutionReport::kEndAccruedInterestAmtFieldNumber;
const int ExecutionReport::kEndAccruedInterestAmtExponentFieldNumber;
const int ExecutionReport::kEndCashFieldNumber;
const int ExecutionReport::kEndCashExponentFieldNumber;
const int ExecutionReport::kFinancingDetailsFieldNumber;
const int ExecutionReport::kHostCrossIdFieldNumber;
const int ExecutionReport::kInstrmtLegExecGrpFieldNumber;
const int ExecutionReport::kInterestAtMaturityFieldNumber;
const int ExecutionReport::kInterestAtMaturityExponentFieldNumber;
const int ExecutionReport::kLastLiquidityIndFieldNumber;
const int ExecutionReport::kLastParPxFieldNumber;
const int ExecutionReport::kLastParPxExponentFieldNumber;
const int ExecutionReport::kLastRptRequestedFieldNumber;
const int ExecutionReport::kLastSwapPointsFieldNumber;
const int ExecutionReport::kLastSwapPointsExponentFieldNumber;
const int ExecutionReport::kLotTypeFieldNumber;
const int ExecutionReport::kManualOrderIndicatorFieldNumber;
const int ExecutionReport::kMassStatusReqIdFieldNumber;
const int ExecutionReport::kMatchIncrementFieldNumber;
const int ExecutionReport::kMatchIncrementExponentFieldNumber;
const int ExecutionReport::kMatchTypeFieldNumber;
const int ExecutionReport::kMaxPriceLevelsFieldNumber;
const int ExecutionReport::kMiscFeesGrpFieldNumber;
const int ExecutionReport::kOrdStatusReqIdFieldNumber;
const int ExecutionReport::kOrderCategoryFieldNumber;
const int ExecutionReport::kOrderHandlingInstSourceFieldNumber;
const int ExecutionReport::kParticipationRateFieldNumber;
const int ExecutionReport::kParticipationRateExponentFieldNumber;
const int ExecutionReport::kPegInstructionsFieldNumber;
const int ExecutionReport::kPeggedPriceFieldNumber;
const int ExecutionReport::kPeggedPriceExponentFieldNumber;
const int ExecutionReport::kPeggedRefPriceFieldNumber;
const int ExecutionReport::kPeggedRefPriceExponentFieldNumber;
const int ExecutionReport::kPreTradeAnonymityFieldNumber;
const int ExecutionReport::kPriceProtectionScopeFieldNumber;
const int ExecutionReport::kQtyTypeFieldNumber;
const int ExecutionReport::kQuoteRespIdFieldNumber;
const int ExecutionReport::kReceivedDeptIdFieldNumber;
const int ExecutionReport::kStartCashFieldNumber;
const int ExecutionReport::kStartCashExponentFieldNumber;
const int ExecutionReport::kStrategyParametersGrpFieldNumber;
const int ExecutionReport::kTargetStrategyFieldNumber;
const int ExecutionReport::kTargetStrategyParametersFieldNumber;
const int ExecutionReport::kTargetStrategyPerformanceFieldNumber;
const int ExecutionReport::kTimeBracketFieldNumber;
const int ExecutionReport::kTotNumReportsFieldNumber;
const int ExecutionReport::kTrdRegTimestampsFieldNumber;
const int ExecutionReport::kTriggeringInstructionFieldNumber;
const int ExecutionReport::kUndInstrmtGrpFieldNumber;
const int ExecutionReport::kAllocIdFieldNumber;
const int ExecutionReport::kApplicationSequenceControlFieldNumber;
const int ExecutionReport::kDividendYieldFieldNumber;
const int ExecutionReport::kDividendYieldExponentFieldNumber;
const int ExecutionReport::kFillsGrpFieldNumber;
const int ExecutionReport::kLastFragmentFieldNumber;
const int ExecutionReport::kPreAllocGrpFieldNumber;
const int ExecutionReport::kPriceDeltaFieldNumber;
const int ExecutionReport::kRiskFreeRateFieldNumber;
const int ExecutionReport::kTimeToExpirationFieldNumber;
const int ExecutionReport::kTotNoFillsFieldNumber;
const int ExecutionReport::kTrdMatchIdFieldNumber;
const int ExecutionReport::kVolatilityFieldNumber;
const int ExecutionReport::kRateSourceFieldNumber;
#endif  // !_MSC_VER

ExecutionReport::ExecutionReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.ExecutionReport)
}

void ExecutionReport::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  commission_data_ = const_cast< ::Common::CommissionData*>(&::Common::CommissionData::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  discretion_instructions_ = const_cast< ::Common::DiscretionInstructions*>(&::Common::DiscretionInstructions::default_instance());
  display_instruction_ = const_cast< ::Common::DisplayInstruction*>(&::Common::DisplayInstruction::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  peg_instructions_ = const_cast< ::Common::PegInstructions*>(&::Common::PegInstructions::default_instance());
  triggering_instruction_ = const_cast< ::Common::TriggeringInstruction*>(&::Common::TriggeringInstruction::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
}

ExecutionReport::ExecutionReport(const ExecutionReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.ExecutionReport)
}

void ExecutionReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avg_px_ = GOOGLE_LONGLONG(0);
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cum_qty_ = GOOGLE_LONGLONG(0);
  cum_qty_exponent_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_capacity_ = 0;
  last_mkt_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_px_ = 0;
  last_qty_ = GOOGLE_LONGLONG(0);
  last_qty_exponent_ = 0;
  list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ord_rej_reason_ = 0;
  ord_status_ = 0;
  ord_type_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = GOOGLE_LONGLONG(0);
  price_exponent_ = 0;
  settl_date_ = 0;
  settl_type_ = 0;
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  stop_px_ = GOOGLE_LONGLONG(0);
  stop_px_exponent_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_in_force_ = 0;
  trade_date_ = 0;
  transact_time_ = GOOGLE_LONGLONG(0);
  report_to_exch_ = false;
  expire_time_ = GOOGLE_LONGLONG(0);
  net_money_ = GOOGLE_LONGLONG(0);
  net_money_exponent_ = 0;
  settl_curr_amt_ = GOOGLE_LONGLONG(0);
  settl_curr_amt_exponent_ = 0;
  settl_currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exec_type_ = 0;
  last_forward_points_ = GOOGLE_LONGLONG(0);
  last_forward_points_exponent_ = 0;
  last_spot_rate_ = GOOGLE_LONGLONG(0);
  last_spot_rate_exponent_ = 0;
  leaves_qty_ = GOOGLE_LONGLONG(0);
  leaves_qty_exponent_ = 0;
  orig_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  settl_curr_fx_rate_ = 0;
  settl_curr_fx_rate_calc_ = 0;
  compliance_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  day_avg_px_ = GOOGLE_LONGLONG(0);
  day_avg_px_exponent_ = 0;
  day_cum_qty_ = GOOGLE_LONGLONG(0);
  day_cum_qty_exponent_ = 0;
  day_order_qty_ = GOOGLE_LONGLONG(0);
  day_order_qty_exponent_ = 0;
  effective_time_ = GOOGLE_LONGLONG(0);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  exec_restatement_reason_ = 0;
  expire_date_ = 0;
  gt_booking_inst_ = 0;
  gross_trade_amt_ = GOOGLE_LONGLONG(0);
  gross_trade_amt_exponent_ = 0;
  handl_inst_ = 0;
  max_floor_ = GOOGLE_LONGLONG(0);
  max_floor_exponent_ = 0;
  max_show_ = GOOGLE_LONGLONG(0);
  max_show_exponent_ = 0;
  min_qty_ = GOOGLE_LONGLONG(0);
  min_qty_exponent_ = 0;
  multi_leg_reporting_type_ = 0;
  order_qty2_ = GOOGLE_LONGLONG(0);
  order_qty2_exponent_ = 0;
  position_effect_ = 0;
  settl_date2_ = 0;
  solicited_flag_ = false;
  trading_session_id_ = 0;
  account_type_ = 0;
  accrued_interest_amt_ = GOOGLE_LONGLONG(0);
  accrued_interest_amt_exponent_ = 0;
  accrued_interest_rate_ = GOOGLE_LONGLONG(0);
  accrued_interest_rate_exponent_ = 0;
  basis_feature_date_ = 0;
  basis_feature_price_ = GOOGLE_LONGLONG(0);
  basis_feature_price_exponent_ = 0;
  booking_unit_ = 0;
  cancellation_rights_ = 0;
  cash_margin_ = 0;
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clearing_fee_indicator_ = 0;
  commission_data_ = NULL;
  concession_ = GOOGLE_LONGLONG(0);
  concession_exponent_ = 0;
  cross_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cross_type_ = 0;
  cust_order_capacity_ = 0;
  day_booking_inst_ = 0;
  designation_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ex_date_ = 0;
  exec_price_adjustment_ = 0;
  exec_price_type_ = 0;
  exec_valuation_point_ = GOOGLE_LONGLONG(0);
  instrument_ = NULL;
  last_forward_points2_ = GOOGLE_LONGLONG(0);
  last_forward_points2_exponent_ = 0;
  money_laundering_status_ = 0;
  num_days_interest_ = GOOGLE_LONGLONG(0);
  order_capacity_ = 0;
  order_qty_data_ = NULL;
  orig_cross_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prealloc_method_ = 0;
  price_improvement_ = GOOGLE_LONGLONG(0);
  price_improvement_exponent_ = 0;
  price_type_ = 0;
  priority_indicator_ = 0;
  regist_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secondary_exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  spread_or_benchmark_curve_data_ = NULL;
  total_takedown_ = GOOGLE_LONGLONG(0);
  total_takedown_exponent_ = 0;
  trade_origination_date_ = 0;
  traded_flat_switch_ = false;
  trading_session_sub_id_ = 0;
  trans_bkd_time_ = GOOGLE_LONGLONG(0);
  underlying_last_px_ = GOOGLE_LONGLONG(0);
  underlying_last_px_exponent_ = 0;
  underlying_last_qty_ = GOOGLE_LONGLONG(0);
  underlying_last_qty_exponent_ = 0;
  working_indicator_ = false;
  yield_data_ = NULL;
  acct_id_source_ = 0;
  aggressor_indicator_ = false;
  booking_type_ = 0;
  calculated_ccy_last_qty_ = GOOGLE_LONGLONG(0);
  calculated_ccy_last_qty_exponent_ = 0;
  copy_msg_indicator_ = false;
  cust_directed_order_ = false;
  cust_order_handling_inst_ = 0;
  discretion_instructions_ = NULL;
  discretion_price_ = GOOGLE_LONGLONG(0);
  discretion_price_exponent_ = 0;
  display_instruction_ = NULL;
  end_accrued_interest_amt_ = GOOGLE_LONGLONG(0);
  end_accrued_interest_amt_exponent_ = 0;
  end_cash_ = GOOGLE_LONGLONG(0);
  end_cash_exponent_ = 0;
  financing_details_ = NULL;
  host_cross_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interest_at_maturity_ = GOOGLE_LONGLONG(0);
  interest_at_maturity_exponent_ = 0;
  last_liquidity_ind_ = 0;
  last_par_px_ = GOOGLE_LONGLONG(0);
  last_par_px_exponent_ = 0;
  last_rpt_requested_ = false;
  last_swap_points_ = GOOGLE_LONGLONG(0);
  last_swap_points_exponent_ = 0;
  lot_type_ = 0;
  manual_order_indicator_ = false;
  mass_status_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  match_increment_ = GOOGLE_LONGLONG(0);
  match_increment_exponent_ = 0;
  match_type_ = 0;
  max_price_levels_ = GOOGLE_LONGLONG(0);
  ord_status_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_category_ = 0;
  order_handling_inst_source_ = 0;
  participation_rate_ = GOOGLE_LONGLONG(0);
  participation_rate_exponent_ = 0;
  peg_instructions_ = NULL;
  pegged_price_ = GOOGLE_LONGLONG(0);
  pegged_price_exponent_ = 0;
  pegged_ref_price_ = GOOGLE_LONGLONG(0);
  pegged_ref_price_exponent_ = 0;
  pre_trade_anonymity_ = false;
  price_protection_scope_ = 0;
  qty_type_ = 0;
  quote_resp_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  received_dept_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_cash_ = GOOGLE_LONGLONG(0);
  start_cash_exponent_ = 0;
  target_strategy_ = 0;
  target_strategy_parameters_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_strategy_performance_ = 0;
  time_bracket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tot_num_reports_ = GOOGLE_LONGLONG(0);
  triggering_instruction_ = NULL;
  alloc_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  application_sequence_control_ = NULL;
  dividend_yield_ = GOOGLE_LONGLONG(0);
  dividend_yield_exponent_ = 0;
  last_fragment_ = false;
  price_delta_ = 0;
  risk_free_rate_ = 0;
  time_to_expiration_ = 0;
  tot_no_fills_ = GOOGLE_LONGLONG(0);
  trd_match_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volatility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionReport::~ExecutionReport() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.ExecutionReport)
  SharedDtor();
}

void ExecutionReport::SharedDtor() {
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_;
  }
  if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exec_id_;
  }
  if (exec_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exec_ref_id_;
  }
  if (last_mkt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete last_mkt_;
  }
  if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete list_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete settl_currency_;
  }
  if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orig_cl_ord_id_;
  }
  if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_order_id_;
  }
  if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete compliance_id_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cross_id_;
  }
  if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete designation_;
  }
  if (orig_cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete orig_cross_id_;
  }
  if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete regist_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (secondary_exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_exec_id_;
  }
  if (host_cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_cross_id_;
  }
  if (mass_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mass_status_req_id_;
  }
  if (ord_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ord_status_req_id_;
  }
  if (quote_resp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quote_resp_id_;
  }
  if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete received_dept_id_;
  }
  if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_strategy_parameters_;
  }
  if (time_bracket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_bracket_;
  }
  if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alloc_id_;
  }
  if (trd_match_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trd_match_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete commission_data_;
    delete instrument_;
    delete order_qty_data_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
    delete discretion_instructions_;
    delete display_instruction_;
    delete financing_details_;
    delete peg_instructions_;
    delete triggering_instruction_;
    delete application_sequence_control_;
  }
}

void ExecutionReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionReport_descriptor_;
}

const ExecutionReport& ExecutionReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

ExecutionReport* ExecutionReport::default_instance_ = NULL;

ExecutionReport* ExecutionReport::New() const {
  return new ExecutionReport;
}

void ExecutionReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecutionReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    avg_px_ = GOOGLE_LONGLONG(0);
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    cum_qty_ = GOOGLE_LONGLONG(0);
    cum_qty_exponent_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_->clear();
      }
    }
    if (has_exec_id()) {
      if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exec_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(last_px_, last_qty_);
    ZR_(last_qty_exponent_, ord_rej_reason_);
    if (has_exec_ref_id()) {
      if (exec_ref_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exec_ref_id_->clear();
      }
    }
    last_capacity_ = 0;
    if (has_last_mkt()) {
      if (last_mkt_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        last_mkt_->clear();
      }
    }
    if (has_list_id()) {
      if (list_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        list_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(ord_status_, ord_type_);
    ZR_(price_, side_);
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(stop_px_exponent_, trade_date_);
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    stop_px_ = GOOGLE_LONGLONG(0);
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(net_money_exponent_, settl_curr_amt_);
    ZR_(settl_curr_amt_exponent_, exec_type_);
    report_to_exch_ = false;
    if (has_settl_currency()) {
      if (settl_currency_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        settl_currency_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(last_forward_points_, leaves_qty_);
    leaves_qty_exponent_ = 0;
    if (has_orig_cl_ord_id()) {
      if (orig_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orig_cl_ord_id_->clear();
      }
    }
    if (has_secondary_order_id()) {
      if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_order_id_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(settl_curr_fx_rate_calc_, settl_curr_fx_rate_);
    ZR_(day_avg_px_, day_order_qty_);
    if (has_compliance_id()) {
      if (compliance_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        compliance_id_->clear();
      }
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    ZR_(effective_time_, encoded_text_len_);
    ZR_(exec_restatement_reason_, gt_booking_inst_);
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(gross_trade_amt_exponent_, min_qty_exponent_);
  }
  if (_has_bits_[72 / 32] & 65280) {
    ZR_(order_qty2_, account_type_);
    solicited_flag_ = false;
  }
  if (_has_bits_[80 / 32] & 16711680) {
    ZR_(accrued_interest_amt_, booking_unit_);
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    ZR_(cash_margin_, clearing_fee_indicator_);
    ZR_(concession_exponent_, concession_);
    cancellation_rights_ = 0;
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    if (has_commission_data()) {
      if (commission_data_ != NULL) commission_data_->::Common::CommissionData::Clear();
    }
    if (has_cross_id()) {
      if (cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cross_id_->clear();
      }
    }
  }
  if (_has_bits_[96 / 32] & 255) {
    ZR_(cross_type_, cust_order_capacity_);
    ZR_(day_booking_inst_, exec_valuation_point_);
    if (has_designation()) {
      if (designation_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        designation_->clear();
      }
    }
    exec_price_type_ = 0;
  }
  if (_has_bits_[104 / 32] & 32512) {
    ZR_(last_forward_points2_exponent_, order_capacity_);
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
  }
  if (_has_bits_[112 / 32] & 16580608) {
    ZR_(price_improvement_, priority_indicator_);
    if (has_orig_cross_id()) {
      if (orig_cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        orig_cross_id_->clear();
      }
    }
    if (has_regist_id()) {
      if (regist_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        regist_id_->clear();
      }
    }
  }
  if (_has_bits_[120 / 32] & 4143972352) {
    ZR_(total_takedown_, trade_origination_date_);
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    if (has_secondary_exec_id()) {
      if (secondary_exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_exec_id_->clear();
      }
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    traded_flat_switch_ = false;
  }
  if (_has_bits_[128 / 32] & 255) {
    ZR_(trans_bkd_time_, underlying_last_qty_exponent_);
    working_indicator_ = false;
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
  }
  if (_has_bits_[136 / 32] & 40704) {
    ZR_(calculated_ccy_last_qty_, calculated_ccy_last_qty_exponent_);
    ZR_(aggressor_indicator_, copy_msg_indicator_);
    acct_id_source_ = 0;
  }
  if (_has_bits_[144 / 32] & 16711680) {
    ZR_(discretion_price_exponent_, end_accrued_interest_amt_);
    cust_directed_order_ = false;
    cust_order_handling_inst_ = 0;
    if (has_discretion_instructions()) {
      if (discretion_instructions_ != NULL) discretion_instructions_->::Common::DiscretionInstructions::Clear();
    }
    discretion_price_ = GOOGLE_LONGLONG(0);
    if (has_display_instruction()) {
      if (display_instruction_ != NULL) display_instruction_->::Common::DisplayInstruction::Clear();
    }
  }
  if (_has_bits_[152 / 32] & 4009754624) {
    ZR_(end_cash_exponent_, interest_at_maturity_exponent_);
    end_cash_ = GOOGLE_LONGLONG(0);
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    if (has_host_cross_id()) {
      if (host_cross_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_cross_id_->clear();
      }
    }
    interest_at_maturity_ = GOOGLE_LONGLONG(0);
    last_liquidity_ind_ = 0;
  }
  if (_has_bits_[160 / 32] & 255) {
    ZR_(last_par_px_exponent_, lot_type_);
    last_par_px_ = GOOGLE_LONGLONG(0);
    last_rpt_requested_ = false;
    manual_order_indicator_ = false;
    if (has_mass_status_req_id()) {
      if (mass_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mass_status_req_id_->clear();
      }
    }
  }
  if (_has_bits_[168 / 32] & 61184) {
    ZR_(match_increment_, max_price_levels_);
    ZR_(order_category_, order_handling_inst_source_);
    if (has_ord_status_req_id()) {
      if (ord_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ord_status_req_id_->clear();
      }
    }
  }
  if (_has_bits_[176 / 32] & 16711680) {
    ZR_(participation_rate_exponent_, pegged_ref_price_exponent_);
    participation_rate_ = GOOGLE_LONGLONG(0);
    if (has_peg_instructions()) {
      if (peg_instructions_ != NULL) peg_instructions_->::Common::PegInstructions::Clear();
    }
    pre_trade_anonymity_ = false;
  }
  if (_has_bits_[184 / 32] & 3204448256) {
    ZR_(start_cash_exponent_, target_strategy_);
    price_protection_scope_ = 0;
    qty_type_ = 0;
    if (has_quote_resp_id()) {
      if (quote_resp_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quote_resp_id_->clear();
      }
    }
    if (has_received_dept_id()) {
      if (received_dept_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        received_dept_id_->clear();
      }
    }
    start_cash_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[192 / 32] & 175) {
    if (has_target_strategy_parameters()) {
      if (target_strategy_parameters_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_strategy_parameters_->clear();
      }
    }
    target_strategy_performance_ = 0;
    if (has_time_bracket()) {
      if (time_bracket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_bracket_->clear();
      }
    }
    tot_num_reports_ = GOOGLE_LONGLONG(0);
    if (has_triggering_instruction()) {
      if (triggering_instruction_ != NULL) triggering_instruction_->::Common::TriggeringInstruction::Clear();
    }
    if (has_alloc_id()) {
      if (alloc_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alloc_id_->clear();
      }
    }
  }
  if (_has_bits_[200 / 32] & 55040) {
    ZR_(price_delta_, risk_free_rate_);
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
    dividend_yield_ = GOOGLE_LONGLONG(0);
    dividend_yield_exponent_ = 0;
    last_fragment_ = false;
  }
  if (_has_bits_[208 / 32] & 983040) {
    ZR_(time_to_expiration_, tot_no_fills_);
    if (has_trd_match_id()) {
      if (trd_match_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        trd_match_id_->clear();
      }
    }
    volatility_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  exec_inst_.Clear();
  order_restrictions_.Clear();
  parties_.Clear();
  stipulations_.Clear();
  cont_amt_grp_.Clear();
  contra_grp_.Clear();
  instrmt_leg_exec_grp_.Clear();
  misc_fees_grp_.Clear();
  strategy_parameters_grp_.Clear();
  trd_reg_timestamps_.Clear();
  und_instrmt_grp_.Clear();
  fills_grp_.Clear();
  pre_alloc_grp_.Clear();
  rate_source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.ExecutionReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_avg_px;
        break;
      }

      // optional sfixed64 avg_px = 2;
      case 2: {
        if (tag == 17) {
         parse_avg_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &avg_px_)));
          set_has_avg_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cl_ord_id;
        break;
      }

      // optional string cl_ord_id = 3;
      case 3: {
        if (tag == 26) {
         parse_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cum_qty;
        break;
      }

      // optional sfixed64 cum_qty = 4;
      case 4: {
        if (tag == 33) {
         parse_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cum_qty_)));
          set_has_cum_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cum_qty_exponent;
        break;
      }

      // optional sfixed32 cum_qty_exponent = 5;
      case 5: {
        if (tag == 45) {
         parse_cum_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cum_qty_exponent_)));
          set_has_cum_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_currency;
        break;
      }

      // optional string currency = 6;
      case 6: {
        if (tag == 50) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_exec_id;
        break;
      }

      // optional string exec_id = 7;
      case 7: {
        if (tag == 58) {
         parse_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec_id().data(), this->exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_exec_inst;
        break;
      }

      // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_exec_inst:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
              add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 64) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecInstEnum_IsValid(value)) {
            add_exec_inst(static_cast< ::SingleGeneralOrderHandling::ExecInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exec_ref_id;
        break;
      }

      // optional string exec_ref_id = 9;
      case 9: {
        if (tag == 74) {
         parse_exec_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec_ref_id().data(), this->exec_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec_ref_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_last_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.LastCapacityEnum last_capacity = 10;
      case 10: {
        if (tag == 80) {
         parse_last_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::LastCapacityEnum_IsValid(value)) {
            set_last_capacity(static_cast< ::SingleGeneralOrderHandling::LastCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_last_mkt;
        break;
      }

      // optional string last_mkt = 11;
      case 11: {
        if (tag == 90) {
         parse_last_mkt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_mkt()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->last_mkt().data(), this->last_mkt().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "last_mkt");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_last_px;
        break;
      }

      // optional double last_px = 12;
      case 12: {
        if (tag == 97) {
         parse_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_px_)));
          set_has_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_last_qty;
        break;
      }

      // optional sfixed64 last_qty = 13;
      case 13: {
        if (tag == 105) {
         parse_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_qty_)));
          set_has_last_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_last_qty_exponent;
        break;
      }

      // optional sfixed32 last_qty_exponent = 14;
      case 14: {
        if (tag == 117) {
         parse_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_qty_exponent_)));
          set_has_last_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_list_id;
        break;
      }

      // optional string list_id = 15;
      case 15: {
        if (tag == 122) {
         parse_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->list_id().data(), this->list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "list_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ord_rej_reason;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 16;
      case 16: {
        if (tag == 128) {
         parse_ord_rej_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdRejReasonEnum_IsValid(value)) {
            set_ord_rej_reason(static_cast< ::SingleGeneralOrderHandling::OrdRejReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ord_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 17;
      case 17: {
        if (tag == 136) {
         parse_ord_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdStatusEnum_IsValid(value)) {
            set_ord_status(static_cast< ::SingleGeneralOrderHandling::OrdStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ord_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 18;
      case 18: {
        if (tag == 144) {
         parse_ord_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrdTypeEnum_IsValid(value)) {
            set_ord_type(static_cast< ::SingleGeneralOrderHandling::OrdTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(18, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_order_id;
        break;
      }

      // optional string order_id = 19;
      case 19: {
        if (tag == 154) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_price;
        break;
      }

      // optional sfixed64 price = 20;
      case 20: {
        if (tag == 161) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_price_exponent;
        break;
      }

      // optional sfixed32 price_exponent = 21;
      case 21: {
        if (tag == 173) {
         parse_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_exponent_)));
          set_has_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_settl_date;
        break;
      }

      // optional sfixed32 settl_date = 22;
      case 22: {
        if (tag == 181) {
         parse_settl_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date_)));
          set_has_settl_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_settl_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 23;
      case 23: {
        if (tag == 184) {
         parse_settl_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SettlTypeEnum_IsValid(value)) {
            set_settl_type(static_cast< ::SingleGeneralOrderHandling::SettlTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 24;
      case 24: {
        if (tag == 192) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 25;
      case 25: {
        if (tag == 202) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 26;
      case 26: {
        if (tag == 210) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(217)) goto parse_stop_px;
        break;
      }

      // optional sfixed64 stop_px = 27;
      case 27: {
        if (tag == 217) {
         parse_stop_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &stop_px_)));
          set_has_stop_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_stop_px_exponent;
        break;
      }

      // optional sfixed32 stop_px_exponent = 28;
      case 28: {
        if (tag == 229) {
         parse_stop_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &stop_px_exponent_)));
          set_has_stop_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_text;
        break;
      }

      // optional string text = 29;
      case 29: {
        if (tag == 234) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_time_in_force;
        break;
      }

      // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 30;
      case 30: {
        if (tag == 240) {
         parse_time_in_force:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TimeInForceEnum_IsValid(value)) {
            set_time_in_force(static_cast< ::SingleGeneralOrderHandling::TimeInForceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_trade_date;
        break;
      }

      // optional sfixed32 trade_date = 31;
      case 31: {
        if (tag == 253) {
         parse_trade_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_date_)));
          set_has_trade_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(257)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 32;
      case 32: {
        if (tag == 257) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_report_to_exch;
        break;
      }

      // optional bool report_to_exch = 33;
      case 33: {
        if (tag == 264) {
         parse_report_to_exch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &report_to_exch_)));
          set_has_report_to_exch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(273)) goto parse_expire_time;
        break;
      }

      // optional sfixed64 expire_time = 34;
      case 34: {
        if (tag == 273) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(281)) goto parse_net_money;
        break;
      }

      // optional sfixed64 net_money = 35;
      case 35: {
        if (tag == 281) {
         parse_net_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &net_money_)));
          set_has_net_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_net_money_exponent;
        break;
      }

      // optional sfixed32 net_money_exponent = 36;
      case 36: {
        if (tag == 293) {
         parse_net_money_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &net_money_exponent_)));
          set_has_net_money_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(297)) goto parse_settl_curr_amt;
        break;
      }

      // optional sfixed64 settl_curr_amt = 37;
      case 37: {
        if (tag == 297) {
         parse_settl_curr_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &settl_curr_amt_)));
          set_has_settl_curr_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(309)) goto parse_settl_curr_amt_exponent;
        break;
      }

      // optional sfixed32 settl_curr_amt_exponent = 38;
      case 38: {
        if (tag == 309) {
         parse_settl_curr_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_curr_amt_exponent_)));
          set_has_settl_curr_amt_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_settl_currency;
        break;
      }

      // optional string settl_currency = 39;
      case 39: {
        if (tag == 314) {
         parse_settl_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settl_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->settl_currency().data(), this->settl_currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "settl_currency");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_exec_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExecTypeEnum exec_type = 40;
      case 40: {
        if (tag == 320) {
         parse_exec_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecTypeEnum_IsValid(value)) {
            set_exec_type(static_cast< ::SingleGeneralOrderHandling::ExecTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_last_forward_points;
        break;
      }

      // optional sfixed64 last_forward_points = 41;
      case 41: {
        if (tag == 329) {
         parse_last_forward_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_forward_points_)));
          set_has_last_forward_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(341)) goto parse_last_forward_points_exponent;
        break;
      }

      // optional sfixed32 last_forward_points_exponent = 42;
      case 42: {
        if (tag == 341) {
         parse_last_forward_points_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_forward_points_exponent_)));
          set_has_last_forward_points_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_last_spot_rate;
        break;
      }

      // optional sfixed64 last_spot_rate = 43;
      case 43: {
        if (tag == 345) {
         parse_last_spot_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_spot_rate_)));
          set_has_last_spot_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(357)) goto parse_last_spot_rate_exponent;
        break;
      }

      // optional sfixed32 last_spot_rate_exponent = 44;
      case 44: {
        if (tag == 357) {
         parse_last_spot_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_spot_rate_exponent_)));
          set_has_last_spot_rate_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(361)) goto parse_leaves_qty;
        break;
      }

      // optional sfixed64 leaves_qty = 45;
      case 45: {
        if (tag == 361) {
         parse_leaves_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &leaves_qty_)));
          set_has_leaves_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(373)) goto parse_leaves_qty_exponent;
        break;
      }

      // optional sfixed32 leaves_qty_exponent = 46;
      case 46: {
        if (tag == 373) {
         parse_leaves_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &leaves_qty_exponent_)));
          set_has_leaves_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_orig_cl_ord_id;
        break;
      }

      // optional string orig_cl_ord_id = 47;
      case 47: {
        if (tag == 378) {
         parse_orig_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orig_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_secondary_order_id;
        break;
      }

      // optional string secondary_order_id = 48;
      case 48: {
        if (tag == 386) {
         parse_secondary_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_order_id().data(), this->secondary_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(393)) goto parse_settl_curr_fx_rate;
        break;
      }

      // optional double settl_curr_fx_rate = 49;
      case 49: {
        if (tag == 393) {
         parse_settl_curr_fx_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &settl_curr_fx_rate_)));
          set_has_settl_curr_fx_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_settl_curr_fx_rate_calc;
        break;
      }

      // optional .SingleGeneralOrderHandling.SettlCurrFxRateCalcEnum settl_curr_fx_rate_calc = 50;
      case 50: {
        if (tag == 400) {
         parse_settl_curr_fx_rate_calc:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SettlCurrFxRateCalcEnum_IsValid(value)) {
            set_settl_curr_fx_rate_calc(static_cast< ::SingleGeneralOrderHandling::SettlCurrFxRateCalcEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_compliance_id;
        break;
      }

      // optional string compliance_id = 51;
      case 51: {
        if (tag == 410) {
         parse_compliance_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_compliance_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->compliance_id().data(), this->compliance_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "compliance_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(417)) goto parse_day_avg_px;
        break;
      }

      // optional sfixed64 day_avg_px = 52;
      case 52: {
        if (tag == 417) {
         parse_day_avg_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &day_avg_px_)));
          set_has_day_avg_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(429)) goto parse_day_avg_px_exponent;
        break;
      }

      // optional sfixed32 day_avg_px_exponent = 53;
      case 53: {
        if (tag == 429) {
         parse_day_avg_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &day_avg_px_exponent_)));
          set_has_day_avg_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(433)) goto parse_day_cum_qty;
        break;
      }

      // optional sfixed64 day_cum_qty = 54;
      case 54: {
        if (tag == 433) {
         parse_day_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &day_cum_qty_)));
          set_has_day_cum_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(445)) goto parse_day_cum_qty_exponent;
        break;
      }

      // optional sfixed32 day_cum_qty_exponent = 55;
      case 55: {
        if (tag == 445) {
         parse_day_cum_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &day_cum_qty_exponent_)));
          set_has_day_cum_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(449)) goto parse_day_order_qty;
        break;
      }

      // optional sfixed64 day_order_qty = 56;
      case 56: {
        if (tag == 449) {
         parse_day_order_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &day_order_qty_)));
          set_has_day_order_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(461)) goto parse_day_order_qty_exponent;
        break;
      }

      // optional sfixed32 day_order_qty_exponent = 57;
      case 57: {
        if (tag == 461) {
         parse_day_order_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &day_order_qty_exponent_)));
          set_has_day_order_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(465)) goto parse_effective_time;
        break;
      }

      // optional sfixed64 effective_time = 58;
      case 58: {
        if (tag == 465) {
         parse_effective_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &effective_time_)));
          set_has_effective_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 59;
      case 59: {
        if (tag == 474) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(485)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 60;
      case 60: {
        if (tag == 485) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_exec_restatement_reason;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 61;
      case 61: {
        if (tag == 488) {
         parse_exec_restatement_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecRestatementReasonEnum_IsValid(value)) {
            set_exec_restatement_reason(static_cast< ::SingleGeneralOrderHandling::ExecRestatementReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(61, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(501)) goto parse_expire_date;
        break;
      }

      // optional sfixed32 expire_date = 62;
      case 62: {
        if (tag == 501) {
         parse_expire_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &expire_date_)));
          set_has_expire_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_gt_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 63;
      case 63: {
        if (tag == 504) {
         parse_gt_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::GtBookingInstEnum_IsValid(value)) {
            set_gt_booking_inst(static_cast< ::SingleGeneralOrderHandling::GtBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(63, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(513)) goto parse_gross_trade_amt;
        break;
      }

      // optional sfixed64 gross_trade_amt = 64;
      case 64: {
        if (tag == 513) {
         parse_gross_trade_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &gross_trade_amt_)));
          set_has_gross_trade_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(525)) goto parse_gross_trade_amt_exponent;
        break;
      }

      // optional sfixed32 gross_trade_amt_exponent = 65;
      case 65: {
        if (tag == 525) {
         parse_gross_trade_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &gross_trade_amt_exponent_)));
          set_has_gross_trade_amt_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_handl_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 66;
      case 66: {
        if (tag == 528) {
         parse_handl_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::HandlInstEnum_IsValid(value)) {
            set_handl_inst(static_cast< ::SingleGeneralOrderHandling::HandlInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(66, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(537)) goto parse_max_floor;
        break;
      }

      // optional sfixed64 max_floor = 67;
      case 67: {
        if (tag == 537) {
         parse_max_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_floor_)));
          set_has_max_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(549)) goto parse_max_floor_exponent;
        break;
      }

      // optional sfixed32 max_floor_exponent = 68;
      case 68: {
        if (tag == 549) {
         parse_max_floor_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_floor_exponent_)));
          set_has_max_floor_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(553)) goto parse_max_show;
        break;
      }

      // optional sfixed64 max_show = 69;
      case 69: {
        if (tag == 553) {
         parse_max_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_show_)));
          set_has_max_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(565)) goto parse_max_show_exponent;
        break;
      }

      // optional sfixed32 max_show_exponent = 70;
      case 70: {
        if (tag == 565) {
         parse_max_show_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &max_show_exponent_)));
          set_has_max_show_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(569)) goto parse_min_qty;
        break;
      }

      // optional sfixed64 min_qty = 71;
      case 71: {
        if (tag == 569) {
         parse_min_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &min_qty_)));
          set_has_min_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(581)) goto parse_min_qty_exponent;
        break;
      }

      // optional sfixed32 min_qty_exponent = 72;
      case 72: {
        if (tag == 581) {
         parse_min_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &min_qty_exponent_)));
          set_has_min_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_multi_leg_reporting_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.MultiLegReportingTypeEnum multi_leg_reporting_type = 73;
      case 73: {
        if (tag == 584) {
         parse_multi_leg_reporting_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::MultiLegReportingTypeEnum_IsValid(value)) {
            set_multi_leg_reporting_type(static_cast< ::SingleGeneralOrderHandling::MultiLegReportingTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(593)) goto parse_order_qty2;
        break;
      }

      // optional sfixed64 order_qty2 = 74;
      case 74: {
        if (tag == 593) {
         parse_order_qty2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &order_qty2_)));
          set_has_order_qty2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(605)) goto parse_order_qty2_exponent;
        break;
      }

      // optional sfixed32 order_qty2_exponent = 75;
      case 75: {
        if (tag == 605) {
         parse_order_qty2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &order_qty2_exponent_)));
          set_has_order_qty2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(608)) goto parse_position_effect;
        break;
      }

      // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 76;
      case 76: {
        if (tag == 608) {
         parse_position_effect:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PositionEffectEnum_IsValid(value)) {
            set_position_effect(static_cast< ::SingleGeneralOrderHandling::PositionEffectEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(76, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(621)) goto parse_settl_date2;
        break;
      }

      // optional sfixed32 settl_date2 = 77;
      case 77: {
        if (tag == 621) {
         parse_settl_date2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &settl_date2_)));
          set_has_settl_date2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_solicited_flag;
        break;
      }

      // optional bool solicited_flag = 78;
      case 78: {
        if (tag == 624) {
         parse_solicited_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solicited_flag_)));
          set_has_solicited_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(632)) goto parse_trading_session_id;
        break;
      }

      // optional .SingleGeneralOrderHandling.TradingSessionIdEnum trading_session_id = 79;
      case 79: {
        if (tag == 632) {
         parse_trading_session_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::SingleGeneralOrderHandling::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(79, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(640)) goto parse_account_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 80;
      case 80: {
        if (tag == 640) {
         parse_account_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AccountTypeEnum_IsValid(value)) {
            set_account_type(static_cast< ::SingleGeneralOrderHandling::AccountTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(80, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(649)) goto parse_accrued_interest_amt;
        break;
      }

      // optional sfixed64 accrued_interest_amt = 81;
      case 81: {
        if (tag == 649) {
         parse_accrued_interest_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &accrued_interest_amt_)));
          set_has_accrued_interest_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(661)) goto parse_accrued_interest_amt_exponent;
        break;
      }

      // optional sfixed32 accrued_interest_amt_exponent = 82;
      case 82: {
        if (tag == 661) {
         parse_accrued_interest_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &accrued_interest_amt_exponent_)));
          set_has_accrued_interest_amt_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(665)) goto parse_accrued_interest_rate;
        break;
      }

      // optional sfixed64 accrued_interest_rate = 83;
      case 83: {
        if (tag == 665) {
         parse_accrued_interest_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &accrued_interest_rate_)));
          set_has_accrued_interest_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(677)) goto parse_accrued_interest_rate_exponent;
        break;
      }

      // optional sfixed32 accrued_interest_rate_exponent = 84;
      case 84: {
        if (tag == 677) {
         parse_accrued_interest_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &accrued_interest_rate_exponent_)));
          set_has_accrued_interest_rate_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(685)) goto parse_basis_feature_date;
        break;
      }

      // optional sfixed32 basis_feature_date = 85;
      case 85: {
        if (tag == 685) {
         parse_basis_feature_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &basis_feature_date_)));
          set_has_basis_feature_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(689)) goto parse_basis_feature_price;
        break;
      }

      // optional sfixed64 basis_feature_price = 86;
      case 86: {
        if (tag == 689) {
         parse_basis_feature_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &basis_feature_price_)));
          set_has_basis_feature_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(701)) goto parse_basis_feature_price_exponent;
        break;
      }

      // optional sfixed32 basis_feature_price_exponent = 87;
      case 87: {
        if (tag == 701) {
         parse_basis_feature_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &basis_feature_price_exponent_)));
          set_has_basis_feature_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(704)) goto parse_booking_unit;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 88;
      case 88: {
        if (tag == 704) {
         parse_booking_unit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingUnitEnum_IsValid(value)) {
            set_booking_unit(static_cast< ::SingleGeneralOrderHandling::BookingUnitEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(88, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(712)) goto parse_cancellation_rights;
        break;
      }

      // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 89;
      case 89: {
        if (tag == 712) {
         parse_cancellation_rights:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CancellationRightsEnum_IsValid(value)) {
            set_cancellation_rights(static_cast< ::SingleGeneralOrderHandling::CancellationRightsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(89, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(720)) goto parse_cash_margin;
        break;
      }

      // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 90;
      case 90: {
        if (tag == 720) {
         parse_cash_margin:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CashMarginEnum_IsValid(value)) {
            set_cash_margin(static_cast< ::SingleGeneralOrderHandling::CashMarginEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(90, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(730)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 91;
      case 91: {
        if (tag == 730) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(736)) goto parse_clearing_fee_indicator;
        break;
      }

      // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 92;
      case 92: {
        if (tag == 736) {
         parse_clearing_fee_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum_IsValid(value)) {
            set_clearing_fee_indicator(static_cast< ::SingleGeneralOrderHandling::ClearingFeeIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(92, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(746)) goto parse_commission_data;
        break;
      }

      // optional .Common.CommissionData commission_data = 93;
      case 93: {
        if (tag == 746) {
         parse_commission_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commission_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(753)) goto parse_concession;
        break;
      }

      // optional sfixed64 concession = 94;
      case 94: {
        if (tag == 753) {
         parse_concession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &concession_)));
          set_has_concession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(765)) goto parse_concession_exponent;
        break;
      }

      // optional sfixed32 concession_exponent = 95;
      case 95: {
        if (tag == 765) {
         parse_concession_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &concession_exponent_)));
          set_has_concession_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(770)) goto parse_cross_id;
        break;
      }

      // optional string cross_id = 96;
      case 96: {
        if (tag == 770) {
         parse_cross_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cross_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cross_id().data(), this->cross_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cross_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(776)) goto parse_cross_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.CrossTypeEnum cross_type = 97;
      case 97: {
        if (tag == 776) {
         parse_cross_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CrossTypeEnum_IsValid(value)) {
            set_cross_type(static_cast< ::SingleGeneralOrderHandling::CrossTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(97, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(784)) goto parse_cust_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 98;
      case 98: {
        if (tag == 784) {
         parse_cust_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderCapacityEnum_IsValid(value)) {
            set_cust_order_capacity(static_cast< ::SingleGeneralOrderHandling::CustOrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(98, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(792)) goto parse_day_booking_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 99;
      case 99: {
        if (tag == 792) {
         parse_day_booking_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::DayBookingInstEnum_IsValid(value)) {
            set_day_booking_inst(static_cast< ::SingleGeneralOrderHandling::DayBookingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(99, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_designation;
        break;
      }

      // optional string designation = 100;
      case 100: {
        if (tag == 802) {
         parse_designation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_designation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->designation().data(), this->designation().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "designation");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(813)) goto parse_ex_date;
        break;
      }

      // optional sfixed32 ex_date = 101;
      case 101: {
        if (tag == 813) {
         parse_ex_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &ex_date_)));
          set_has_ex_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(817)) goto parse_exec_price_adjustment;
        break;
      }

      // optional double exec_price_adjustment = 102;
      case 102: {
        if (tag == 817) {
         parse_exec_price_adjustment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exec_price_adjustment_)));
          set_has_exec_price_adjustment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_exec_price_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExecPriceTypeEnum exec_price_type = 103;
      case 103: {
        if (tag == 824) {
         parse_exec_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecPriceTypeEnum_IsValid(value)) {
            set_exec_price_type(static_cast< ::SingleGeneralOrderHandling::ExecPriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(103, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(833)) goto parse_exec_valuation_point;
        break;
      }

      // optional sfixed64 exec_valuation_point = 104;
      case 104: {
        if (tag == 833) {
         parse_exec_valuation_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &exec_valuation_point_)));
          set_has_exec_valuation_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 105;
      case 105: {
        if (tag == 842) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(849)) goto parse_last_forward_points2;
        break;
      }

      // optional sfixed64 last_forward_points2 = 106;
      case 106: {
        if (tag == 849) {
         parse_last_forward_points2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_forward_points2_)));
          set_has_last_forward_points2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(861)) goto parse_last_forward_points2_exponent;
        break;
      }

      // optional sfixed32 last_forward_points2_exponent = 107;
      case 107: {
        if (tag == 861) {
         parse_last_forward_points2_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_forward_points2_exponent_)));
          set_has_last_forward_points2_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(864)) goto parse_money_laundering_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 108;
      case 108: {
        if (tag == 864) {
         parse_money_laundering_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum_IsValid(value)) {
            set_money_laundering_status(static_cast< ::SingleGeneralOrderHandling::MoneyLaunderingStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(108, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(873)) goto parse_num_days_interest;
        break;
      }

      // optional sfixed64 num_days_interest = 109;
      case 109: {
        if (tag == 873) {
         parse_num_days_interest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &num_days_interest_)));
          set_has_num_days_interest();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_order_capacity;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 110;
      case 110: {
        if (tag == 880) {
         parse_order_capacity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderCapacityEnum_IsValid(value)) {
            set_order_capacity(static_cast< ::SingleGeneralOrderHandling::OrderCapacityEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(110, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 111;
      case 111: {
        if (tag == 890) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_order_restrictions;
        break;
      }

      // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 112 [packed = true];
      case 112: {
        if (tag == 898) {
         parse_order_restrictions:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
              add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 896) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderRestrictionsEnum_IsValid(value)) {
            add_order_restrictions(static_cast< ::SingleGeneralOrderHandling::OrderRestrictionsEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(112, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(906)) goto parse_orig_cross_id;
        break;
      }

      // optional string orig_cross_id = 113;
      case 113: {
        if (tag == 906) {
         parse_orig_cross_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_cross_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->orig_cross_id().data(), this->orig_cross_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "orig_cross_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 114;
      case 114: {
        if (tag == 914) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(914)) goto parse_parties;
        if (input->ExpectTag(920)) goto parse_prealloc_method;
        break;
      }

      // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 115;
      case 115: {
        if (tag == 920) {
         parse_prealloc_method:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PreallocMethodEnum_IsValid(value)) {
            set_prealloc_method(static_cast< ::SingleGeneralOrderHandling::PreallocMethodEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(115, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(929)) goto parse_price_improvement;
        break;
      }

      // optional sfixed64 price_improvement = 116;
      case 116: {
        if (tag == 929) {
         parse_price_improvement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &price_improvement_)));
          set_has_price_improvement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(941)) goto parse_price_improvement_exponent;
        break;
      }

      // optional sfixed32 price_improvement_exponent = 117;
      case 117: {
        if (tag == 941) {
         parse_price_improvement_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &price_improvement_exponent_)));
          set_has_price_improvement_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(944)) goto parse_price_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 118;
      case 118: {
        if (tag == 944) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::SingleGeneralOrderHandling::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(118, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(952)) goto parse_priority_indicator;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriorityIndicatorEnum priority_indicator = 119;
      case 119: {
        if (tag == 952) {
         parse_priority_indicator:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriorityIndicatorEnum_IsValid(value)) {
            set_priority_indicator(static_cast< ::SingleGeneralOrderHandling::PriorityIndicatorEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(119, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_regist_id;
        break;
      }

      // optional string regist_id = 120;
      case 120: {
        if (tag == 962) {
         parse_regist_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_regist_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->regist_id().data(), this->regist_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "regist_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(970)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 121;
      case 121: {
        if (tag == 970) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(978)) goto parse_secondary_exec_id;
        break;
      }

      // optional string secondary_exec_id = 122;
      case 122: {
        if (tag == 978) {
         parse_secondary_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_exec_id().data(), this->secondary_exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_exec_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(986)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 123;
      case 123: {
        if (tag == 986) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 124;
      case 124: {
        if (tag == 994) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(994)) goto parse_stipulations;
        if (input->ExpectTag(1001)) goto parse_total_takedown;
        break;
      }

      // optional sfixed64 total_takedown = 125;
      case 125: {
        if (tag == 1001) {
         parse_total_takedown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &total_takedown_)));
          set_has_total_takedown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1013)) goto parse_total_takedown_exponent;
        break;
      }

      // optional sfixed32 total_takedown_exponent = 126;
      case 126: {
        if (tag == 1013) {
         parse_total_takedown_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &total_takedown_exponent_)));
          set_has_total_takedown_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1021)) goto parse_trade_origination_date;
        break;
      }

      // optional sfixed32 trade_origination_date = 127;
      case 127: {
        if (tag == 1021) {
         parse_trade_origination_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &trade_origination_date_)));
          set_has_trade_origination_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1024)) goto parse_traded_flat_switch;
        break;
      }

      // optional bool traded_flat_switch = 128;
      case 128: {
        if (tag == 1024) {
         parse_traded_flat_switch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &traded_flat_switch_)));
          set_has_traded_flat_switch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1032)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .SingleGeneralOrderHandling.TradingSessionSubIdEnum trading_session_sub_id = 129;
      case 129: {
        if (tag == 1032) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::SingleGeneralOrderHandling::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(129, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1041)) goto parse_trans_bkd_time;
        break;
      }

      // optional sfixed64 trans_bkd_time = 130;
      case 130: {
        if (tag == 1041) {
         parse_trans_bkd_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &trans_bkd_time_)));
          set_has_trans_bkd_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1049)) goto parse_underlying_last_px;
        break;
      }

      // optional sfixed64 underlying_last_px = 131;
      case 131: {
        if (tag == 1049) {
         parse_underlying_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_last_px_)));
          set_has_underlying_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1061)) goto parse_underlying_last_px_exponent;
        break;
      }

      // optional sfixed32 underlying_last_px_exponent = 132;
      case 132: {
        if (tag == 1061) {
         parse_underlying_last_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_last_px_exponent_)));
          set_has_underlying_last_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1065)) goto parse_underlying_last_qty;
        break;
      }

      // optional sfixed64 underlying_last_qty = 133;
      case 133: {
        if (tag == 1065) {
         parse_underlying_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &underlying_last_qty_)));
          set_has_underlying_last_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1077)) goto parse_underlying_last_qty_exponent;
        break;
      }

      // optional sfixed32 underlying_last_qty_exponent = 134;
      case 134: {
        if (tag == 1077) {
         parse_underlying_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &underlying_last_qty_exponent_)));
          set_has_underlying_last_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1080)) goto parse_working_indicator;
        break;
      }

      // optional bool working_indicator = 135;
      case 135: {
        if (tag == 1080) {
         parse_working_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &working_indicator_)));
          set_has_working_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1090)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 136;
      case 136: {
        if (tag == 1090) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1096)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 137;
      case 137: {
        if (tag == 1096) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(137, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1104)) goto parse_aggressor_indicator;
        break;
      }

      // optional bool aggressor_indicator = 138;
      case 138: {
        if (tag == 1104) {
         parse_aggressor_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aggressor_indicator_)));
          set_has_aggressor_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1112)) goto parse_booking_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 139;
      case 139: {
        if (tag == 1112) {
         parse_booking_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::BookingTypeEnum_IsValid(value)) {
            set_booking_type(static_cast< ::SingleGeneralOrderHandling::BookingTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(139, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1121)) goto parse_calculated_ccy_last_qty;
        break;
      }

      // optional sfixed64 calculated_ccy_last_qty = 140;
      case 140: {
        if (tag == 1121) {
         parse_calculated_ccy_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &calculated_ccy_last_qty_)));
          set_has_calculated_ccy_last_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1133)) goto parse_calculated_ccy_last_qty_exponent;
        break;
      }

      // optional sfixed32 calculated_ccy_last_qty_exponent = 141;
      case 141: {
        if (tag == 1133) {
         parse_calculated_ccy_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &calculated_ccy_last_qty_exponent_)));
          set_has_calculated_ccy_last_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_cont_amt_grp;
        break;
      }

      // repeated .Common.ContAmtGrp cont_amt_grp = 142;
      case 142: {
        if (tag == 1138) {
         parse_cont_amt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cont_amt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1138)) goto parse_cont_amt_grp;
        if (input->ExpectTag(1146)) goto parse_contra_grp;
        break;
      }

      // repeated .Common.ContraGrp contra_grp = 143;
      case 143: {
        if (tag == 1146) {
         parse_contra_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contra_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1146)) goto parse_contra_grp;
        if (input->ExpectTag(1152)) goto parse_copy_msg_indicator;
        break;
      }

      // optional bool copy_msg_indicator = 144;
      case 144: {
        if (tag == 1152) {
         parse_copy_msg_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &copy_msg_indicator_)));
          set_has_copy_msg_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1160)) goto parse_cust_directed_order;
        break;
      }

      // optional bool cust_directed_order = 145;
      case 145: {
        if (tag == 1160) {
         parse_cust_directed_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cust_directed_order_)));
          set_has_cust_directed_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1168)) goto parse_cust_order_handling_inst;
        break;
      }

      // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 146;
      case 146: {
        if (tag == 1168) {
         parse_cust_order_handling_inst:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::CustOrderHandlingInstEnum_IsValid(value)) {
            set_cust_order_handling_inst(static_cast< ::SingleGeneralOrderHandling::CustOrderHandlingInstEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(146, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1178)) goto parse_discretion_instructions;
        break;
      }

      // optional .Common.DiscretionInstructions discretion_instructions = 147;
      case 147: {
        if (tag == 1178) {
         parse_discretion_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discretion_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1185)) goto parse_discretion_price;
        break;
      }

      // optional sfixed64 discretion_price = 148;
      case 148: {
        if (tag == 1185) {
         parse_discretion_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &discretion_price_)));
          set_has_discretion_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1197)) goto parse_discretion_price_exponent;
        break;
      }

      // optional sfixed32 discretion_price_exponent = 149;
      case 149: {
        if (tag == 1197) {
         parse_discretion_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &discretion_price_exponent_)));
          set_has_discretion_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1202)) goto parse_display_instruction;
        break;
      }

      // optional .Common.DisplayInstruction display_instruction = 150;
      case 150: {
        if (tag == 1202) {
         parse_display_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_display_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1209)) goto parse_end_accrued_interest_amt;
        break;
      }

      // optional sfixed64 end_accrued_interest_amt = 151;
      case 151: {
        if (tag == 1209) {
         parse_end_accrued_interest_amt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &end_accrued_interest_amt_)));
          set_has_end_accrued_interest_amt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1221)) goto parse_end_accrued_interest_amt_exponent;
        break;
      }

      // optional sfixed32 end_accrued_interest_amt_exponent = 152;
      case 152: {
        if (tag == 1221) {
         parse_end_accrued_interest_amt_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_accrued_interest_amt_exponent_)));
          set_has_end_accrued_interest_amt_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1225)) goto parse_end_cash;
        break;
      }

      // optional sfixed64 end_cash = 153;
      case 153: {
        if (tag == 1225) {
         parse_end_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &end_cash_)));
          set_has_end_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1237)) goto parse_end_cash_exponent;
        break;
      }

      // optional sfixed32 end_cash_exponent = 154;
      case 154: {
        if (tag == 1237) {
         parse_end_cash_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &end_cash_exponent_)));
          set_has_end_cash_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1242)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 155;
      case 155: {
        if (tag == 1242) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1250)) goto parse_host_cross_id;
        break;
      }

      // optional string host_cross_id = 156;
      case 156: {
        if (tag == 1250) {
         parse_host_cross_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_cross_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_cross_id().data(), this->host_cross_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host_cross_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1258)) goto parse_instrmt_leg_exec_grp;
        break;
      }

      // repeated .Common.InstrmtLegExecGrp instrmt_leg_exec_grp = 157;
      case 157: {
        if (tag == 1258) {
         parse_instrmt_leg_exec_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_exec_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1258)) goto parse_instrmt_leg_exec_grp;
        if (input->ExpectTag(1265)) goto parse_interest_at_maturity;
        break;
      }

      // optional sfixed64 interest_at_maturity = 158;
      case 158: {
        if (tag == 1265) {
         parse_interest_at_maturity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &interest_at_maturity_)));
          set_has_interest_at_maturity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1277)) goto parse_interest_at_maturity_exponent;
        break;
      }

      // optional sfixed32 interest_at_maturity_exponent = 159;
      case 159: {
        if (tag == 1277) {
         parse_interest_at_maturity_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &interest_at_maturity_exponent_)));
          set_has_interest_at_maturity_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1280)) goto parse_last_liquidity_ind;
        break;
      }

      // optional .SingleGeneralOrderHandling.LastLiquidityIndEnum last_liquidity_ind = 160;
      case 160: {
        if (tag == 1280) {
         parse_last_liquidity_ind:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::LastLiquidityIndEnum_IsValid(value)) {
            set_last_liquidity_ind(static_cast< ::SingleGeneralOrderHandling::LastLiquidityIndEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(160, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1289)) goto parse_last_par_px;
        break;
      }

      // optional sfixed64 last_par_px = 161;
      case 161: {
        if (tag == 1289) {
         parse_last_par_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_par_px_)));
          set_has_last_par_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1301)) goto parse_last_par_px_exponent;
        break;
      }

      // optional sfixed32 last_par_px_exponent = 162;
      case 162: {
        if (tag == 1301) {
         parse_last_par_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_par_px_exponent_)));
          set_has_last_par_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1304)) goto parse_last_rpt_requested;
        break;
      }

      // optional bool last_rpt_requested = 163;
      case 163: {
        if (tag == 1304) {
         parse_last_rpt_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_rpt_requested_)));
          set_has_last_rpt_requested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1313)) goto parse_last_swap_points;
        break;
      }

      // optional sfixed64 last_swap_points = 164;
      case 164: {
        if (tag == 1313) {
         parse_last_swap_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_swap_points_)));
          set_has_last_swap_points();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1325)) goto parse_last_swap_points_exponent;
        break;
      }

      // optional sfixed32 last_swap_points_exponent = 165;
      case 165: {
        if (tag == 1325) {
         parse_last_swap_points_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_swap_points_exponent_)));
          set_has_last_swap_points_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1328)) goto parse_lot_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.LotTypeEnum lot_type = 166;
      case 166: {
        if (tag == 1328) {
         parse_lot_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::LotTypeEnum_IsValid(value)) {
            set_lot_type(static_cast< ::SingleGeneralOrderHandling::LotTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(166, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1336)) goto parse_manual_order_indicator;
        break;
      }

      // optional bool manual_order_indicator = 167;
      case 167: {
        if (tag == 1336) {
         parse_manual_order_indicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &manual_order_indicator_)));
          set_has_manual_order_indicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1346)) goto parse_mass_status_req_id;
        break;
      }

      // optional string mass_status_req_id = 168;
      case 168: {
        if (tag == 1346) {
         parse_mass_status_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mass_status_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mass_status_req_id().data(), this->mass_status_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mass_status_req_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1353)) goto parse_match_increment;
        break;
      }

      // optional sfixed64 match_increment = 169;
      case 169: {
        if (tag == 1353) {
         parse_match_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &match_increment_)));
          set_has_match_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1365)) goto parse_match_increment_exponent;
        break;
      }

      // optional sfixed32 match_increment_exponent = 170;
      case 170: {
        if (tag == 1365) {
         parse_match_increment_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &match_increment_exponent_)));
          set_has_match_increment_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1368)) goto parse_match_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.MatchTypeEnum match_type = 171;
      case 171: {
        if (tag == 1368) {
         parse_match_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::MatchTypeEnum_IsValid(value)) {
            set_match_type(static_cast< ::SingleGeneralOrderHandling::MatchTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(171, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1377)) goto parse_max_price_levels;
        break;
      }

      // optional sfixed64 max_price_levels = 172;
      case 172: {
        if (tag == 1377) {
         parse_max_price_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &max_price_levels_)));
          set_has_max_price_levels();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1386)) goto parse_misc_fees_grp;
        break;
      }

      // repeated .Common.MiscFeesGrp misc_fees_grp = 173;
      case 173: {
        if (tag == 1386) {
         parse_misc_fees_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_misc_fees_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1386)) goto parse_misc_fees_grp;
        if (input->ExpectTag(1394)) goto parse_ord_status_req_id;
        break;
      }

      // optional string ord_status_req_id = 174;
      case 174: {
        if (tag == 1394) {
         parse_ord_status_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ord_status_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ord_status_req_id().data(), this->ord_status_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ord_status_req_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1400)) goto parse_order_category;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderCategoryEnum order_category = 175;
      case 175: {
        if (tag == 1400) {
         parse_order_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderCategoryEnum_IsValid(value)) {
            set_order_category(static_cast< ::SingleGeneralOrderHandling::OrderCategoryEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(175, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1408)) goto parse_order_handling_inst_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 176;
      case 176: {
        if (tag == 1408) {
         parse_order_handling_inst_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum_IsValid(value)) {
            set_order_handling_inst_source(static_cast< ::SingleGeneralOrderHandling::OrderHandlingInstSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(176, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1417)) goto parse_participation_rate;
        break;
      }

      // optional sfixed64 participation_rate = 177;
      case 177: {
        if (tag == 1417) {
         parse_participation_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &participation_rate_)));
          set_has_participation_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1429)) goto parse_participation_rate_exponent;
        break;
      }

      // optional sfixed32 participation_rate_exponent = 178;
      case 178: {
        if (tag == 1429) {
         parse_participation_rate_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &participation_rate_exponent_)));
          set_has_participation_rate_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1434)) goto parse_peg_instructions;
        break;
      }

      // optional .Common.PegInstructions peg_instructions = 179;
      case 179: {
        if (tag == 1434) {
         parse_peg_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_peg_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1441)) goto parse_pegged_price;
        break;
      }

      // optional sfixed64 pegged_price = 180;
      case 180: {
        if (tag == 1441) {
         parse_pegged_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &pegged_price_)));
          set_has_pegged_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1453)) goto parse_pegged_price_exponent;
        break;
      }

      // optional sfixed32 pegged_price_exponent = 181;
      case 181: {
        if (tag == 1453) {
         parse_pegged_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &pegged_price_exponent_)));
          set_has_pegged_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1457)) goto parse_pegged_ref_price;
        break;
      }

      // optional sfixed64 pegged_ref_price = 182;
      case 182: {
        if (tag == 1457) {
         parse_pegged_ref_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &pegged_ref_price_)));
          set_has_pegged_ref_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1469)) goto parse_pegged_ref_price_exponent;
        break;
      }

      // optional sfixed32 pegged_ref_price_exponent = 183;
      case 183: {
        if (tag == 1469) {
         parse_pegged_ref_price_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &pegged_ref_price_exponent_)));
          set_has_pegged_ref_price_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1472)) goto parse_pre_trade_anonymity;
        break;
      }

      // optional bool pre_trade_anonymity = 184;
      case 184: {
        if (tag == 1472) {
         parse_pre_trade_anonymity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_trade_anonymity_)));
          set_has_pre_trade_anonymity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1480)) goto parse_price_protection_scope;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 185;
      case 185: {
        if (tag == 1480) {
         parse_price_protection_scope:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceProtectionScopeEnum_IsValid(value)) {
            set_price_protection_scope(static_cast< ::SingleGeneralOrderHandling::PriceProtectionScopeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(185, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1488)) goto parse_qty_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 186;
      case 186: {
        if (tag == 1488) {
         parse_qty_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::QtyTypeEnum_IsValid(value)) {
            set_qty_type(static_cast< ::SingleGeneralOrderHandling::QtyTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(186, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1498)) goto parse_quote_resp_id;
        break;
      }

      // optional string quote_resp_id = 187;
      case 187: {
        if (tag == 1498) {
         parse_quote_resp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quote_resp_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quote_resp_id().data(), this->quote_resp_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quote_resp_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1506)) goto parse_received_dept_id;
        break;
      }

      // optional string received_dept_id = 188;
      case 188: {
        if (tag == 1506) {
         parse_received_dept_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_received_dept_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->received_dept_id().data(), this->received_dept_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "received_dept_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1513)) goto parse_start_cash;
        break;
      }

      // optional sfixed64 start_cash = 189;
      case 189: {
        if (tag == 1513) {
         parse_start_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &start_cash_)));
          set_has_start_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1525)) goto parse_start_cash_exponent;
        break;
      }

      // optional sfixed32 start_cash_exponent = 190;
      case 190: {
        if (tag == 1525) {
         parse_start_cash_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &start_cash_exponent_)));
          set_has_start_cash_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1530)) goto parse_strategy_parameters_grp;
        break;
      }

      // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 191;
      case 191: {
        if (tag == 1530) {
         parse_strategy_parameters_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strategy_parameters_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1530)) goto parse_strategy_parameters_grp;
        if (input->ExpectTag(1536)) goto parse_target_strategy;
        break;
      }

      // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 192;
      case 192: {
        if (tag == 1536) {
         parse_target_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::TargetStrategyEnum_IsValid(value)) {
            set_target_strategy(static_cast< ::SingleGeneralOrderHandling::TargetStrategyEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(192, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1546)) goto parse_target_strategy_parameters;
        break;
      }

      // optional string target_strategy_parameters = 193;
      case 193: {
        if (tag == 1546) {
         parse_target_strategy_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_strategy_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_strategy_parameters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1553)) goto parse_target_strategy_performance;
        break;
      }

      // optional double target_strategy_performance = 194;
      case 194: {
        if (tag == 1553) {
         parse_target_strategy_performance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_strategy_performance_)));
          set_has_target_strategy_performance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1562)) goto parse_time_bracket;
        break;
      }

      // optional string time_bracket = 195;
      case 195: {
        if (tag == 1562) {
         parse_time_bracket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time_bracket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time_bracket().data(), this->time_bracket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time_bracket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1569)) goto parse_tot_num_reports;
        break;
      }

      // optional sfixed64 tot_num_reports = 196;
      case 196: {
        if (tag == 1569) {
         parse_tot_num_reports:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tot_num_reports_)));
          set_has_tot_num_reports();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1578)) goto parse_trd_reg_timestamps;
        break;
      }

      // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 197;
      case 197: {
        if (tag == 1578) {
         parse_trd_reg_timestamps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trd_reg_timestamps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1578)) goto parse_trd_reg_timestamps;
        if (input->ExpectTag(1586)) goto parse_triggering_instruction;
        break;
      }

      // optional .Common.TriggeringInstruction triggering_instruction = 198;
      case 198: {
        if (tag == 1586) {
         parse_triggering_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triggering_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1594)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 199;
      case 199: {
        if (tag == 1594) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1594)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(1602)) goto parse_alloc_id;
        break;
      }

      // optional string alloc_id = 200;
      case 200: {
        if (tag == 1602) {
         parse_alloc_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alloc_id().data(), this->alloc_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "alloc_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 201;
      case 201: {
        if (tag == 1610) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1617)) goto parse_dividend_yield;
        break;
      }

      // optional sfixed64 dividend_yield = 202;
      case 202: {
        if (tag == 1617) {
         parse_dividend_yield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &dividend_yield_)));
          set_has_dividend_yield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1629)) goto parse_dividend_yield_exponent;
        break;
      }

      // optional sfixed32 dividend_yield_exponent = 203;
      case 203: {
        if (tag == 1629) {
         parse_dividend_yield_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &dividend_yield_exponent_)));
          set_has_dividend_yield_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_fills_grp;
        break;
      }

      // repeated .SingleGeneralOrderHandling.FillsGrp fills_grp = 204;
      case 204: {
        if (tag == 1634) {
         parse_fills_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fills_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1634)) goto parse_fills_grp;
        if (input->ExpectTag(1640)) goto parse_last_fragment;
        break;
      }

      // optional bool last_fragment = 205;
      case 205: {
        if (tag == 1640) {
         parse_last_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
          set_has_last_fragment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1650)) goto parse_pre_alloc_grp;
        break;
      }

      // repeated .Common.PreAllocGrp pre_alloc_grp = 206;
      case 206: {
        if (tag == 1650) {
         parse_pre_alloc_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pre_alloc_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1650)) goto parse_pre_alloc_grp;
        if (input->ExpectTag(1657)) goto parse_price_delta;
        break;
      }

      // optional double price_delta = 207;
      case 207: {
        if (tag == 1657) {
         parse_price_delta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_delta_)));
          set_has_price_delta();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1665)) goto parse_risk_free_rate;
        break;
      }

      // optional double risk_free_rate = 208;
      case 208: {
        if (tag == 1665) {
         parse_risk_free_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &risk_free_rate_)));
          set_has_risk_free_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1673)) goto parse_time_to_expiration;
        break;
      }

      // optional double time_to_expiration = 209;
      case 209: {
        if (tag == 1673) {
         parse_time_to_expiration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_to_expiration_)));
          set_has_time_to_expiration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1681)) goto parse_tot_no_fills;
        break;
      }

      // optional sfixed64 tot_no_fills = 210;
      case 210: {
        if (tag == 1681) {
         parse_tot_no_fills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tot_no_fills_)));
          set_has_tot_no_fills();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1690)) goto parse_trd_match_id;
        break;
      }

      // optional string trd_match_id = 211;
      case 211: {
        if (tag == 1690) {
         parse_trd_match_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trd_match_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trd_match_id().data(), this->trd_match_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "trd_match_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1697)) goto parse_volatility;
        break;
      }

      // optional double volatility = 212;
      case 212: {
        if (tag == 1697) {
         parse_volatility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volatility_)));
          set_has_volatility();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1706)) goto parse_rate_source;
        break;
      }

      // repeated .Common.RateSource rate_source = 213;
      case 213: {
        if (tag == 1706) {
         parse_rate_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rate_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1706)) goto parse_rate_source;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.ExecutionReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.ExecutionReport)
  return false;
#undef DO_
}

void ExecutionReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.ExecutionReport)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // optional sfixed64 avg_px = 2;
  if (has_avg_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->avg_px(), output);
  }

  // optional string cl_ord_id = 3;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cl_ord_id(), output);
  }

  // optional sfixed64 cum_qty = 4;
  if (has_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->cum_qty(), output);
  }

  // optional sfixed32 cum_qty_exponent = 5;
  if (has_cum_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->cum_qty_exponent(), output);
  }

  // optional string currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->currency(), output);
  }

  // optional string exec_id = 7;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->exec_id(), output);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 8 [packed = true];
  if (this->exec_inst_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_exec_inst_cached_byte_size_);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->exec_inst(i), output);
  }

  // optional string exec_ref_id = 9;
  if (has_exec_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_ref_id().data(), this->exec_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_ref_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exec_ref_id(), output);
  }

  // optional .SingleGeneralOrderHandling.LastCapacityEnum last_capacity = 10;
  if (has_last_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->last_capacity(), output);
  }

  // optional string last_mkt = 11;
  if (has_last_mkt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_mkt().data(), this->last_mkt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_mkt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->last_mkt(), output);
  }

  // optional double last_px = 12;
  if (has_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->last_px(), output);
  }

  // optional sfixed64 last_qty = 13;
  if (has_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->last_qty(), output);
  }

  // optional sfixed32 last_qty_exponent = 14;
  if (has_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->last_qty_exponent(), output);
  }

  // optional string list_id = 15;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->list_id(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 16;
  if (has_ord_rej_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ord_rej_reason(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 17;
  if (has_ord_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->ord_status(), output);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 18;
  if (has_ord_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->ord_type(), output);
  }

  // optional string order_id = 19;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->order_id(), output);
  }

  // optional sfixed64 price = 20;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(20, this->price(), output);
  }

  // optional sfixed32 price_exponent = 21;
  if (has_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(21, this->price_exponent(), output);
  }

  // optional sfixed32 settl_date = 22;
  if (has_settl_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(22, this->settl_date(), output);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 23;
  if (has_settl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->settl_type(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 24;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 25;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 26;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->standard_trailer(), output);
  }

  // optional sfixed64 stop_px = 27;
  if (has_stop_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(27, this->stop_px(), output);
  }

  // optional sfixed32 stop_px_exponent = 28;
  if (has_stop_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(28, this->stop_px_exponent(), output);
  }

  // optional string text = 29;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->text(), output);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 30;
  if (has_time_in_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->time_in_force(), output);
  }

  // optional sfixed32 trade_date = 31;
  if (has_trade_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(31, this->trade_date(), output);
  }

  // optional sfixed64 transact_time = 32;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(32, this->transact_time(), output);
  }

  // optional bool report_to_exch = 33;
  if (has_report_to_exch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->report_to_exch(), output);
  }

  // optional sfixed64 expire_time = 34;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(34, this->expire_time(), output);
  }

  // optional sfixed64 net_money = 35;
  if (has_net_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(35, this->net_money(), output);
  }

  // optional sfixed32 net_money_exponent = 36;
  if (has_net_money_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(36, this->net_money_exponent(), output);
  }

  // optional sfixed64 settl_curr_amt = 37;
  if (has_settl_curr_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(37, this->settl_curr_amt(), output);
  }

  // optional sfixed32 settl_curr_amt_exponent = 38;
  if (has_settl_curr_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(38, this->settl_curr_amt_exponent(), output);
  }

  // optional string settl_currency = 39;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->settl_currency(), output);
  }

  // optional .SingleGeneralOrderHandling.ExecTypeEnum exec_type = 40;
  if (has_exec_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->exec_type(), output);
  }

  // optional sfixed64 last_forward_points = 41;
  if (has_last_forward_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(41, this->last_forward_points(), output);
  }

  // optional sfixed32 last_forward_points_exponent = 42;
  if (has_last_forward_points_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(42, this->last_forward_points_exponent(), output);
  }

  // optional sfixed64 last_spot_rate = 43;
  if (has_last_spot_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(43, this->last_spot_rate(), output);
  }

  // optional sfixed32 last_spot_rate_exponent = 44;
  if (has_last_spot_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(44, this->last_spot_rate_exponent(), output);
  }

  // optional sfixed64 leaves_qty = 45;
  if (has_leaves_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(45, this->leaves_qty(), output);
  }

  // optional sfixed32 leaves_qty_exponent = 46;
  if (has_leaves_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(46, this->leaves_qty_exponent(), output);
  }

  // optional string orig_cl_ord_id = 47;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->orig_cl_ord_id(), output);
  }

  // optional string secondary_order_id = 48;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->secondary_order_id(), output);
  }

  // optional double settl_curr_fx_rate = 49;
  if (has_settl_curr_fx_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->settl_curr_fx_rate(), output);
  }

  // optional .SingleGeneralOrderHandling.SettlCurrFxRateCalcEnum settl_curr_fx_rate_calc = 50;
  if (has_settl_curr_fx_rate_calc()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->settl_curr_fx_rate_calc(), output);
  }

  // optional string compliance_id = 51;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->compliance_id(), output);
  }

  // optional sfixed64 day_avg_px = 52;
  if (has_day_avg_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(52, this->day_avg_px(), output);
  }

  // optional sfixed32 day_avg_px_exponent = 53;
  if (has_day_avg_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(53, this->day_avg_px_exponent(), output);
  }

  // optional sfixed64 day_cum_qty = 54;
  if (has_day_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(54, this->day_cum_qty(), output);
  }

  // optional sfixed32 day_cum_qty_exponent = 55;
  if (has_day_cum_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(55, this->day_cum_qty_exponent(), output);
  }

  // optional sfixed64 day_order_qty = 56;
  if (has_day_order_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(56, this->day_order_qty(), output);
  }

  // optional sfixed32 day_order_qty_exponent = 57;
  if (has_day_order_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(57, this->day_order_qty_exponent(), output);
  }

  // optional sfixed64 effective_time = 58;
  if (has_effective_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(58, this->effective_time(), output);
  }

  // optional bytes encoded_text = 59;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      59, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 60;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(60, this->encoded_text_len(), output);
  }

  // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 61;
  if (has_exec_restatement_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      61, this->exec_restatement_reason(), output);
  }

  // optional sfixed32 expire_date = 62;
  if (has_expire_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(62, this->expire_date(), output);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 63;
  if (has_gt_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      63, this->gt_booking_inst(), output);
  }

  // optional sfixed64 gross_trade_amt = 64;
  if (has_gross_trade_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(64, this->gross_trade_amt(), output);
  }

  // optional sfixed32 gross_trade_amt_exponent = 65;
  if (has_gross_trade_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(65, this->gross_trade_amt_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 66;
  if (has_handl_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      66, this->handl_inst(), output);
  }

  // optional sfixed64 max_floor = 67;
  if (has_max_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(67, this->max_floor(), output);
  }

  // optional sfixed32 max_floor_exponent = 68;
  if (has_max_floor_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(68, this->max_floor_exponent(), output);
  }

  // optional sfixed64 max_show = 69;
  if (has_max_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(69, this->max_show(), output);
  }

  // optional sfixed32 max_show_exponent = 70;
  if (has_max_show_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(70, this->max_show_exponent(), output);
  }

  // optional sfixed64 min_qty = 71;
  if (has_min_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(71, this->min_qty(), output);
  }

  // optional sfixed32 min_qty_exponent = 72;
  if (has_min_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(72, this->min_qty_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.MultiLegReportingTypeEnum multi_leg_reporting_type = 73;
  if (has_multi_leg_reporting_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->multi_leg_reporting_type(), output);
  }

  // optional sfixed64 order_qty2 = 74;
  if (has_order_qty2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(74, this->order_qty2(), output);
  }

  // optional sfixed32 order_qty2_exponent = 75;
  if (has_order_qty2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(75, this->order_qty2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 76;
  if (has_position_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      76, this->position_effect(), output);
  }

  // optional sfixed32 settl_date2 = 77;
  if (has_settl_date2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(77, this->settl_date2(), output);
  }

  // optional bool solicited_flag = 78;
  if (has_solicited_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->solicited_flag(), output);
  }

  // optional .SingleGeneralOrderHandling.TradingSessionIdEnum trading_session_id = 79;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      79, this->trading_session_id(), output);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 80;
  if (has_account_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      80, this->account_type(), output);
  }

  // optional sfixed64 accrued_interest_amt = 81;
  if (has_accrued_interest_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(81, this->accrued_interest_amt(), output);
  }

  // optional sfixed32 accrued_interest_amt_exponent = 82;
  if (has_accrued_interest_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(82, this->accrued_interest_amt_exponent(), output);
  }

  // optional sfixed64 accrued_interest_rate = 83;
  if (has_accrued_interest_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(83, this->accrued_interest_rate(), output);
  }

  // optional sfixed32 accrued_interest_rate_exponent = 84;
  if (has_accrued_interest_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(84, this->accrued_interest_rate_exponent(), output);
  }

  // optional sfixed32 basis_feature_date = 85;
  if (has_basis_feature_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(85, this->basis_feature_date(), output);
  }

  // optional sfixed64 basis_feature_price = 86;
  if (has_basis_feature_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(86, this->basis_feature_price(), output);
  }

  // optional sfixed32 basis_feature_price_exponent = 87;
  if (has_basis_feature_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(87, this->basis_feature_price_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 88;
  if (has_booking_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      88, this->booking_unit(), output);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 89;
  if (has_cancellation_rights()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      89, this->cancellation_rights(), output);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 90;
  if (has_cash_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      90, this->cash_margin(), output);
  }

  // optional string cl_ord_link_id = 91;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      91, this->cl_ord_link_id(), output);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 92;
  if (has_clearing_fee_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      92, this->clearing_fee_indicator(), output);
  }

  // optional .Common.CommissionData commission_data = 93;
  if (has_commission_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, this->commission_data(), output);
  }

  // optional sfixed64 concession = 94;
  if (has_concession()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(94, this->concession(), output);
  }

  // optional sfixed32 concession_exponent = 95;
  if (has_concession_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(95, this->concession_exponent(), output);
  }

  // optional string cross_id = 96;
  if (has_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cross_id().data(), this->cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cross_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      96, this->cross_id(), output);
  }

  // optional .SingleGeneralOrderHandling.CrossTypeEnum cross_type = 97;
  if (has_cross_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      97, this->cross_type(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 98;
  if (has_cust_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      98, this->cust_order_capacity(), output);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 99;
  if (has_day_booking_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      99, this->day_booking_inst(), output);
  }

  // optional string designation = 100;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->designation(), output);
  }

  // optional sfixed32 ex_date = 101;
  if (has_ex_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(101, this->ex_date(), output);
  }

  // optional double exec_price_adjustment = 102;
  if (has_exec_price_adjustment()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->exec_price_adjustment(), output);
  }

  // optional .SingleGeneralOrderHandling.ExecPriceTypeEnum exec_price_type = 103;
  if (has_exec_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      103, this->exec_price_type(), output);
  }

  // optional sfixed64 exec_valuation_point = 104;
  if (has_exec_valuation_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(104, this->exec_valuation_point(), output);
  }

  // optional .Common.Instrument instrument = 105;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->instrument(), output);
  }

  // optional sfixed64 last_forward_points2 = 106;
  if (has_last_forward_points2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(106, this->last_forward_points2(), output);
  }

  // optional sfixed32 last_forward_points2_exponent = 107;
  if (has_last_forward_points2_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(107, this->last_forward_points2_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 108;
  if (has_money_laundering_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      108, this->money_laundering_status(), output);
  }

  // optional sfixed64 num_days_interest = 109;
  if (has_num_days_interest()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(109, this->num_days_interest(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 110;
  if (has_order_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      110, this->order_capacity(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 111;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->order_qty_data(), output);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 112 [packed = true];
  if (this->order_restrictions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      112,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_order_restrictions_cached_byte_size_);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->order_restrictions(i), output);
  }

  // optional string orig_cross_id = 113;
  if (has_orig_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cross_id().data(), this->orig_cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cross_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      113, this->orig_cross_id(), output);
  }

  // repeated .Common.Parties parties = 114;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      114, this->parties(i), output);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 115;
  if (has_prealloc_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      115, this->prealloc_method(), output);
  }

  // optional sfixed64 price_improvement = 116;
  if (has_price_improvement()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(116, this->price_improvement(), output);
  }

  // optional sfixed32 price_improvement_exponent = 117;
  if (has_price_improvement_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(117, this->price_improvement_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 118;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      118, this->price_type(), output);
  }

  // optional .SingleGeneralOrderHandling.PriorityIndicatorEnum priority_indicator = 119;
  if (has_priority_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      119, this->priority_indicator(), output);
  }

  // optional string regist_id = 120;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      120, this->regist_id(), output);
  }

  // optional string secondary_cl_ord_id = 121;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      121, this->secondary_cl_ord_id(), output);
  }

  // optional string secondary_exec_id = 122;
  if (has_secondary_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_exec_id().data(), this->secondary_exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_exec_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      122, this->secondary_exec_id(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 123;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      123, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 124;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      124, this->stipulations(i), output);
  }

  // optional sfixed64 total_takedown = 125;
  if (has_total_takedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(125, this->total_takedown(), output);
  }

  // optional sfixed32 total_takedown_exponent = 126;
  if (has_total_takedown_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(126, this->total_takedown_exponent(), output);
  }

  // optional sfixed32 trade_origination_date = 127;
  if (has_trade_origination_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(127, this->trade_origination_date(), output);
  }

  // optional bool traded_flat_switch = 128;
  if (has_traded_flat_switch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(128, this->traded_flat_switch(), output);
  }

  // optional .SingleGeneralOrderHandling.TradingSessionSubIdEnum trading_session_sub_id = 129;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      129, this->trading_session_sub_id(), output);
  }

  // optional sfixed64 trans_bkd_time = 130;
  if (has_trans_bkd_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(130, this->trans_bkd_time(), output);
  }

  // optional sfixed64 underlying_last_px = 131;
  if (has_underlying_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(131, this->underlying_last_px(), output);
  }

  // optional sfixed32 underlying_last_px_exponent = 132;
  if (has_underlying_last_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(132, this->underlying_last_px_exponent(), output);
  }

  // optional sfixed64 underlying_last_qty = 133;
  if (has_underlying_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(133, this->underlying_last_qty(), output);
  }

  // optional sfixed32 underlying_last_qty_exponent = 134;
  if (has_underlying_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(134, this->underlying_last_qty_exponent(), output);
  }

  // optional bool working_indicator = 135;
  if (has_working_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(135, this->working_indicator(), output);
  }

  // optional .Common.YieldData yield_data = 136;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      136, this->yield_data(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 137;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      137, this->acct_id_source(), output);
  }

  // optional bool aggressor_indicator = 138;
  if (has_aggressor_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(138, this->aggressor_indicator(), output);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 139;
  if (has_booking_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      139, this->booking_type(), output);
  }

  // optional sfixed64 calculated_ccy_last_qty = 140;
  if (has_calculated_ccy_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(140, this->calculated_ccy_last_qty(), output);
  }

  // optional sfixed32 calculated_ccy_last_qty_exponent = 141;
  if (has_calculated_ccy_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(141, this->calculated_ccy_last_qty_exponent(), output);
  }

  // repeated .Common.ContAmtGrp cont_amt_grp = 142;
  for (int i = 0; i < this->cont_amt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      142, this->cont_amt_grp(i), output);
  }

  // repeated .Common.ContraGrp contra_grp = 143;
  for (int i = 0; i < this->contra_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      143, this->contra_grp(i), output);
  }

  // optional bool copy_msg_indicator = 144;
  if (has_copy_msg_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(144, this->copy_msg_indicator(), output);
  }

  // optional bool cust_directed_order = 145;
  if (has_cust_directed_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(145, this->cust_directed_order(), output);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 146;
  if (has_cust_order_handling_inst()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      146, this->cust_order_handling_inst(), output);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 147;
  if (has_discretion_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      147, this->discretion_instructions(), output);
  }

  // optional sfixed64 discretion_price = 148;
  if (has_discretion_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(148, this->discretion_price(), output);
  }

  // optional sfixed32 discretion_price_exponent = 149;
  if (has_discretion_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(149, this->discretion_price_exponent(), output);
  }

  // optional .Common.DisplayInstruction display_instruction = 150;
  if (has_display_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      150, this->display_instruction(), output);
  }

  // optional sfixed64 end_accrued_interest_amt = 151;
  if (has_end_accrued_interest_amt()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(151, this->end_accrued_interest_amt(), output);
  }

  // optional sfixed32 end_accrued_interest_amt_exponent = 152;
  if (has_end_accrued_interest_amt_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(152, this->end_accrued_interest_amt_exponent(), output);
  }

  // optional sfixed64 end_cash = 153;
  if (has_end_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(153, this->end_cash(), output);
  }

  // optional sfixed32 end_cash_exponent = 154;
  if (has_end_cash_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(154, this->end_cash_exponent(), output);
  }

  // optional .Common.FinancingDetails financing_details = 155;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      155, this->financing_details(), output);
  }

  // optional string host_cross_id = 156;
  if (has_host_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_cross_id().data(), this->host_cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_cross_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      156, this->host_cross_id(), output);
  }

  // repeated .Common.InstrmtLegExecGrp instrmt_leg_exec_grp = 157;
  for (int i = 0; i < this->instrmt_leg_exec_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      157, this->instrmt_leg_exec_grp(i), output);
  }

  // optional sfixed64 interest_at_maturity = 158;
  if (has_interest_at_maturity()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(158, this->interest_at_maturity(), output);
  }

  // optional sfixed32 interest_at_maturity_exponent = 159;
  if (has_interest_at_maturity_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(159, this->interest_at_maturity_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.LastLiquidityIndEnum last_liquidity_ind = 160;
  if (has_last_liquidity_ind()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      160, this->last_liquidity_ind(), output);
  }

  // optional sfixed64 last_par_px = 161;
  if (has_last_par_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(161, this->last_par_px(), output);
  }

  // optional sfixed32 last_par_px_exponent = 162;
  if (has_last_par_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(162, this->last_par_px_exponent(), output);
  }

  // optional bool last_rpt_requested = 163;
  if (has_last_rpt_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(163, this->last_rpt_requested(), output);
  }

  // optional sfixed64 last_swap_points = 164;
  if (has_last_swap_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(164, this->last_swap_points(), output);
  }

  // optional sfixed32 last_swap_points_exponent = 165;
  if (has_last_swap_points_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(165, this->last_swap_points_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.LotTypeEnum lot_type = 166;
  if (has_lot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      166, this->lot_type(), output);
  }

  // optional bool manual_order_indicator = 167;
  if (has_manual_order_indicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(167, this->manual_order_indicator(), output);
  }

  // optional string mass_status_req_id = 168;
  if (has_mass_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mass_status_req_id().data(), this->mass_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mass_status_req_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      168, this->mass_status_req_id(), output);
  }

  // optional sfixed64 match_increment = 169;
  if (has_match_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(169, this->match_increment(), output);
  }

  // optional sfixed32 match_increment_exponent = 170;
  if (has_match_increment_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(170, this->match_increment_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.MatchTypeEnum match_type = 171;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      171, this->match_type(), output);
  }

  // optional sfixed64 max_price_levels = 172;
  if (has_max_price_levels()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(172, this->max_price_levels(), output);
  }

  // repeated .Common.MiscFeesGrp misc_fees_grp = 173;
  for (int i = 0; i < this->misc_fees_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      173, this->misc_fees_grp(i), output);
  }

  // optional string ord_status_req_id = 174;
  if (has_ord_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ord_status_req_id().data(), this->ord_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ord_status_req_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      174, this->ord_status_req_id(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderCategoryEnum order_category = 175;
  if (has_order_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      175, this->order_category(), output);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 176;
  if (has_order_handling_inst_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      176, this->order_handling_inst_source(), output);
  }

  // optional sfixed64 participation_rate = 177;
  if (has_participation_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(177, this->participation_rate(), output);
  }

  // optional sfixed32 participation_rate_exponent = 178;
  if (has_participation_rate_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(178, this->participation_rate_exponent(), output);
  }

  // optional .Common.PegInstructions peg_instructions = 179;
  if (has_peg_instructions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      179, this->peg_instructions(), output);
  }

  // optional sfixed64 pegged_price = 180;
  if (has_pegged_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(180, this->pegged_price(), output);
  }

  // optional sfixed32 pegged_price_exponent = 181;
  if (has_pegged_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(181, this->pegged_price_exponent(), output);
  }

  // optional sfixed64 pegged_ref_price = 182;
  if (has_pegged_ref_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(182, this->pegged_ref_price(), output);
  }

  // optional sfixed32 pegged_ref_price_exponent = 183;
  if (has_pegged_ref_price_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(183, this->pegged_ref_price_exponent(), output);
  }

  // optional bool pre_trade_anonymity = 184;
  if (has_pre_trade_anonymity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(184, this->pre_trade_anonymity(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 185;
  if (has_price_protection_scope()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      185, this->price_protection_scope(), output);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 186;
  if (has_qty_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      186, this->qty_type(), output);
  }

  // optional string quote_resp_id = 187;
  if (has_quote_resp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_resp_id().data(), this->quote_resp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quote_resp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      187, this->quote_resp_id(), output);
  }

  // optional string received_dept_id = 188;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      188, this->received_dept_id(), output);
  }

  // optional sfixed64 start_cash = 189;
  if (has_start_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(189, this->start_cash(), output);
  }

  // optional sfixed32 start_cash_exponent = 190;
  if (has_start_cash_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(190, this->start_cash_exponent(), output);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 191;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      191, this->strategy_parameters_grp(i), output);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 192;
  if (has_target_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      192, this->target_strategy(), output);
  }

  // optional string target_strategy_parameters = 193;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      193, this->target_strategy_parameters(), output);
  }

  // optional double target_strategy_performance = 194;
  if (has_target_strategy_performance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(194, this->target_strategy_performance(), output);
  }

  // optional string time_bracket = 195;
  if (has_time_bracket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time_bracket().data(), this->time_bracket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time_bracket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      195, this->time_bracket(), output);
  }

  // optional sfixed64 tot_num_reports = 196;
  if (has_tot_num_reports()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(196, this->tot_num_reports(), output);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 197;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      197, this->trd_reg_timestamps(i), output);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 198;
  if (has_triggering_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      198, this->triggering_instruction(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 199;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      199, this->und_instrmt_grp(i), output);
  }

  // optional string alloc_id = 200;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      200, this->alloc_id(), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 201;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->application_sequence_control(), output);
  }

  // optional sfixed64 dividend_yield = 202;
  if (has_dividend_yield()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(202, this->dividend_yield(), output);
  }

  // optional sfixed32 dividend_yield_exponent = 203;
  if (has_dividend_yield_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(203, this->dividend_yield_exponent(), output);
  }

  // repeated .SingleGeneralOrderHandling.FillsGrp fills_grp = 204;
  for (int i = 0; i < this->fills_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      204, this->fills_grp(i), output);
  }

  // optional bool last_fragment = 205;
  if (has_last_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(205, this->last_fragment(), output);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 206;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      206, this->pre_alloc_grp(i), output);
  }

  // optional double price_delta = 207;
  if (has_price_delta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(207, this->price_delta(), output);
  }

  // optional double risk_free_rate = 208;
  if (has_risk_free_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(208, this->risk_free_rate(), output);
  }

  // optional double time_to_expiration = 209;
  if (has_time_to_expiration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(209, this->time_to_expiration(), output);
  }

  // optional sfixed64 tot_no_fills = 210;
  if (has_tot_no_fills()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(210, this->tot_no_fills(), output);
  }

  // optional string trd_match_id = 211;
  if (has_trd_match_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trd_match_id().data(), this->trd_match_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trd_match_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      211, this->trd_match_id(), output);
  }

  // optional double volatility = 212;
  if (has_volatility()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(212, this->volatility(), output);
  }

  // repeated .Common.RateSource rate_source = 213;
  for (int i = 0; i < this->rate_source_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      213, this->rate_source(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.ExecutionReport)
}

::google::protobuf::uint8* ExecutionReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.ExecutionReport)
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional sfixed64 avg_px = 2;
  if (has_avg_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->avg_px(), target);
  }

  // optional string cl_ord_id = 3;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cl_ord_id(), target);
  }

  // optional sfixed64 cum_qty = 4;
  if (has_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->cum_qty(), target);
  }

  // optional sfixed32 cum_qty_exponent = 5;
  if (has_cum_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->cum_qty_exponent(), target);
  }

  // optional string currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->currency(), target);
  }

  // optional string exec_id = 7;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exec_id(), target);
  }

  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 8 [packed = true];
  if (this->exec_inst_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _exec_inst_cached_byte_size_, target);
  }
  for (int i = 0; i < this->exec_inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->exec_inst(i), target);
  }

  // optional string exec_ref_id = 9;
  if (has_exec_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_ref_id().data(), this->exec_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_ref_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exec_ref_id(), target);
  }

  // optional .SingleGeneralOrderHandling.LastCapacityEnum last_capacity = 10;
  if (has_last_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->last_capacity(), target);
  }

  // optional string last_mkt = 11;
  if (has_last_mkt()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->last_mkt().data(), this->last_mkt().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "last_mkt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->last_mkt(), target);
  }

  // optional double last_px = 12;
  if (has_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->last_px(), target);
  }

  // optional sfixed64 last_qty = 13;
  if (has_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->last_qty(), target);
  }

  // optional sfixed32 last_qty_exponent = 14;
  if (has_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->last_qty_exponent(), target);
  }

  // optional string list_id = 15;
  if (has_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->list_id().data(), this->list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "list_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->list_id(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 16;
  if (has_ord_rej_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ord_rej_reason(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 17;
  if (has_ord_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->ord_status(), target);
  }

  // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 18;
  if (has_ord_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->ord_type(), target);
  }

  // optional string order_id = 19;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->order_id(), target);
  }

  // optional sfixed64 price = 20;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(20, this->price(), target);
  }

  // optional sfixed32 price_exponent = 21;
  if (has_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(21, this->price_exponent(), target);
  }

  // optional sfixed32 settl_date = 22;
  if (has_settl_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(22, this->settl_date(), target);
  }

  // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 23;
  if (has_settl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->settl_type(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 24;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 25;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 26;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->standard_trailer(), target);
  }

  // optional sfixed64 stop_px = 27;
  if (has_stop_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(27, this->stop_px(), target);
  }

  // optional sfixed32 stop_px_exponent = 28;
  if (has_stop_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(28, this->stop_px_exponent(), target);
  }

  // optional string text = 29;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->text(), target);
  }

  // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 30;
  if (has_time_in_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->time_in_force(), target);
  }

  // optional sfixed32 trade_date = 31;
  if (has_trade_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(31, this->trade_date(), target);
  }

  // optional sfixed64 transact_time = 32;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(32, this->transact_time(), target);
  }

  // optional bool report_to_exch = 33;
  if (has_report_to_exch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->report_to_exch(), target);
  }

  // optional sfixed64 expire_time = 34;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(34, this->expire_time(), target);
  }

  // optional sfixed64 net_money = 35;
  if (has_net_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(35, this->net_money(), target);
  }

  // optional sfixed32 net_money_exponent = 36;
  if (has_net_money_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(36, this->net_money_exponent(), target);
  }

  // optional sfixed64 settl_curr_amt = 37;
  if (has_settl_curr_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(37, this->settl_curr_amt(), target);
  }

  // optional sfixed32 settl_curr_amt_exponent = 38;
  if (has_settl_curr_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(38, this->settl_curr_amt_exponent(), target);
  }

  // optional string settl_currency = 39;
  if (has_settl_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->settl_currency().data(), this->settl_currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "settl_currency");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->settl_currency(), target);
  }

  // optional .SingleGeneralOrderHandling.ExecTypeEnum exec_type = 40;
  if (has_exec_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->exec_type(), target);
  }

  // optional sfixed64 last_forward_points = 41;
  if (has_last_forward_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(41, this->last_forward_points(), target);
  }

  // optional sfixed32 last_forward_points_exponent = 42;
  if (has_last_forward_points_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(42, this->last_forward_points_exponent(), target);
  }

  // optional sfixed64 last_spot_rate = 43;
  if (has_last_spot_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(43, this->last_spot_rate(), target);
  }

  // optional sfixed32 last_spot_rate_exponent = 44;
  if (has_last_spot_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(44, this->last_spot_rate_exponent(), target);
  }

  // optional sfixed64 leaves_qty = 45;
  if (has_leaves_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(45, this->leaves_qty(), target);
  }

  // optional sfixed32 leaves_qty_exponent = 46;
  if (has_leaves_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(46, this->leaves_qty_exponent(), target);
  }

  // optional string orig_cl_ord_id = 47;
  if (has_orig_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cl_ord_id().data(), this->orig_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->orig_cl_ord_id(), target);
  }

  // optional string secondary_order_id = 48;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->secondary_order_id(), target);
  }

  // optional double settl_curr_fx_rate = 49;
  if (has_settl_curr_fx_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->settl_curr_fx_rate(), target);
  }

  // optional .SingleGeneralOrderHandling.SettlCurrFxRateCalcEnum settl_curr_fx_rate_calc = 50;
  if (has_settl_curr_fx_rate_calc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->settl_curr_fx_rate_calc(), target);
  }

  // optional string compliance_id = 51;
  if (has_compliance_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->compliance_id().data(), this->compliance_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "compliance_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->compliance_id(), target);
  }

  // optional sfixed64 day_avg_px = 52;
  if (has_day_avg_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(52, this->day_avg_px(), target);
  }

  // optional sfixed32 day_avg_px_exponent = 53;
  if (has_day_avg_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(53, this->day_avg_px_exponent(), target);
  }

  // optional sfixed64 day_cum_qty = 54;
  if (has_day_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(54, this->day_cum_qty(), target);
  }

  // optional sfixed32 day_cum_qty_exponent = 55;
  if (has_day_cum_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(55, this->day_cum_qty_exponent(), target);
  }

  // optional sfixed64 day_order_qty = 56;
  if (has_day_order_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(56, this->day_order_qty(), target);
  }

  // optional sfixed32 day_order_qty_exponent = 57;
  if (has_day_order_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(57, this->day_order_qty_exponent(), target);
  }

  // optional sfixed64 effective_time = 58;
  if (has_effective_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(58, this->effective_time(), target);
  }

  // optional bytes encoded_text = 59;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        59, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 60;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(60, this->encoded_text_len(), target);
  }

  // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 61;
  if (has_exec_restatement_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      61, this->exec_restatement_reason(), target);
  }

  // optional sfixed32 expire_date = 62;
  if (has_expire_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(62, this->expire_date(), target);
  }

  // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 63;
  if (has_gt_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      63, this->gt_booking_inst(), target);
  }

  // optional sfixed64 gross_trade_amt = 64;
  if (has_gross_trade_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(64, this->gross_trade_amt(), target);
  }

  // optional sfixed32 gross_trade_amt_exponent = 65;
  if (has_gross_trade_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(65, this->gross_trade_amt_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 66;
  if (has_handl_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      66, this->handl_inst(), target);
  }

  // optional sfixed64 max_floor = 67;
  if (has_max_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(67, this->max_floor(), target);
  }

  // optional sfixed32 max_floor_exponent = 68;
  if (has_max_floor_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(68, this->max_floor_exponent(), target);
  }

  // optional sfixed64 max_show = 69;
  if (has_max_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(69, this->max_show(), target);
  }

  // optional sfixed32 max_show_exponent = 70;
  if (has_max_show_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(70, this->max_show_exponent(), target);
  }

  // optional sfixed64 min_qty = 71;
  if (has_min_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(71, this->min_qty(), target);
  }

  // optional sfixed32 min_qty_exponent = 72;
  if (has_min_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(72, this->min_qty_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.MultiLegReportingTypeEnum multi_leg_reporting_type = 73;
  if (has_multi_leg_reporting_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->multi_leg_reporting_type(), target);
  }

  // optional sfixed64 order_qty2 = 74;
  if (has_order_qty2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(74, this->order_qty2(), target);
  }

  // optional sfixed32 order_qty2_exponent = 75;
  if (has_order_qty2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(75, this->order_qty2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 76;
  if (has_position_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      76, this->position_effect(), target);
  }

  // optional sfixed32 settl_date2 = 77;
  if (has_settl_date2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(77, this->settl_date2(), target);
  }

  // optional bool solicited_flag = 78;
  if (has_solicited_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->solicited_flag(), target);
  }

  // optional .SingleGeneralOrderHandling.TradingSessionIdEnum trading_session_id = 79;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      79, this->trading_session_id(), target);
  }

  // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 80;
  if (has_account_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      80, this->account_type(), target);
  }

  // optional sfixed64 accrued_interest_amt = 81;
  if (has_accrued_interest_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(81, this->accrued_interest_amt(), target);
  }

  // optional sfixed32 accrued_interest_amt_exponent = 82;
  if (has_accrued_interest_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(82, this->accrued_interest_amt_exponent(), target);
  }

  // optional sfixed64 accrued_interest_rate = 83;
  if (has_accrued_interest_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(83, this->accrued_interest_rate(), target);
  }

  // optional sfixed32 accrued_interest_rate_exponent = 84;
  if (has_accrued_interest_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(84, this->accrued_interest_rate_exponent(), target);
  }

  // optional sfixed32 basis_feature_date = 85;
  if (has_basis_feature_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(85, this->basis_feature_date(), target);
  }

  // optional sfixed64 basis_feature_price = 86;
  if (has_basis_feature_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(86, this->basis_feature_price(), target);
  }

  // optional sfixed32 basis_feature_price_exponent = 87;
  if (has_basis_feature_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(87, this->basis_feature_price_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 88;
  if (has_booking_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      88, this->booking_unit(), target);
  }

  // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 89;
  if (has_cancellation_rights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      89, this->cancellation_rights(), target);
  }

  // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 90;
  if (has_cash_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      90, this->cash_margin(), target);
  }

  // optional string cl_ord_link_id = 91;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        91, this->cl_ord_link_id(), target);
  }

  // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 92;
  if (has_clearing_fee_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      92, this->clearing_fee_indicator(), target);
  }

  // optional .Common.CommissionData commission_data = 93;
  if (has_commission_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, this->commission_data(), target);
  }

  // optional sfixed64 concession = 94;
  if (has_concession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(94, this->concession(), target);
  }

  // optional sfixed32 concession_exponent = 95;
  if (has_concession_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(95, this->concession_exponent(), target);
  }

  // optional string cross_id = 96;
  if (has_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cross_id().data(), this->cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cross_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        96, this->cross_id(), target);
  }

  // optional .SingleGeneralOrderHandling.CrossTypeEnum cross_type = 97;
  if (has_cross_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      97, this->cross_type(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 98;
  if (has_cust_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      98, this->cust_order_capacity(), target);
  }

  // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 99;
  if (has_day_booking_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      99, this->day_booking_inst(), target);
  }

  // optional string designation = 100;
  if (has_designation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->designation().data(), this->designation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "designation");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->designation(), target);
  }

  // optional sfixed32 ex_date = 101;
  if (has_ex_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(101, this->ex_date(), target);
  }

  // optional double exec_price_adjustment = 102;
  if (has_exec_price_adjustment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->exec_price_adjustment(), target);
  }

  // optional .SingleGeneralOrderHandling.ExecPriceTypeEnum exec_price_type = 103;
  if (has_exec_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      103, this->exec_price_type(), target);
  }

  // optional sfixed64 exec_valuation_point = 104;
  if (has_exec_valuation_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(104, this->exec_valuation_point(), target);
  }

  // optional .Common.Instrument instrument = 105;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->instrument(), target);
  }

  // optional sfixed64 last_forward_points2 = 106;
  if (has_last_forward_points2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(106, this->last_forward_points2(), target);
  }

  // optional sfixed32 last_forward_points2_exponent = 107;
  if (has_last_forward_points2_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(107, this->last_forward_points2_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 108;
  if (has_money_laundering_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      108, this->money_laundering_status(), target);
  }

  // optional sfixed64 num_days_interest = 109;
  if (has_num_days_interest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(109, this->num_days_interest(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 110;
  if (has_order_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      110, this->order_capacity(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 111;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->order_qty_data(), target);
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 112 [packed = true];
  if (this->order_restrictions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      112,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _order_restrictions_cached_byte_size_, target);
  }
  for (int i = 0; i < this->order_restrictions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->order_restrictions(i), target);
  }

  // optional string orig_cross_id = 113;
  if (has_orig_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->orig_cross_id().data(), this->orig_cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "orig_cross_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        113, this->orig_cross_id(), target);
  }

  // repeated .Common.Parties parties = 114;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, this->parties(i), target);
  }

  // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 115;
  if (has_prealloc_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      115, this->prealloc_method(), target);
  }

  // optional sfixed64 price_improvement = 116;
  if (has_price_improvement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(116, this->price_improvement(), target);
  }

  // optional sfixed32 price_improvement_exponent = 117;
  if (has_price_improvement_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(117, this->price_improvement_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 118;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      118, this->price_type(), target);
  }

  // optional .SingleGeneralOrderHandling.PriorityIndicatorEnum priority_indicator = 119;
  if (has_priority_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      119, this->priority_indicator(), target);
  }

  // optional string regist_id = 120;
  if (has_regist_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->regist_id().data(), this->regist_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "regist_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        120, this->regist_id(), target);
  }

  // optional string secondary_cl_ord_id = 121;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        121, this->secondary_cl_ord_id(), target);
  }

  // optional string secondary_exec_id = 122;
  if (has_secondary_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_exec_id().data(), this->secondary_exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_exec_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        122, this->secondary_exec_id(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 123;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        123, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 124;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->stipulations(i), target);
  }

  // optional sfixed64 total_takedown = 125;
  if (has_total_takedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(125, this->total_takedown(), target);
  }

  // optional sfixed32 total_takedown_exponent = 126;
  if (has_total_takedown_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(126, this->total_takedown_exponent(), target);
  }

  // optional sfixed32 trade_origination_date = 127;
  if (has_trade_origination_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(127, this->trade_origination_date(), target);
  }

  // optional bool traded_flat_switch = 128;
  if (has_traded_flat_switch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(128, this->traded_flat_switch(), target);
  }

  // optional .SingleGeneralOrderHandling.TradingSessionSubIdEnum trading_session_sub_id = 129;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      129, this->trading_session_sub_id(), target);
  }

  // optional sfixed64 trans_bkd_time = 130;
  if (has_trans_bkd_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(130, this->trans_bkd_time(), target);
  }

  // optional sfixed64 underlying_last_px = 131;
  if (has_underlying_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(131, this->underlying_last_px(), target);
  }

  // optional sfixed32 underlying_last_px_exponent = 132;
  if (has_underlying_last_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(132, this->underlying_last_px_exponent(), target);
  }

  // optional sfixed64 underlying_last_qty = 133;
  if (has_underlying_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(133, this->underlying_last_qty(), target);
  }

  // optional sfixed32 underlying_last_qty_exponent = 134;
  if (has_underlying_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(134, this->underlying_last_qty_exponent(), target);
  }

  // optional bool working_indicator = 135;
  if (has_working_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(135, this->working_indicator(), target);
  }

  // optional .Common.YieldData yield_data = 136;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        136, this->yield_data(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 137;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      137, this->acct_id_source(), target);
  }

  // optional bool aggressor_indicator = 138;
  if (has_aggressor_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(138, this->aggressor_indicator(), target);
  }

  // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 139;
  if (has_booking_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      139, this->booking_type(), target);
  }

  // optional sfixed64 calculated_ccy_last_qty = 140;
  if (has_calculated_ccy_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(140, this->calculated_ccy_last_qty(), target);
  }

  // optional sfixed32 calculated_ccy_last_qty_exponent = 141;
  if (has_calculated_ccy_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(141, this->calculated_ccy_last_qty_exponent(), target);
  }

  // repeated .Common.ContAmtGrp cont_amt_grp = 142;
  for (int i = 0; i < this->cont_amt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        142, this->cont_amt_grp(i), target);
  }

  // repeated .Common.ContraGrp contra_grp = 143;
  for (int i = 0; i < this->contra_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        143, this->contra_grp(i), target);
  }

  // optional bool copy_msg_indicator = 144;
  if (has_copy_msg_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(144, this->copy_msg_indicator(), target);
  }

  // optional bool cust_directed_order = 145;
  if (has_cust_directed_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(145, this->cust_directed_order(), target);
  }

  // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 146;
  if (has_cust_order_handling_inst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      146, this->cust_order_handling_inst(), target);
  }

  // optional .Common.DiscretionInstructions discretion_instructions = 147;
  if (has_discretion_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        147, this->discretion_instructions(), target);
  }

  // optional sfixed64 discretion_price = 148;
  if (has_discretion_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(148, this->discretion_price(), target);
  }

  // optional sfixed32 discretion_price_exponent = 149;
  if (has_discretion_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(149, this->discretion_price_exponent(), target);
  }

  // optional .Common.DisplayInstruction display_instruction = 150;
  if (has_display_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        150, this->display_instruction(), target);
  }

  // optional sfixed64 end_accrued_interest_amt = 151;
  if (has_end_accrued_interest_amt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(151, this->end_accrued_interest_amt(), target);
  }

  // optional sfixed32 end_accrued_interest_amt_exponent = 152;
  if (has_end_accrued_interest_amt_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(152, this->end_accrued_interest_amt_exponent(), target);
  }

  // optional sfixed64 end_cash = 153;
  if (has_end_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(153, this->end_cash(), target);
  }

  // optional sfixed32 end_cash_exponent = 154;
  if (has_end_cash_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(154, this->end_cash_exponent(), target);
  }

  // optional .Common.FinancingDetails financing_details = 155;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        155, this->financing_details(), target);
  }

  // optional string host_cross_id = 156;
  if (has_host_cross_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_cross_id().data(), this->host_cross_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_cross_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        156, this->host_cross_id(), target);
  }

  // repeated .Common.InstrmtLegExecGrp instrmt_leg_exec_grp = 157;
  for (int i = 0; i < this->instrmt_leg_exec_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        157, this->instrmt_leg_exec_grp(i), target);
  }

  // optional sfixed64 interest_at_maturity = 158;
  if (has_interest_at_maturity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(158, this->interest_at_maturity(), target);
  }

  // optional sfixed32 interest_at_maturity_exponent = 159;
  if (has_interest_at_maturity_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(159, this->interest_at_maturity_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.LastLiquidityIndEnum last_liquidity_ind = 160;
  if (has_last_liquidity_ind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      160, this->last_liquidity_ind(), target);
  }

  // optional sfixed64 last_par_px = 161;
  if (has_last_par_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(161, this->last_par_px(), target);
  }

  // optional sfixed32 last_par_px_exponent = 162;
  if (has_last_par_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(162, this->last_par_px_exponent(), target);
  }

  // optional bool last_rpt_requested = 163;
  if (has_last_rpt_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(163, this->last_rpt_requested(), target);
  }

  // optional sfixed64 last_swap_points = 164;
  if (has_last_swap_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(164, this->last_swap_points(), target);
  }

  // optional sfixed32 last_swap_points_exponent = 165;
  if (has_last_swap_points_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(165, this->last_swap_points_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.LotTypeEnum lot_type = 166;
  if (has_lot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      166, this->lot_type(), target);
  }

  // optional bool manual_order_indicator = 167;
  if (has_manual_order_indicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(167, this->manual_order_indicator(), target);
  }

  // optional string mass_status_req_id = 168;
  if (has_mass_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mass_status_req_id().data(), this->mass_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mass_status_req_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        168, this->mass_status_req_id(), target);
  }

  // optional sfixed64 match_increment = 169;
  if (has_match_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(169, this->match_increment(), target);
  }

  // optional sfixed32 match_increment_exponent = 170;
  if (has_match_increment_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(170, this->match_increment_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.MatchTypeEnum match_type = 171;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      171, this->match_type(), target);
  }

  // optional sfixed64 max_price_levels = 172;
  if (has_max_price_levels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(172, this->max_price_levels(), target);
  }

  // repeated .Common.MiscFeesGrp misc_fees_grp = 173;
  for (int i = 0; i < this->misc_fees_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        173, this->misc_fees_grp(i), target);
  }

  // optional string ord_status_req_id = 174;
  if (has_ord_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ord_status_req_id().data(), this->ord_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ord_status_req_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        174, this->ord_status_req_id(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderCategoryEnum order_category = 175;
  if (has_order_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      175, this->order_category(), target);
  }

  // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 176;
  if (has_order_handling_inst_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      176, this->order_handling_inst_source(), target);
  }

  // optional sfixed64 participation_rate = 177;
  if (has_participation_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(177, this->participation_rate(), target);
  }

  // optional sfixed32 participation_rate_exponent = 178;
  if (has_participation_rate_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(178, this->participation_rate_exponent(), target);
  }

  // optional .Common.PegInstructions peg_instructions = 179;
  if (has_peg_instructions()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        179, this->peg_instructions(), target);
  }

  // optional sfixed64 pegged_price = 180;
  if (has_pegged_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(180, this->pegged_price(), target);
  }

  // optional sfixed32 pegged_price_exponent = 181;
  if (has_pegged_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(181, this->pegged_price_exponent(), target);
  }

  // optional sfixed64 pegged_ref_price = 182;
  if (has_pegged_ref_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(182, this->pegged_ref_price(), target);
  }

  // optional sfixed32 pegged_ref_price_exponent = 183;
  if (has_pegged_ref_price_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(183, this->pegged_ref_price_exponent(), target);
  }

  // optional bool pre_trade_anonymity = 184;
  if (has_pre_trade_anonymity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(184, this->pre_trade_anonymity(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 185;
  if (has_price_protection_scope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      185, this->price_protection_scope(), target);
  }

  // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 186;
  if (has_qty_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      186, this->qty_type(), target);
  }

  // optional string quote_resp_id = 187;
  if (has_quote_resp_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quote_resp_id().data(), this->quote_resp_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quote_resp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        187, this->quote_resp_id(), target);
  }

  // optional string received_dept_id = 188;
  if (has_received_dept_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->received_dept_id().data(), this->received_dept_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "received_dept_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        188, this->received_dept_id(), target);
  }

  // optional sfixed64 start_cash = 189;
  if (has_start_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(189, this->start_cash(), target);
  }

  // optional sfixed32 start_cash_exponent = 190;
  if (has_start_cash_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(190, this->start_cash_exponent(), target);
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 191;
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        191, this->strategy_parameters_grp(i), target);
  }

  // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 192;
  if (has_target_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      192, this->target_strategy(), target);
  }

  // optional string target_strategy_parameters = 193;
  if (has_target_strategy_parameters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_strategy_parameters().data(), this->target_strategy_parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_strategy_parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        193, this->target_strategy_parameters(), target);
  }

  // optional double target_strategy_performance = 194;
  if (has_target_strategy_performance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(194, this->target_strategy_performance(), target);
  }

  // optional string time_bracket = 195;
  if (has_time_bracket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time_bracket().data(), this->time_bracket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time_bracket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        195, this->time_bracket(), target);
  }

  // optional sfixed64 tot_num_reports = 196;
  if (has_tot_num_reports()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(196, this->tot_num_reports(), target);
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 197;
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        197, this->trd_reg_timestamps(i), target);
  }

  // optional .Common.TriggeringInstruction triggering_instruction = 198;
  if (has_triggering_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        198, this->triggering_instruction(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 199;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        199, this->und_instrmt_grp(i), target);
  }

  // optional string alloc_id = 200;
  if (has_alloc_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alloc_id().data(), this->alloc_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "alloc_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        200, this->alloc_id(), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 201;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->application_sequence_control(), target);
  }

  // optional sfixed64 dividend_yield = 202;
  if (has_dividend_yield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(202, this->dividend_yield(), target);
  }

  // optional sfixed32 dividend_yield_exponent = 203;
  if (has_dividend_yield_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(203, this->dividend_yield_exponent(), target);
  }

  // repeated .SingleGeneralOrderHandling.FillsGrp fills_grp = 204;
  for (int i = 0; i < this->fills_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        204, this->fills_grp(i), target);
  }

  // optional bool last_fragment = 205;
  if (has_last_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(205, this->last_fragment(), target);
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 206;
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        206, this->pre_alloc_grp(i), target);
  }

  // optional double price_delta = 207;
  if (has_price_delta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(207, this->price_delta(), target);
  }

  // optional double risk_free_rate = 208;
  if (has_risk_free_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(208, this->risk_free_rate(), target);
  }

  // optional double time_to_expiration = 209;
  if (has_time_to_expiration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(209, this->time_to_expiration(), target);
  }

  // optional sfixed64 tot_no_fills = 210;
  if (has_tot_no_fills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(210, this->tot_no_fills(), target);
  }

  // optional string trd_match_id = 211;
  if (has_trd_match_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trd_match_id().data(), this->trd_match_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "trd_match_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        211, this->trd_match_id(), target);
  }

  // optional double volatility = 212;
  if (has_volatility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(212, this->volatility(), target);
  }

  // repeated .Common.RateSource rate_source = 213;
  for (int i = 0; i < this->rate_source_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        213, this->rate_source(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.ExecutionReport)
  return target;
}

int ExecutionReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional sfixed64 avg_px = 2;
    if (has_avg_px()) {
      total_size += 1 + 8;
    }

    // optional string cl_ord_id = 3;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional sfixed64 cum_qty = 4;
    if (has_cum_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 cum_qty_exponent = 5;
    if (has_cum_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string currency = 6;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional string exec_id = 7;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string exec_ref_id = 9;
    if (has_exec_ref_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_ref_id());
    }

    // optional .SingleGeneralOrderHandling.LastCapacityEnum last_capacity = 10;
    if (has_last_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_capacity());
    }

    // optional string last_mkt = 11;
    if (has_last_mkt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_mkt());
    }

    // optional double last_px = 12;
    if (has_last_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 last_qty = 13;
    if (has_last_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 last_qty_exponent = 14;
    if (has_last_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string list_id = 15;
    if (has_list_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_id());
    }

    // optional .SingleGeneralOrderHandling.OrdRejReasonEnum ord_rej_reason = 16;
    if (has_ord_rej_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_rej_reason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .SingleGeneralOrderHandling.OrdStatusEnum ord_status = 17;
    if (has_ord_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_status());
    }

    // optional .SingleGeneralOrderHandling.OrdTypeEnum ord_type = 18;
    if (has_ord_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ord_type());
    }

    // optional string order_id = 19;
    if (has_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional sfixed64 price = 20;
    if (has_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 price_exponent = 21;
    if (has_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 settl_date = 22;
    if (has_settl_date()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.SettlTypeEnum settl_type = 23;
    if (has_settl_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_type());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 24;
    if (has_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Session.StandardHeader standard_header = 25;
    if (has_standard_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 26;
    if (has_standard_trailer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional sfixed64 stop_px = 27;
    if (has_stop_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 stop_px_exponent = 28;
    if (has_stop_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional string text = 29;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SingleGeneralOrderHandling.TimeInForceEnum time_in_force = 30;
    if (has_time_in_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->time_in_force());
    }

    // optional sfixed32 trade_date = 31;
    if (has_trade_date()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 transact_time = 32;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool report_to_exch = 33;
    if (has_report_to_exch()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 expire_time = 34;
    if (has_expire_time()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 net_money = 35;
    if (has_net_money()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 net_money_exponent = 36;
    if (has_net_money_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 settl_curr_amt = 37;
    if (has_settl_curr_amt()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 settl_curr_amt_exponent = 38;
    if (has_settl_curr_amt_exponent()) {
      total_size += 2 + 4;
    }

    // optional string settl_currency = 39;
    if (has_settl_currency()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settl_currency());
    }

    // optional .SingleGeneralOrderHandling.ExecTypeEnum exec_type = 40;
    if (has_exec_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exec_type());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional sfixed64 last_forward_points = 41;
    if (has_last_forward_points()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 last_forward_points_exponent = 42;
    if (has_last_forward_points_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 last_spot_rate = 43;
    if (has_last_spot_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 last_spot_rate_exponent = 44;
    if (has_last_spot_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 leaves_qty = 45;
    if (has_leaves_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 leaves_qty_exponent = 46;
    if (has_leaves_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional string orig_cl_ord_id = 47;
    if (has_orig_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_cl_ord_id());
    }

    // optional string secondary_order_id = 48;
    if (has_secondary_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_order_id());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional double settl_curr_fx_rate = 49;
    if (has_settl_curr_fx_rate()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.SettlCurrFxRateCalcEnum settl_curr_fx_rate_calc = 50;
    if (has_settl_curr_fx_rate_calc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->settl_curr_fx_rate_calc());
    }

    // optional string compliance_id = 51;
    if (has_compliance_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compliance_id());
    }

    // optional sfixed64 day_avg_px = 52;
    if (has_day_avg_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 day_avg_px_exponent = 53;
    if (has_day_avg_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 day_cum_qty = 54;
    if (has_day_cum_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 day_cum_qty_exponent = 55;
    if (has_day_cum_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 day_order_qty = 56;
    if (has_day_order_qty()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional sfixed32 day_order_qty_exponent = 57;
    if (has_day_order_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 effective_time = 58;
    if (has_effective_time()) {
      total_size += 2 + 8;
    }

    // optional bytes encoded_text = 59;
    if (has_encoded_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 60;
    if (has_encoded_text_len()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.ExecRestatementReasonEnum exec_restatement_reason = 61;
    if (has_exec_restatement_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exec_restatement_reason());
    }

    // optional sfixed32 expire_date = 62;
    if (has_expire_date()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.GtBookingInstEnum gt_booking_inst = 63;
    if (has_gt_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gt_booking_inst());
    }

    // optional sfixed64 gross_trade_amt = 64;
    if (has_gross_trade_amt()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional sfixed32 gross_trade_amt_exponent = 65;
    if (has_gross_trade_amt_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.HandlInstEnum handl_inst = 66;
    if (has_handl_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->handl_inst());
    }

    // optional sfixed64 max_floor = 67;
    if (has_max_floor()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 max_floor_exponent = 68;
    if (has_max_floor_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 max_show = 69;
    if (has_max_show()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 max_show_exponent = 70;
    if (has_max_show_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 min_qty = 71;
    if (has_min_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 min_qty_exponent = 72;
    if (has_min_qty_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .SingleGeneralOrderHandling.MultiLegReportingTypeEnum multi_leg_reporting_type = 73;
    if (has_multi_leg_reporting_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->multi_leg_reporting_type());
    }

    // optional sfixed64 order_qty2 = 74;
    if (has_order_qty2()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 order_qty2_exponent = 75;
    if (has_order_qty2_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.PositionEffectEnum position_effect = 76;
    if (has_position_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_effect());
    }

    // optional sfixed32 settl_date2 = 77;
    if (has_settl_date2()) {
      total_size += 2 + 4;
    }

    // optional bool solicited_flag = 78;
    if (has_solicited_flag()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.TradingSessionIdEnum trading_session_id = 79;
    if (has_trading_session_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .SingleGeneralOrderHandling.AccountTypeEnum account_type = 80;
    if (has_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->account_type());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional sfixed64 accrued_interest_amt = 81;
    if (has_accrued_interest_amt()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 accrued_interest_amt_exponent = 82;
    if (has_accrued_interest_amt_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 accrued_interest_rate = 83;
    if (has_accrued_interest_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 accrued_interest_rate_exponent = 84;
    if (has_accrued_interest_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 basis_feature_date = 85;
    if (has_basis_feature_date()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 basis_feature_price = 86;
    if (has_basis_feature_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 basis_feature_price_exponent = 87;
    if (has_basis_feature_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.BookingUnitEnum booking_unit = 88;
    if (has_booking_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_unit());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .SingleGeneralOrderHandling.CancellationRightsEnum cancellation_rights = 89;
    if (has_cancellation_rights()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cancellation_rights());
    }

    // optional .SingleGeneralOrderHandling.CashMarginEnum cash_margin = 90;
    if (has_cash_margin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cash_margin());
    }

    // optional string cl_ord_link_id = 91;
    if (has_cl_ord_link_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional .SingleGeneralOrderHandling.ClearingFeeIndicatorEnum clearing_fee_indicator = 92;
    if (has_clearing_fee_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clearing_fee_indicator());
    }

    // optional .Common.CommissionData commission_data = 93;
    if (has_commission_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commission_data());
    }

    // optional sfixed64 concession = 94;
    if (has_concession()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 concession_exponent = 95;
    if (has_concession_exponent()) {
      total_size += 2 + 4;
    }

    // optional string cross_id = 96;
    if (has_cross_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cross_id());
    }

  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .SingleGeneralOrderHandling.CrossTypeEnum cross_type = 97;
    if (has_cross_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cross_type());
    }

    // optional .SingleGeneralOrderHandling.CustOrderCapacityEnum cust_order_capacity = 98;
    if (has_cust_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_capacity());
    }

    // optional .SingleGeneralOrderHandling.DayBookingInstEnum day_booking_inst = 99;
    if (has_day_booking_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_booking_inst());
    }

    // optional string designation = 100;
    if (has_designation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->designation());
    }

    // optional sfixed32 ex_date = 101;
    if (has_ex_date()) {
      total_size += 2 + 4;
    }

    // optional double exec_price_adjustment = 102;
    if (has_exec_price_adjustment()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.ExecPriceTypeEnum exec_price_type = 103;
    if (has_exec_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exec_price_type());
    }

    // optional sfixed64 exec_valuation_point = 104;
    if (has_exec_valuation_point()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional .Common.Instrument instrument = 105;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional sfixed64 last_forward_points2 = 106;
    if (has_last_forward_points2()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 last_forward_points2_exponent = 107;
    if (has_last_forward_points2_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.MoneyLaunderingStatusEnum money_laundering_status = 108;
    if (has_money_laundering_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->money_laundering_status());
    }

    // optional sfixed64 num_days_interest = 109;
    if (has_num_days_interest()) {
      total_size += 2 + 8;
    }

    // optional .SingleGeneralOrderHandling.OrderCapacityEnum order_capacity = 110;
    if (has_order_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_capacity());
    }

    // optional .Common.OrderQtyData order_qty_data = 111;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional string orig_cross_id = 113;
    if (has_orig_cross_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_cross_id());
    }

    // optional .SingleGeneralOrderHandling.PreallocMethodEnum prealloc_method = 115;
    if (has_prealloc_method()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prealloc_method());
    }

    // optional sfixed64 price_improvement = 116;
    if (has_price_improvement()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 price_improvement_exponent = 117;
    if (has_price_improvement_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 118;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional .SingleGeneralOrderHandling.PriorityIndicatorEnum priority_indicator = 119;
    if (has_priority_indicator()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority_indicator());
    }

    // optional string regist_id = 120;
    if (has_regist_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->regist_id());
    }

  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional string secondary_cl_ord_id = 121;
    if (has_secondary_cl_ord_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional string secondary_exec_id = 122;
    if (has_secondary_exec_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_exec_id());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 123;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional sfixed64 total_takedown = 125;
    if (has_total_takedown()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 total_takedown_exponent = 126;
    if (has_total_takedown_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed32 trade_origination_date = 127;
    if (has_trade_origination_date()) {
      total_size += 2 + 4;
    }

    // optional bool traded_flat_switch = 128;
    if (has_traded_flat_switch()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    // optional .SingleGeneralOrderHandling.TradingSessionSubIdEnum trading_session_sub_id = 129;
    if (has_trading_session_sub_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

    // optional sfixed64 trans_bkd_time = 130;
    if (has_trans_bkd_time()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 underlying_last_px = 131;
    if (has_underlying_last_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_last_px_exponent = 132;
    if (has_underlying_last_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 underlying_last_qty = 133;
    if (has_underlying_last_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 underlying_last_qty_exponent = 134;
    if (has_underlying_last_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional bool working_indicator = 135;
    if (has_working_indicator()) {
      total_size += 2 + 1;
    }

    // optional .Common.YieldData yield_data = 136;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

  }
  if (_has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 137;
    if (has_acct_id_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional bool aggressor_indicator = 138;
    if (has_aggressor_indicator()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.BookingTypeEnum booking_type = 139;
    if (has_booking_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->booking_type());
    }

    // optional sfixed64 calculated_ccy_last_qty = 140;
    if (has_calculated_ccy_last_qty()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 calculated_ccy_last_qty_exponent = 141;
    if (has_calculated_ccy_last_qty_exponent()) {
      total_size += 2 + 4;
    }

    // optional bool copy_msg_indicator = 144;
    if (has_copy_msg_indicator()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    // optional bool cust_directed_order = 145;
    if (has_cust_directed_order()) {
      total_size += 2 + 1;
    }

    // optional .SingleGeneralOrderHandling.CustOrderHandlingInstEnum cust_order_handling_inst = 146;
    if (has_cust_order_handling_inst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cust_order_handling_inst());
    }

    // optional .Common.DiscretionInstructions discretion_instructions = 147;
    if (has_discretion_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discretion_instructions());
    }

    // optional sfixed64 discretion_price = 148;
    if (has_discretion_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 discretion_price_exponent = 149;
    if (has_discretion_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.DisplayInstruction display_instruction = 150;
    if (has_display_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->display_instruction());
    }

    // optional sfixed64 end_accrued_interest_amt = 151;
    if (has_end_accrued_interest_amt()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 end_accrued_interest_amt_exponent = 152;
    if (has_end_accrued_interest_amt_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[152 / 32] & (0xffu << (152 % 32))) {
    // optional sfixed64 end_cash = 153;
    if (has_end_cash()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 end_cash_exponent = 154;
    if (has_end_cash_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.FinancingDetails financing_details = 155;
    if (has_financing_details()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional string host_cross_id = 156;
    if (has_host_cross_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_cross_id());
    }

    // optional sfixed64 interest_at_maturity = 158;
    if (has_interest_at_maturity()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 interest_at_maturity_exponent = 159;
    if (has_interest_at_maturity_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.LastLiquidityIndEnum last_liquidity_ind = 160;
    if (has_last_liquidity_ind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_liquidity_ind());
    }

  }
  if (_has_bits_[160 / 32] & (0xffu << (160 % 32))) {
    // optional sfixed64 last_par_px = 161;
    if (has_last_par_px()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 last_par_px_exponent = 162;
    if (has_last_par_px_exponent()) {
      total_size += 2 + 4;
    }

    // optional bool last_rpt_requested = 163;
    if (has_last_rpt_requested()) {
      total_size += 2 + 1;
    }

    // optional sfixed64 last_swap_points = 164;
    if (has_last_swap_points()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 last_swap_points_exponent = 165;
    if (has_last_swap_points_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.LotTypeEnum lot_type = 166;
    if (has_lot_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lot_type());
    }

    // optional bool manual_order_indicator = 167;
    if (has_manual_order_indicator()) {
      total_size += 2 + 1;
    }

    // optional string mass_status_req_id = 168;
    if (has_mass_status_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mass_status_req_id());
    }

  }
  if (_has_bits_[168 / 32] & (0xffu << (168 % 32))) {
    // optional sfixed64 match_increment = 169;
    if (has_match_increment()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 match_increment_exponent = 170;
    if (has_match_increment_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.MatchTypeEnum match_type = 171;
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional sfixed64 max_price_levels = 172;
    if (has_max_price_levels()) {
      total_size += 2 + 8;
    }

    // optional string ord_status_req_id = 174;
    if (has_ord_status_req_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ord_status_req_id());
    }

    // optional .SingleGeneralOrderHandling.OrderCategoryEnum order_category = 175;
    if (has_order_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_category());
    }

    // optional .SingleGeneralOrderHandling.OrderHandlingInstSourceEnum order_handling_inst_source = 176;
    if (has_order_handling_inst_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->order_handling_inst_source());
    }

  }
  if (_has_bits_[176 / 32] & (0xffu << (176 % 32))) {
    // optional sfixed64 participation_rate = 177;
    if (has_participation_rate()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 participation_rate_exponent = 178;
    if (has_participation_rate_exponent()) {
      total_size += 2 + 4;
    }

    // optional .Common.PegInstructions peg_instructions = 179;
    if (has_peg_instructions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->peg_instructions());
    }

    // optional sfixed64 pegged_price = 180;
    if (has_pegged_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 pegged_price_exponent = 181;
    if (has_pegged_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 pegged_ref_price = 182;
    if (has_pegged_ref_price()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 pegged_ref_price_exponent = 183;
    if (has_pegged_ref_price_exponent()) {
      total_size += 2 + 4;
    }

    // optional bool pre_trade_anonymity = 184;
    if (has_pre_trade_anonymity()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[184 / 32] & (0xffu << (184 % 32))) {
    // optional .SingleGeneralOrderHandling.PriceProtectionScopeEnum price_protection_scope = 185;
    if (has_price_protection_scope()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_protection_scope());
    }

    // optional .SingleGeneralOrderHandling.QtyTypeEnum qty_type = 186;
    if (has_qty_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->qty_type());
    }

    // optional string quote_resp_id = 187;
    if (has_quote_resp_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quote_resp_id());
    }

    // optional string received_dept_id = 188;
    if (has_received_dept_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->received_dept_id());
    }

    // optional sfixed64 start_cash = 189;
    if (has_start_cash()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 start_cash_exponent = 190;
    if (has_start_cash_exponent()) {
      total_size += 2 + 4;
    }

    // optional .SingleGeneralOrderHandling.TargetStrategyEnum target_strategy = 192;
    if (has_target_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target_strategy());
    }

  }
  if (_has_bits_[192 / 32] & (0xffu << (192 % 32))) {
    // optional string target_strategy_parameters = 193;
    if (has_target_strategy_parameters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_strategy_parameters());
    }

    // optional double target_strategy_performance = 194;
    if (has_target_strategy_performance()) {
      total_size += 2 + 8;
    }

    // optional string time_bracket = 195;
    if (has_time_bracket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time_bracket());
    }

    // optional sfixed64 tot_num_reports = 196;
    if (has_tot_num_reports()) {
      total_size += 2 + 8;
    }

    // optional .Common.TriggeringInstruction triggering_instruction = 198;
    if (has_triggering_instruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triggering_instruction());
    }

    // optional string alloc_id = 200;
    if (has_alloc_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alloc_id());
    }

  }
  if (_has_bits_[200 / 32] & (0xffu << (200 % 32))) {
    // optional .Common.ApplicationSequenceControl application_sequence_control = 201;
    if (has_application_sequence_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

    // optional sfixed64 dividend_yield = 202;
    if (has_dividend_yield()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 dividend_yield_exponent = 203;
    if (has_dividend_yield_exponent()) {
      total_size += 2 + 4;
    }

    // optional bool last_fragment = 205;
    if (has_last_fragment()) {
      total_size += 2 + 1;
    }

    // optional double price_delta = 207;
    if (has_price_delta()) {
      total_size += 2 + 8;
    }

    // optional double risk_free_rate = 208;
    if (has_risk_free_rate()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[208 / 32] & (0xffu << (208 % 32))) {
    // optional double time_to_expiration = 209;
    if (has_time_to_expiration()) {
      total_size += 2 + 8;
    }

    // optional sfixed64 tot_no_fills = 210;
    if (has_tot_no_fills()) {
      total_size += 2 + 8;
    }

    // optional string trd_match_id = 211;
    if (has_trd_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trd_match_id());
    }

    // optional double volatility = 212;
    if (has_volatility()) {
      total_size += 2 + 8;
    }

  }
  // repeated .SingleGeneralOrderHandling.ExecInstEnum exec_inst = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->exec_inst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->exec_inst(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exec_inst_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .SingleGeneralOrderHandling.OrderRestrictionsEnum order_restrictions = 112 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->order_restrictions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->order_restrictions(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _order_restrictions_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Common.Parties parties = 114;
  total_size += 2 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.Stipulations stipulations = 124;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.ContAmtGrp cont_amt_grp = 142;
  total_size += 2 * this->cont_amt_grp_size();
  for (int i = 0; i < this->cont_amt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cont_amt_grp(i));
  }

  // repeated .Common.ContraGrp contra_grp = 143;
  total_size += 2 * this->contra_grp_size();
  for (int i = 0; i < this->contra_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contra_grp(i));
  }

  // repeated .Common.InstrmtLegExecGrp instrmt_leg_exec_grp = 157;
  total_size += 2 * this->instrmt_leg_exec_grp_size();
  for (int i = 0; i < this->instrmt_leg_exec_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_exec_grp(i));
  }

  // repeated .Common.MiscFeesGrp misc_fees_grp = 173;
  total_size += 2 * this->misc_fees_grp_size();
  for (int i = 0; i < this->misc_fees_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->misc_fees_grp(i));
  }

  // repeated .Common.StrategyParametersGrp strategy_parameters_grp = 191;
  total_size += 2 * this->strategy_parameters_grp_size();
  for (int i = 0; i < this->strategy_parameters_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strategy_parameters_grp(i));
  }

  // repeated .Common.TrdRegTimestamps trd_reg_timestamps = 197;
  total_size += 2 * this->trd_reg_timestamps_size();
  for (int i = 0; i < this->trd_reg_timestamps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trd_reg_timestamps(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 199;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  // repeated .SingleGeneralOrderHandling.FillsGrp fills_grp = 204;
  total_size += 2 * this->fills_grp_size();
  for (int i = 0; i < this->fills_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fills_grp(i));
  }

  // repeated .Common.PreAllocGrp pre_alloc_grp = 206;
  total_size += 2 * this->pre_alloc_grp_size();
  for (int i = 0; i < this->pre_alloc_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pre_alloc_grp(i));
  }

  // repeated .Common.RateSource rate_source = 213;
  total_size += 2 * this->rate_source_size();
  for (int i = 0; i < this->rate_source_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rate_source(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionReport::MergeFrom(const ExecutionReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  exec_inst_.MergeFrom(from.exec_inst_);
  order_restrictions_.MergeFrom(from.order_restrictions_);
  parties_.MergeFrom(from.parties_);
  stipulations_.MergeFrom(from.stipulations_);
  cont_amt_grp_.MergeFrom(from.cont_amt_grp_);
  contra_grp_.MergeFrom(from.contra_grp_);
  instrmt_leg_exec_grp_.MergeFrom(from.instrmt_leg_exec_grp_);
  misc_fees_grp_.MergeFrom(from.misc_fees_grp_);
  strategy_parameters_grp_.MergeFrom(from.strategy_parameters_grp_);
  trd_reg_timestamps_.MergeFrom(from.trd_reg_timestamps_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  fills_grp_.MergeFrom(from.fills_grp_);
  pre_alloc_grp_.MergeFrom(from.pre_alloc_grp_);
  rate_source_.MergeFrom(from.rate_source_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_avg_px()) {
      set_avg_px(from.avg_px());
    }
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_cum_qty()) {
      set_cum_qty(from.cum_qty());
    }
    if (from.has_cum_qty_exponent()) {
      set_cum_qty_exponent(from.cum_qty_exponent());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exec_ref_id()) {
      set_exec_ref_id(from.exec_ref_id());
    }
    if (from.has_last_capacity()) {
      set_last_capacity(from.last_capacity());
    }
    if (from.has_last_mkt()) {
      set_last_mkt(from.last_mkt());
    }
    if (from.has_last_px()) {
      set_last_px(from.last_px());
    }
    if (from.has_last_qty()) {
      set_last_qty(from.last_qty());
    }
    if (from.has_last_qty_exponent()) {
      set_last_qty_exponent(from.last_qty_exponent());
    }
    if (from.has_list_id()) {
      set_list_id(from.list_id());
    }
    if (from.has_ord_rej_reason()) {
      set_ord_rej_reason(from.ord_rej_reason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ord_status()) {
      set_ord_status(from.ord_status());
    }
    if (from.has_ord_type()) {
      set_ord_type(from.ord_type());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_price_exponent()) {
      set_price_exponent(from.price_exponent());
    }
    if (from.has_settl_date()) {
      set_settl_date(from.settl_date());
    }
    if (from.has_settl_type()) {
      set_settl_type(from.settl_type());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_stop_px()) {
      set_stop_px(from.stop_px());
    }
    if (from.has_stop_px_exponent()) {
      set_stop_px_exponent(from.stop_px_exponent());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_time_in_force()) {
      set_time_in_force(from.time_in_force());
    }
    if (from.has_trade_date()) {
      set_trade_date(from.trade_date());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_report_to_exch()) {
      set_report_to_exch(from.report_to_exch());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_net_money()) {
      set_net_money(from.net_money());
    }
    if (from.has_net_money_exponent()) {
      set_net_money_exponent(from.net_money_exponent());
    }
    if (from.has_settl_curr_amt()) {
      set_settl_curr_amt(from.settl_curr_amt());
    }
    if (from.has_settl_curr_amt_exponent()) {
      set_settl_curr_amt_exponent(from.settl_curr_amt_exponent());
    }
    if (from.has_settl_currency()) {
      set_settl_currency(from.settl_currency());
    }
    if (from.has_exec_type()) {
      set_exec_type(from.exec_type());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_last_forward_points()) {
      set_last_forward_points(from.last_forward_points());
    }
    if (from.has_last_forward_points_exponent()) {
      set_last_forward_points_exponent(from.last_forward_points_exponent());
    }
    if (from.has_last_spot_rate()) {
      set_last_spot_rate(from.last_spot_rate());
    }
    if (from.has_last_spot_rate_exponent()) {
      set_last_spot_rate_exponent(from.last_spot_rate_exponent());
    }
    if (from.has_leaves_qty()) {
      set_leaves_qty(from.leaves_qty());
    }
    if (from.has_leaves_qty_exponent()) {
      set_leaves_qty_exponent(from.leaves_qty_exponent());
    }
    if (from.has_orig_cl_ord_id()) {
      set_orig_cl_ord_id(from.orig_cl_ord_id());
    }
    if (from.has_secondary_order_id()) {
      set_secondary_order_id(from.secondary_order_id());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_settl_curr_fx_rate()) {
      set_settl_curr_fx_rate(from.settl_curr_fx_rate());
    }
    if (from.has_settl_curr_fx_rate_calc()) {
      set_settl_curr_fx_rate_calc(from.settl_curr_fx_rate_calc());
    }
    if (from.has_compliance_id()) {
      set_compliance_id(from.compliance_id());
    }
    if (from.has_day_avg_px()) {
      set_day_avg_px(from.day_avg_px());
    }
    if (from.has_day_avg_px_exponent()) {
      set_day_avg_px_exponent(from.day_avg_px_exponent());
    }
    if (from.has_day_cum_qty()) {
      set_day_cum_qty(from.day_cum_qty());
    }
    if (from.has_day_cum_qty_exponent()) {
      set_day_cum_qty_exponent(from.day_cum_qty_exponent());
    }
    if (from.has_day_order_qty()) {
      set_day_order_qty(from.day_order_qty());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_day_order_qty_exponent()) {
      set_day_order_qty_exponent(from.day_order_qty_exponent());
    }
    if (from.has_effective_time()) {
      set_effective_time(from.effective_time());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_exec_restatement_reason()) {
      set_exec_restatement_reason(from.exec_restatement_reason());
    }
    if (from.has_expire_date()) {
      set_expire_date(from.expire_date());
    }
    if (from.has_gt_booking_inst()) {
      set_gt_booking_inst(from.gt_booking_inst());
    }
    if (from.has_gross_trade_amt()) {
      set_gross_trade_amt(from.gross_trade_amt());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_gross_trade_amt_exponent()) {
      set_gross_trade_amt_exponent(from.gross_trade_amt_exponent());
    }
    if (from.has_handl_inst()) {
      set_handl_inst(from.handl_inst());
    }
    if (from.has_max_floor()) {
      set_max_floor(from.max_floor());
    }
    if (from.has_max_floor_exponent()) {
      set_max_floor_exponent(from.max_floor_exponent());
    }
    if (from.has_max_show()) {
      set_max_show(from.max_show());
    }
    if (from.has_max_show_exponent()) {
      set_max_show_exponent(from.max_show_exponent());
    }
    if (from.has_min_qty()) {
      set_min_qty(from.min_qty());
    }
    if (from.has_min_qty_exponent()) {
      set_min_qty_exponent(from.min_qty_exponent());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_multi_leg_reporting_type()) {
      set_multi_leg_reporting_type(from.multi_leg_reporting_type());
    }
    if (from.has_order_qty2()) {
      set_order_qty2(from.order_qty2());
    }
    if (from.has_order_qty2_exponent()) {
      set_order_qty2_exponent(from.order_qty2_exponent());
    }
    if (from.has_position_effect()) {
      set_position_effect(from.position_effect());
    }
    if (from.has_settl_date2()) {
      set_settl_date2(from.settl_date2());
    }
    if (from.has_solicited_flag()) {
      set_solicited_flag(from.solicited_flag());
    }
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_account_type()) {
      set_account_type(from.account_type());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_accrued_interest_amt()) {
      set_accrued_interest_amt(from.accrued_interest_amt());
    }
    if (from.has_accrued_interest_amt_exponent()) {
      set_accrued_interest_amt_exponent(from.accrued_interest_amt_exponent());
    }
    if (from.has_accrued_interest_rate()) {
      set_accrued_interest_rate(from.accrued_interest_rate());
    }
    if (from.has_accrued_interest_rate_exponent()) {
      set_accrued_interest_rate_exponent(from.accrued_interest_rate_exponent());
    }
    if (from.has_basis_feature_date()) {
      set_basis_feature_date(from.basis_feature_date());
    }
    if (from.has_basis_feature_price()) {
      set_basis_feature_price(from.basis_feature_price());
    }
    if (from.has_basis_feature_price_exponent()) {
      set_basis_feature_price_exponent(from.basis_feature_price_exponent());
    }
    if (from.has_booking_unit()) {
      set_booking_unit(from.booking_unit());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_cancellation_rights()) {
      set_cancellation_rights(from.cancellation_rights());
    }
    if (from.has_cash_margin()) {
      set_cash_margin(from.cash_margin());
    }
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_clearing_fee_indicator()) {
      set_clearing_fee_indicator(from.clearing_fee_indicator());
    }
    if (from.has_commission_data()) {
      mutable_commission_data()->::Common::CommissionData::MergeFrom(from.commission_data());
    }
    if (from.has_concession()) {
      set_concession(from.concession());
    }
    if (from.has_concession_exponent()) {
      set_concession_exponent(from.concession_exponent());
    }
    if (from.has_cross_id()) {
      set_cross_id(from.cross_id());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from.has_cross_type()) {
      set_cross_type(from.cross_type());
    }
    if (from.has_cust_order_capacity()) {
      set_cust_order_capacity(from.cust_order_capacity());
    }
    if (from.has_day_booking_inst()) {
      set_day_booking_inst(from.day_booking_inst());
    }
    if (from.has_designation()) {
      set_designation(from.designation());
    }
    if (from.has_ex_date()) {
      set_ex_date(from.ex_date());
    }
    if (from.has_exec_price_adjustment()) {
      set_exec_price_adjustment(from.exec_price_adjustment());
    }
    if (from.has_exec_price_type()) {
      set_exec_price_type(from.exec_price_type());
    }
    if (from.has_exec_valuation_point()) {
      set_exec_valuation_point(from.exec_valuation_point());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_last_forward_points2()) {
      set_last_forward_points2(from.last_forward_points2());
    }
    if (from.has_last_forward_points2_exponent()) {
      set_last_forward_points2_exponent(from.last_forward_points2_exponent());
    }
    if (from.has_money_laundering_status()) {
      set_money_laundering_status(from.money_laundering_status());
    }
    if (from.has_num_days_interest()) {
      set_num_days_interest(from.num_days_interest());
    }
    if (from.has_order_capacity()) {
      set_order_capacity(from.order_capacity());
    }
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from.has_orig_cross_id()) {
      set_orig_cross_id(from.orig_cross_id());
    }
    if (from.has_prealloc_method()) {
      set_prealloc_method(from.prealloc_method());
    }
    if (from.has_price_improvement()) {
      set_price_improvement(from.price_improvement());
    }
    if (from.has_price_improvement_exponent()) {
      set_price_improvement_exponent(from.price_improvement_exponent());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_priority_indicator()) {
      set_priority_indicator(from.priority_indicator());
    }
    if (from.has_regist_id()) {
      set_regist_id(from.regist_id());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_secondary_exec_id()) {
      set_secondary_exec_id(from.secondary_exec_id());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_total_takedown()) {
      set_total_takedown(from.total_takedown());
    }
    if (from.has_total_takedown_exponent()) {
      set_total_takedown_exponent(from.total_takedown_exponent());
    }
    if (from.has_trade_origination_date()) {
      set_trade_origination_date(from.trade_origination_date());
    }
    if (from.has_traded_flat_switch()) {
      set_traded_flat_switch(from.traded_flat_switch());
    }
  }
  if (from._has_bits_[128 / 32] & (0xffu << (128 % 32))) {
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
    if (from.has_trans_bkd_time()) {
      set_trans_bkd_time(from.trans_bkd_time());
    }
    if (from.has_underlying_last_px()) {
      set_underlying_last_px(from.underlying_last_px());
    }
    if (from.has_underlying_last_px_exponent()) {
      set_underlying_last_px_exponent(from.underlying_last_px_exponent());
    }
    if (from.has_underlying_last_qty()) {
      set_underlying_last_qty(from.underlying_last_qty());
    }
    if (from.has_underlying_last_qty_exponent()) {
      set_underlying_last_qty_exponent(from.underlying_last_qty_exponent());
    }
    if (from.has_working_indicator()) {
      set_working_indicator(from.working_indicator());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
  }
  if (from._has_bits_[136 / 32] & (0xffu << (136 % 32))) {
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_aggressor_indicator()) {
      set_aggressor_indicator(from.aggressor_indicator());
    }
    if (from.has_booking_type()) {
      set_booking_type(from.booking_type());
    }
    if (from.has_calculated_ccy_last_qty()) {
      set_calculated_ccy_last_qty(from.calculated_ccy_last_qty());
    }
    if (from.has_calculated_ccy_last_qty_exponent()) {
      set_calculated_ccy_last_qty_exponent(from.calculated_ccy_last_qty_exponent());
    }
    if (from.has_copy_msg_indicator()) {
      set_copy_msg_indicator(from.copy_msg_indicator());
    }
  }
  if (from._has_bits_[144 / 32] & (0xffu << (144 % 32))) {
    if (from.has_cust_directed_order()) {
      set_cust_directed_order(from.cust_directed_order());
    }
    if (from.has_cust_order_handling_inst()) {
      set_cust_order_handling_inst(from.cust_order_handling_inst());
    }
    if (from.has_discretion_instructions()) {
      mutable_discretion_instructions()->::Common::DiscretionInstructions::MergeFrom(from.discretion_instructions());
    }
    if (from.has_discretion_price()) {
      set_discretion_price(from.discretion_price());
    }
    if (from.has_discretion_price_exponent()) {
      set_discretion_price_exponent(from.discretion_price_exponent());
    }
    if (from.has_display_instruction()) {
      mutable_display_instruction()->::Common::DisplayInstruction::MergeFrom(from.display_instruction());
    }
    if (from.has_end_accrued_interest_amt()) {
      set_end_accrued_interest_amt(from.end_accrued_interest_amt());
    }
    if (from.has_end_accrued_interest_amt_exponent()) {
      set_end_accrued_interest_amt_exponent(from.end_accrued_interest_amt_exponent());
    }
  }
  if (from._has_bits_[152 / 32] & (0xffu << (152 % 32))) {
    if (from.has_end_cash()) {
      set_end_cash(from.end_cash());
    }
    if (from.has_end_cash_exponent()) {
      set_end_cash_exponent(from.end_cash_exponent());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_host_cross_id()) {
      set_host_cross_id(from.host_cross_id());
    }
    if (from.has_interest_at_maturity()) {
      set_interest_at_maturity(from.interest_at_maturity());
    }
    if (from.has_interest_at_maturity_exponent()) {
      set_interest_at_maturity_exponent(from.interest_at_maturity_exponent());
    }
    if (from.has_last_liquidity_ind()) {
      set_last_liquidity_ind(from.last_liquidity_ind());
    }
  }
  if (from._has_bits_[160 / 32] & (0xffu << (160 % 32))) {
    if (from.has_last_par_px()) {
      set_last_par_px(from.last_par_px());
    }
    if (from.has_last_par_px_exponent()) {
      set_last_par_px_exponent(from.last_par_px_exponent());
    }
    if (from.has_last_rpt_requested()) {
      set_last_rpt_requested(from.last_rpt_requested());
    }
    if (from.has_last_swap_points()) {
      set_last_swap_points(from.last_swap_points());
    }
    if (from.has_last_swap_points_exponent()) {
      set_last_swap_points_exponent(from.last_swap_points_exponent());
    }
    if (from.has_lot_type()) {
      set_lot_type(from.lot_type());
    }
    if (from.has_manual_order_indicator()) {
      set_manual_order_indicator(from.manual_order_indicator());
    }
    if (from.has_mass_status_req_id()) {
      set_mass_status_req_id(from.mass_status_req_id());
    }
  }
  if (from._has_bits_[168 / 32] & (0xffu << (168 % 32))) {
    if (from.has_match_increment()) {
      set_match_increment(from.match_increment());
    }
    if (from.has_match_increment_exponent()) {
      set_match_increment_exponent(from.match_increment_exponent());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_max_price_levels()) {
      set_max_price_levels(from.max_price_levels());
    }
    if (from.has_ord_status_req_id()) {
      set_ord_status_req_id(from.ord_status_req_id());
    }
    if (from.has_order_category()) {
      set_order_category(from.order_category());
    }
    if (from.has_order_handling_inst_source()) {
      set_order_handling_inst_source(from.order_handling_inst_source());
    }
  }
  if (from._has_bits_[176 / 32] & (0xffu << (176 % 32))) {
    if (from.has_participation_rate()) {
      set_participation_rate(from.participation_rate());
    }
    if (from.has_participation_rate_exponent()) {
      set_participation_rate_exponent(from.participation_rate_exponent());
    }
    if (from.has_peg_instructions()) {
      mutable_peg_instructions()->::Common::PegInstructions::MergeFrom(from.peg_instructions());
    }
    if (from.has_pegged_price()) {
      set_pegged_price(from.pegged_price());
    }
    if (from.has_pegged_price_exponent()) {
      set_pegged_price_exponent(from.pegged_price_exponent());
    }
    if (from.has_pegged_ref_price()) {
      set_pegged_ref_price(from.pegged_ref_price());
    }
    if (from.has_pegged_ref_price_exponent()) {
      set_pegged_ref_price_exponent(from.pegged_ref_price_exponent());
    }
    if (from.has_pre_trade_anonymity()) {
      set_pre_trade_anonymity(from.pre_trade_anonymity());
    }
  }
  if (from._has_bits_[184 / 32] & (0xffu << (184 % 32))) {
    if (from.has_price_protection_scope()) {
      set_price_protection_scope(from.price_protection_scope());
    }
    if (from.has_qty_type()) {
      set_qty_type(from.qty_type());
    }
    if (from.has_quote_resp_id()) {
      set_quote_resp_id(from.quote_resp_id());
    }
    if (from.has_received_dept_id()) {
      set_received_dept_id(from.received_dept_id());
    }
    if (from.has_start_cash()) {
      set_start_cash(from.start_cash());
    }
    if (from.has_start_cash_exponent()) {
      set_start_cash_exponent(from.start_cash_exponent());
    }
    if (from.has_target_strategy()) {
      set_target_strategy(from.target_strategy());
    }
  }
  if (from._has_bits_[192 / 32] & (0xffu << (192 % 32))) {
    if (from.has_target_strategy_parameters()) {
      set_target_strategy_parameters(from.target_strategy_parameters());
    }
    if (from.has_target_strategy_performance()) {
      set_target_strategy_performance(from.target_strategy_performance());
    }
    if (from.has_time_bracket()) {
      set_time_bracket(from.time_bracket());
    }
    if (from.has_tot_num_reports()) {
      set_tot_num_reports(from.tot_num_reports());
    }
    if (from.has_triggering_instruction()) {
      mutable_triggering_instruction()->::Common::TriggeringInstruction::MergeFrom(from.triggering_instruction());
    }
    if (from.has_alloc_id()) {
      set_alloc_id(from.alloc_id());
    }
  }
  if (from._has_bits_[200 / 32] & (0xffu << (200 % 32))) {
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
    if (from.has_dividend_yield()) {
      set_dividend_yield(from.dividend_yield());
    }
    if (from.has_dividend_yield_exponent()) {
      set_dividend_yield_exponent(from.dividend_yield_exponent());
    }
    if (from.has_last_fragment()) {
      set_last_fragment(from.last_fragment());
    }
    if (from.has_price_delta()) {
      set_price_delta(from.price_delta());
    }
    if (from.has_risk_free_rate()) {
      set_risk_free_rate(from.risk_free_rate());
    }
  }
  if (from._has_bits_[208 / 32] & (0xffu << (208 % 32))) {
    if (from.has_time_to_expiration()) {
      set_time_to_expiration(from.time_to_expiration());
    }
    if (from.has_tot_no_fills()) {
      set_tot_no_fills(from.tot_no_fills());
    }
    if (from.has_trd_match_id()) {
      set_trd_match_id(from.trd_match_id());
    }
    if (from.has_volatility()) {
      set_volatility(from.volatility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionReport::CopyFrom(const ExecutionReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionReport::IsInitialized() const {

  return true;
}

void ExecutionReport::Swap(ExecutionReport* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(avg_px_, other->avg_px_);
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(cum_qty_, other->cum_qty_);
    std::swap(cum_qty_exponent_, other->cum_qty_exponent_);
    std::swap(currency_, other->currency_);
    std::swap(exec_id_, other->exec_id_);
    exec_inst_.Swap(&other->exec_inst_);
    std::swap(exec_ref_id_, other->exec_ref_id_);
    std::swap(last_capacity_, other->last_capacity_);
    std::swap(last_mkt_, other->last_mkt_);
    std::swap(last_px_, other->last_px_);
    std::swap(last_qty_, other->last_qty_);
    std::swap(last_qty_exponent_, other->last_qty_exponent_);
    std::swap(list_id_, other->list_id_);
    std::swap(ord_rej_reason_, other->ord_rej_reason_);
    std::swap(ord_status_, other->ord_status_);
    std::swap(ord_type_, other->ord_type_);
    std::swap(order_id_, other->order_id_);
    std::swap(price_, other->price_);
    std::swap(price_exponent_, other->price_exponent_);
    std::swap(settl_date_, other->settl_date_);
    std::swap(settl_type_, other->settl_type_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(stop_px_, other->stop_px_);
    std::swap(stop_px_exponent_, other->stop_px_exponent_);
    std::swap(text_, other->text_);
    std::swap(time_in_force_, other->time_in_force_);
    std::swap(trade_date_, other->trade_date_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(report_to_exch_, other->report_to_exch_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(net_money_, other->net_money_);
    std::swap(net_money_exponent_, other->net_money_exponent_);
    std::swap(settl_curr_amt_, other->settl_curr_amt_);
    std::swap(settl_curr_amt_exponent_, other->settl_curr_amt_exponent_);
    std::swap(settl_currency_, other->settl_currency_);
    std::swap(exec_type_, other->exec_type_);
    std::swap(last_forward_points_, other->last_forward_points_);
    std::swap(last_forward_points_exponent_, other->last_forward_points_exponent_);
    std::swap(last_spot_rate_, other->last_spot_rate_);
    std::swap(last_spot_rate_exponent_, other->last_spot_rate_exponent_);
    std::swap(leaves_qty_, other->leaves_qty_);
    std::swap(leaves_qty_exponent_, other->leaves_qty_exponent_);
    std::swap(orig_cl_ord_id_, other->orig_cl_ord_id_);
    std::swap(secondary_order_id_, other->secondary_order_id_);
    std::swap(settl_curr_fx_rate_, other->settl_curr_fx_rate_);
    std::swap(settl_curr_fx_rate_calc_, other->settl_curr_fx_rate_calc_);
    std::swap(compliance_id_, other->compliance_id_);
    std::swap(day_avg_px_, other->day_avg_px_);
    std::swap(day_avg_px_exponent_, other->day_avg_px_exponent_);
    std::swap(day_cum_qty_, other->day_cum_qty_);
    std::swap(day_cum_qty_exponent_, other->day_cum_qty_exponent_);
    std::swap(day_order_qty_, other->day_order_qty_);
    std::swap(day_order_qty_exponent_, other->day_order_qty_exponent_);
    std::swap(effective_time_, other->effective_time_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(exec_restatement_reason_, other->exec_restatement_reason_);
    std::swap(expire_date_, other->expire_date_);
    std::swap(gt_booking_inst_, other->gt_booking_inst_);
    std::swap(gross_trade_amt_, other->gross_trade_amt_);
    std::swap(gross_trade_amt_exponent_, other->gross_trade_amt_exponent_);
    std::swap(handl_inst_, other->handl_inst_);
    std::swap(max_floor_, other->max_floor_);
    std::swap(max_floor_exponent_, other->max_floor_exponent_);
    std::swap(max_show_, other->max_show_);
    std::swap(max_show_exponent_, other->max_show_exponent_);
    std::swap(min_qty_, other->min_qty_);
    std::swap(min_qty_exponent_, other->min_qty_exponent_);
    std::swap(multi_leg_reporting_type_, other->multi_leg_reporting_type_);
    std::swap(order_qty2_, other->order_qty2_);
    std::swap(order_qty2_exponent_, other->order_qty2_exponent_);
    std::swap(position_effect_, other->position_effect_);
    std::swap(settl_date2_, other->settl_date2_);
    std::swap(solicited_flag_, other->solicited_flag_);
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(account_type_, other->account_type_);
    std::swap(accrued_interest_amt_, other->accrued_interest_amt_);
    std::swap(accrued_interest_amt_exponent_, other->accrued_interest_amt_exponent_);
    std::swap(accrued_interest_rate_, other->accrued_interest_rate_);
    std::swap(accrued_interest_rate_exponent_, other->accrued_interest_rate_exponent_);
    std::swap(basis_feature_date_, other->basis_feature_date_);
    std::swap(basis_feature_price_, other->basis_feature_price_);
    std::swap(basis_feature_price_exponent_, other->basis_feature_price_exponent_);
    std::swap(booking_unit_, other->booking_unit_);
    std::swap(cancellation_rights_, other->cancellation_rights_);
    std::swap(cash_margin_, other->cash_margin_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(clearing_fee_indicator_, other->clearing_fee_indicator_);
    std::swap(commission_data_, other->commission_data_);
    std::swap(concession_, other->concession_);
    std::swap(concession_exponent_, other->concession_exponent_);
    std::swap(cross_id_, other->cross_id_);
    std::swap(cross_type_, other->cross_type_);
    std::swap(cust_order_capacity_, other->cust_order_capacity_);
    std::swap(day_booking_inst_, other->day_booking_inst_);
    std::swap(designation_, other->designation_);
    std::swap(ex_date_, other->ex_date_);
    std::swap(exec_price_adjustment_, other->exec_price_adjustment_);
    std::swap(exec_price_type_, other->exec_price_type_);
    std::swap(exec_valuation_point_, other->exec_valuation_point_);
    std::swap(instrument_, other->instrument_);
    std::swap(last_forward_points2_, other->last_forward_points2_);
    std::swap(last_forward_points2_exponent_, other->last_forward_points2_exponent_);
    std::swap(money_laundering_status_, other->money_laundering_status_);
    std::swap(num_days_interest_, other->num_days_interest_);
    std::swap(order_capacity_, other->order_capacity_);
    std::swap(order_qty_data_, other->order_qty_data_);
    order_restrictions_.Swap(&other->order_restrictions_);
    std::swap(orig_cross_id_, other->orig_cross_id_);
    parties_.Swap(&other->parties_);
    std::swap(prealloc_method_, other->prealloc_method_);
    std::swap(price_improvement_, other->price_improvement_);
    std::swap(price_improvement_exponent_, other->price_improvement_exponent_);
    std::swap(price_type_, other->price_type_);
    std::swap(priority_indicator_, other->priority_indicator_);
    std::swap(regist_id_, other->regist_id_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(secondary_exec_id_, other->secondary_exec_id_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(total_takedown_, other->total_takedown_);
    std::swap(total_takedown_exponent_, other->total_takedown_exponent_);
    std::swap(trade_origination_date_, other->trade_origination_date_);
    std::swap(traded_flat_switch_, other->traded_flat_switch_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(trans_bkd_time_, other->trans_bkd_time_);
    std::swap(underlying_last_px_, other->underlying_last_px_);
    std::swap(underlying_last_px_exponent_, other->underlying_last_px_exponent_);
    std::swap(underlying_last_qty_, other->underlying_last_qty_);
    std::swap(underlying_last_qty_exponent_, other->underlying_last_qty_exponent_);
    std::swap(working_indicator_, other->working_indicator_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(aggressor_indicator_, other->aggressor_indicator_);
    std::swap(booking_type_, other->booking_type_);
    std::swap(calculated_ccy_last_qty_, other->calculated_ccy_last_qty_);
    std::swap(calculated_ccy_last_qty_exponent_, other->calculated_ccy_last_qty_exponent_);
    cont_amt_grp_.Swap(&other->cont_amt_grp_);
    contra_grp_.Swap(&other->contra_grp_);
    std::swap(copy_msg_indicator_, other->copy_msg_indicator_);
    std::swap(cust_directed_order_, other->cust_directed_order_);
    std::swap(cust_order_handling_inst_, other->cust_order_handling_inst_);
    std::swap(discretion_instructions_, other->discretion_instructions_);
    std::swap(discretion_price_, other->discretion_price_);
    std::swap(discretion_price_exponent_, other->discretion_price_exponent_);
    std::swap(display_instruction_, other->display_instruction_);
    std::swap(end_accrued_interest_amt_, other->end_accrued_interest_amt_);
    std::swap(end_accrued_interest_amt_exponent_, other->end_accrued_interest_amt_exponent_);
    std::swap(end_cash_, other->end_cash_);
    std::swap(end_cash_exponent_, other->end_cash_exponent_);
    std::swap(financing_details_, other->financing_details_);
    std::swap(host_cross_id_, other->host_cross_id_);
    instrmt_leg_exec_grp_.Swap(&other->instrmt_leg_exec_grp_);
    std::swap(interest_at_maturity_, other->interest_at_maturity_);
    std::swap(interest_at_maturity_exponent_, other->interest_at_maturity_exponent_);
    std::swap(last_liquidity_ind_, other->last_liquidity_ind_);
    std::swap(last_par_px_, other->last_par_px_);
    std::swap(last_par_px_exponent_, other->last_par_px_exponent_);
    std::swap(last_rpt_requested_, other->last_rpt_requested_);
    std::swap(last_swap_points_, other->last_swap_points_);
    std::swap(last_swap_points_exponent_, other->last_swap_points_exponent_);
    std::swap(lot_type_, other->lot_type_);
    std::swap(manual_order_indicator_, other->manual_order_indicator_);
    std::swap(mass_status_req_id_, other->mass_status_req_id_);
    std::swap(match_increment_, other->match_increment_);
    std::swap(match_increment_exponent_, other->match_increment_exponent_);
    std::swap(match_type_, other->match_type_);
    std::swap(max_price_levels_, other->max_price_levels_);
    misc_fees_grp_.Swap(&other->misc_fees_grp_);
    std::swap(ord_status_req_id_, other->ord_status_req_id_);
    std::swap(order_category_, other->order_category_);
    std::swap(order_handling_inst_source_, other->order_handling_inst_source_);
    std::swap(participation_rate_, other->participation_rate_);
    std::swap(participation_rate_exponent_, other->participation_rate_exponent_);
    std::swap(peg_instructions_, other->peg_instructions_);
    std::swap(pegged_price_, other->pegged_price_);
    std::swap(pegged_price_exponent_, other->pegged_price_exponent_);
    std::swap(pegged_ref_price_, other->pegged_ref_price_);
    std::swap(pegged_ref_price_exponent_, other->pegged_ref_price_exponent_);
    std::swap(pre_trade_anonymity_, other->pre_trade_anonymity_);
    std::swap(price_protection_scope_, other->price_protection_scope_);
    std::swap(qty_type_, other->qty_type_);
    std::swap(quote_resp_id_, other->quote_resp_id_);
    std::swap(received_dept_id_, other->received_dept_id_);
    std::swap(start_cash_, other->start_cash_);
    std::swap(start_cash_exponent_, other->start_cash_exponent_);
    strategy_parameters_grp_.Swap(&other->strategy_parameters_grp_);
    std::swap(target_strategy_, other->target_strategy_);
    std::swap(target_strategy_parameters_, other->target_strategy_parameters_);
    std::swap(target_strategy_performance_, other->target_strategy_performance_);
    std::swap(time_bracket_, other->time_bracket_);
    std::swap(tot_num_reports_, other->tot_num_reports_);
    trd_reg_timestamps_.Swap(&other->trd_reg_timestamps_);
    std::swap(triggering_instruction_, other->triggering_instruction_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(alloc_id_, other->alloc_id_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    std::swap(dividend_yield_, other->dividend_yield_);
    std::swap(dividend_yield_exponent_, other->dividend_yield_exponent_);
    fills_grp_.Swap(&other->fills_grp_);
    std::swap(last_fragment_, other->last_fragment_);
    pre_alloc_grp_.Swap(&other->pre_alloc_grp_);
    std::swap(price_delta_, other->price_delta_);
    std::swap(risk_free_rate_, other->risk_free_rate_);
    std::swap(time_to_expiration_, other->time_to_expiration_);
    std::swap(tot_no_fills_, other->tot_no_fills_);
    std::swap(trd_match_id_, other->trd_match_id_);
    std::swap(volatility_, other->volatility_);
    rate_source_.Swap(&other->rate_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    std::swap(_has_bits_[4], other->_has_bits_[4]);
    std::swap(_has_bits_[5], other->_has_bits_[5]);
    std::swap(_has_bits_[6], other->_has_bits_[6]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionReport_descriptor_;
  metadata.reflection = ExecutionReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderStatusRequest::kClOrdIdFieldNumber;
const int OrderStatusRequest::kOrderIdFieldNumber;
const int OrderStatusRequest::kSideFieldNumber;
const int OrderStatusRequest::kStandardHeaderFieldNumber;
const int OrderStatusRequest::kStandardTrailerFieldNumber;
const int OrderStatusRequest::kAccountFieldNumber;
const int OrderStatusRequest::kClOrdLinkIdFieldNumber;
const int OrderStatusRequest::kInstrumentFieldNumber;
const int OrderStatusRequest::kPartiesFieldNumber;
const int OrderStatusRequest::kSecondaryClOrdIdFieldNumber;
const int OrderStatusRequest::kAcctIdSourceFieldNumber;
const int OrderStatusRequest::kFinancingDetailsFieldNumber;
const int OrderStatusRequest::kOrdStatusReqIdFieldNumber;
const int OrderStatusRequest::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

OrderStatusRequest::OrderStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.OrderStatusRequest)
}

void OrderStatusRequest::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
}

OrderStatusRequest::OrderStatusRequest(const OrderStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.OrderStatusRequest)
}

void OrderStatusRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cl_ord_link_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_ = NULL;
  secondary_cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acct_id_source_ = 0;
  financing_details_ = NULL;
  ord_status_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderStatusRequest::~OrderStatusRequest() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.OrderStatusRequest)
  SharedDtor();
}

void OrderStatusRequest::SharedDtor() {
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_;
  }
  if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_link_id_;
  }
  if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_cl_ord_id_;
  }
  if (ord_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ord_status_req_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete financing_details_;
  }
}

void OrderStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderStatusRequest_descriptor_;
}

const OrderStatusRequest& OrderStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

OrderStatusRequest* OrderStatusRequest::default_instance_ = NULL;

OrderStatusRequest* OrderStatusRequest::New() const {
  return new OrderStatusRequest;
}

void OrderStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    side_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_->clear();
      }
    }
    if (has_cl_ord_link_id()) {
      if (cl_ord_link_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_link_id_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 7680) {
    if (has_secondary_cl_ord_id()) {
      if (secondary_cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_cl_ord_id_->clear();
      }
    }
    acct_id_source_ = 0;
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    if (has_ord_status_req_id()) {
      if (ord_status_req_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ord_status_req_id_->clear();
      }
    }
  }
  parties_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.OrderStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cl_ord_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_order_id;
        break;
      }

      // optional string order_id = 2;
      case 2: {
        if (tag == 18) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 3;
      case 3: {
        if (tag == 24) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 4;
      case 4: {
        if (tag == 34) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 5;
      case 5: {
        if (tag == 42) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_account;
        break;
      }

      // optional string account = 6;
      case 6: {
        if (tag == 50) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cl_ord_link_id;
        break;
      }

      // optional string cl_ord_link_id = 7;
      case 7: {
        if (tag == 58) {
         parse_cl_ord_link_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_link_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_link_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 8;
      case 8: {
        if (tag == 66) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_parties;
        break;
      }

      // repeated .Common.Parties parties = 9;
      case 9: {
        if (tag == 74) {
         parse_parties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_parties;
        if (input->ExpectTag(82)) goto parse_secondary_cl_ord_id;
        break;
      }

      // optional string secondary_cl_ord_id = 10;
      case 10: {
        if (tag == 82) {
         parse_secondary_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_acct_id_source;
        break;
      }

      // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 11;
      case 11: {
        if (tag == 88) {
         parse_acct_id_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::AcctIdSourceEnum_IsValid(value)) {
            set_acct_id_source(static_cast< ::SingleGeneralOrderHandling::AcctIdSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 12;
      case 12: {
        if (tag == 98) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ord_status_req_id;
        break;
      }

      // optional string ord_status_req_id = 13;
      case 13: {
        if (tag == 106) {
         parse_ord_status_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ord_status_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ord_status_req_id().data(), this->ord_status_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ord_status_req_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 14;
      case 14: {
        if (tag == 114) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.OrderStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.OrderStatusRequest)
  return false;
#undef DO_
}

void OrderStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.OrderStatusRequest)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cl_ord_id(), output);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->order_id(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 4;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 5;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->standard_trailer(), output);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->account(), output);
  }

  // optional string cl_ord_link_id = 7;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->cl_ord_link_id(), output);
  }

  // optional .Common.Instrument instrument = 8;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->instrument(), output);
  }

  // repeated .Common.Parties parties = 9;
  for (int i = 0; i < this->parties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->parties(i), output);
  }

  // optional string secondary_cl_ord_id = 10;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->secondary_cl_ord_id(), output);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 11;
  if (has_acct_id_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->acct_id_source(), output);
  }

  // optional .Common.FinancingDetails financing_details = 12;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->financing_details(), output);
  }

  // optional string ord_status_req_id = 13;
  if (has_ord_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ord_status_req_id().data(), this->ord_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ord_status_req_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->ord_status_req_id(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 14;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.OrderStatusRequest)
}

::google::protobuf::uint8* OrderStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.OrderStatusRequest)
  // optional string cl_ord_id = 1;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cl_ord_id(), target);
  }

  // optional string order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order_id(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 3;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 4;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 5;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->standard_trailer(), target);
  }

  // optional string account = 6;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->account(), target);
  }

  // optional string cl_ord_link_id = 7;
  if (has_cl_ord_link_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_link_id().data(), this->cl_ord_link_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_link_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->cl_ord_link_id(), target);
  }

  // optional .Common.Instrument instrument = 8;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->instrument(), target);
  }

  // repeated .Common.Parties parties = 9;
  for (int i = 0; i < this->parties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->parties(i), target);
  }

  // optional string secondary_cl_ord_id = 10;
  if (has_secondary_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_cl_ord_id().data(), this->secondary_cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->secondary_cl_ord_id(), target);
  }

  // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 11;
  if (has_acct_id_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->acct_id_source(), target);
  }

  // optional .Common.FinancingDetails financing_details = 12;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->financing_details(), target);
  }

  // optional string ord_status_req_id = 13;
  if (has_ord_status_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ord_status_req_id().data(), this->ord_status_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ord_status_req_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->ord_status_req_id(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 14;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.OrderStatusRequest)
  return target;
}

int OrderStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cl_ord_id = 1;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional string order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 4;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 5;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string account = 6;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string cl_ord_link_id = 7;
    if (has_cl_ord_link_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_link_id());
    }

    // optional .Common.Instrument instrument = 8;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string secondary_cl_ord_id = 10;
    if (has_secondary_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_cl_ord_id());
    }

    // optional .SingleGeneralOrderHandling.AcctIdSourceEnum acct_id_source = 11;
    if (has_acct_id_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->acct_id_source());
    }

    // optional .Common.FinancingDetails financing_details = 12;
    if (has_financing_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional string ord_status_req_id = 13;
    if (has_ord_status_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ord_status_req_id());
    }

  }
  // repeated .Common.Parties parties = 9;
  total_size += 1 * this->parties_size();
  for (int i = 0; i < this->parties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parties(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 14;
  total_size += 1 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderStatusRequest::MergeFrom(const OrderStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  parties_.MergeFrom(from.parties_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_cl_ord_link_id()) {
      set_cl_ord_link_id(from.cl_ord_link_id());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_secondary_cl_ord_id()) {
      set_secondary_cl_ord_id(from.secondary_cl_ord_id());
    }
    if (from.has_acct_id_source()) {
      set_acct_id_source(from.acct_id_source());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_ord_status_req_id()) {
      set_ord_status_req_id(from.ord_status_req_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderStatusRequest::CopyFrom(const OrderStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderStatusRequest::IsInitialized() const {

  return true;
}

void OrderStatusRequest::Swap(OrderStatusRequest* other) {
  if (other != this) {
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(account_, other->account_);
    std::swap(cl_ord_link_id_, other->cl_ord_link_id_);
    std::swap(instrument_, other->instrument_);
    parties_.Swap(&other->parties_);
    std::swap(secondary_cl_ord_id_, other->secondary_cl_ord_id_);
    std::swap(acct_id_source_, other->acct_id_source_);
    std::swap(financing_details_, other->financing_details_);
    std::swap(ord_status_req_id_, other->ord_status_req_id_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderStatusRequest_descriptor_;
  metadata.reflection = OrderStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionAcknowledgement::kAvgPxFieldNumber;
const int ExecutionAcknowledgement::kClOrdIdFieldNumber;
const int ExecutionAcknowledgement::kCumQtyFieldNumber;
const int ExecutionAcknowledgement::kCumQtyExponentFieldNumber;
const int ExecutionAcknowledgement::kDkreasonFieldNumber;
const int ExecutionAcknowledgement::kEncodedTextFieldNumber;
const int ExecutionAcknowledgement::kEncodedTextLenFieldNumber;
const int ExecutionAcknowledgement::kExecAckStatusFieldNumber;
const int ExecutionAcknowledgement::kExecIdFieldNumber;
const int ExecutionAcknowledgement::kInstrmtLegGrpFieldNumber;
const int ExecutionAcknowledgement::kInstrumentFieldNumber;
const int ExecutionAcknowledgement::kLastParPxFieldNumber;
const int ExecutionAcknowledgement::kLastParPxExponentFieldNumber;
const int ExecutionAcknowledgement::kLastPxFieldNumber;
const int ExecutionAcknowledgement::kLastQtyFieldNumber;
const int ExecutionAcknowledgement::kLastQtyExponentFieldNumber;
const int ExecutionAcknowledgement::kOrderIdFieldNumber;
const int ExecutionAcknowledgement::kOrderQtyDataFieldNumber;
const int ExecutionAcknowledgement::kPriceTypeFieldNumber;
const int ExecutionAcknowledgement::kSecondaryOrderIdFieldNumber;
const int ExecutionAcknowledgement::kSideFieldNumber;
const int ExecutionAcknowledgement::kStandardHeaderFieldNumber;
const int ExecutionAcknowledgement::kStandardTrailerFieldNumber;
const int ExecutionAcknowledgement::kTextFieldNumber;
const int ExecutionAcknowledgement::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

ExecutionAcknowledgement::ExecutionAcknowledgement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.ExecutionAcknowledgement)
}

void ExecutionAcknowledgement::InitAsDefaultInstance() {
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
}

ExecutionAcknowledgement::ExecutionAcknowledgement(const ExecutionAcknowledgement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.ExecutionAcknowledgement)
}

void ExecutionAcknowledgement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avg_px_ = GOOGLE_LONGLONG(0);
  cl_ord_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cum_qty_ = GOOGLE_LONGLONG(0);
  cum_qty_exponent_ = 0;
  dkreason_ = 0;
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  exec_ack_status_ = 0;
  exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instrument_ = NULL;
  last_par_px_ = GOOGLE_LONGLONG(0);
  last_par_px_exponent_ = 0;
  last_px_ = 0;
  last_qty_ = GOOGLE_LONGLONG(0);
  last_qty_exponent_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_qty_data_ = NULL;
  price_type_ = 0;
  secondary_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionAcknowledgement::~ExecutionAcknowledgement() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  SharedDtor();
}

void ExecutionAcknowledgement::SharedDtor() {
  if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cl_ord_id_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exec_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_order_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
    delete instrument_;
    delete order_qty_data_;
    delete standard_header_;
    delete standard_trailer_;
  }
}

void ExecutionAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionAcknowledgement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionAcknowledgement_descriptor_;
}

const ExecutionAcknowledgement& ExecutionAcknowledgement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

ExecutionAcknowledgement* ExecutionAcknowledgement::default_instance_ = NULL;

ExecutionAcknowledgement* ExecutionAcknowledgement::New() const {
  return new ExecutionAcknowledgement;
}

void ExecutionAcknowledgement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecutionAcknowledgement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cum_qty_, dkreason_);
    ZR_(encoded_text_len_, exec_ack_status_);
    avg_px_ = GOOGLE_LONGLONG(0);
    if (has_cl_ord_id()) {
      if (cl_ord_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cl_ord_id_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(last_par_px_, last_qty_);
    if (has_exec_id()) {
      if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exec_id_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(price_type_, side_);
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
    if (has_secondary_order_id()) {
      if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_order_id_->clear();
      }
    }
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 avg_px = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &avg_px_)));
          set_has_avg_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cl_ord_id;
        break;
      }

      // optional string cl_ord_id = 2;
      case 2: {
        if (tag == 18) {
         parse_cl_ord_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cl_ord_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cl_ord_id().data(), this->cl_ord_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cl_ord_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cum_qty;
        break;
      }

      // optional sfixed64 cum_qty = 3;
      case 3: {
        if (tag == 25) {
         parse_cum_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &cum_qty_)));
          set_has_cum_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_cum_qty_exponent;
        break;
      }

      // optional sfixed32 cum_qty_exponent = 4;
      case 4: {
        if (tag == 37) {
         parse_cum_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &cum_qty_exponent_)));
          set_has_cum_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dkreason;
        break;
      }

      // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 5;
      case 5: {
        if (tag == 40) {
         parse_dkreason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::DKReasonEnum_IsValid(value)) {
            set_dkreason(static_cast< ::SingleGeneralOrderHandling::DKReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 6;
      case 6: {
        if (tag == 50) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 7;
      case 7: {
        if (tag == 61) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exec_ack_status;
        break;
      }

      // optional .SingleGeneralOrderHandling.ExecAckStatusEnum exec_ack_status = 8;
      case 8: {
        if (tag == 64) {
         parse_exec_ack_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::ExecAckStatusEnum_IsValid(value)) {
            set_exec_ack_status(static_cast< ::SingleGeneralOrderHandling::ExecAckStatusEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_exec_id;
        break;
      }

      // optional string exec_id = 9;
      case 9: {
        if (tag == 74) {
         parse_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec_id().data(), this->exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 10;
      case 10: {
        if (tag == 82) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(90)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 11;
      case 11: {
        if (tag == 90) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_last_par_px;
        break;
      }

      // optional sfixed64 last_par_px = 12;
      case 12: {
        if (tag == 97) {
         parse_last_par_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_par_px_)));
          set_has_last_par_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_last_par_px_exponent;
        break;
      }

      // optional sfixed32 last_par_px_exponent = 13;
      case 13: {
        if (tag == 109) {
         parse_last_par_px_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_par_px_exponent_)));
          set_has_last_par_px_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_last_px;
        break;
      }

      // optional double last_px = 14;
      case 14: {
        if (tag == 113) {
         parse_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_px_)));
          set_has_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_last_qty;
        break;
      }

      // optional sfixed64 last_qty = 15;
      case 15: {
        if (tag == 121) {
         parse_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_qty_)));
          set_has_last_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_last_qty_exponent;
        break;
      }

      // optional sfixed32 last_qty_exponent = 16;
      case 16: {
        if (tag == 133) {
         parse_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_qty_exponent_)));
          set_has_last_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_order_id;
        break;
      }

      // optional string order_id = 17;
      case 17: {
        if (tag == 138) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 18;
      case 18: {
        if (tag == 146) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_price_type;
        break;
      }

      // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 19;
      case 19: {
        if (tag == 152) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::PriceTypeEnum_IsValid(value)) {
            set_price_type(static_cast< ::SingleGeneralOrderHandling::PriceTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_secondary_order_id;
        break;
      }

      // optional string secondary_order_id = 20;
      case 20: {
        if (tag == 162) {
         parse_secondary_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_order_id().data(), this->secondary_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 21;
      case 21: {
        if (tag == 168) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 22;
      case 22: {
        if (tag == 178) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 23;
      case 23: {
        if (tag == 186) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_text;
        break;
      }

      // optional string text = 24;
      case 24: {
        if (tag == 194) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 25;
      case 25: {
        if (tag == 202) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  return false;
#undef DO_
}

void ExecutionAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  // optional sfixed64 avg_px = 1;
  if (has_avg_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->avg_px(), output);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cl_ord_id(), output);
  }

  // optional sfixed64 cum_qty = 3;
  if (has_cum_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(3, this->cum_qty(), output);
  }

  // optional sfixed32 cum_qty_exponent = 4;
  if (has_cum_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->cum_qty_exponent(), output);
  }

  // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 5;
  if (has_dkreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->dkreason(), output);
  }

  // optional bytes encoded_text = 6;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 7;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->encoded_text_len(), output);
  }

  // optional .SingleGeneralOrderHandling.ExecAckStatusEnum exec_ack_status = 8;
  if (has_exec_ack_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->exec_ack_status(), output);
  }

  // optional string exec_id = 9;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->exec_id(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 10;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->instrmt_leg_grp(i), output);
  }

  // optional .Common.Instrument instrument = 11;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->instrument(), output);
  }

  // optional sfixed64 last_par_px = 12;
  if (has_last_par_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->last_par_px(), output);
  }

  // optional sfixed32 last_par_px_exponent = 13;
  if (has_last_par_px_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(13, this->last_par_px_exponent(), output);
  }

  // optional double last_px = 14;
  if (has_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->last_px(), output);
  }

  // optional sfixed64 last_qty = 15;
  if (has_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(15, this->last_qty(), output);
  }

  // optional sfixed32 last_qty_exponent = 16;
  if (has_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(16, this->last_qty_exponent(), output);
  }

  // optional string order_id = 17;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->order_id(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 18;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->order_qty_data(), output);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 19;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->price_type(), output);
  }

  // optional string secondary_order_id = 20;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->secondary_order_id(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 21;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 22;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 23;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->standard_trailer(), output);
  }

  // optional string text = 24;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->text(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 25;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.ExecutionAcknowledgement)
}

::google::protobuf::uint8* ExecutionAcknowledgement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  // optional sfixed64 avg_px = 1;
  if (has_avg_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->avg_px(), target);
  }

  // optional string cl_ord_id = 2;
  if (has_cl_ord_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cl_ord_id().data(), this->cl_ord_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cl_ord_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cl_ord_id(), target);
  }

  // optional sfixed64 cum_qty = 3;
  if (has_cum_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(3, this->cum_qty(), target);
  }

  // optional sfixed32 cum_qty_exponent = 4;
  if (has_cum_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->cum_qty_exponent(), target);
  }

  // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 5;
  if (has_dkreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->dkreason(), target);
  }

  // optional bytes encoded_text = 6;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 7;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->encoded_text_len(), target);
  }

  // optional .SingleGeneralOrderHandling.ExecAckStatusEnum exec_ack_status = 8;
  if (has_exec_ack_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->exec_ack_status(), target);
  }

  // optional string exec_id = 9;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->exec_id(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 10;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->instrmt_leg_grp(i), target);
  }

  // optional .Common.Instrument instrument = 11;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->instrument(), target);
  }

  // optional sfixed64 last_par_px = 12;
  if (has_last_par_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->last_par_px(), target);
  }

  // optional sfixed32 last_par_px_exponent = 13;
  if (has_last_par_px_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(13, this->last_par_px_exponent(), target);
  }

  // optional double last_px = 14;
  if (has_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->last_px(), target);
  }

  // optional sfixed64 last_qty = 15;
  if (has_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(15, this->last_qty(), target);
  }

  // optional sfixed32 last_qty_exponent = 16;
  if (has_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(16, this->last_qty_exponent(), target);
  }

  // optional string order_id = 17;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->order_id(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 18;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->order_qty_data(), target);
  }

  // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 19;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->price_type(), target);
  }

  // optional string secondary_order_id = 20;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->secondary_order_id(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 21;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 22;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 23;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->standard_trailer(), target);
  }

  // optional string text = 24;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->text(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 25;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.ExecutionAcknowledgement)
  return target;
}

int ExecutionAcknowledgement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed64 avg_px = 1;
    if (has_avg_px()) {
      total_size += 1 + 8;
    }

    // optional string cl_ord_id = 2;
    if (has_cl_ord_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cl_ord_id());
    }

    // optional sfixed64 cum_qty = 3;
    if (has_cum_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 cum_qty_exponent = 4;
    if (has_cum_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 5;
    if (has_dkreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dkreason());
    }

    // optional bytes encoded_text = 6;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 7;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .SingleGeneralOrderHandling.ExecAckStatusEnum exec_ack_status = 8;
    if (has_exec_ack_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->exec_ack_status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string exec_id = 9;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_id());
    }

    // optional .Common.Instrument instrument = 11;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional sfixed64 last_par_px = 12;
    if (has_last_par_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 last_par_px_exponent = 13;
    if (has_last_par_px_exponent()) {
      total_size += 1 + 4;
    }

    // optional double last_px = 14;
    if (has_last_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 last_qty = 15;
    if (has_last_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 last_qty_exponent = 16;
    if (has_last_qty_exponent()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string order_id = 17;
    if (has_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional .Common.OrderQtyData order_qty_data = 18;
    if (has_order_qty_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional .SingleGeneralOrderHandling.PriceTypeEnum price_type = 19;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }

    // optional string secondary_order_id = 20;
    if (has_secondary_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_order_id());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 21;
    if (has_side()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 22;
    if (has_standard_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 23;
    if (has_standard_trailer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 24;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 10;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 25;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionAcknowledgement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionAcknowledgement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionAcknowledgement::MergeFrom(const ExecutionAcknowledgement& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avg_px()) {
      set_avg_px(from.avg_px());
    }
    if (from.has_cl_ord_id()) {
      set_cl_ord_id(from.cl_ord_id());
    }
    if (from.has_cum_qty()) {
      set_cum_qty(from.cum_qty());
    }
    if (from.has_cum_qty_exponent()) {
      set_cum_qty_exponent(from.cum_qty_exponent());
    }
    if (from.has_dkreason()) {
      set_dkreason(from.dkreason());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_exec_ack_status()) {
      set_exec_ack_status(from.exec_ack_status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_last_par_px()) {
      set_last_par_px(from.last_par_px());
    }
    if (from.has_last_par_px_exponent()) {
      set_last_par_px_exponent(from.last_par_px_exponent());
    }
    if (from.has_last_px()) {
      set_last_px(from.last_px());
    }
    if (from.has_last_qty()) {
      set_last_qty(from.last_qty());
    }
    if (from.has_last_qty_exponent()) {
      set_last_qty_exponent(from.last_qty_exponent());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_secondary_order_id()) {
      set_secondary_order_id(from.secondary_order_id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionAcknowledgement::CopyFrom(const ExecutionAcknowledgement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionAcknowledgement::IsInitialized() const {

  return true;
}

void ExecutionAcknowledgement::Swap(ExecutionAcknowledgement* other) {
  if (other != this) {
    std::swap(avg_px_, other->avg_px_);
    std::swap(cl_ord_id_, other->cl_ord_id_);
    std::swap(cum_qty_, other->cum_qty_);
    std::swap(cum_qty_exponent_, other->cum_qty_exponent_);
    std::swap(dkreason_, other->dkreason_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(exec_ack_status_, other->exec_ack_status_);
    std::swap(exec_id_, other->exec_id_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(instrument_, other->instrument_);
    std::swap(last_par_px_, other->last_par_px_);
    std::swap(last_par_px_exponent_, other->last_par_px_exponent_);
    std::swap(last_px_, other->last_px_);
    std::swap(last_qty_, other->last_qty_);
    std::swap(last_qty_exponent_, other->last_qty_exponent_);
    std::swap(order_id_, other->order_id_);
    std::swap(order_qty_data_, other->order_qty_data_);
    std::swap(price_type_, other->price_type_);
    std::swap(secondary_order_id_, other->secondary_order_id_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionAcknowledgement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionAcknowledgement_descriptor_;
  metadata.reflection = ExecutionAcknowledgement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DontKnowTrade::kDkreasonFieldNumber;
const int DontKnowTrade::kExecIdFieldNumber;
const int DontKnowTrade::kLastPxFieldNumber;
const int DontKnowTrade::kLastQtyFieldNumber;
const int DontKnowTrade::kLastQtyExponentFieldNumber;
const int DontKnowTrade::kOrderIdFieldNumber;
const int DontKnowTrade::kSideFieldNumber;
const int DontKnowTrade::kStandardHeaderFieldNumber;
const int DontKnowTrade::kStandardTrailerFieldNumber;
const int DontKnowTrade::kTextFieldNumber;
const int DontKnowTrade::kEncodedTextFieldNumber;
const int DontKnowTrade::kEncodedTextLenFieldNumber;
const int DontKnowTrade::kInstrumentFieldNumber;
const int DontKnowTrade::kOrderQtyDataFieldNumber;
const int DontKnowTrade::kInstrmtLegGrpFieldNumber;
const int DontKnowTrade::kSecondaryOrderIdFieldNumber;
const int DontKnowTrade::kUndInstrmtGrpFieldNumber;
#endif  // !_MSC_VER

DontKnowTrade::DontKnowTrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SingleGeneralOrderHandling.DontKnowTrade)
}

void DontKnowTrade::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  order_qty_data_ = const_cast< ::Common::OrderQtyData*>(&::Common::OrderQtyData::default_instance());
}

DontKnowTrade::DontKnowTrade(const DontKnowTrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SingleGeneralOrderHandling.DontKnowTrade)
}

void DontKnowTrade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dkreason_ = 0;
  exec_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_px_ = 0;
  last_qty_ = GOOGLE_LONGLONG(0);
  last_qty_exponent_ = 0;
  order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  side_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoded_text_len_ = 0u;
  instrument_ = NULL;
  order_qty_data_ = NULL;
  secondary_order_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DontKnowTrade::~DontKnowTrade() {
  // @@protoc_insertion_point(destructor:SingleGeneralOrderHandling.DontKnowTrade)
  SharedDtor();
}

void DontKnowTrade::SharedDtor() {
  if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete exec_id_;
  }
  if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete order_id_;
  }
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete encoded_text_;
  }
  if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete secondary_order_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete order_qty_data_;
  }
}

void DontKnowTrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DontKnowTrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DontKnowTrade_descriptor_;
}

const DontKnowTrade& DontKnowTrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_singlegeneralorderhandling_2eproto();
  return *default_instance_;
}

DontKnowTrade* DontKnowTrade::default_instance_ = NULL;

DontKnowTrade* DontKnowTrade::New() const {
  return new DontKnowTrade;
}

void DontKnowTrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DontKnowTrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(last_px_, last_qty_);
    if (has_exec_id()) {
      if (exec_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        exec_id_->clear();
      }
    }
    if (has_order_id()) {
      if (order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        order_id_->clear();
      }
    }
    side_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    if (has_order_qty_data()) {
      if (order_qty_data_ != NULL) order_qty_data_->::Common::OrderQtyData::Clear();
    }
    if (has_secondary_order_id()) {
      if (secondary_order_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        secondary_order_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DontKnowTrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SingleGeneralOrderHandling.DontKnowTrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::DKReasonEnum_IsValid(value)) {
            set_dkreason(static_cast< ::SingleGeneralOrderHandling::DKReasonEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exec_id;
        break;
      }

      // optional string exec_id = 2;
      case 2: {
        if (tag == 18) {
         parse_exec_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exec_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exec_id().data(), this->exec_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exec_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_last_px;
        break;
      }

      // optional double last_px = 3;
      case 3: {
        if (tag == 25) {
         parse_last_px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_px_)));
          set_has_last_px();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_last_qty;
        break;
      }

      // optional sfixed64 last_qty = 4;
      case 4: {
        if (tag == 33) {
         parse_last_qty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &last_qty_)));
          set_has_last_qty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_last_qty_exponent;
        break;
      }

      // optional sfixed32 last_qty_exponent = 5;
      case 5: {
        if (tag == 45) {
         parse_last_qty_exponent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &last_qty_exponent_)));
          set_has_last_qty_exponent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_order_id;
        break;
      }

      // optional string order_id = 6;
      case 6: {
        if (tag == 50) {
         parse_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->order_id().data(), this->order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_side;
        break;
      }

      // optional .SingleGeneralOrderHandling.SideEnum side = 7;
      case 7: {
        if (tag == 56) {
         parse_side:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SingleGeneralOrderHandling::SideEnum_IsValid(value)) {
            set_side(static_cast< ::SingleGeneralOrderHandling::SideEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 8;
      case 8: {
        if (tag == 66) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 9;
      case 9: {
        if (tag == 74) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (tag == 82) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 11;
      case 11: {
        if (tag == 90) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 12;
      case 12: {
        if (tag == 101) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 13;
      case 13: {
        if (tag == 106) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_order_qty_data;
        break;
      }

      // optional .Common.OrderQtyData order_qty_data = 14;
      case 14: {
        if (tag == 114) {
         parse_order_qty_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_order_qty_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 15;
      case 15: {
        if (tag == 122) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(130)) goto parse_secondary_order_id;
        break;
      }

      // optional string secondary_order_id = 16;
      case 16: {
        if (tag == 130) {
         parse_secondary_order_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secondary_order_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secondary_order_id().data(), this->secondary_order_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "secondary_order_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 17;
      case 17: {
        if (tag == 138) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_und_instrmt_grp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SingleGeneralOrderHandling.DontKnowTrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SingleGeneralOrderHandling.DontKnowTrade)
  return false;
#undef DO_
}

void DontKnowTrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SingleGeneralOrderHandling.DontKnowTrade)
  // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 1;
  if (has_dkreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dkreason(), output);
  }

  // optional string exec_id = 2;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exec_id(), output);
  }

  // optional double last_px = 3;
  if (has_last_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_px(), output);
  }

  // optional sfixed64 last_qty = 4;
  if (has_last_qty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(4, this->last_qty(), output);
  }

  // optional sfixed32 last_qty_exponent = 5;
  if (has_last_qty_exponent()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->last_qty_exponent(), output);
  }

  // optional string order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->order_id(), output);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 7;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->side(), output);
  }

  // optional .Session.StandardHeader standard_header = 8;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 9;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->standard_trailer(), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->text(), output);
  }

  // optional bytes encoded_text = 11;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 12;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->encoded_text_len(), output);
  }

  // optional .Common.Instrument instrument = 13;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->instrument(), output);
  }

  // optional .Common.OrderQtyData order_qty_data = 14;
  if (has_order_qty_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->order_qty_data(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 15;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->instrmt_leg_grp(i), output);
  }

  // optional string secondary_order_id = 16;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->secondary_order_id(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 17;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->und_instrmt_grp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SingleGeneralOrderHandling.DontKnowTrade)
}

::google::protobuf::uint8* DontKnowTrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SingleGeneralOrderHandling.DontKnowTrade)
  // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 1;
  if (has_dkreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dkreason(), target);
  }

  // optional string exec_id = 2;
  if (has_exec_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exec_id().data(), this->exec_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exec_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exec_id(), target);
  }

  // optional double last_px = 3;
  if (has_last_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_px(), target);
  }

  // optional sfixed64 last_qty = 4;
  if (has_last_qty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(4, this->last_qty(), target);
  }

  // optional sfixed32 last_qty_exponent = 5;
  if (has_last_qty_exponent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->last_qty_exponent(), target);
  }

  // optional string order_id = 6;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->order_id().data(), this->order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->order_id(), target);
  }

  // optional .SingleGeneralOrderHandling.SideEnum side = 7;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->side(), target);
  }

  // optional .Session.StandardHeader standard_header = 8;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 9;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->standard_trailer(), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // optional bytes encoded_text = 11;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 12;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->encoded_text_len(), target);
  }

  // optional .Common.Instrument instrument = 13;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->instrument(), target);
  }

  // optional .Common.OrderQtyData order_qty_data = 14;
  if (has_order_qty_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->order_qty_data(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 15;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->instrmt_leg_grp(i), target);
  }

  // optional string secondary_order_id = 16;
  if (has_secondary_order_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secondary_order_id().data(), this->secondary_order_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "secondary_order_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->secondary_order_id(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 17;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->und_instrmt_grp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SingleGeneralOrderHandling.DontKnowTrade)
  return target;
}

int DontKnowTrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SingleGeneralOrderHandling.DKReasonEnum dkreason = 1;
    if (has_dkreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dkreason());
    }

    // optional string exec_id = 2;
    if (has_exec_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exec_id());
    }

    // optional double last_px = 3;
    if (has_last_px()) {
      total_size += 1 + 8;
    }

    // optional sfixed64 last_qty = 4;
    if (has_last_qty()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 last_qty_exponent = 5;
    if (has_last_qty_exponent()) {
      total_size += 1 + 4;
    }

    // optional string order_id = 6;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order_id());
    }

    // optional .SingleGeneralOrderHandling.SideEnum side = 7;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
    }

    // optional .Session.StandardHeader standard_header = 8;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Session.StandardTrailer standard_trailer = 9;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional bytes encoded_text = 11;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 12;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .Common.Instrument instrument = 13;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .Common.OrderQtyData order_qty_data = 14;
    if (has_order_qty_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->order_qty_data());
    }

    // optional string secondary_order_id = 16;
    if (has_secondary_order_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secondary_order_id());
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 15;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 17;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DontKnowTrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DontKnowTrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DontKnowTrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DontKnowTrade::MergeFrom(const DontKnowTrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dkreason()) {
      set_dkreason(from.dkreason());
    }
    if (from.has_exec_id()) {
      set_exec_id(from.exec_id());
    }
    if (from.has_last_px()) {
      set_last_px(from.last_px());
    }
    if (from.has_last_qty()) {
      set_last_qty(from.last_qty());
    }
    if (from.has_last_qty_exponent()) {
      set_last_qty_exponent(from.last_qty_exponent());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_order_qty_data()) {
      mutable_order_qty_data()->::Common::OrderQtyData::MergeFrom(from.order_qty_data());
    }
    if (from.has_secondary_order_id()) {
      set_secondary_order_id(from.secondary_order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DontKnowTrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DontKnowTrade::CopyFrom(const DontKnowTrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DontKnowTrade::IsInitialized() const {

  return true;
}

void DontKnowTrade::Swap(DontKnowTrade* other) {
  if (other != this) {
    std::swap(dkreason_, other->dkreason_);
    std::swap(exec_id_, other->exec_id_);
    std::swap(last_px_, other->last_px_);
    std::swap(last_qty_, other->last_qty_);
    std::swap(last_qty_exponent_, other->last_qty_exponent_);
    std::swap(order_id_, other->order_id_);
    std::swap(side_, other->side_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(instrument_, other->instrument_);
    std::swap(order_qty_data_, other->order_qty_data_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(secondary_order_id_, other->secondary_order_id_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DontKnowTrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DontKnowTrade_descriptor_;
  metadata.reflection = DontKnowTrade_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SingleGeneralOrderHandling

// @@protoc_insertion_point(global_scope)
