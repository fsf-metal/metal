// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: securitiesreferencedata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "securitiesreferencedata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SecuritiesReferenceData {

namespace {

const ::google::protobuf::Descriptor* SecurityDefinition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinition_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityDefinitionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinitionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityDefinitionUpdateReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityDefinitionUpdateReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecListGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecListGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityListTypeUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityListTypeUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityListTypeSourceUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityListTypeSourceUnion_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecLstUpdRelSymsLegGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecLstUpdRelSymsLegGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecLstUpdRelSymGrp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecLstUpdRelSymGrp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SecurityListUpdateReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecurityListUpdateReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityResponseTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CorporateActionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityRequestTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExpirationCycleEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SubscriptionRequestTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityUpdateActionEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityListTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityListTypeSourceEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityRequestResultEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LastFragmentEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SecurityListRequestTypeEnum_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LegSwapTypeEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_securitiesreferencedata_2eproto() {
  protobuf_AddDesc_securitiesreferencedata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "securitiesreferencedata.proto");
  GOOGLE_CHECK(file != NULL);
  SecurityDefinition_descriptor_ = file->message_type(0);
  static const int SecurityDefinition_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, security_response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, security_response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, clearing_business_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, security_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, application_sequence_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, corporate_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, market_segment_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, transact_time_),
  };
  SecurityDefinition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinition_descriptor_,
      SecurityDefinition::default_instance_,
      SecurityDefinition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinition));
  SecurityDefinitionRequest_descriptor_ = file->message_type(1);
  static const int SecurityDefinitionRequest_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, security_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, subscription_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, expiration_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, market_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, yield_data_),
  };
  SecurityDefinitionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinitionRequest_descriptor_,
      SecurityDefinitionRequest::default_instance_,
      SecurityDefinitionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinitionRequest));
  SecurityDefinitionUpdateReport_descriptor_ = file->message_type(2);
  static const int SecurityDefinitionUpdateReport_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, clearing_business_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, corporate_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, security_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, security_response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, security_response_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, security_update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, application_sequence_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, market_segment_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, transact_time_),
  };
  SecurityDefinitionUpdateReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityDefinitionUpdateReport_descriptor_,
      SecurityDefinitionUpdateReport::default_instance_,
      SecurityDefinitionUpdateReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityDefinitionUpdateReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityDefinitionUpdateReport));
  SecListGrp_descriptor_ = file->message_type(3);
  static const int SecListGrp_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, instrmt_leg_sec_list_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, security_trading_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, strike_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, rel_sym_transact_time_),
  };
  SecListGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecListGrp_descriptor_,
      SecListGrp::default_instance_,
      SecListGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecListGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecListGrp));
  SecurityListTypeUnion_descriptor_ = file->message_type(4);
  static const int SecurityListTypeUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeUnion, security_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeUnion, security_list_type_sfixed64_),
  };
  SecurityListTypeUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityListTypeUnion_descriptor_,
      SecurityListTypeUnion::default_instance_,
      SecurityListTypeUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityListTypeUnion));
  SecurityListTypeSourceUnion_descriptor_ = file->message_type(5);
  static const int SecurityListTypeSourceUnion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeSourceUnion, security_list_type_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeSourceUnion, security_list_type_source_sfixed64_),
  };
  SecurityListTypeSourceUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityListTypeSourceUnion_descriptor_,
      SecurityListTypeSourceUnion::default_instance_,
      SecurityListTypeSourceUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeSourceUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListTypeSourceUnion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityListTypeSourceUnion));
  SecurityList_descriptor_ = file->message_type(6);
  static const int SecurityList_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_request_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, tot_no_related_sym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, clearing_business_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, last_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, sec_list_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, application_sequence_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, market_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, encoded_security_list_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, encoded_security_list_desc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_list_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_list_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, security_list_type_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, transact_time_),
  };
  SecurityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityList_descriptor_,
      SecurityList::default_instance_,
      SecurityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityList));
  SecurityListRequest_descriptor_ = file->message_type(7);
  static const int SecurityListRequest_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, security_list_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, subscription_request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, trading_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, trading_session_sub_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, instrmt_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, market_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, security_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, security_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, security_list_type_source_),
  };
  SecurityListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityListRequest_descriptor_,
      SecurityListRequest::default_instance_,
      SecurityListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityListRequest));
  SecLstUpdRelSymsLegGrp_descriptor_ = file->message_type(8);
  static const int SecLstUpdRelSymsLegGrp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, instrument_leg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, leg_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, leg_settl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, leg_stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, leg_swap_type_),
  };
  SecLstUpdRelSymsLegGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecLstUpdRelSymsLegGrp_descriptor_,
      SecLstUpdRelSymsLegGrp::default_instance_,
      SecLstUpdRelSymsLegGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymsLegGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecLstUpdRelSymsLegGrp));
  SecLstUpdRelSymGrp_descriptor_ = file->message_type(9);
  static const int SecLstUpdRelSymGrp_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, encoded_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, encoded_text_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, financing_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, instrument_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, sec_lst_upd_rel_syms_leg_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, spread_or_benchmark_curve_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, stipulations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, yield_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, list_update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, security_trading_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, strike_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, und_instrmt_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, rel_sym_transact_time_),
  };
  SecLstUpdRelSymGrp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecLstUpdRelSymGrp_descriptor_,
      SecLstUpdRelSymGrp::default_instance_,
      SecLstUpdRelSymGrp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecLstUpdRelSymGrp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecLstUpdRelSymGrp));
  SecurityListUpdateReport_descriptor_ = file->message_type(10);
  static const int SecurityListUpdateReport_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, clearing_business_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, corporate_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, last_fragment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, sec_lst_upd_rel_sym_grp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_report_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_request_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_response_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_update_action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, standard_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, standard_trailer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, tot_no_related_sym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, application_sequence_control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, market_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, market_segment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, encoded_security_list_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, encoded_security_list_desc_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_list_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_list_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_list_ref_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_list_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, security_list_type_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, transact_time_),
  };
  SecurityListUpdateReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecurityListUpdateReport_descriptor_,
      SecurityListUpdateReport::default_instance_,
      SecurityListUpdateReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecurityListUpdateReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecurityListUpdateReport));
  SecurityResponseTypeEnum_descriptor_ = file->enum_type(0);
  CorporateActionEnum_descriptor_ = file->enum_type(1);
  SecurityRequestTypeEnum_descriptor_ = file->enum_type(2);
  TradingSessionIdEnum_descriptor_ = file->enum_type(3);
  TradingSessionSubIdEnum_descriptor_ = file->enum_type(4);
  ExpirationCycleEnum_descriptor_ = file->enum_type(5);
  SubscriptionRequestTypeEnum_descriptor_ = file->enum_type(6);
  SecurityUpdateActionEnum_descriptor_ = file->enum_type(7);
  SecurityListTypeEnum_descriptor_ = file->enum_type(8);
  SecurityListTypeSourceEnum_descriptor_ = file->enum_type(9);
  SecurityRequestResultEnum_descriptor_ = file->enum_type(10);
  LastFragmentEnum_descriptor_ = file->enum_type(11);
  SecurityListRequestTypeEnum_descriptor_ = file->enum_type(12);
  LegSwapTypeEnum_descriptor_ = file->enum_type(13);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_securitiesreferencedata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinition_descriptor_, &SecurityDefinition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinitionRequest_descriptor_, &SecurityDefinitionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityDefinitionUpdateReport_descriptor_, &SecurityDefinitionUpdateReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecListGrp_descriptor_, &SecListGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityListTypeUnion_descriptor_, &SecurityListTypeUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityListTypeSourceUnion_descriptor_, &SecurityListTypeSourceUnion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityList_descriptor_, &SecurityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityListRequest_descriptor_, &SecurityListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecLstUpdRelSymsLegGrp_descriptor_, &SecLstUpdRelSymsLegGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecLstUpdRelSymGrp_descriptor_, &SecLstUpdRelSymGrp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecurityListUpdateReport_descriptor_, &SecurityListUpdateReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_securitiesreferencedata_2eproto() {
  delete SecurityDefinition::default_instance_;
  delete SecurityDefinition_reflection_;
  delete SecurityDefinitionRequest::default_instance_;
  delete SecurityDefinitionRequest_reflection_;
  delete SecurityDefinitionUpdateReport::default_instance_;
  delete SecurityDefinitionUpdateReport_reflection_;
  delete SecListGrp::default_instance_;
  delete SecListGrp_reflection_;
  delete SecurityListTypeUnion::default_instance_;
  delete SecurityListTypeUnion_reflection_;
  delete SecurityListTypeSourceUnion::default_instance_;
  delete SecurityListTypeSourceUnion_reflection_;
  delete SecurityList::default_instance_;
  delete SecurityList_reflection_;
  delete SecurityListRequest::default_instance_;
  delete SecurityListRequest_reflection_;
  delete SecLstUpdRelSymsLegGrp::default_instance_;
  delete SecLstUpdRelSymsLegGrp_reflection_;
  delete SecLstUpdRelSymGrp::default_instance_;
  delete SecLstUpdRelSymGrp_reflection_;
  delete SecurityListUpdateReport::default_instance_;
  delete SecurityListUpdateReport_reflection_;
}

void protobuf_AddDesc_securitiesreferencedata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::meta::protobuf_AddDesc_meta_2eproto();
  ::fix::protobuf_AddDesc_fix_2eproto();
  ::Session::protobuf_AddDesc_session_2eproto();
  ::Common::protobuf_AddDesc_common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035securitiesreferencedata.proto\022\027Securit"
    "iesReferenceData\032\nmeta.proto\032\tfix.proto\032"
    "\rsession.proto\032\014common.proto\"\267\t\n\022Securit"
    "yDefinition\022\035\n\010currency\030\001 \001(\tB\013\235\254\033\017\000\000\000\240\254"
    "\033\010\022!\n\014encoded_text\030\002 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n"
    "\020encoded_text_len\030\003 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022$\n\017"
    "security_req_id\030\004 \001(\tB\013\235\254\033@\001\000\000\240\254\033\017\022)\n\024se"
    "curity_response_id\030\005 \001(\tB\013\235\254\033B\001\000\000\240\254\033\017\022^\n"
    "\026security_response_type\030\006 \001(\01621.Securiti"
    "esReferenceData.SecurityResponseTypeEnum"
    "B\013\235\254\033C\001\000\000\240\254\033\003\0226\n\017standard_header\030\007 \001(\0132\027"
    ".Session.StandardHeaderB\004\250\254\033\004\0228\n\020standar"
    "d_trailer\030\010 \001(\0132\030.Session.StandardTraile"
    "rB\004\250\254\033\004\022\031\n\004text\030\t \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022,\n\nin"
    "strument\030\n \001(\0132\022.Common.InstrumentB\004\250\254\033\005"
    "\022+\n\026clearing_business_date\030\013 \001(\017B\013\235\254\033\313\002\000"
    "\000\240\254\033\n\0227\n\017instrmt_leg_grp\030\014 \003(\0132\025.Common."
    "InstrmtLegGrpB\007\235\254\033+\002\000\000\022\?\n\024instrument_ext"
    "ension\030\r \001(\0132\033.Common.InstrumentExtensio"
    "nB\004\250\254\033\006\022\'\n\022security_report_id\030\016 \001(\020B\013\235\254\033"
    "\304\003\000\000\240\254\033\003\0227\n\017und_instrmt_grp\030\017 \003(\0132\025.Comm"
    "on.UndInstrmtGrpB\007\235\254\033\307\002\000\000\022N\n\034application"
    "_sequence_control\030\020 \001(\0132\".Common.Applica"
    "tionSequenceControlB\004\250\254\033\007\022U\n\020corporate_a"
    "ction\030\021 \003(\0162,.SecuritiesReferenceData.Co"
    "rporateActionEnumB\r\020\001\235\254\033$\001\000\000\240\254\033\030\022=\n\022mark"
    "et_segment_grp\030\022 \003(\0132\030.Common.MarketSegm"
    "entGrpB\007\235\254\033\036\005\000\000\022P\n\036spread_or_benchmark_c"
    "urve_data\030\023 \001(\0132\".Common.SpreadOrBenchma"
    "rkCurveDataB\004\250\254\033\007\0223\n\014stipulations\030\024 \003(\0132"
    "\024.Common.StipulationsB\007\235\254\033\350\000\000\000\022+\n\nyield_"
    "data\030\025 \001(\0132\021.Common.YieldDataB\004\250\254\033\007\022\"\n\rt"
    "ransact_time\030\026 \001(\020B\013\235\254\033<\000\000\000\240\254\033\021:\005\312\355\032\001d\"\353"
    "\t\n\031SecurityDefinitionRequest\022\035\n\010currency"
    "\030\001 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022!\n\014encoded_text\030\002 \001("
    "\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_len\030\003 \001(\007"
    "B\013\235\254\033b\001\000\000\240\254\033\022\022$\n\017security_req_id\030\004 \001(\tB\013"
    "\235\254\033@\001\000\000\240\254\033\017\022\\\n\025security_request_type\030\005 \001"
    "(\01620.SecuritiesReferenceData.SecurityReq"
    "uestTypeEnumB\013\235\254\033A\001\000\000\240\254\033\003\0226\n\017standard_he"
    "ader\030\006 \001(\0132\027.Session.StandardHeaderB\004\250\254\033"
    "\004\0228\n\020standard_trailer\030\007 \001(\0132\030.Session.St"
    "andardTrailerB\004\250\254\033\004\022\031\n\004text\030\010 \001(\tB\013\235\254\033:\000"
    "\000\000\240\254\033\017\022V\n\022trading_session_id\030\t \001(\0162-.Sec"
    "uritiesReferenceData.TradingSessionIdEnu"
    "mB\013\235\254\033P\001\000\000\240\254\033\017\022,\n\ninstrument\030\n \001(\0132\022.Com"
    "mon.InstrumentB\004\250\254\033\005\022d\n\031subscription_req"
    "uest_type\030\013 \001(\01624.SecuritiesReferenceDat"
    "a.SubscriptionRequestTypeEnumB\013\235\254\033\007\001\000\000\240\254"
    "\033\000\022]\n\026trading_session_sub_id\030\014 \001(\01620.Sec"
    "uritiesReferenceData.TradingSessionSubId"
    "EnumB\013\235\254\033q\002\000\000\240\254\033\017\022S\n\020expiration_cycle\030\r "
    "\001(\0162,.SecuritiesReferenceData.Expiration"
    "CycleEnumB\013\235\254\033;\003\000\000\240\254\033\003\0227\n\017instrmt_leg_gr"
    "p\030\016 \003(\0132\025.Common.InstrmtLegGrpB\007\235\254\033+\002\000\000\022"
    "\?\n\024instrument_extension\030\017 \001(\0132\033.Common.I"
    "nstrumentExtensionB\004\250\254\033\006\0227\n\017und_instrmt_"
    "grp\030\020 \003(\0132\025.Common.UndInstrmtGrpB\007\235\254\033\307\002\000"
    "\000\022\036\n\tmarket_id\030\021 \001(\tB\013\235\254\033\025\005\000\000\240\254\033\t\022&\n\021mar"
    "ket_segment_id\030\022 \001(\tB\013\235\254\033\024\005\000\000\240\254\033\017\022P\n\036spr"
    "ead_or_benchmark_curve_data\030\023 \001(\0132\".Comm"
    "on.SpreadOrBenchmarkCurveDataB\004\250\254\033\007\0223\n\014s"
    "tipulations\030\024 \003(\0132\024.Common.StipulationsB"
    "\007\235\254\033\350\000\000\000\022+\n\nyield_data\030\025 \001(\0132\021.Common.Yi"
    "eldDataB\004\250\254\033\007:\005\312\355\032\001c\"\244\n\n\036SecurityDefinit"
    "ionUpdateReport\022+\n\026clearing_business_dat"
    "e\030\001 \001(\017B\013\235\254\033\313\002\000\000\240\254\033\n\022U\n\020corporate_action"
    "\030\002 \003(\0162,.SecuritiesReferenceData.Corpora"
    "teActionEnumB\r\020\001\235\254\033$\001\000\000\240\254\033\030\022\035\n\010currency\030"
    "\003 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022!\n\014encoded_text\030\004 \001(\014"
    "B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_len\030\005 \001(\007B"
    "\013\235\254\033b\001\000\000\240\254\033\022\0227\n\017instrmt_leg_grp\030\006 \003(\0132\025."
    "Common.InstrmtLegGrpB\007\235\254\033+\002\000\000\022,\n\ninstrum"
    "ent\030\007 \001(\0132\022.Common.InstrumentB\004\250\254\033\006\022\'\n\022s"
    "ecurity_report_id\030\010 \001(\020B\013\235\254\033\304\003\000\000\240\254\033\003\022$\n\017"
    "security_req_id\030\t \001(\tB\013\235\254\033@\001\000\000\240\254\033\017\022)\n\024se"
    "curity_response_id\030\n \001(\tB\013\235\254\033B\001\000\000\240\254\033\017\022^\n"
    "\026security_response_type\030\013 \001(\01621.Securiti"
    "esReferenceData.SecurityResponseTypeEnum"
    "B\013\235\254\033C\001\000\000\240\254\033\003\022^\n\026security_update_action\030"
    "\014 \001(\01621.SecuritiesReferenceData.Security"
    "UpdateActionEnumB\013\235\254\033\324\003\000\000\240\254\033\000\0226\n\017standar"
    "d_header\030\r \001(\0132\027.Session.StandardHeaderB"
    "\004\250\254\033\006\0228\n\020standard_trailer\030\016 \001(\0132\030.Sessio"
    "n.StandardTrailerB\004\250\254\033\006\022\031\n\004text\030\017 \001(\tB\013\235"
    "\254\033:\000\000\000\240\254\033\017\022N\n\034application_sequence_contr"
    "ol\030\020 \001(\0132\".Common.ApplicationSequenceCon"
    "trolB\004\250\254\033\007\022\?\n\024instrument_extension\030\021 \001(\013"
    "2\033.Common.InstrumentExtensionB\004\250\254\033\007\022=\n\022m"
    "arket_segment_grp\030\022 \003(\0132\030.Common.MarketS"
    "egmentGrpB\007\235\254\033\036\005\000\000\022P\n\036spread_or_benchmar"
    "k_curve_data\030\023 \001(\0132\".Common.SpreadOrBenc"
    "hmarkCurveDataB\004\250\254\033\007\0223\n\014stipulations\030\024 \003"
    "(\0132\024.Common.StipulationsB\007\235\254\033\350\000\000\000\0227\n\017und"
    "_instrmt_grp\030\025 \003(\0132\025.Common.UndInstrmtGr"
    "pB\007\235\254\033\307\002\000\000\022+\n\nyield_data\030\026 \001(\0132\021.Common."
    "YieldDataB\004\250\254\033\007\022\"\n\rtransact_time\030\027 \001(\020B\013"
    "\235\254\033<\000\000\000\240\254\033\021:\006\312\355\032\002BP\"\224\006\n\nSecListGrp\022\035\n\010cu"
    "rrency\030\001 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022!\n\014encoded_tex"
    "t\030\002 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020encoded_text_len"
    "\030\003 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\0229\n\021financing_details"
    "\030\004 \001(\0132\030.Common.FinancingDetailsB\004\250\254\033\006\022G"
    "\n\030instrmt_leg_sec_list_grp\030\005 \003(\0132\034.Commo"
    "n.InstrmtLegSecListGrpB\007\235\254\033+\002\000\000\022,\n\ninstr"
    "ument\030\006 \001(\0132\022.Common.InstrumentB\004\250\254\033\006\022\?\n"
    "\024instrument_extension\030\007 \001(\0132\033.Common.Ins"
    "trumentExtensionB\004\250\254\033\006\022P\n\036spread_or_benc"
    "hmark_curve_data\030\010 \001(\0132\".Common.SpreadOr"
    "BenchmarkCurveDataB\004\250\254\033\006\0223\n\014stipulations"
    "\030\t \003(\0132\024.Common.StipulationsB\007\235\254\033\350\000\000\000\022\031\n"
    "\004text\030\n \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\0227\n\017und_instrmt_"
    "grp\030\013 \003(\0132\025.Common.UndInstrmtGrpB\007\235\254\033\307\002\000"
    "\000\022+\n\nyield_data\030\014 \001(\0132\021.Common.YieldData"
    "B\004\250\254\033\006\022B\n\026security_trading_rules\030\r \001(\0132\034"
    ".Common.SecurityTradingRulesB\004\250\254\033\007\0222\n\014st"
    "rike_rules\030\016 \003(\0132\023.Common.StrikeRulesB\007\235"
    "\254\033\261\004\000\000\022*\n\025rel_sym_transact_time\030\017 \001(\020B\013\235"
    "\254\033\340\005\000\000\240\254\033\021\"\207\001\n\025SecurityListTypeUnion\022I\n\022"
    "security_list_type\030\001 \001(\0162-.SecuritiesRef"
    "erenceData.SecurityListTypeEnum\022#\n\033secur"
    "ity_list_type_sfixed64\030\002 \001(\020\"\241\001\n\033Securit"
    "yListTypeSourceUnion\022V\n\031security_list_ty"
    "pe_source\030\001 \001(\01623.SecuritiesReferenceDat"
    "a.SecurityListTypeSourceEnum\022*\n\"security"
    "_list_type_source_sfixed64\030\002 \001(\020\"\373\010\n\014Sec"
    "urityList\022$\n\017security_req_id\030\001 \001(\tB\013\235\254\033@"
    "\001\000\000\240\254\033\017\022`\n\027security_request_result\030\002 \001(\016"
    "22.SecuritiesReferenceData.SecurityReque"
    "stResultEnumB\013\235\254\0330\002\000\000\240\254\033\003\022)\n\024security_re"
    "sponse_id\030\003 \001(\tB\013\235\254\033B\001\000\000\240\254\033\017\0226\n\017standard"
    "_header\030\004 \001(\0132\027.Session.StandardHeaderB\004"
    "\250\254\033\005\0228\n\020standard_trailer\030\005 \001(\0132\030.Session"
    ".StandardTrailerB\004\250\254\033\005\022\'\n\022tot_no_related"
    "_sym\030\006 \001(\020B\013\235\254\033\211\001\000\000\240\254\033\003\022+\n\026clearing_busi"
    "ness_date\030\007 \001(\017B\013\235\254\033\313\002\000\000\240\254\033\n\022\"\n\rlast_fra"
    "gment\030\010 \001(\010B\013\235\254\033}\003\000\000\240\254\033\007\022B\n\014sec_list_grp"
    "\030\t \003(\0132#.SecuritiesReferenceData.SecList"
    "GrpB\007\235\254\033\222\000\000\000\022\'\n\022security_report_id\030\n \001(\020"
    "B\013\235\254\033\304\003\000\000\240\254\033\003\022N\n\034application_sequence_co"
    "ntrol\030\013 \001(\0132\".Common.ApplicationSequence"
    "ControlB\004\250\254\033\007\022\036\n\tmarket_id\030\014 \001(\tB\013\235\254\033\025\005\000"
    "\000\240\254\033\t\022&\n\021market_segment_id\030\r \001(\tB\013\235\254\033\024\005\000"
    "\000\240\254\033\017\022/\n\032encoded_security_list_desc\030\016 \001("
    "\014B\013\235\254\033\275\005\000\000\240\254\033\001\0223\n\036encoded_security_list_"
    "desc_len\030\017 \001(\007B\013\235\254\033\274\005\000\000\240\254\033\022\022\'\n\022security_"
    "list_desc\030\020 \001(\tB\013\235\254\033\273\005\000\000\240\254\033\017\022%\n\020security"
    "_list_id\030\021 \001(\tB\013\235\254\033\271\005\000\000\240\254\033\017\022)\n\024security_"
    "list_ref_id\030\022 \001(\tB\013\235\254\033\272\005\000\000\240\254\033\017\022V\n\022securi"
    "ty_list_type\030\023 \001(\0162-.SecuritiesReference"
    "Data.SecurityListTypeEnumB\013\235\254\033\276\005\000\000\240\254\033\003\022c"
    "\n\031security_list_type_source\030\024 \001(\01623.Secu"
    "ritiesReferenceData.SecurityListTypeSour"
    "ceEnumB\013\235\254\033\277\005\000\000\240\254\033\003\022\"\n\rtransact_time\030\025 \001"
    "(\020B\013\235\254\033<\000\000\000\240\254\033\021:\005\312\355\032\001y\"\204\n\n\023SecurityListR"
    "equest\022\035\n\010currency\030\001 \001(\tB\013\235\254\033\017\000\000\000\240\254\033\010\022!\n"
    "\014encoded_text\030\002 \001(\014B\013\235\254\033c\001\000\000\240\254\033\001\022%\n\020enco"
    "ded_text_len\030\003 \001(\007B\013\235\254\033b\001\000\000\240\254\033\022\022,\n\ninstr"
    "ument\030\004 \001(\0132\022.Common.InstrumentB\004\250\254\033\005\022e\n"
    "\032security_list_request_type\030\005 \001(\01624.Secu"
    "ritiesReferenceData.SecurityListRequestT"
    "ypeEnumB\013\235\254\033/\002\000\000\240\254\033\003\022$\n\017security_req_id\030"
    "\006 \001(\tB\013\235\254\033@\001\000\000\240\254\033\017\0226\n\017standard_header\030\007 "
    "\001(\0132\027.Session.StandardHeaderB\004\250\254\033\005\0228\n\020st"
    "andard_trailer\030\010 \001(\0132\030.Session.StandardT"
    "railerB\004\250\254\033\005\022d\n\031subscription_request_typ"
    "e\030\t \001(\01624.SecuritiesReferenceData.Subscr"
    "iptionRequestTypeEnumB\013\235\254\033\007\001\000\000\240\254\033\000\022\031\n\004te"
    "xt\030\n \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022V\n\022trading_session"
    "_id\030\013 \001(\0162-.SecuritiesReferenceData.Trad"
    "ingSessionIdEnumB\013\235\254\033P\001\000\000\240\254\033\017\022]\n\026trading"
    "_session_sub_id\030\014 \001(\01620.SecuritiesRefere"
    "nceData.TradingSessionSubIdEnumB\013\235\254\033q\002\000\000"
    "\240\254\033\017\0229\n\021financing_details\030\r \001(\0132\030.Common"
    ".FinancingDetailsB\004\250\254\033\006\0227\n\017instrmt_leg_g"
    "rp\030\016 \003(\0132\025.Common.InstrmtLegGrpB\007\235\254\033+\002\000\000"
    "\022\?\n\024instrument_extension\030\017 \001(\0132\033.Common."
    "InstrumentExtensionB\004\250\254\033\006\0227\n\017und_instrmt"
    "_grp\030\020 \003(\0132\025.Common.UndInstrmtGrpB\007\235\254\033\307\002"
    "\000\000\022\036\n\tmarket_id\030\021 \001(\tB\013\235\254\033\025\005\000\000\240\254\033\t\022&\n\021ma"
    "rket_segment_id\030\022 \001(\tB\013\235\254\033\024\005\000\000\240\254\033\017\022%\n\020se"
    "curity_list_id\030\023 \001(\tB\013\235\254\033\271\005\000\000\240\254\033\017\022V\n\022sec"
    "urity_list_type\030\024 \001(\0162-.SecuritiesRefere"
    "nceData.SecurityListTypeEnumB\013\235\254\033\276\005\000\000\240\254\033"
    "\003\022c\n\031security_list_type_source\030\025 \001(\01623.S"
    "ecuritiesReferenceData.SecurityListTypeS"
    "ourceEnumB\013\235\254\033\277\005\000\000\240\254\033\003:\005\312\355\032\001x\"\303\002\n\026SecLst"
    "UpdRelSymsLegGrp\0223\n\016instrument_leg\030\001 \001(\013"
    "2\025.Common.InstrumentLegB\004\250\254\033\006\022E\n\030leg_ben"
    "chmark_curve_data\030\002 \001(\0132\035.Common.LegBenc"
    "hmarkCurveDataB\004\250\254\033\006\022#\n\016leg_settl_type\030\003"
    " \001(\tB\013\235\254\033K\002\000\000\240\254\033\000\022:\n\020leg_stipulations\030\004 "
    "\003(\0132\027.Common.LegStipulationsB\007\235\254\033\253\002\000\000\022L\n"
    "\rleg_swap_type\030\005 \001(\0162(.SecuritiesReferen"
    "ceData.LegSwapTypeEnumB\013\235\254\033\262\002\000\000\240\254\033\003\"\334\006\n\022"
    "SecLstUpdRelSymGrp\022\035\n\010currency\030\001 \001(\tB\013\235\254"
    "\033\017\000\000\000\240\254\033\010\022!\n\014encoded_text\030\002 \001(\014B\013\235\254\033c\001\000\000"
    "\240\254\033\001\022%\n\020encoded_text_len\030\003 \001(\007B\013\235\254\033b\001\000\000\240"
    "\254\033\022\0229\n\021financing_details\030\004 \001(\0132\030.Common."
    "FinancingDetailsB\004\250\254\033\006\022,\n\ninstrument\030\005 \001"
    "(\0132\022.Common.InstrumentB\004\250\254\033\006\022\?\n\024instrume"
    "nt_extension\030\006 \001(\0132\033.Common.InstrumentEx"
    "tensionB\004\250\254\033\006\022^\n\034sec_lst_upd_rel_syms_le"
    "g_grp\030\007 \003(\0132/.SecuritiesReferenceData.Se"
    "cLstUpdRelSymsLegGrpB\007\235\254\033+\002\000\000\022P\n\036spread_"
    "or_benchmark_curve_data\030\010 \001(\0132\".Common.S"
    "preadOrBenchmarkCurveDataB\004\250\254\033\006\0223\n\014stipu"
    "lations\030\t \003(\0132\024.Common.StipulationsB\007\235\254\033"
    "\350\000\000\000\022\031\n\004text\030\n \001(\tB\013\235\254\033:\000\000\000\240\254\033\017\022+\n\nyield"
    "_data\030\013 \001(\0132\021.Common.YieldDataB\004\250\254\033\006\022\'\n\022"
    "list_update_action\030\014 \001(\tB\013\235\254\033,\005\000\000\240\254\033\000\022B\n"
    "\026security_trading_rules\030\r \001(\0132\034.Common.S"
    "ecurityTradingRulesB\004\250\254\033\007\0222\n\014strike_rule"
    "s\030\016 \003(\0132\023.Common.StrikeRulesB\007\235\254\033\261\004\000\000\0227\n"
    "\017und_instrmt_grp\030\017 \003(\0132\025.Common.UndInstr"
    "mtGrpB\007\235\254\033\307\002\000\000\022*\n\025rel_sym_transact_time\030"
    "\020 \001(\020B\013\235\254\033\340\005\000\000\240\254\033\021\"\322\n\n\030SecurityListUpdat"
    "eReport\022+\n\026clearing_business_date\030\001 \001(\017B"
    "\013\235\254\033\313\002\000\000\240\254\033\n\022U\n\020corporate_action\030\002 \003(\0162,"
    ".SecuritiesReferenceData.CorporateAction"
    "EnumB\r\020\001\235\254\033$\001\000\000\240\254\033\030\022\"\n\rlast_fragment\030\003 \001"
    "(\010B\013\235\254\033}\003\000\000\240\254\033\007\022U\n\027sec_lst_upd_rel_sym_g"
    "rp\030\004 \003(\0132+.SecuritiesReferenceData.SecLs"
    "tUpdRelSymGrpB\007\235\254\033\222\000\000\000\022\'\n\022security_repor"
    "t_id\030\005 \001(\020B\013\235\254\033\304\003\000\000\240\254\033\003\022$\n\017security_req_"
    "id\030\006 \001(\tB\013\235\254\033@\001\000\000\240\254\033\017\022`\n\027security_reques"
    "t_result\030\007 \001(\01622.SecuritiesReferenceData"
    ".SecurityRequestResultEnumB\013\235\254\0330\002\000\000\240\254\033\003\022"
    ")\n\024security_response_id\030\010 \001(\tB\013\235\254\033B\001\000\000\240\254"
    "\033\017\022^\n\026security_update_action\030\t \001(\01621.Sec"
    "uritiesReferenceData.SecurityUpdateActio"
    "nEnumB\013\235\254\033\324\003\000\000\240\254\033\000\0226\n\017standard_header\030\n "
    "\001(\0132\027.Session.StandardHeaderB\004\250\254\033\006\0228\n\020st"
    "andard_trailer\030\013 \001(\0132\030.Session.StandardT"
    "railerB\004\250\254\033\006\022\'\n\022tot_no_related_sym\030\014 \001(\020"
    "B\013\235\254\033\211\001\000\000\240\254\033\003\022N\n\034application_sequence_co"
    "ntrol\030\r \001(\0132\".Common.ApplicationSequence"
    "ControlB\004\250\254\033\007\022\036\n\tmarket_id\030\016 \001(\tB\013\235\254\033\025\005\000"
    "\000\240\254\033\t\022&\n\021market_segment_id\030\017 \001(\tB\013\235\254\033\024\005\000"
    "\000\240\254\033\017\022/\n\032encoded_security_list_desc\030\020 \001("
    "\014B\013\235\254\033\275\005\000\000\240\254\033\001\0223\n\036encoded_security_list_"
    "desc_len\030\021 \001(\007B\013\235\254\033\274\005\000\000\240\254\033\022\022\'\n\022security_"
    "list_desc\030\022 \001(\tB\013\235\254\033\273\005\000\000\240\254\033\017\022%\n\020security"
    "_list_id\030\023 \001(\tB\013\235\254\033\271\005\000\000\240\254\033\017\022)\n\024security_"
    "list_ref_id\030\024 \001(\tB\013\235\254\033\272\005\000\000\240\254\033\017\022V\n\022securi"
    "ty_list_type\030\025 \001(\0162-.SecuritiesReference"
    "Data.SecurityListTypeEnumB\013\235\254\033\276\005\000\000\240\254\033\003\022c"
    "\n\031security_list_type_source\030\026 \001(\01623.Secu"
    "ritiesReferenceData.SecurityListTypeSour"
    "ceEnumB\013\235\254\033\277\005\000\000\240\254\033\003\022\"\n\rtransact_time\030\027 \001"
    "(\020B\013\235\254\033<\000\000\000\240\254\033\021:\006\312\355\032\002BK*\240\003\n\030SecurityResp"
    "onseTypeEnum\022.\n#SECURITY_RESPONSE_TYPE_A"
    "CCEPT_AS_IS\020\000\032\005\242\224#\0011\0227\n,SECURITY_RESPONS"
    "E_TYPE_ACCEPT_WITH_REVISIONS\020\001\032\005\242\224#\0012\022A\n"
    "6SECURITY_RESPONSE_TYPE_CANNOT_MATCH_SEL"
    "ECTION_CRITERIA\020\002\032\005\242\224#\0016\022I\n>SECURITY_RES"
    "PONSE_TYPE_LIST_OF_SECURITIES_RETURNED_P"
    "ER_REQUEST\020\003\032\005\242\224#\0014\022Q\nBSECURITY_RESPONSE"
    "_TYPE_LIST_OF_SECURITY_TYPES_RETURNED_PE"
    "R_REQUEST\020\004\032\t\242\224#\0013\270\224#\t\022:\n/SECURITY_RESPO"
    "NSE_TYPE_REJECT_SECURITY_PROPOSAL\020\005\032\005\242\224#"
    "\0015*\233\010\n\023CorporateActionEnum\022+\n CORPORATE_"
    "ACTION_EX_DISTRIBUTION\020\000\032\005\242\224#\001B\022\'\n\034CORPO"
    "RATE_ACTION_EX_DIVIDEND\020\001\032\005\242\224#\001A\022\'\n\034CORP"
    "ORATE_ACTION_EX_INTEREST\020\002\032\005\242\224#\001E\022%\n\032COR"
    "PORATE_ACTION_EX_RIGHTS\020\003\032\005\242\224#\001C\022\037\n\024CORP"
    "ORATE_ACTION_NEW\020\004\032\005\242\224#\001D\022!\n\026CORPORATE_A"
    "CTION_CUSIP\020\005\032\005\242\224#\001U\022)\n\036CORPORATE_ACTION"
    "_CASH_DIVIDEND\020\006\032\005\242\224#\001F\0226\n+CORPORATE_ACT"
    "ION_LIQUIDATION_REORGANIZATION\020\007\032\005\242\224#\001L\022"
    "1\n&CORPORATE_ACTION_MERGER_REORGANIZATIO"
    "N\020\010\032\005\242\224#\001M\0223\n(CORPORATE_ACTION_NON_INTEG"
    "ER_STOCK_SPLIT\020\t\032\005\242\224#\001H\0222\n\'CORPORATE_ACT"
    "ION_POSITION_CONSOLIDATION\020\n\032\005\242\224#\001K\022/\n$C"
    "ORPORATE_ACTION_REVERSE_STOCK_SPLIT\020\013\032\005\242"
    "\224#\001I\022+\n CORPORATE_ACTION_RIGHTS_OFFERING"
    "\020\014\032\005\242\224#\001N\022/\n$CORPORATE_ACTION_SHAREHOLDE"
    "R_MEETING\020\r\032\005\242\224#\001O\022*\n\037CORPORATE_ACTION_S"
    "PECIAL_ACTION\020\016\032\005\242\224#\001S\022#\n\030CORPORATE_ACTI"
    "ON_SPINOFF\020\017\032\005\242\224#\001P\0228\n-CORPORATE_ACTION_"
    "STANDARD_INTEGER_STOCK_SPLIT\020\020\032\005\242\224#\001J\022*\n"
    "\037CORPORATE_ACTION_STOCK_DIVIDEND\020\021\032\005\242\224#\001"
    "G\022-\n\"CORPORATE_ACTION_SYMBOL_CONVERSION\020"
    "\022\032\005\242\224#\001T\022(\n\035CORPORATE_ACTION_TENDER_OFFE"
    "R\020\023\032\005\242\224#\001Q\022#\n\030CORPORATE_ACTION_WARRANT\020\024"
    "\032\005\242\224#\001R\022)\n\036CORPORATE_ACTION_LEAP_ROLLOVE"
    "R\020\025\032\005\242\224#\001V\022,\n!CORPORATE_ACTION_SUCCESSIO"
    "N_EVENT\020\026\032\005\242\224#\001W*\351\004\n\027SecurityRequestType"
    "Enum\022<\n-SECURITY_REQUEST_TYPE_REQUEST_LI"
    "ST_SECURITIES\020\000\032\t\242\224#\0013\270\224#\t\022@\n1SECURITY_R"
    "EQUEST_TYPE_REQUEST_LIST_SECURITY_TYPES\020"
    "\001\032\t\242\224#\0012\270\224#\t\022M\nBSECURITY_REQUEST_TYPE_RE"
    "QUEST_SECURITY_IDENTITY_AND_SPECIFICATIO"
    "NS\020\002\032\005\242\224#\0010\022M\nBSECURITY_REQUEST_TYPE_REQ"
    "UEST_SECURITY_IDENTITY_FOR_SPECIFICATION"
    "S\020\003\032\005\242\224#\0011\022/\n$SECURITY_REQUEST_TYPE_ALL_"
    "SECURITIES\020\004\032\005\242\224#\0018\0227\n,SECURITY_REQUEST_"
    "TYPE_MARKET_ID_OR_MARKET_ID\020\005\032\005\242\224#\0019\022(\n\035"
    "SECURITY_REQUEST_TYPE_PRODUCT\020\006\032\005\242\224#\0016\022>"
    "\n3SECURITY_REQUEST_TYPE_SECURITY_TYPE_AN"
    "D_OR_CFI_CODE\020\007\032\005\242\224#\0015\022\'\n\034SECURITY_REQUE"
    "ST_TYPE_SYMBOL\020\010\032\005\242\224#\0014\0223\n(SECURITY_REQU"
    "EST_TYPE_TRADING_SESSION_ID\020\t\032\005\242\224#\0017*\203\002\n"
    "\024TradingSessionIdEnum\022)\n\036TRADING_SESSION"
    "_ID_AFTER_HOURS\020\000\032\005\242\224#\0016\022\'\n\034TRADING_SESS"
    "ION_ID_AFTERNOON\020\001\032\005\242\224#\0014\022!\n\026TRADING_SES"
    "SION_ID_DAY\020\002\032\005\242\224#\0011\022%\n\032TRADING_SESSION_"
    "ID_EVENING\020\003\032\005\242\224#\0015\022&\n\033TRADING_SESSION_I"
    "D_HALF_DAY\020\004\032\005\242\224#\0012\022%\n\032TRADING_SESSION_I"
    "D_MORNING\020\005\032\005\242\224#\0013*\203\003\n\027TradingSessionSub"
    "IdEnum\022<\n1TRADING_SESSION_SUB_ID_CLOSING"
    "_OR_CLOSING_AUCTION\020\000\032\005\242\224#\0014\022,\n!TRADING_"
    "SESSION_SUB_ID_CONTINUOUS\020\001\032\005\242\224#\0013\0222\n\'TR"
    "ADING_SESSION_SUB_ID_INTRADAY_AUCTION\020\002\032"
    "\005\242\224#\0016\022<\n1TRADING_SESSION_SUB_ID_OPENING"
    "_OR_OPENING_AUCTION\020\003\032\005\242\224#\0012\022.\n#TRADING_"
    "SESSION_SUB_ID_POST_TRADING\020\004\032\005\242\224#\0015\022-\n\""
    "TRADING_SESSION_SUB_ID_PRE_TRADING\020\005\032\005\242\224"
    "#\0011\022+\n TRADING_SESSION_SUB_ID_QUIESCENT\020"
    "\006\032\005\242\224#\0017*\300\001\n\023ExpirationCycleEnum\022;\n0EXPI"
    "RATION_CYCLE_EXPIRE_ON_TRADING_SESSION_C"
    "LOSE\020\000\032\005\242\224#\0010\022:\n/EXPIRATION_CYCLE_EXPIRE"
    "_ON_TRADING_SESSION_OPEN\020\001\032\005\242\224#\0011\0220\n%EXP"
    "IRATION_CYCLE_SPECIFIED_EXPIRATION\020\002\032\005\242\224"
    "#\0012*\307\001\n\033SubscriptionRequestTypeEnum\022>\n3S"
    "UBSCRIPTION_REQUEST_TYPE_DISABLE_PREVIOU"
    "S_SNAPSHOT\020\000\032\005\242\224#\0012\022-\n\"SUBSCRIPTION_REQU"
    "EST_TYPE_SNAPSHOT\020\001\032\005\242\224#\0010\0229\n.SUBSCRIPTI"
    "ON_REQUEST_TYPE_SNAPSHOT_AND_UPDATES\020\002\032\005"
    "\242\224#\0011*\225\001\n\030SecurityUpdateActionEnum\022%\n\032SE"
    "CURITY_UPDATE_ACTION_ADD\020\000\032\005\242\224#\001A\022(\n\035SEC"
    "URITY_UPDATE_ACTION_DELETE\020\001\032\005\242\224#\001D\022(\n\035S"
    "ECURITY_UPDATE_ACTION_MODIFY\020\002\032\005\242\224#\001M*\315\001"
    "\n\024SecurityListTypeEnum\0225\n*SECURITY_LIST_"
    "TYPE_INDUSTRY_CLASSIFICATION\020\000\032\005\242\224#\0011\022$\n"
    "\031SECURITY_LIST_TYPE_MARKET\020\001\032\005\242\224#\0013\022,\n!S"
    "ECURITY_LIST_TYPE_NEWSPAPER_LIST\020\002\032\005\242\224#\001"
    "4\022*\n\037SECURITY_LIST_TYPE_TRADING_LIST\020\003\032\005"
    "\242\224#\0012*\235\001\n\032SecurityListTypeSourceEnum\022)\n\036"
    "SECURITY_LIST_TYPE_SOURCE_GICS\020\000\032\005\242\224#\0013\022"
    "(\n\035SECURITY_LIST_TYPE_SOURCE_ICB\020\001\032\005\242\224#\001"
    "1\022*\n\037SECURITY_LIST_TYPE_SOURCE_NAICS\020\002\032\005"
    "\242\224#\0012*\262\003\n\031SecurityRequestResultEnum\022J\n\?S"
    "ECURITY_REQUEST_RESULT_INSTRUMENT_DATA_T"
    "EMPORARILY_UNAVAILABLE\020\000\032\005\242\224#\0014\022A\n6SECUR"
    "ITY_REQUEST_RESULT_INVALID_OR_UNSUPPORTE"
    "D_REQUEST\020\001\032\005\242\224#\0011\0227\n,SECURITY_REQUEST_R"
    "ESULT_NO_INSTRUMENTS_FOUND\020\002\032\005\242\224#\0012\022M\nBS"
    "ECURITY_REQUEST_RESULT_NOT_AUTHORIZED_TO"
    "_RETRIEVE_INSTRUMENT_DATA\020\003\032\005\242\224#\0013\022L\nASE"
    "CURITY_REQUEST_RESULT_REQUEST_FOR_INSTRU"
    "MENT_DATA_NOT_SUPPORTED\020\004\032\005\242\224#\0015\0220\n%SECU"
    "RITY_REQUEST_RESULT_VALID_REQUEST\020\005\032\005\242\224#"
    "\0010*d\n\020LastFragmentEnum\022%\n\032LAST_FRAGMENT_"
    "LAST_MESSAGE\020\000\032\005\242\224#\001Y\022)\n\036LAST_FRAGMENT_N"
    "OT_LAST_MESSAGE\020\001\032\005\242\224#\001N*\341\002\n\033SecurityLis"
    "tRequestTypeEnum\0224\n)SECURITY_LIST_REQUES"
    "T_TYPE_ALL_SECURITIES\020\000\032\005\242\224#\0014\022-\n\"SECURI"
    "TY_LIST_REQUEST_TYPE_PRODUCT\020\001\032\005\242\224#\0012\0227\n"
    ",SECURITY_LIST_REQUEST_TYPE_SECURITY_TYP"
    "E_AND\020\002\032\005\242\224#\0011\022,\n!SECURITY_LIST_REQUEST_"
    "TYPE_SYMBOL\020\003\032\005\242\224#\0010\0228\n-SECURITY_LIST_RE"
    "QUEST_TYPE_TRADING_SESSION_ID\020\004\032\005\242\224#\0013\022<"
    "\n1SECURITY_LIST_REQUEST_TYPE_MARKET_ID_O"
    "R_MARKET_ID\020\005\032\005\242\224#\0015*\245\001\n\017LegSwapTypeEnum"
    "\022*\n\037LEG_SWAP_TYPE_MODIFIED_DURATION\020\000\032\005\242"
    "\224#\0012\022$\n\031LEG_SWAP_TYPE_PAR_FOR_PAR\020\001\032\005\242\224#"
    "\0011\022!\n\026LEG_SWAP_TYPE_PROCEEDS\020\002\032\005\242\224#\0015\022\035\n"
    "\022LEG_SWAP_TYPE_RISK\020\003\032\005\242\224#\0014B5\n\032org.fixp"
    "rotocol.componentsB\027SecuritiesReferenceD"
    "ata", 14763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "securitiesreferencedata.proto", &protobuf_RegisterTypes);
  SecurityDefinition::default_instance_ = new SecurityDefinition();
  SecurityDefinitionRequest::default_instance_ = new SecurityDefinitionRequest();
  SecurityDefinitionUpdateReport::default_instance_ = new SecurityDefinitionUpdateReport();
  SecListGrp::default_instance_ = new SecListGrp();
  SecurityListTypeUnion::default_instance_ = new SecurityListTypeUnion();
  SecurityListTypeSourceUnion::default_instance_ = new SecurityListTypeSourceUnion();
  SecurityList::default_instance_ = new SecurityList();
  SecurityListRequest::default_instance_ = new SecurityListRequest();
  SecLstUpdRelSymsLegGrp::default_instance_ = new SecLstUpdRelSymsLegGrp();
  SecLstUpdRelSymGrp::default_instance_ = new SecLstUpdRelSymGrp();
  SecurityListUpdateReport::default_instance_ = new SecurityListUpdateReport();
  SecurityDefinition::default_instance_->InitAsDefaultInstance();
  SecurityDefinitionRequest::default_instance_->InitAsDefaultInstance();
  SecurityDefinitionUpdateReport::default_instance_->InitAsDefaultInstance();
  SecListGrp::default_instance_->InitAsDefaultInstance();
  SecurityListTypeUnion::default_instance_->InitAsDefaultInstance();
  SecurityListTypeSourceUnion::default_instance_->InitAsDefaultInstance();
  SecurityList::default_instance_->InitAsDefaultInstance();
  SecurityListRequest::default_instance_->InitAsDefaultInstance();
  SecLstUpdRelSymsLegGrp::default_instance_->InitAsDefaultInstance();
  SecLstUpdRelSymGrp::default_instance_->InitAsDefaultInstance();
  SecurityListUpdateReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_securitiesreferencedata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_securitiesreferencedata_2eproto {
  StaticDescriptorInitializer_securitiesreferencedata_2eproto() {
    protobuf_AddDesc_securitiesreferencedata_2eproto();
  }
} static_descriptor_initializer_securitiesreferencedata_2eproto_;
const ::google::protobuf::EnumDescriptor* SecurityResponseTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityResponseTypeEnum_descriptor_;
}
bool SecurityResponseTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CorporateActionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorporateActionEnum_descriptor_;
}
bool CorporateActionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityRequestTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityRequestTypeEnum_descriptor_;
}
bool SecurityRequestTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionIdEnum_descriptor_;
}
bool TradingSessionIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TradingSessionSubIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradingSessionSubIdEnum_descriptor_;
}
bool TradingSessionSubIdEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExpirationCycleEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpirationCycleEnum_descriptor_;
}
bool ExpirationCycleEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SubscriptionRequestTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscriptionRequestTypeEnum_descriptor_;
}
bool SubscriptionRequestTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityUpdateActionEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityUpdateActionEnum_descriptor_;
}
bool SecurityUpdateActionEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityListTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListTypeEnum_descriptor_;
}
bool SecurityListTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityListTypeSourceEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListTypeSourceEnum_descriptor_;
}
bool SecurityListTypeSourceEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityRequestResultEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityRequestResultEnum_descriptor_;
}
bool SecurityRequestResultEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LastFragmentEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LastFragmentEnum_descriptor_;
}
bool LastFragmentEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SecurityListRequestTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListRequestTypeEnum_descriptor_;
}
bool SecurityListRequestTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LegSwapTypeEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LegSwapTypeEnum_descriptor_;
}
bool LegSwapTypeEnum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinition::kCurrencyFieldNumber;
const int SecurityDefinition::kEncodedTextFieldNumber;
const int SecurityDefinition::kEncodedTextLenFieldNumber;
const int SecurityDefinition::kSecurityReqIdFieldNumber;
const int SecurityDefinition::kSecurityResponseIdFieldNumber;
const int SecurityDefinition::kSecurityResponseTypeFieldNumber;
const int SecurityDefinition::kStandardHeaderFieldNumber;
const int SecurityDefinition::kStandardTrailerFieldNumber;
const int SecurityDefinition::kTextFieldNumber;
const int SecurityDefinition::kInstrumentFieldNumber;
const int SecurityDefinition::kClearingBusinessDateFieldNumber;
const int SecurityDefinition::kInstrmtLegGrpFieldNumber;
const int SecurityDefinition::kInstrumentExtensionFieldNumber;
const int SecurityDefinition::kSecurityReportIdFieldNumber;
const int SecurityDefinition::kUndInstrmtGrpFieldNumber;
const int SecurityDefinition::kApplicationSequenceControlFieldNumber;
const int SecurityDefinition::kCorporateActionFieldNumber;
const int SecurityDefinition::kMarketSegmentGrpFieldNumber;
const int SecurityDefinition::kSpreadOrBenchmarkCurveDataFieldNumber;
const int SecurityDefinition::kStipulationsFieldNumber;
const int SecurityDefinition::kYieldDataFieldNumber;
const int SecurityDefinition::kTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecurityDefinition::SecurityDefinition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityDefinition::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
}

SecurityDefinition::SecurityDefinition(const SecurityDefinition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityDefinition::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_response_type_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_ = NULL;
  clearing_business_date_ = 0;
  instrument_extension_ = NULL;
  security_report_id_ = GOOGLE_LONGLONG(0);
  application_sequence_control_ = NULL;
  spread_or_benchmark_curve_data_ = NULL;
  yield_data_ = NULL;
  transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinition::~SecurityDefinition() {
  SharedDtor();
}

void SecurityDefinition::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_response_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete instrument_extension_;
    delete application_sequence_control_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
  }
}

void SecurityDefinition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinition_descriptor_;
}

const SecurityDefinition& SecurityDefinition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityDefinition* SecurityDefinition::default_instance_ = NULL;

SecurityDefinition* SecurityDefinition::New() const {
  return new SecurityDefinition;
}

void SecurityDefinition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    if (has_security_response_id()) {
      if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
        security_response_id_->clear();
      }
    }
    security_response_type_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    clearing_business_date_ = 0;
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
    security_report_id_ = GOOGLE_LONGLONG(0);
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    transact_time_ = GOOGLE_LONGLONG(0);
  }
  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  corporate_action_.Clear();
  market_segment_grp_.Clear();
  stipulations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_req_id;
        break;
      }

      // optional string security_req_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_security_response_id;
        break;
      }

      // optional string security_response_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_response_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_response_id().data(), this->security_response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_security_response_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityResponseTypeEnum_IsValid(value)) {
            set_security_response_type(static_cast< ::SecuritiesReferenceData::SecurityResponseTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_text;
        break;
      }

      // optional string text = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_clearing_business_date;
        break;
      }

      // optional sfixed32 clearing_business_date = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clearing_business_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &clearing_business_date_)));
          set_has_clearing_business_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(106)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_security_report_id;
        break;
      }

      // optional sfixed64 security_report_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_report_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_report_id_)));
          set_has_security_report_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(130)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_corporate_action;
        break;
      }

      // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 17 [packed = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corporate_action:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
              add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
            add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_grp;
        break;
      }

      // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_market_segment_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_grp;
        if (input->ExpectTag(154)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        if (input->ExpectTag(170)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityDefinition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encoded_text_len(), output);
  }

  // optional string security_req_id = 4;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->security_req_id(), output);
  }

  // optional string security_response_id = 5;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->security_response_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 6;
  if (has_security_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->security_response_type(), output);
  }

  // optional .Session.StandardHeader standard_header = 7;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 8;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->standard_trailer(), output);
  }

  // optional string text = 9;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->text(), output);
  }

  // optional .Common.Instrument instrument = 10;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->instrument(), output);
  }

  // optional sfixed32 clearing_business_date = 11;
  if (has_clearing_business_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->clearing_business_date(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 12;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->instrmt_leg_grp(i), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 13;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->instrument_extension(), output);
  }

  // optional sfixed64 security_report_id = 14;
  if (has_security_report_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(14, this->security_report_id(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->und_instrmt_grp(i), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->application_sequence_control(), output);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 17 [packed = true];
  if (this->corporate_action_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_corporate_action_cached_byte_size_);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->corporate_action(i), output);
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->market_segment_grp(i), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->stipulations(i), output);
  }

  // optional .Common.YieldData yield_data = 21;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->yield_data(), output);
  }

  // optional sfixed64 transact_time = 22;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(22, this->transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityDefinition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encoded_text_len(), target);
  }

  // optional string security_req_id = 4;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->security_req_id(), target);
  }

  // optional string security_response_id = 5;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->security_response_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 6;
  if (has_security_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->security_response_type(), target);
  }

  // optional .Session.StandardHeader standard_header = 7;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 8;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->standard_trailer(), target);
  }

  // optional string text = 9;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->text(), target);
  }

  // optional .Common.Instrument instrument = 10;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->instrument(), target);
  }

  // optional sfixed32 clearing_business_date = 11;
  if (has_clearing_business_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->clearing_business_date(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 12;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->instrmt_leg_grp(i), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 13;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->instrument_extension(), target);
  }

  // optional sfixed64 security_report_id = 14;
  if (has_security_report_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(14, this->security_report_id(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->und_instrmt_grp(i), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->application_sequence_control(), target);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 17 [packed = true];
  if (this->corporate_action_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _corporate_action_cached_byte_size_, target);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->corporate_action(i), target);
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->market_segment_grp(i), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->stipulations(i), target);
  }

  // optional .Common.YieldData yield_data = 21;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->yield_data(), target);
  }

  // optional sfixed64 transact_time = 22;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(22, this->transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityDefinition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 2;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 3;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional string security_req_id = 4;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional string security_response_id = 5;
    if (has_security_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_response_id());
    }

    // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 6;
    if (has_security_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_response_type());
    }

    // optional .Session.StandardHeader standard_header = 7;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 8;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string text = 9;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Common.Instrument instrument = 10;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional sfixed32 clearing_business_date = 11;
    if (has_clearing_business_date()) {
      total_size += 1 + 4;
    }

    // optional .Common.InstrumentExtension instrument_extension = 13;
    if (has_instrument_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

    // optional sfixed64 security_report_id = 14;
    if (has_security_report_id()) {
      total_size += 1 + 8;
    }

    // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
    if (has_application_sequence_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional .Common.YieldData yield_data = 21;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional sfixed64 transact_time = 22;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 12;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  total_size += 1 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 17 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->corporate_action_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->corporate_action(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _corporate_action_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  total_size += 2 * this->market_segment_grp_size();
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->market_segment_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 20;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinition::MergeFrom(const SecurityDefinition& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  corporate_action_.MergeFrom(from.corporate_action_);
  market_segment_grp_.MergeFrom(from.market_segment_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_security_response_id()) {
      set_security_response_id(from.security_response_id());
    }
    if (from.has_security_response_type()) {
      set_security_response_type(from.security_response_type());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_clearing_business_date()) {
      set_clearing_business_date(from.clearing_business_date());
    }
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
    if (from.has_security_report_id()) {
      set_security_report_id(from.security_report_id());
    }
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinition::CopyFrom(const SecurityDefinition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinition::IsInitialized() const {

  return true;
}

void SecurityDefinition::Swap(SecurityDefinition* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(security_response_id_, other->security_response_id_);
    std::swap(security_response_type_, other->security_response_type_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(instrument_, other->instrument_);
    std::swap(clearing_business_date_, other->clearing_business_date_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(instrument_extension_, other->instrument_extension_);
    std::swap(security_report_id_, other->security_report_id_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    corporate_action_.Swap(&other->corporate_action_);
    market_segment_grp_.Swap(&other->market_segment_grp_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinition_descriptor_;
  metadata.reflection = SecurityDefinition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinitionRequest::kCurrencyFieldNumber;
const int SecurityDefinitionRequest::kEncodedTextFieldNumber;
const int SecurityDefinitionRequest::kEncodedTextLenFieldNumber;
const int SecurityDefinitionRequest::kSecurityReqIdFieldNumber;
const int SecurityDefinitionRequest::kSecurityRequestTypeFieldNumber;
const int SecurityDefinitionRequest::kStandardHeaderFieldNumber;
const int SecurityDefinitionRequest::kStandardTrailerFieldNumber;
const int SecurityDefinitionRequest::kTextFieldNumber;
const int SecurityDefinitionRequest::kTradingSessionIdFieldNumber;
const int SecurityDefinitionRequest::kInstrumentFieldNumber;
const int SecurityDefinitionRequest::kSubscriptionRequestTypeFieldNumber;
const int SecurityDefinitionRequest::kTradingSessionSubIdFieldNumber;
const int SecurityDefinitionRequest::kExpirationCycleFieldNumber;
const int SecurityDefinitionRequest::kInstrmtLegGrpFieldNumber;
const int SecurityDefinitionRequest::kInstrumentExtensionFieldNumber;
const int SecurityDefinitionRequest::kUndInstrmtGrpFieldNumber;
const int SecurityDefinitionRequest::kMarketIdFieldNumber;
const int SecurityDefinitionRequest::kMarketSegmentIdFieldNumber;
const int SecurityDefinitionRequest::kSpreadOrBenchmarkCurveDataFieldNumber;
const int SecurityDefinitionRequest::kStipulationsFieldNumber;
const int SecurityDefinitionRequest::kYieldDataFieldNumber;
#endif  // !_MSC_VER

SecurityDefinitionRequest::SecurityDefinitionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityDefinitionRequest::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
}

SecurityDefinitionRequest::SecurityDefinitionRequest(const SecurityDefinitionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityDefinitionRequest::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_request_type_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_session_id_ = 0;
  instrument_ = NULL;
  subscription_request_type_ = 0;
  trading_session_sub_id_ = 0;
  expiration_cycle_ = 0;
  instrument_extension_ = NULL;
  market_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_segment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  spread_or_benchmark_curve_data_ = NULL;
  yield_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinitionRequest::~SecurityDefinitionRequest() {
  SharedDtor();
}

void SecurityDefinitionRequest::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (market_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_id_;
  }
  if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_segment_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete instrument_;
    delete instrument_extension_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
  }
}

void SecurityDefinitionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinitionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinitionRequest_descriptor_;
}

const SecurityDefinitionRequest& SecurityDefinitionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityDefinitionRequest* SecurityDefinitionRequest::default_instance_ = NULL;

SecurityDefinitionRequest* SecurityDefinitionRequest::New() const {
  return new SecurityDefinitionRequest;
}

void SecurityDefinitionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    security_request_type_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    trading_session_id_ = 0;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    subscription_request_type_ = 0;
    trading_session_sub_id_ = 0;
    expiration_cycle_ = 0;
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_market_id()) {
      if (market_id_ != &::google::protobuf::internal::kEmptyString) {
        market_id_->clear();
      }
    }
    if (has_market_segment_id()) {
      if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
        market_segment_id_->clear();
      }
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
  }
  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  stipulations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinitionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_req_id;
        break;
      }

      // optional string security_req_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_security_request_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityRequestTypeEnum security_request_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityRequestTypeEnum_IsValid(value)) {
            set_security_request_type(static_cast< ::SecuritiesReferenceData::SecurityRequestTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_text;
        break;
      }

      // optional string text = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_trading_session_id;
        break;
      }

      // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::SecuritiesReferenceData::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_subscription_request_type;
        break;
      }

      // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscription_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SubscriptionRequestTypeEnum_IsValid(value)) {
            set_subscription_request_type(static_cast< ::SecuritiesReferenceData::SubscriptionRequestTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::SecuritiesReferenceData::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_expiration_cycle;
        break;
      }

      // optional .SecuritiesReferenceData.ExpirationCycleEnum expiration_cycle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expiration_cycle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::ExpirationCycleEnum_IsValid(value)) {
            set_expiration_cycle(static_cast< ::SecuritiesReferenceData::ExpirationCycleEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(122)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(138)) goto parse_market_id;
        break;
      }

      // optional string market_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_id().data(), this->market_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_id;
        break;
      }

      // optional string market_segment_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_segment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_segment_id().data(), this->market_segment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        if (input->ExpectTag(170)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityDefinitionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encoded_text_len(), output);
  }

  // optional string security_req_id = 4;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->security_req_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityRequestTypeEnum security_request_type = 5;
  if (has_security_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->security_request_type(), output);
  }

  // optional .Session.StandardHeader standard_header = 6;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 7;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->standard_trailer(), output);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->text(), output);
  }

  // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 9;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->trading_session_id(), output);
  }

  // optional .Common.Instrument instrument = 10;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->instrument(), output);
  }

  // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 11;
  if (has_subscription_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->subscription_request_type(), output);
  }

  // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->trading_session_sub_id(), output);
  }

  // optional .SecuritiesReferenceData.ExpirationCycleEnum expiration_cycle = 13;
  if (has_expiration_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->expiration_cycle(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->instrmt_leg_grp(i), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 15;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->instrument_extension(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->und_instrmt_grp(i), output);
  }

  // optional string market_id = 17;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->market_id(), output);
  }

  // optional string market_segment_id = 18;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->market_segment_id(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->stipulations(i), output);
  }

  // optional .Common.YieldData yield_data = 21;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->yield_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityDefinitionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encoded_text_len(), target);
  }

  // optional string security_req_id = 4;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->security_req_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityRequestTypeEnum security_request_type = 5;
  if (has_security_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->security_request_type(), target);
  }

  // optional .Session.StandardHeader standard_header = 6;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 7;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->standard_trailer(), target);
  }

  // optional string text = 8;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->text(), target);
  }

  // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 9;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->trading_session_id(), target);
  }

  // optional .Common.Instrument instrument = 10;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->instrument(), target);
  }

  // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 11;
  if (has_subscription_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->subscription_request_type(), target);
  }

  // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->trading_session_sub_id(), target);
  }

  // optional .SecuritiesReferenceData.ExpirationCycleEnum expiration_cycle = 13;
  if (has_expiration_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->expiration_cycle(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->instrmt_leg_grp(i), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 15;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->instrument_extension(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->und_instrmt_grp(i), target);
  }

  // optional string market_id = 17;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->market_id(), target);
  }

  // optional string market_segment_id = 18;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->market_segment_id(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->stipulations(i), target);
  }

  // optional .Common.YieldData yield_data = 21;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->yield_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityDefinitionRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 2;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 3;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional string security_req_id = 4;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional .SecuritiesReferenceData.SecurityRequestTypeEnum security_request_type = 5;
    if (has_security_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_request_type());
    }

    // optional .Session.StandardHeader standard_header = 6;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 7;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 9;
    if (has_trading_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .Common.Instrument instrument = 10;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 11;
    if (has_subscription_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscription_request_type());
    }

    // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
    if (has_trading_session_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

    // optional .SecuritiesReferenceData.ExpirationCycleEnum expiration_cycle = 13;
    if (has_expiration_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->expiration_cycle());
    }

    // optional .Common.InstrumentExtension instrument_extension = 15;
    if (has_instrument_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string market_id = 17;
    if (has_market_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string market_segment_id = 18;
    if (has_market_segment_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_segment_id());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional .Common.YieldData yield_data = 21;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 20;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinitionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinitionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinitionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinitionRequest::MergeFrom(const SecurityDefinitionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_security_request_type()) {
      set_security_request_type(from.security_request_type());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_subscription_request_type()) {
      set_subscription_request_type(from.subscription_request_type());
    }
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
    if (from.has_expiration_cycle()) {
      set_expiration_cycle(from.expiration_cycle());
    }
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_market_segment_id()) {
      set_market_segment_id(from.market_segment_id());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinitionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionRequest::CopyFrom(const SecurityDefinitionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionRequest::IsInitialized() const {

  return true;
}

void SecurityDefinitionRequest::Swap(SecurityDefinitionRequest* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(security_request_type_, other->security_request_type_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(instrument_, other->instrument_);
    std::swap(subscription_request_type_, other->subscription_request_type_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(expiration_cycle_, other->expiration_cycle_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(instrument_extension_, other->instrument_extension_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(market_id_, other->market_id_);
    std::swap(market_segment_id_, other->market_segment_id_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinitionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinitionRequest_descriptor_;
  metadata.reflection = SecurityDefinitionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityDefinitionUpdateReport::kClearingBusinessDateFieldNumber;
const int SecurityDefinitionUpdateReport::kCorporateActionFieldNumber;
const int SecurityDefinitionUpdateReport::kCurrencyFieldNumber;
const int SecurityDefinitionUpdateReport::kEncodedTextFieldNumber;
const int SecurityDefinitionUpdateReport::kEncodedTextLenFieldNumber;
const int SecurityDefinitionUpdateReport::kInstrmtLegGrpFieldNumber;
const int SecurityDefinitionUpdateReport::kInstrumentFieldNumber;
const int SecurityDefinitionUpdateReport::kSecurityReportIdFieldNumber;
const int SecurityDefinitionUpdateReport::kSecurityReqIdFieldNumber;
const int SecurityDefinitionUpdateReport::kSecurityResponseIdFieldNumber;
const int SecurityDefinitionUpdateReport::kSecurityResponseTypeFieldNumber;
const int SecurityDefinitionUpdateReport::kSecurityUpdateActionFieldNumber;
const int SecurityDefinitionUpdateReport::kStandardHeaderFieldNumber;
const int SecurityDefinitionUpdateReport::kStandardTrailerFieldNumber;
const int SecurityDefinitionUpdateReport::kTextFieldNumber;
const int SecurityDefinitionUpdateReport::kApplicationSequenceControlFieldNumber;
const int SecurityDefinitionUpdateReport::kInstrumentExtensionFieldNumber;
const int SecurityDefinitionUpdateReport::kMarketSegmentGrpFieldNumber;
const int SecurityDefinitionUpdateReport::kSpreadOrBenchmarkCurveDataFieldNumber;
const int SecurityDefinitionUpdateReport::kStipulationsFieldNumber;
const int SecurityDefinitionUpdateReport::kUndInstrmtGrpFieldNumber;
const int SecurityDefinitionUpdateReport::kYieldDataFieldNumber;
const int SecurityDefinitionUpdateReport::kTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecurityDefinitionUpdateReport::SecurityDefinitionUpdateReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityDefinitionUpdateReport::InitAsDefaultInstance() {
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
}

SecurityDefinitionUpdateReport::SecurityDefinitionUpdateReport(const SecurityDefinitionUpdateReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityDefinitionUpdateReport::SharedCtor() {
  _cached_size_ = 0;
  clearing_business_date_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  instrument_ = NULL;
  security_report_id_ = GOOGLE_LONGLONG(0);
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_response_type_ = 0;
  security_update_action_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_sequence_control_ = NULL;
  instrument_extension_ = NULL;
  spread_or_benchmark_curve_data_ = NULL;
  yield_data_ = NULL;
  transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityDefinitionUpdateReport::~SecurityDefinitionUpdateReport() {
  SharedDtor();
}

void SecurityDefinitionUpdateReport::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_response_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete instrument_;
    delete standard_header_;
    delete standard_trailer_;
    delete application_sequence_control_;
    delete instrument_extension_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
  }
}

void SecurityDefinitionUpdateReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityDefinitionUpdateReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityDefinitionUpdateReport_descriptor_;
}

const SecurityDefinitionUpdateReport& SecurityDefinitionUpdateReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityDefinitionUpdateReport* SecurityDefinitionUpdateReport::default_instance_ = NULL;

SecurityDefinitionUpdateReport* SecurityDefinitionUpdateReport::New() const {
  return new SecurityDefinitionUpdateReport;
}

void SecurityDefinitionUpdateReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clearing_business_date_ = 0;
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    security_report_id_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    if (has_security_response_id()) {
      if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
        security_response_id_->clear();
      }
    }
    security_response_type_ = 0;
    security_update_action_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    transact_time_ = GOOGLE_LONGLONG(0);
  }
  corporate_action_.Clear();
  instrmt_leg_grp_.Clear();
  market_segment_grp_.Clear();
  stipulations_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityDefinitionUpdateReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 clearing_business_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &clearing_business_date_)));
          set_has_clearing_business_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corporate_action;
        break;
      }

      // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corporate_action:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
              add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
            add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_currency;
        break;
      }

      // optional string currency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(58)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_security_report_id;
        break;
      }

      // optional sfixed64 security_report_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_report_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_report_id_)));
          set_has_security_report_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_security_req_id;
        break;
      }

      // optional string security_req_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_security_response_id;
        break;
      }

      // optional string security_response_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_response_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_response_id().data(), this->security_response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_security_response_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_response_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityResponseTypeEnum_IsValid(value)) {
            set_security_response_type(static_cast< ::SecuritiesReferenceData::SecurityResponseTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_security_update_action;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_update_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityUpdateActionEnum_IsValid(value)) {
            set_security_update_action(static_cast< ::SecuritiesReferenceData::SecurityUpdateActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_text;
        break;
      }

      // optional string text = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_grp;
        break;
      }

      // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_market_segment_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_grp;
        if (input->ExpectTag(154)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_stipulations;
        if (input->ExpectTag(170)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(178)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityDefinitionUpdateReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 clearing_business_date = 1;
  if (has_clearing_business_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->clearing_business_date(), output);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  if (this->corporate_action_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_corporate_action_cached_byte_size_);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->corporate_action(i), output);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->currency(), output);
  }

  // optional bytes encoded_text = 4;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 5;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->encoded_text_len(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 6;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->instrmt_leg_grp(i), output);
  }

  // optional .Common.Instrument instrument = 7;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->instrument(), output);
  }

  // optional sfixed64 security_report_id = 8;
  if (has_security_report_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(8, this->security_report_id(), output);
  }

  // optional string security_req_id = 9;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->security_req_id(), output);
  }

  // optional string security_response_id = 10;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->security_response_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 11;
  if (has_security_response_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->security_response_type(), output);
  }

  // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 12;
  if (has_security_update_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->security_update_action(), output);
  }

  // optional .Session.StandardHeader standard_header = 13;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 14;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->standard_trailer(), output);
  }

  // optional string text = 15;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->text(), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->application_sequence_control(), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 17;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->instrument_extension(), output);
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->market_segment_grp(i), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->stipulations(i), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 21;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->und_instrmt_grp(i), output);
  }

  // optional .Common.YieldData yield_data = 22;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->yield_data(), output);
  }

  // optional sfixed64 transact_time = 23;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityDefinitionUpdateReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 clearing_business_date = 1;
  if (has_clearing_business_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->clearing_business_date(), target);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  if (this->corporate_action_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _corporate_action_cached_byte_size_, target);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->corporate_action(i), target);
  }

  // optional string currency = 3;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency(), target);
  }

  // optional bytes encoded_text = 4;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 5;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->encoded_text_len(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 6;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->instrmt_leg_grp(i), target);
  }

  // optional .Common.Instrument instrument = 7;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->instrument(), target);
  }

  // optional sfixed64 security_report_id = 8;
  if (has_security_report_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(8, this->security_report_id(), target);
  }

  // optional string security_req_id = 9;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->security_req_id(), target);
  }

  // optional string security_response_id = 10;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->security_response_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 11;
  if (has_security_response_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->security_response_type(), target);
  }

  // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 12;
  if (has_security_update_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->security_update_action(), target);
  }

  // optional .Session.StandardHeader standard_header = 13;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 14;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->standard_trailer(), target);
  }

  // optional string text = 15;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->text(), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->application_sequence_control(), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 17;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->instrument_extension(), target);
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->market_segment_grp(i), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 20;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->stipulations(i), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 21;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->und_instrmt_grp(i), target);
  }

  // optional .Common.YieldData yield_data = 22;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->yield_data(), target);
  }

  // optional sfixed64 transact_time = 23;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityDefinitionUpdateReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 clearing_business_date = 1;
    if (has_clearing_business_date()) {
      total_size += 1 + 4;
    }

    // optional string currency = 3;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 4;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 5;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .Common.Instrument instrument = 7;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional sfixed64 security_report_id = 8;
    if (has_security_report_id()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string security_req_id = 9;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional string security_response_id = 10;
    if (has_security_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_response_id());
    }

    // optional .SecuritiesReferenceData.SecurityResponseTypeEnum security_response_type = 11;
    if (has_security_response_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_response_type());
    }

    // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 12;
    if (has_security_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_update_action());
    }

    // optional .Session.StandardHeader standard_header = 13;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 14;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional string text = 15;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Common.ApplicationSequenceControl application_sequence_control = 16;
    if (has_application_sequence_control()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Common.InstrumentExtension instrument_extension = 17;
    if (has_instrument_extension()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 19;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

    // optional .Common.YieldData yield_data = 22;
    if (has_yield_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional sfixed64 transact_time = 23;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->corporate_action_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->corporate_action(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _corporate_action_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 6;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.MarketSegmentGrp market_segment_grp = 18;
  total_size += 2 * this->market_segment_grp_size();
  for (int i = 0; i < this->market_segment_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->market_segment_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 20;
  total_size += 2 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 21;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityDefinitionUpdateReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityDefinitionUpdateReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityDefinitionUpdateReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityDefinitionUpdateReport::MergeFrom(const SecurityDefinitionUpdateReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  corporate_action_.MergeFrom(from.corporate_action_);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  market_segment_grp_.MergeFrom(from.market_segment_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clearing_business_date()) {
      set_clearing_business_date(from.clearing_business_date());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_security_report_id()) {
      set_security_report_id(from.security_report_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_security_response_id()) {
      set_security_response_id(from.security_response_id());
    }
    if (from.has_security_response_type()) {
      set_security_response_type(from.security_response_type());
    }
    if (from.has_security_update_action()) {
      set_security_update_action(from.security_update_action());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityDefinitionUpdateReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityDefinitionUpdateReport::CopyFrom(const SecurityDefinitionUpdateReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityDefinitionUpdateReport::IsInitialized() const {

  return true;
}

void SecurityDefinitionUpdateReport::Swap(SecurityDefinitionUpdateReport* other) {
  if (other != this) {
    std::swap(clearing_business_date_, other->clearing_business_date_);
    corporate_action_.Swap(&other->corporate_action_);
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(instrument_, other->instrument_);
    std::swap(security_report_id_, other->security_report_id_);
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(security_response_id_, other->security_response_id_);
    std::swap(security_response_type_, other->security_response_type_);
    std::swap(security_update_action_, other->security_update_action_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(text_, other->text_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    std::swap(instrument_extension_, other->instrument_extension_);
    market_segment_grp_.Swap(&other->market_segment_grp_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityDefinitionUpdateReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityDefinitionUpdateReport_descriptor_;
  metadata.reflection = SecurityDefinitionUpdateReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecListGrp::kCurrencyFieldNumber;
const int SecListGrp::kEncodedTextFieldNumber;
const int SecListGrp::kEncodedTextLenFieldNumber;
const int SecListGrp::kFinancingDetailsFieldNumber;
const int SecListGrp::kInstrmtLegSecListGrpFieldNumber;
const int SecListGrp::kInstrumentFieldNumber;
const int SecListGrp::kInstrumentExtensionFieldNumber;
const int SecListGrp::kSpreadOrBenchmarkCurveDataFieldNumber;
const int SecListGrp::kStipulationsFieldNumber;
const int SecListGrp::kTextFieldNumber;
const int SecListGrp::kUndInstrmtGrpFieldNumber;
const int SecListGrp::kYieldDataFieldNumber;
const int SecListGrp::kSecurityTradingRulesFieldNumber;
const int SecListGrp::kStrikeRulesFieldNumber;
const int SecListGrp::kRelSymTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecListGrp::SecListGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecListGrp::InitAsDefaultInstance() {
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  security_trading_rules_ = const_cast< ::Common::SecurityTradingRules*>(&::Common::SecurityTradingRules::default_instance());
}

SecListGrp::SecListGrp(const SecListGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecListGrp::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  financing_details_ = NULL;
  instrument_ = NULL;
  instrument_extension_ = NULL;
  spread_or_benchmark_curve_data_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yield_data_ = NULL;
  security_trading_rules_ = NULL;
  rel_sym_transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecListGrp::~SecListGrp() {
  SharedDtor();
}

void SecListGrp::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
    delete financing_details_;
    delete instrument_;
    delete instrument_extension_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
    delete security_trading_rules_;
  }
}

void SecListGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecListGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecListGrp_descriptor_;
}

const SecListGrp& SecListGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecListGrp* SecListGrp::default_instance_ = NULL;

SecListGrp* SecListGrp::New() const {
  return new SecListGrp;
}

void SecListGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    if (has_security_trading_rules()) {
      if (security_trading_rules_ != NULL) security_trading_rules_->::Common::SecurityTradingRules::Clear();
    }
    rel_sym_transact_time_ = GOOGLE_LONGLONG(0);
  }
  instrmt_leg_sec_list_grp_.Clear();
  stipulations_.Clear();
  und_instrmt_grp_.Clear();
  strike_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecListGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_instrmt_leg_sec_list_grp;
        break;
      }

      // repeated .Common.InstrmtLegSecListGrp instrmt_leg_sec_list_grp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_sec_list_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_sec_list_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_instrmt_leg_sec_list_grp;
        if (input->ExpectTag(50)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stipulations;
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(98)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_security_trading_rules;
        break;
      }

      // optional .Common.SecurityTradingRules security_trading_rules = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_trading_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_trading_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strike_rules;
        break;
      }

      // repeated .Common.StrikeRules strike_rules = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strike_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strike_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strike_rules;
        if (input->ExpectTag(121)) goto parse_rel_sym_transact_time;
        break;
      }

      // optional sfixed64 rel_sym_transact_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rel_sym_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &rel_sym_transact_time_)));
          set_has_rel_sym_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecListGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encoded_text_len(), output);
  }

  // optional .Common.FinancingDetails financing_details = 4;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->financing_details(), output);
  }

  // repeated .Common.InstrmtLegSecListGrp instrmt_leg_sec_list_grp = 5;
  for (int i = 0; i < this->instrmt_leg_sec_list_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->instrmt_leg_sec_list_grp(i), output);
  }

  // optional .Common.Instrument instrument = 6;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->instrument(), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 7;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->instrument_extension(), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 9;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stipulations(i), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 11;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->und_instrmt_grp(i), output);
  }

  // optional .Common.YieldData yield_data = 12;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->yield_data(), output);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 13;
  if (has_security_trading_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->security_trading_rules(), output);
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->strike_rules(i), output);
  }

  // optional sfixed64 rel_sym_transact_time = 15;
  if (has_rel_sym_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(15, this->rel_sym_transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecListGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encoded_text_len(), target);
  }

  // optional .Common.FinancingDetails financing_details = 4;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->financing_details(), target);
  }

  // repeated .Common.InstrmtLegSecListGrp instrmt_leg_sec_list_grp = 5;
  for (int i = 0; i < this->instrmt_leg_sec_list_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->instrmt_leg_sec_list_grp(i), target);
  }

  // optional .Common.Instrument instrument = 6;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->instrument(), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 7;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->instrument_extension(), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 9;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stipulations(i), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 11;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->und_instrmt_grp(i), target);
  }

  // optional .Common.YieldData yield_data = 12;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->yield_data(), target);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 13;
  if (has_security_trading_rules()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->security_trading_rules(), target);
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->strike_rules(i), target);
  }

  // optional sfixed64 rel_sym_transact_time = 15;
  if (has_rel_sym_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(15, this->rel_sym_transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecListGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 2;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 3;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .Common.FinancingDetails financing_details = 4;
    if (has_financing_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional .Common.Instrument instrument = 6;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .Common.InstrumentExtension instrument_extension = 7;
    if (has_instrument_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Common.YieldData yield_data = 12;
    if (has_yield_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional .Common.SecurityTradingRules security_trading_rules = 13;
    if (has_security_trading_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_trading_rules());
    }

    // optional sfixed64 rel_sym_transact_time = 15;
    if (has_rel_sym_transact_time()) {
      total_size += 1 + 8;
    }

  }
  // repeated .Common.InstrmtLegSecListGrp instrmt_leg_sec_list_grp = 5;
  total_size += 1 * this->instrmt_leg_sec_list_grp_size();
  for (int i = 0; i < this->instrmt_leg_sec_list_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_sec_list_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 9;
  total_size += 1 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 11;
  total_size += 1 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  total_size += 1 * this->strike_rules_size();
  for (int i = 0; i < this->strike_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strike_rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecListGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecListGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecListGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecListGrp::MergeFrom(const SecListGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_sec_list_grp_.MergeFrom(from.instrmt_leg_sec_list_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  strike_rules_.MergeFrom(from.strike_rules_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_security_trading_rules()) {
      mutable_security_trading_rules()->::Common::SecurityTradingRules::MergeFrom(from.security_trading_rules());
    }
    if (from.has_rel_sym_transact_time()) {
      set_rel_sym_transact_time(from.rel_sym_transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecListGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecListGrp::CopyFrom(const SecListGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecListGrp::IsInitialized() const {

  return true;
}

void SecListGrp::Swap(SecListGrp* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(financing_details_, other->financing_details_);
    instrmt_leg_sec_list_grp_.Swap(&other->instrmt_leg_sec_list_grp_);
    std::swap(instrument_, other->instrument_);
    std::swap(instrument_extension_, other->instrument_extension_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(text_, other->text_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(security_trading_rules_, other->security_trading_rules_);
    strike_rules_.Swap(&other->strike_rules_);
    std::swap(rel_sym_transact_time_, other->rel_sym_transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecListGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecListGrp_descriptor_;
  metadata.reflection = SecListGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityListTypeUnion::kSecurityListTypeFieldNumber;
const int SecurityListTypeUnion::kSecurityListTypeSfixed64FieldNumber;
#endif  // !_MSC_VER

SecurityListTypeUnion::SecurityListTypeUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityListTypeUnion::InitAsDefaultInstance() {
}

SecurityListTypeUnion::SecurityListTypeUnion(const SecurityListTypeUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityListTypeUnion::SharedCtor() {
  _cached_size_ = 0;
  security_list_type_ = 0;
  security_list_type_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityListTypeUnion::~SecurityListTypeUnion() {
  SharedDtor();
}

void SecurityListTypeUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecurityListTypeUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityListTypeUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListTypeUnion_descriptor_;
}

const SecurityListTypeUnion& SecurityListTypeUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityListTypeUnion* SecurityListTypeUnion::default_instance_ = NULL;

SecurityListTypeUnion* SecurityListTypeUnion::New() const {
  return new SecurityListTypeUnion;
}

void SecurityListTypeUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    security_list_type_ = 0;
    security_list_type_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityListTypeUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeEnum_IsValid(value)) {
            set_security_list_type(static_cast< ::SecuritiesReferenceData::SecurityListTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_security_list_type_sfixed64;
        break;
      }

      // optional sfixed64 security_list_type_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_list_type_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_list_type_sfixed64_)));
          set_has_security_list_type_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityListTypeUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 1;
  if (has_security_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->security_list_type(), output);
  }

  // optional sfixed64 security_list_type_sfixed64 = 2;
  if (has_security_list_type_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->security_list_type_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityListTypeUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 1;
  if (has_security_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->security_list_type(), target);
  }

  // optional sfixed64 security_list_type_sfixed64 = 2;
  if (has_security_list_type_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->security_list_type_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityListTypeUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 1;
    if (has_security_list_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type());
    }

    // optional sfixed64 security_list_type_sfixed64 = 2;
    if (has_security_list_type_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityListTypeUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityListTypeUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityListTypeUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityListTypeUnion::MergeFrom(const SecurityListTypeUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_security_list_type()) {
      set_security_list_type(from.security_list_type());
    }
    if (from.has_security_list_type_sfixed64()) {
      set_security_list_type_sfixed64(from.security_list_type_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityListTypeUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityListTypeUnion::CopyFrom(const SecurityListTypeUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityListTypeUnion::IsInitialized() const {

  return true;
}

void SecurityListTypeUnion::Swap(SecurityListTypeUnion* other) {
  if (other != this) {
    std::swap(security_list_type_, other->security_list_type_);
    std::swap(security_list_type_sfixed64_, other->security_list_type_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityListTypeUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityListTypeUnion_descriptor_;
  metadata.reflection = SecurityListTypeUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityListTypeSourceUnion::kSecurityListTypeSourceFieldNumber;
const int SecurityListTypeSourceUnion::kSecurityListTypeSourceSfixed64FieldNumber;
#endif  // !_MSC_VER

SecurityListTypeSourceUnion::SecurityListTypeSourceUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityListTypeSourceUnion::InitAsDefaultInstance() {
}

SecurityListTypeSourceUnion::SecurityListTypeSourceUnion(const SecurityListTypeSourceUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityListTypeSourceUnion::SharedCtor() {
  _cached_size_ = 0;
  security_list_type_source_ = 0;
  security_list_type_source_sfixed64_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityListTypeSourceUnion::~SecurityListTypeSourceUnion() {
  SharedDtor();
}

void SecurityListTypeSourceUnion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecurityListTypeSourceUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityListTypeSourceUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListTypeSourceUnion_descriptor_;
}

const SecurityListTypeSourceUnion& SecurityListTypeSourceUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityListTypeSourceUnion* SecurityListTypeSourceUnion::default_instance_ = NULL;

SecurityListTypeSourceUnion* SecurityListTypeSourceUnion::New() const {
  return new SecurityListTypeSourceUnion;
}

void SecurityListTypeSourceUnion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    security_list_type_source_ = 0;
    security_list_type_source_sfixed64_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityListTypeSourceUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeSourceEnum_IsValid(value)) {
            set_security_list_type_source(static_cast< ::SecuritiesReferenceData::SecurityListTypeSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_security_list_type_source_sfixed64;
        break;
      }

      // optional sfixed64 security_list_type_source_sfixed64 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_list_type_source_sfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_list_type_source_sfixed64_)));
          set_has_security_list_type_source_sfixed64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityListTypeSourceUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 1;
  if (has_security_list_type_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->security_list_type_source(), output);
  }

  // optional sfixed64 security_list_type_source_sfixed64 = 2;
  if (has_security_list_type_source_sfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(2, this->security_list_type_source_sfixed64(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityListTypeSourceUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 1;
  if (has_security_list_type_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->security_list_type_source(), target);
  }

  // optional sfixed64 security_list_type_source_sfixed64 = 2;
  if (has_security_list_type_source_sfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(2, this->security_list_type_source_sfixed64(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityListTypeSourceUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 1;
    if (has_security_list_type_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type_source());
    }

    // optional sfixed64 security_list_type_source_sfixed64 = 2;
    if (has_security_list_type_source_sfixed64()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityListTypeSourceUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityListTypeSourceUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityListTypeSourceUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityListTypeSourceUnion::MergeFrom(const SecurityListTypeSourceUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_security_list_type_source()) {
      set_security_list_type_source(from.security_list_type_source());
    }
    if (from.has_security_list_type_source_sfixed64()) {
      set_security_list_type_source_sfixed64(from.security_list_type_source_sfixed64());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityListTypeSourceUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityListTypeSourceUnion::CopyFrom(const SecurityListTypeSourceUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityListTypeSourceUnion::IsInitialized() const {

  return true;
}

void SecurityListTypeSourceUnion::Swap(SecurityListTypeSourceUnion* other) {
  if (other != this) {
    std::swap(security_list_type_source_, other->security_list_type_source_);
    std::swap(security_list_type_source_sfixed64_, other->security_list_type_source_sfixed64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityListTypeSourceUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityListTypeSourceUnion_descriptor_;
  metadata.reflection = SecurityListTypeSourceUnion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityList::kSecurityReqIdFieldNumber;
const int SecurityList::kSecurityRequestResultFieldNumber;
const int SecurityList::kSecurityResponseIdFieldNumber;
const int SecurityList::kStandardHeaderFieldNumber;
const int SecurityList::kStandardTrailerFieldNumber;
const int SecurityList::kTotNoRelatedSymFieldNumber;
const int SecurityList::kClearingBusinessDateFieldNumber;
const int SecurityList::kLastFragmentFieldNumber;
const int SecurityList::kSecListGrpFieldNumber;
const int SecurityList::kSecurityReportIdFieldNumber;
const int SecurityList::kApplicationSequenceControlFieldNumber;
const int SecurityList::kMarketIdFieldNumber;
const int SecurityList::kMarketSegmentIdFieldNumber;
const int SecurityList::kEncodedSecurityListDescFieldNumber;
const int SecurityList::kEncodedSecurityListDescLenFieldNumber;
const int SecurityList::kSecurityListDescFieldNumber;
const int SecurityList::kSecurityListIdFieldNumber;
const int SecurityList::kSecurityListRefIdFieldNumber;
const int SecurityList::kSecurityListTypeFieldNumber;
const int SecurityList::kSecurityListTypeSourceFieldNumber;
const int SecurityList::kTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecurityList::SecurityList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityList::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
}

SecurityList::SecurityList(const SecurityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityList::SharedCtor() {
  _cached_size_ = 0;
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_request_result_ = 0;
  security_response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  tot_no_related_sym_ = GOOGLE_LONGLONG(0);
  clearing_business_date_ = 0;
  last_fragment_ = false;
  security_report_id_ = GOOGLE_LONGLONG(0);
  application_sequence_control_ = NULL;
  market_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_segment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_security_list_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_security_list_desc_len_ = 0u;
  security_list_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_type_ = 0;
  security_list_type_source_ = 0;
  transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityList::~SecurityList() {
  SharedDtor();
}

void SecurityList::SharedDtor() {
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_response_id_;
  }
  if (market_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_id_;
  }
  if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_segment_id_;
  }
  if (encoded_security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_security_list_desc_;
  }
  if (security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_desc_;
  }
  if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_id_;
  }
  if (security_list_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_ref_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete application_sequence_control_;
  }
}

void SecurityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityList_descriptor_;
}

const SecurityList& SecurityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityList* SecurityList::default_instance_ = NULL;

SecurityList* SecurityList::New() const {
  return new SecurityList;
}

void SecurityList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    security_request_result_ = 0;
    if (has_security_response_id()) {
      if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
        security_response_id_->clear();
      }
    }
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    tot_no_related_sym_ = GOOGLE_LONGLONG(0);
    clearing_business_date_ = 0;
    last_fragment_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    security_report_id_ = GOOGLE_LONGLONG(0);
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
    if (has_market_id()) {
      if (market_id_ != &::google::protobuf::internal::kEmptyString) {
        market_id_->clear();
      }
    }
    if (has_market_segment_id()) {
      if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
        market_segment_id_->clear();
      }
    }
    if (has_encoded_security_list_desc()) {
      if (encoded_security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
        encoded_security_list_desc_->clear();
      }
    }
    encoded_security_list_desc_len_ = 0u;
    if (has_security_list_desc()) {
      if (security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
        security_list_desc_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_security_list_id()) {
      if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
        security_list_id_->clear();
      }
    }
    if (has_security_list_ref_id()) {
      if (security_list_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        security_list_ref_id_->clear();
      }
    }
    security_list_type_ = 0;
    security_list_type_source_ = 0;
    transact_time_ = GOOGLE_LONGLONG(0);
  }
  sec_list_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string security_req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_security_request_result;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_request_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityRequestResultEnum_IsValid(value)) {
            set_security_request_result(static_cast< ::SecuritiesReferenceData::SecurityRequestResultEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security_response_id;
        break;
      }

      // optional string security_response_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_response_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_response_id().data(), this->security_response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_tot_no_related_sym;
        break;
      }

      // optional sfixed64 tot_no_related_sym = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tot_no_related_sym:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tot_no_related_sym_)));
          set_has_tot_no_related_sym();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_clearing_business_date;
        break;
      }

      // optional sfixed32 clearing_business_date = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_clearing_business_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &clearing_business_date_)));
          set_has_clearing_business_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_fragment;
        break;
      }

      // optional bool last_fragment = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
          set_has_last_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sec_list_grp;
        break;
      }

      // repeated .SecuritiesReferenceData.SecListGrp sec_list_grp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_list_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sec_list_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sec_list_grp;
        if (input->ExpectTag(81)) goto parse_security_report_id;
        break;
      }

      // optional sfixed64 security_report_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_report_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_report_id_)));
          set_has_security_report_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_market_id;
        break;
      }

      // optional string market_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_id().data(), this->market_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_market_segment_id;
        break;
      }

      // optional string market_segment_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_segment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_segment_id().data(), this->market_segment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_encoded_security_list_desc;
        break;
      }

      // optional bytes encoded_security_list_desc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_security_list_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_security_list_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_encoded_security_list_desc_len;
        break;
      }

      // optional fixed32 encoded_security_list_desc_len = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_security_list_desc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_security_list_desc_len_)));
          set_has_encoded_security_list_desc_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_security_list_desc;
        break;
      }

      // optional string security_list_desc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_desc().data(), this->security_list_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_security_list_id;
        break;
      }

      // optional string security_list_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_id().data(), this->security_list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_security_list_ref_id;
        break;
      }

      // optional string security_list_ref_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_ref_id().data(), this->security_list_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_security_list_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeEnum_IsValid(value)) {
            set_security_list_type(static_cast< ::SecuritiesReferenceData::SecurityListTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_security_list_type_source;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeSourceEnum_IsValid(value)) {
            set_security_list_type_source(static_cast< ::SecuritiesReferenceData::SecurityListTypeSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string security_req_id = 1;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->security_req_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 2;
  if (has_security_request_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->security_request_result(), output);
  }

  // optional string security_response_id = 3;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->security_response_id(), output);
  }

  // optional .Session.StandardHeader standard_header = 4;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 5;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->standard_trailer(), output);
  }

  // optional sfixed64 tot_no_related_sym = 6;
  if (has_tot_no_related_sym()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->tot_no_related_sym(), output);
  }

  // optional sfixed32 clearing_business_date = 7;
  if (has_clearing_business_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->clearing_business_date(), output);
  }

  // optional bool last_fragment = 8;
  if (has_last_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->last_fragment(), output);
  }

  // repeated .SecuritiesReferenceData.SecListGrp sec_list_grp = 9;
  for (int i = 0; i < this->sec_list_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sec_list_grp(i), output);
  }

  // optional sfixed64 security_report_id = 10;
  if (has_security_report_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(10, this->security_report_id(), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 11;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->application_sequence_control(), output);
  }

  // optional string market_id = 12;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->market_id(), output);
  }

  // optional string market_segment_id = 13;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->market_segment_id(), output);
  }

  // optional bytes encoded_security_list_desc = 14;
  if (has_encoded_security_list_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->encoded_security_list_desc(), output);
  }

  // optional fixed32 encoded_security_list_desc_len = 15;
  if (has_encoded_security_list_desc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->encoded_security_list_desc_len(), output);
  }

  // optional string security_list_desc = 16;
  if (has_security_list_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_desc().data(), this->security_list_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->security_list_desc(), output);
  }

  // optional string security_list_id = 17;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->security_list_id(), output);
  }

  // optional string security_list_ref_id = 18;
  if (has_security_list_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_ref_id().data(), this->security_list_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->security_list_ref_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 19;
  if (has_security_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->security_list_type(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 20;
  if (has_security_list_type_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->security_list_type_source(), output);
  }

  // optional sfixed64 transact_time = 21;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(21, this->transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string security_req_id = 1;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->security_req_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 2;
  if (has_security_request_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->security_request_result(), target);
  }

  // optional string security_response_id = 3;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->security_response_id(), target);
  }

  // optional .Session.StandardHeader standard_header = 4;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 5;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->standard_trailer(), target);
  }

  // optional sfixed64 tot_no_related_sym = 6;
  if (has_tot_no_related_sym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->tot_no_related_sym(), target);
  }

  // optional sfixed32 clearing_business_date = 7;
  if (has_clearing_business_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->clearing_business_date(), target);
  }

  // optional bool last_fragment = 8;
  if (has_last_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->last_fragment(), target);
  }

  // repeated .SecuritiesReferenceData.SecListGrp sec_list_grp = 9;
  for (int i = 0; i < this->sec_list_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sec_list_grp(i), target);
  }

  // optional sfixed64 security_report_id = 10;
  if (has_security_report_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(10, this->security_report_id(), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 11;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->application_sequence_control(), target);
  }

  // optional string market_id = 12;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->market_id(), target);
  }

  // optional string market_segment_id = 13;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->market_segment_id(), target);
  }

  // optional bytes encoded_security_list_desc = 14;
  if (has_encoded_security_list_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->encoded_security_list_desc(), target);
  }

  // optional fixed32 encoded_security_list_desc_len = 15;
  if (has_encoded_security_list_desc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->encoded_security_list_desc_len(), target);
  }

  // optional string security_list_desc = 16;
  if (has_security_list_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_desc().data(), this->security_list_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->security_list_desc(), target);
  }

  // optional string security_list_id = 17;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->security_list_id(), target);
  }

  // optional string security_list_ref_id = 18;
  if (has_security_list_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_ref_id().data(), this->security_list_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->security_list_ref_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 19;
  if (has_security_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->security_list_type(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 20;
  if (has_security_list_type_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->security_list_type_source(), target);
  }

  // optional sfixed64 transact_time = 21;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(21, this->transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string security_req_id = 1;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 2;
    if (has_security_request_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_request_result());
    }

    // optional string security_response_id = 3;
    if (has_security_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_response_id());
    }

    // optional .Session.StandardHeader standard_header = 4;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 5;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional sfixed64 tot_no_related_sym = 6;
    if (has_tot_no_related_sym()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 clearing_business_date = 7;
    if (has_clearing_business_date()) {
      total_size += 1 + 4;
    }

    // optional bool last_fragment = 8;
    if (has_last_fragment()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional sfixed64 security_report_id = 10;
    if (has_security_report_id()) {
      total_size += 1 + 8;
    }

    // optional .Common.ApplicationSequenceControl application_sequence_control = 11;
    if (has_application_sequence_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

    // optional string market_id = 12;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string market_segment_id = 13;
    if (has_market_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_segment_id());
    }

    // optional bytes encoded_security_list_desc = 14;
    if (has_encoded_security_list_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_security_list_desc());
    }

    // optional fixed32 encoded_security_list_desc_len = 15;
    if (has_encoded_security_list_desc_len()) {
      total_size += 1 + 4;
    }

    // optional string security_list_desc = 16;
    if (has_security_list_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_desc());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string security_list_id = 17;
    if (has_security_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_id());
    }

    // optional string security_list_ref_id = 18;
    if (has_security_list_ref_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_ref_id());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 19;
    if (has_security_list_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 20;
    if (has_security_list_type_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type_source());
    }

    // optional sfixed64 transact_time = 21;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .SecuritiesReferenceData.SecListGrp sec_list_grp = 9;
  total_size += 1 * this->sec_list_grp_size();
  for (int i = 0; i < this->sec_list_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sec_list_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityList::MergeFrom(const SecurityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  sec_list_grp_.MergeFrom(from.sec_list_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_security_request_result()) {
      set_security_request_result(from.security_request_result());
    }
    if (from.has_security_response_id()) {
      set_security_response_id(from.security_response_id());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_tot_no_related_sym()) {
      set_tot_no_related_sym(from.tot_no_related_sym());
    }
    if (from.has_clearing_business_date()) {
      set_clearing_business_date(from.clearing_business_date());
    }
    if (from.has_last_fragment()) {
      set_last_fragment(from.last_fragment());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_security_report_id()) {
      set_security_report_id(from.security_report_id());
    }
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_market_segment_id()) {
      set_market_segment_id(from.market_segment_id());
    }
    if (from.has_encoded_security_list_desc()) {
      set_encoded_security_list_desc(from.encoded_security_list_desc());
    }
    if (from.has_encoded_security_list_desc_len()) {
      set_encoded_security_list_desc_len(from.encoded_security_list_desc_len());
    }
    if (from.has_security_list_desc()) {
      set_security_list_desc(from.security_list_desc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_security_list_id()) {
      set_security_list_id(from.security_list_id());
    }
    if (from.has_security_list_ref_id()) {
      set_security_list_ref_id(from.security_list_ref_id());
    }
    if (from.has_security_list_type()) {
      set_security_list_type(from.security_list_type());
    }
    if (from.has_security_list_type_source()) {
      set_security_list_type_source(from.security_list_type_source());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityList::CopyFrom(const SecurityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityList::IsInitialized() const {

  return true;
}

void SecurityList::Swap(SecurityList* other) {
  if (other != this) {
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(security_request_result_, other->security_request_result_);
    std::swap(security_response_id_, other->security_response_id_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(tot_no_related_sym_, other->tot_no_related_sym_);
    std::swap(clearing_business_date_, other->clearing_business_date_);
    std::swap(last_fragment_, other->last_fragment_);
    sec_list_grp_.Swap(&other->sec_list_grp_);
    std::swap(security_report_id_, other->security_report_id_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    std::swap(market_id_, other->market_id_);
    std::swap(market_segment_id_, other->market_segment_id_);
    std::swap(encoded_security_list_desc_, other->encoded_security_list_desc_);
    std::swap(encoded_security_list_desc_len_, other->encoded_security_list_desc_len_);
    std::swap(security_list_desc_, other->security_list_desc_);
    std::swap(security_list_id_, other->security_list_id_);
    std::swap(security_list_ref_id_, other->security_list_ref_id_);
    std::swap(security_list_type_, other->security_list_type_);
    std::swap(security_list_type_source_, other->security_list_type_source_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityList_descriptor_;
  metadata.reflection = SecurityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityListRequest::kCurrencyFieldNumber;
const int SecurityListRequest::kEncodedTextFieldNumber;
const int SecurityListRequest::kEncodedTextLenFieldNumber;
const int SecurityListRequest::kInstrumentFieldNumber;
const int SecurityListRequest::kSecurityListRequestTypeFieldNumber;
const int SecurityListRequest::kSecurityReqIdFieldNumber;
const int SecurityListRequest::kStandardHeaderFieldNumber;
const int SecurityListRequest::kStandardTrailerFieldNumber;
const int SecurityListRequest::kSubscriptionRequestTypeFieldNumber;
const int SecurityListRequest::kTextFieldNumber;
const int SecurityListRequest::kTradingSessionIdFieldNumber;
const int SecurityListRequest::kTradingSessionSubIdFieldNumber;
const int SecurityListRequest::kFinancingDetailsFieldNumber;
const int SecurityListRequest::kInstrmtLegGrpFieldNumber;
const int SecurityListRequest::kInstrumentExtensionFieldNumber;
const int SecurityListRequest::kUndInstrmtGrpFieldNumber;
const int SecurityListRequest::kMarketIdFieldNumber;
const int SecurityListRequest::kMarketSegmentIdFieldNumber;
const int SecurityListRequest::kSecurityListIdFieldNumber;
const int SecurityListRequest::kSecurityListTypeFieldNumber;
const int SecurityListRequest::kSecurityListTypeSourceFieldNumber;
#endif  // !_MSC_VER

SecurityListRequest::SecurityListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityListRequest::InitAsDefaultInstance() {
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
}

SecurityListRequest::SecurityListRequest(const SecurityListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityListRequest::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  instrument_ = NULL;
  security_list_request_type_ = 0;
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  subscription_request_type_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_session_id_ = 0;
  trading_session_sub_id_ = 0;
  financing_details_ = NULL;
  instrument_extension_ = NULL;
  market_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_segment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_type_ = 0;
  security_list_type_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityListRequest::~SecurityListRequest() {
  SharedDtor();
}

void SecurityListRequest::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (market_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_id_;
  }
  if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_segment_id_;
  }
  if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_id_;
  }
  if (this != default_instance_) {
    delete instrument_;
    delete standard_header_;
    delete standard_trailer_;
    delete financing_details_;
    delete instrument_extension_;
  }
}

void SecurityListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListRequest_descriptor_;
}

const SecurityListRequest& SecurityListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityListRequest* SecurityListRequest::default_instance_ = NULL;

SecurityListRequest* SecurityListRequest::New() const {
  return new SecurityListRequest;
}

void SecurityListRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    security_list_request_type_ = 0;
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    subscription_request_type_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    trading_session_id_ = 0;
    trading_session_sub_id_ = 0;
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_market_id()) {
      if (market_id_ != &::google::protobuf::internal::kEmptyString) {
        market_id_->clear();
      }
    }
    if (has_market_segment_id()) {
      if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
        market_segment_id_->clear();
      }
    }
    if (has_security_list_id()) {
      if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
        security_list_id_->clear();
      }
    }
    security_list_type_ = 0;
    security_list_type_source_ = 0;
  }
  instrmt_leg_grp_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_security_list_request_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListRequestTypeEnum security_list_request_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListRequestTypeEnum_IsValid(value)) {
            set_security_list_request_type(static_cast< ::SecuritiesReferenceData::SecurityListRequestTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_security_req_id;
        break;
      }

      // optional string security_req_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_subscription_request_type;
        break;
      }

      // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subscription_request_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SubscriptionRequestTypeEnum_IsValid(value)) {
            set_subscription_request_type(static_cast< ::SecuritiesReferenceData::SubscriptionRequestTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_trading_session_id;
        break;
      }

      // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::TradingSessionIdEnum_IsValid(value)) {
            set_trading_session_id(static_cast< ::SecuritiesReferenceData::TradingSessionIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trading_session_sub_id;
        break;
      }

      // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_session_sub_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::TradingSessionSubIdEnum_IsValid(value)) {
            set_trading_session_sub_id(static_cast< ::SecuritiesReferenceData::TradingSessionSubIdEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_instrmt_leg_grp;
        break;
      }

      // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrmt_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instrmt_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_instrmt_leg_grp;
        if (input->ExpectTag(122)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(138)) goto parse_market_id;
        break;
      }

      // optional string market_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_id().data(), this->market_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_market_segment_id;
        break;
      }

      // optional string market_segment_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_segment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_segment_id().data(), this->market_segment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_security_list_id;
        break;
      }

      // optional string security_list_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_id().data(), this->security_list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_security_list_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeEnum_IsValid(value)) {
            set_security_list_type(static_cast< ::SecuritiesReferenceData::SecurityListTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_security_list_type_source;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeSourceEnum_IsValid(value)) {
            set_security_list_type_source(static_cast< ::SecuritiesReferenceData::SecurityListTypeSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encoded_text_len(), output);
  }

  // optional .Common.Instrument instrument = 4;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->instrument(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListRequestTypeEnum security_list_request_type = 5;
  if (has_security_list_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->security_list_request_type(), output);
  }

  // optional string security_req_id = 6;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->security_req_id(), output);
  }

  // optional .Session.StandardHeader standard_header = 7;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 8;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->standard_trailer(), output);
  }

  // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 9;
  if (has_subscription_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->subscription_request_type(), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 11;
  if (has_trading_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->trading_session_id(), output);
  }

  // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
  if (has_trading_session_sub_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->trading_session_sub_id(), output);
  }

  // optional .Common.FinancingDetails financing_details = 13;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->financing_details(), output);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->instrmt_leg_grp(i), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 15;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->instrument_extension(), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->und_instrmt_grp(i), output);
  }

  // optional string market_id = 17;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->market_id(), output);
  }

  // optional string market_segment_id = 18;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->market_segment_id(), output);
  }

  // optional string security_list_id = 19;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->security_list_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 20;
  if (has_security_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->security_list_type(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 21;
  if (has_security_list_type_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->security_list_type_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encoded_text_len(), target);
  }

  // optional .Common.Instrument instrument = 4;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->instrument(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListRequestTypeEnum security_list_request_type = 5;
  if (has_security_list_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->security_list_request_type(), target);
  }

  // optional string security_req_id = 6;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->security_req_id(), target);
  }

  // optional .Session.StandardHeader standard_header = 7;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 8;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->standard_trailer(), target);
  }

  // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 9;
  if (has_subscription_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->subscription_request_type(), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 11;
  if (has_trading_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->trading_session_id(), target);
  }

  // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
  if (has_trading_session_sub_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->trading_session_sub_id(), target);
  }

  // optional .Common.FinancingDetails financing_details = 13;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->financing_details(), target);
  }

  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->instrmt_leg_grp(i), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 15;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->instrument_extension(), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->und_instrmt_grp(i), target);
  }

  // optional string market_id = 17;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->market_id(), target);
  }

  // optional string market_segment_id = 18;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->market_segment_id(), target);
  }

  // optional string security_list_id = 19;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->security_list_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 20;
  if (has_security_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->security_list_type(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 21;
  if (has_security_list_type_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->security_list_type_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityListRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 2;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 3;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .Common.Instrument instrument = 4;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .SecuritiesReferenceData.SecurityListRequestTypeEnum security_list_request_type = 5;
    if (has_security_list_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_request_type());
    }

    // optional string security_req_id = 6;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional .Session.StandardHeader standard_header = 7;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 8;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SecuritiesReferenceData.SubscriptionRequestTypeEnum subscription_request_type = 9;
    if (has_subscription_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subscription_request_type());
    }

    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SecuritiesReferenceData.TradingSessionIdEnum trading_session_id = 11;
    if (has_trading_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_id());
    }

    // optional .SecuritiesReferenceData.TradingSessionSubIdEnum trading_session_sub_id = 12;
    if (has_trading_session_sub_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trading_session_sub_id());
    }

    // optional .Common.FinancingDetails financing_details = 13;
    if (has_financing_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional .Common.InstrumentExtension instrument_extension = 15;
    if (has_instrument_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string market_id = 17;
    if (has_market_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string market_segment_id = 18;
    if (has_market_segment_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_segment_id());
    }

    // optional string security_list_id = 19;
    if (has_security_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_id());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 20;
    if (has_security_list_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 21;
    if (has_security_list_type_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type_source());
    }

  }
  // repeated .Common.InstrmtLegGrp instrmt_leg_grp = 14;
  total_size += 1 * this->instrmt_leg_grp_size();
  for (int i = 0; i < this->instrmt_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instrmt_leg_grp(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 16;
  total_size += 2 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityListRequest::MergeFrom(const SecurityListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  instrmt_leg_grp_.MergeFrom(from.instrmt_leg_grp_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_security_list_request_type()) {
      set_security_list_request_type(from.security_list_request_type());
    }
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subscription_request_type()) {
      set_subscription_request_type(from.subscription_request_type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_trading_session_id()) {
      set_trading_session_id(from.trading_session_id());
    }
    if (from.has_trading_session_sub_id()) {
      set_trading_session_sub_id(from.trading_session_sub_id());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_market_segment_id()) {
      set_market_segment_id(from.market_segment_id());
    }
    if (from.has_security_list_id()) {
      set_security_list_id(from.security_list_id());
    }
    if (from.has_security_list_type()) {
      set_security_list_type(from.security_list_type());
    }
    if (from.has_security_list_type_source()) {
      set_security_list_type_source(from.security_list_type_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityListRequest::CopyFrom(const SecurityListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityListRequest::IsInitialized() const {

  return true;
}

void SecurityListRequest::Swap(SecurityListRequest* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(instrument_, other->instrument_);
    std::swap(security_list_request_type_, other->security_list_request_type_);
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(subscription_request_type_, other->subscription_request_type_);
    std::swap(text_, other->text_);
    std::swap(trading_session_id_, other->trading_session_id_);
    std::swap(trading_session_sub_id_, other->trading_session_sub_id_);
    std::swap(financing_details_, other->financing_details_);
    instrmt_leg_grp_.Swap(&other->instrmt_leg_grp_);
    std::swap(instrument_extension_, other->instrument_extension_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(market_id_, other->market_id_);
    std::swap(market_segment_id_, other->market_segment_id_);
    std::swap(security_list_id_, other->security_list_id_);
    std::swap(security_list_type_, other->security_list_type_);
    std::swap(security_list_type_source_, other->security_list_type_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityListRequest_descriptor_;
  metadata.reflection = SecurityListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecLstUpdRelSymsLegGrp::kInstrumentLegFieldNumber;
const int SecLstUpdRelSymsLegGrp::kLegBenchmarkCurveDataFieldNumber;
const int SecLstUpdRelSymsLegGrp::kLegSettlTypeFieldNumber;
const int SecLstUpdRelSymsLegGrp::kLegStipulationsFieldNumber;
const int SecLstUpdRelSymsLegGrp::kLegSwapTypeFieldNumber;
#endif  // !_MSC_VER

SecLstUpdRelSymsLegGrp::SecLstUpdRelSymsLegGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecLstUpdRelSymsLegGrp::InitAsDefaultInstance() {
  instrument_leg_ = const_cast< ::Common::InstrumentLeg*>(&::Common::InstrumentLeg::default_instance());
  leg_benchmark_curve_data_ = const_cast< ::Common::LegBenchmarkCurveData*>(&::Common::LegBenchmarkCurveData::default_instance());
}

SecLstUpdRelSymsLegGrp::SecLstUpdRelSymsLegGrp(const SecLstUpdRelSymsLegGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecLstUpdRelSymsLegGrp::SharedCtor() {
  _cached_size_ = 0;
  instrument_leg_ = NULL;
  leg_benchmark_curve_data_ = NULL;
  leg_settl_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leg_swap_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecLstUpdRelSymsLegGrp::~SecLstUpdRelSymsLegGrp() {
  SharedDtor();
}

void SecLstUpdRelSymsLegGrp::SharedDtor() {
  if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
    delete leg_settl_type_;
  }
  if (this != default_instance_) {
    delete instrument_leg_;
    delete leg_benchmark_curve_data_;
  }
}

void SecLstUpdRelSymsLegGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecLstUpdRelSymsLegGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecLstUpdRelSymsLegGrp_descriptor_;
}

const SecLstUpdRelSymsLegGrp& SecLstUpdRelSymsLegGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecLstUpdRelSymsLegGrp* SecLstUpdRelSymsLegGrp::default_instance_ = NULL;

SecLstUpdRelSymsLegGrp* SecLstUpdRelSymsLegGrp::New() const {
  return new SecLstUpdRelSymsLegGrp;
}

void SecLstUpdRelSymsLegGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_instrument_leg()) {
      if (instrument_leg_ != NULL) instrument_leg_->::Common::InstrumentLeg::Clear();
    }
    if (has_leg_benchmark_curve_data()) {
      if (leg_benchmark_curve_data_ != NULL) leg_benchmark_curve_data_->::Common::LegBenchmarkCurveData::Clear();
    }
    if (has_leg_settl_type()) {
      if (leg_settl_type_ != &::google::protobuf::internal::kEmptyString) {
        leg_settl_type_->clear();
      }
    }
    leg_swap_type_ = 0;
  }
  leg_stipulations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecLstUpdRelSymsLegGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.InstrumentLeg instrument_leg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_leg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leg_benchmark_curve_data;
        break;
      }

      // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leg_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leg_settl_type;
        break;
      }

      // optional string leg_settl_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_settl_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leg_settl_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leg_settl_type().data(), this->leg_settl_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leg_stipulations;
        break;
      }

      // repeated .Common.LegStipulations leg_stipulations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leg_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leg_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leg_stipulations;
        if (input->ExpectTag(40)) goto parse_leg_swap_type;
        break;
      }

      // optional .SecuritiesReferenceData.LegSwapTypeEnum leg_swap_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leg_swap_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::LegSwapTypeEnum_IsValid(value)) {
            set_leg_swap_type(static_cast< ::SecuritiesReferenceData::LegSwapTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecLstUpdRelSymsLegGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->instrument_leg(), output);
  }

  // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
  if (has_leg_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leg_benchmark_curve_data(), output);
  }

  // optional string leg_settl_type = 3;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->leg_settl_type(), output);
  }

  // repeated .Common.LegStipulations leg_stipulations = 4;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leg_stipulations(i), output);
  }

  // optional .SecuritiesReferenceData.LegSwapTypeEnum leg_swap_type = 5;
  if (has_leg_swap_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->leg_swap_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecLstUpdRelSymsLegGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.InstrumentLeg instrument_leg = 1;
  if (has_instrument_leg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->instrument_leg(), target);
  }

  // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
  if (has_leg_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leg_benchmark_curve_data(), target);
  }

  // optional string leg_settl_type = 3;
  if (has_leg_settl_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leg_settl_type().data(), this->leg_settl_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->leg_settl_type(), target);
  }

  // repeated .Common.LegStipulations leg_stipulations = 4;
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leg_stipulations(i), target);
  }

  // optional .SecuritiesReferenceData.LegSwapTypeEnum leg_swap_type = 5;
  if (has_leg_swap_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->leg_swap_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecLstUpdRelSymsLegGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.InstrumentLeg instrument_leg = 1;
    if (has_instrument_leg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_leg());
    }

    // optional .Common.LegBenchmarkCurveData leg_benchmark_curve_data = 2;
    if (has_leg_benchmark_curve_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leg_benchmark_curve_data());
    }

    // optional string leg_settl_type = 3;
    if (has_leg_settl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leg_settl_type());
    }

    // optional .SecuritiesReferenceData.LegSwapTypeEnum leg_swap_type = 5;
    if (has_leg_swap_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leg_swap_type());
    }

  }
  // repeated .Common.LegStipulations leg_stipulations = 4;
  total_size += 1 * this->leg_stipulations_size();
  for (int i = 0; i < this->leg_stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leg_stipulations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecLstUpdRelSymsLegGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecLstUpdRelSymsLegGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecLstUpdRelSymsLegGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecLstUpdRelSymsLegGrp::MergeFrom(const SecLstUpdRelSymsLegGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  leg_stipulations_.MergeFrom(from.leg_stipulations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instrument_leg()) {
      mutable_instrument_leg()->::Common::InstrumentLeg::MergeFrom(from.instrument_leg());
    }
    if (from.has_leg_benchmark_curve_data()) {
      mutable_leg_benchmark_curve_data()->::Common::LegBenchmarkCurveData::MergeFrom(from.leg_benchmark_curve_data());
    }
    if (from.has_leg_settl_type()) {
      set_leg_settl_type(from.leg_settl_type());
    }
    if (from.has_leg_swap_type()) {
      set_leg_swap_type(from.leg_swap_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecLstUpdRelSymsLegGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecLstUpdRelSymsLegGrp::CopyFrom(const SecLstUpdRelSymsLegGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecLstUpdRelSymsLegGrp::IsInitialized() const {

  return true;
}

void SecLstUpdRelSymsLegGrp::Swap(SecLstUpdRelSymsLegGrp* other) {
  if (other != this) {
    std::swap(instrument_leg_, other->instrument_leg_);
    std::swap(leg_benchmark_curve_data_, other->leg_benchmark_curve_data_);
    std::swap(leg_settl_type_, other->leg_settl_type_);
    leg_stipulations_.Swap(&other->leg_stipulations_);
    std::swap(leg_swap_type_, other->leg_swap_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecLstUpdRelSymsLegGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecLstUpdRelSymsLegGrp_descriptor_;
  metadata.reflection = SecLstUpdRelSymsLegGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecLstUpdRelSymGrp::kCurrencyFieldNumber;
const int SecLstUpdRelSymGrp::kEncodedTextFieldNumber;
const int SecLstUpdRelSymGrp::kEncodedTextLenFieldNumber;
const int SecLstUpdRelSymGrp::kFinancingDetailsFieldNumber;
const int SecLstUpdRelSymGrp::kInstrumentFieldNumber;
const int SecLstUpdRelSymGrp::kInstrumentExtensionFieldNumber;
const int SecLstUpdRelSymGrp::kSecLstUpdRelSymsLegGrpFieldNumber;
const int SecLstUpdRelSymGrp::kSpreadOrBenchmarkCurveDataFieldNumber;
const int SecLstUpdRelSymGrp::kStipulationsFieldNumber;
const int SecLstUpdRelSymGrp::kTextFieldNumber;
const int SecLstUpdRelSymGrp::kYieldDataFieldNumber;
const int SecLstUpdRelSymGrp::kListUpdateActionFieldNumber;
const int SecLstUpdRelSymGrp::kSecurityTradingRulesFieldNumber;
const int SecLstUpdRelSymGrp::kStrikeRulesFieldNumber;
const int SecLstUpdRelSymGrp::kUndInstrmtGrpFieldNumber;
const int SecLstUpdRelSymGrp::kRelSymTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecLstUpdRelSymGrp::SecLstUpdRelSymGrp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecLstUpdRelSymGrp::InitAsDefaultInstance() {
  financing_details_ = const_cast< ::Common::FinancingDetails*>(&::Common::FinancingDetails::default_instance());
  instrument_ = const_cast< ::Common::Instrument*>(&::Common::Instrument::default_instance());
  instrument_extension_ = const_cast< ::Common::InstrumentExtension*>(&::Common::InstrumentExtension::default_instance());
  spread_or_benchmark_curve_data_ = const_cast< ::Common::SpreadOrBenchmarkCurveData*>(&::Common::SpreadOrBenchmarkCurveData::default_instance());
  yield_data_ = const_cast< ::Common::YieldData*>(&::Common::YieldData::default_instance());
  security_trading_rules_ = const_cast< ::Common::SecurityTradingRules*>(&::Common::SecurityTradingRules::default_instance());
}

SecLstUpdRelSymGrp::SecLstUpdRelSymGrp(const SecLstUpdRelSymGrp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecLstUpdRelSymGrp::SharedCtor() {
  _cached_size_ = 0;
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_text_len_ = 0u;
  financing_details_ = NULL;
  instrument_ = NULL;
  instrument_extension_ = NULL;
  spread_or_benchmark_curve_data_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  yield_data_ = NULL;
  list_update_action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_trading_rules_ = NULL;
  rel_sym_transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecLstUpdRelSymGrp::~SecLstUpdRelSymGrp() {
  SharedDtor();
}

void SecLstUpdRelSymGrp::SharedDtor() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_text_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (list_update_action_ != &::google::protobuf::internal::kEmptyString) {
    delete list_update_action_;
  }
  if (this != default_instance_) {
    delete financing_details_;
    delete instrument_;
    delete instrument_extension_;
    delete spread_or_benchmark_curve_data_;
    delete yield_data_;
    delete security_trading_rules_;
  }
}

void SecLstUpdRelSymGrp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecLstUpdRelSymGrp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecLstUpdRelSymGrp_descriptor_;
}

const SecLstUpdRelSymGrp& SecLstUpdRelSymGrp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecLstUpdRelSymGrp* SecLstUpdRelSymGrp::default_instance_ = NULL;

SecLstUpdRelSymGrp* SecLstUpdRelSymGrp::New() const {
  return new SecLstUpdRelSymGrp;
}

void SecLstUpdRelSymGrp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_encoded_text()) {
      if (encoded_text_ != &::google::protobuf::internal::kEmptyString) {
        encoded_text_->clear();
      }
    }
    encoded_text_len_ = 0u;
    if (has_financing_details()) {
      if (financing_details_ != NULL) financing_details_->::Common::FinancingDetails::Clear();
    }
    if (has_instrument()) {
      if (instrument_ != NULL) instrument_->::Common::Instrument::Clear();
    }
    if (has_instrument_extension()) {
      if (instrument_extension_ != NULL) instrument_extension_->::Common::InstrumentExtension::Clear();
    }
    if (has_spread_or_benchmark_curve_data()) {
      if (spread_or_benchmark_curve_data_ != NULL) spread_or_benchmark_curve_data_->::Common::SpreadOrBenchmarkCurveData::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_yield_data()) {
      if (yield_data_ != NULL) yield_data_->::Common::YieldData::Clear();
    }
    if (has_list_update_action()) {
      if (list_update_action_ != &::google::protobuf::internal::kEmptyString) {
        list_update_action_->clear();
      }
    }
    if (has_security_trading_rules()) {
      if (security_trading_rules_ != NULL) security_trading_rules_->::Common::SecurityTradingRules::Clear();
    }
    rel_sym_transact_time_ = GOOGLE_LONGLONG(0);
  }
  sec_lst_upd_rel_syms_leg_grp_.Clear();
  stipulations_.Clear();
  strike_rules_.Clear();
  und_instrmt_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecLstUpdRelSymGrp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string currency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_encoded_text;
        break;
      }

      // optional bytes encoded_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_encoded_text_len;
        break;
      }

      // optional fixed32 encoded_text_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_text_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_text_len_)));
          set_has_encoded_text_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_financing_details;
        break;
      }

      // optional .Common.FinancingDetails financing_details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_financing_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_financing_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_instrument;
        break;
      }

      // optional .Common.Instrument instrument = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_instrument_extension;
        break;
      }

      // optional .Common.InstrumentExtension instrument_extension = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument_extension:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instrument_extension()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sec_lst_upd_rel_syms_leg_grp;
        break;
      }

      // repeated .SecuritiesReferenceData.SecLstUpdRelSymsLegGrp sec_lst_upd_rel_syms_leg_grp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_lst_upd_rel_syms_leg_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sec_lst_upd_rel_syms_leg_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sec_lst_upd_rel_syms_leg_grp;
        if (input->ExpectTag(66)) goto parse_spread_or_benchmark_curve_data;
        break;
      }

      // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spread_or_benchmark_curve_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spread_or_benchmark_curve_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stipulations;
        break;
      }

      // repeated .Common.Stipulations stipulations = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stipulations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stipulations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stipulations;
        if (input->ExpectTag(82)) goto parse_text;
        break;
      }

      // optional string text = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_yield_data;
        break;
      }

      // optional .Common.YieldData yield_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yield_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yield_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_list_update_action;
        break;
      }

      // optional string list_update_action = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list_update_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list_update_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->list_update_action().data(), this->list_update_action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_security_trading_rules;
        break;
      }

      // optional .Common.SecurityTradingRules security_trading_rules = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_trading_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_security_trading_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strike_rules;
        break;
      }

      // repeated .Common.StrikeRules strike_rules = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strike_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strike_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_strike_rules;
        if (input->ExpectTag(122)) goto parse_und_instrmt_grp;
        break;
      }

      // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_und_instrmt_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_und_instrmt_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_und_instrmt_grp;
        if (input->ExpectTag(129)) goto parse_rel_sym_transact_time;
        break;
      }

      // optional sfixed64 rel_sym_transact_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rel_sym_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &rel_sym_transact_time_)));
          set_has_rel_sym_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecLstUpdRelSymGrp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->currency(), output);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->encoded_text(), output);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->encoded_text_len(), output);
  }

  // optional .Common.FinancingDetails financing_details = 4;
  if (has_financing_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->financing_details(), output);
  }

  // optional .Common.Instrument instrument = 5;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->instrument(), output);
  }

  // optional .Common.InstrumentExtension instrument_extension = 6;
  if (has_instrument_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->instrument_extension(), output);
  }

  // repeated .SecuritiesReferenceData.SecLstUpdRelSymsLegGrp sec_lst_upd_rel_syms_leg_grp = 7;
  for (int i = 0; i < this->sec_lst_upd_rel_syms_leg_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sec_lst_upd_rel_syms_leg_grp(i), output);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
  if (has_spread_or_benchmark_curve_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->spread_or_benchmark_curve_data(), output);
  }

  // repeated .Common.Stipulations stipulations = 9;
  for (int i = 0; i < this->stipulations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stipulations(i), output);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->text(), output);
  }

  // optional .Common.YieldData yield_data = 11;
  if (has_yield_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->yield_data(), output);
  }

  // optional string list_update_action = 12;
  if (has_list_update_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list_update_action().data(), this->list_update_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->list_update_action(), output);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 13;
  if (has_security_trading_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->security_trading_rules(), output);
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->strike_rules(i), output);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->und_instrmt_grp(i), output);
  }

  // optional sfixed64 rel_sym_transact_time = 16;
  if (has_rel_sym_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(16, this->rel_sym_transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecLstUpdRelSymGrp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string currency = 1;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // optional bytes encoded_text = 2;
  if (has_encoded_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->encoded_text(), target);
  }

  // optional fixed32 encoded_text_len = 3;
  if (has_encoded_text_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->encoded_text_len(), target);
  }

  // optional .Common.FinancingDetails financing_details = 4;
  if (has_financing_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->financing_details(), target);
  }

  // optional .Common.Instrument instrument = 5;
  if (has_instrument()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->instrument(), target);
  }

  // optional .Common.InstrumentExtension instrument_extension = 6;
  if (has_instrument_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->instrument_extension(), target);
  }

  // repeated .SecuritiesReferenceData.SecLstUpdRelSymsLegGrp sec_lst_upd_rel_syms_leg_grp = 7;
  for (int i = 0; i < this->sec_lst_upd_rel_syms_leg_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sec_lst_upd_rel_syms_leg_grp(i), target);
  }

  // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
  if (has_spread_or_benchmark_curve_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->spread_or_benchmark_curve_data(), target);
  }

  // repeated .Common.Stipulations stipulations = 9;
  for (int i = 0; i < this->stipulations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stipulations(i), target);
  }

  // optional string text = 10;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->text(), target);
  }

  // optional .Common.YieldData yield_data = 11;
  if (has_yield_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->yield_data(), target);
  }

  // optional string list_update_action = 12;
  if (has_list_update_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list_update_action().data(), this->list_update_action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->list_update_action(), target);
  }

  // optional .Common.SecurityTradingRules security_trading_rules = 13;
  if (has_security_trading_rules()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->security_trading_rules(), target);
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  for (int i = 0; i < this->strike_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->strike_rules(i), target);
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->und_instrmt_grp(i), target);
  }

  // optional sfixed64 rel_sym_transact_time = 16;
  if (has_rel_sym_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(16, this->rel_sym_transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecLstUpdRelSymGrp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string currency = 1;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // optional bytes encoded_text = 2;
    if (has_encoded_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_text());
    }

    // optional fixed32 encoded_text_len = 3;
    if (has_encoded_text_len()) {
      total_size += 1 + 4;
    }

    // optional .Common.FinancingDetails financing_details = 4;
    if (has_financing_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->financing_details());
    }

    // optional .Common.Instrument instrument = 5;
    if (has_instrument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument());
    }

    // optional .Common.InstrumentExtension instrument_extension = 6;
    if (has_instrument_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instrument_extension());
    }

    // optional .Common.SpreadOrBenchmarkCurveData spread_or_benchmark_curve_data = 8;
    if (has_spread_or_benchmark_curve_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spread_or_benchmark_curve_data());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string text = 10;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .Common.YieldData yield_data = 11;
    if (has_yield_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yield_data());
    }

    // optional string list_update_action = 12;
    if (has_list_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list_update_action());
    }

    // optional .Common.SecurityTradingRules security_trading_rules = 13;
    if (has_security_trading_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->security_trading_rules());
    }

    // optional sfixed64 rel_sym_transact_time = 16;
    if (has_rel_sym_transact_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .SecuritiesReferenceData.SecLstUpdRelSymsLegGrp sec_lst_upd_rel_syms_leg_grp = 7;
  total_size += 1 * this->sec_lst_upd_rel_syms_leg_grp_size();
  for (int i = 0; i < this->sec_lst_upd_rel_syms_leg_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sec_lst_upd_rel_syms_leg_grp(i));
  }

  // repeated .Common.Stipulations stipulations = 9;
  total_size += 1 * this->stipulations_size();
  for (int i = 0; i < this->stipulations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stipulations(i));
  }

  // repeated .Common.StrikeRules strike_rules = 14;
  total_size += 1 * this->strike_rules_size();
  for (int i = 0; i < this->strike_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strike_rules(i));
  }

  // repeated .Common.UndInstrmtGrp und_instrmt_grp = 15;
  total_size += 1 * this->und_instrmt_grp_size();
  for (int i = 0; i < this->und_instrmt_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->und_instrmt_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecLstUpdRelSymGrp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecLstUpdRelSymGrp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecLstUpdRelSymGrp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecLstUpdRelSymGrp::MergeFrom(const SecLstUpdRelSymGrp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sec_lst_upd_rel_syms_leg_grp_.MergeFrom(from.sec_lst_upd_rel_syms_leg_grp_);
  stipulations_.MergeFrom(from.stipulations_);
  strike_rules_.MergeFrom(from.strike_rules_);
  und_instrmt_grp_.MergeFrom(from.und_instrmt_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_encoded_text()) {
      set_encoded_text(from.encoded_text());
    }
    if (from.has_encoded_text_len()) {
      set_encoded_text_len(from.encoded_text_len());
    }
    if (from.has_financing_details()) {
      mutable_financing_details()->::Common::FinancingDetails::MergeFrom(from.financing_details());
    }
    if (from.has_instrument()) {
      mutable_instrument()->::Common::Instrument::MergeFrom(from.instrument());
    }
    if (from.has_instrument_extension()) {
      mutable_instrument_extension()->::Common::InstrumentExtension::MergeFrom(from.instrument_extension());
    }
    if (from.has_spread_or_benchmark_curve_data()) {
      mutable_spread_or_benchmark_curve_data()->::Common::SpreadOrBenchmarkCurveData::MergeFrom(from.spread_or_benchmark_curve_data());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_yield_data()) {
      mutable_yield_data()->::Common::YieldData::MergeFrom(from.yield_data());
    }
    if (from.has_list_update_action()) {
      set_list_update_action(from.list_update_action());
    }
    if (from.has_security_trading_rules()) {
      mutable_security_trading_rules()->::Common::SecurityTradingRules::MergeFrom(from.security_trading_rules());
    }
    if (from.has_rel_sym_transact_time()) {
      set_rel_sym_transact_time(from.rel_sym_transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecLstUpdRelSymGrp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecLstUpdRelSymGrp::CopyFrom(const SecLstUpdRelSymGrp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecLstUpdRelSymGrp::IsInitialized() const {

  return true;
}

void SecLstUpdRelSymGrp::Swap(SecLstUpdRelSymGrp* other) {
  if (other != this) {
    std::swap(currency_, other->currency_);
    std::swap(encoded_text_, other->encoded_text_);
    std::swap(encoded_text_len_, other->encoded_text_len_);
    std::swap(financing_details_, other->financing_details_);
    std::swap(instrument_, other->instrument_);
    std::swap(instrument_extension_, other->instrument_extension_);
    sec_lst_upd_rel_syms_leg_grp_.Swap(&other->sec_lst_upd_rel_syms_leg_grp_);
    std::swap(spread_or_benchmark_curve_data_, other->spread_or_benchmark_curve_data_);
    stipulations_.Swap(&other->stipulations_);
    std::swap(text_, other->text_);
    std::swap(yield_data_, other->yield_data_);
    std::swap(list_update_action_, other->list_update_action_);
    std::swap(security_trading_rules_, other->security_trading_rules_);
    strike_rules_.Swap(&other->strike_rules_);
    und_instrmt_grp_.Swap(&other->und_instrmt_grp_);
    std::swap(rel_sym_transact_time_, other->rel_sym_transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecLstUpdRelSymGrp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecLstUpdRelSymGrp_descriptor_;
  metadata.reflection = SecLstUpdRelSymGrp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SecurityListUpdateReport::kClearingBusinessDateFieldNumber;
const int SecurityListUpdateReport::kCorporateActionFieldNumber;
const int SecurityListUpdateReport::kLastFragmentFieldNumber;
const int SecurityListUpdateReport::kSecLstUpdRelSymGrpFieldNumber;
const int SecurityListUpdateReport::kSecurityReportIdFieldNumber;
const int SecurityListUpdateReport::kSecurityReqIdFieldNumber;
const int SecurityListUpdateReport::kSecurityRequestResultFieldNumber;
const int SecurityListUpdateReport::kSecurityResponseIdFieldNumber;
const int SecurityListUpdateReport::kSecurityUpdateActionFieldNumber;
const int SecurityListUpdateReport::kStandardHeaderFieldNumber;
const int SecurityListUpdateReport::kStandardTrailerFieldNumber;
const int SecurityListUpdateReport::kTotNoRelatedSymFieldNumber;
const int SecurityListUpdateReport::kApplicationSequenceControlFieldNumber;
const int SecurityListUpdateReport::kMarketIdFieldNumber;
const int SecurityListUpdateReport::kMarketSegmentIdFieldNumber;
const int SecurityListUpdateReport::kEncodedSecurityListDescFieldNumber;
const int SecurityListUpdateReport::kEncodedSecurityListDescLenFieldNumber;
const int SecurityListUpdateReport::kSecurityListDescFieldNumber;
const int SecurityListUpdateReport::kSecurityListIdFieldNumber;
const int SecurityListUpdateReport::kSecurityListRefIdFieldNumber;
const int SecurityListUpdateReport::kSecurityListTypeFieldNumber;
const int SecurityListUpdateReport::kSecurityListTypeSourceFieldNumber;
const int SecurityListUpdateReport::kTransactTimeFieldNumber;
#endif  // !_MSC_VER

SecurityListUpdateReport::SecurityListUpdateReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SecurityListUpdateReport::InitAsDefaultInstance() {
  standard_header_ = const_cast< ::Session::StandardHeader*>(&::Session::StandardHeader::default_instance());
  standard_trailer_ = const_cast< ::Session::StandardTrailer*>(&::Session::StandardTrailer::default_instance());
  application_sequence_control_ = const_cast< ::Common::ApplicationSequenceControl*>(&::Common::ApplicationSequenceControl::default_instance());
}

SecurityListUpdateReport::SecurityListUpdateReport(const SecurityListUpdateReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SecurityListUpdateReport::SharedCtor() {
  _cached_size_ = 0;
  clearing_business_date_ = 0;
  last_fragment_ = false;
  security_report_id_ = GOOGLE_LONGLONG(0);
  security_req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_request_result_ = 0;
  security_response_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_update_action_ = 0;
  standard_header_ = NULL;
  standard_trailer_ = NULL;
  tot_no_related_sym_ = GOOGLE_LONGLONG(0);
  application_sequence_control_ = NULL;
  market_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  market_segment_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_security_list_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_security_list_desc_len_ = 0u;
  security_list_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_ref_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_list_type_ = 0;
  security_list_type_source_ = 0;
  transact_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecurityListUpdateReport::~SecurityListUpdateReport() {
  SharedDtor();
}

void SecurityListUpdateReport::SharedDtor() {
  if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_req_id_;
  }
  if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_response_id_;
  }
  if (market_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_id_;
  }
  if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
    delete market_segment_id_;
  }
  if (encoded_security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_security_list_desc_;
  }
  if (security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_desc_;
  }
  if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_id_;
  }
  if (security_list_ref_id_ != &::google::protobuf::internal::kEmptyString) {
    delete security_list_ref_id_;
  }
  if (this != default_instance_) {
    delete standard_header_;
    delete standard_trailer_;
    delete application_sequence_control_;
  }
}

void SecurityListUpdateReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecurityListUpdateReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecurityListUpdateReport_descriptor_;
}

const SecurityListUpdateReport& SecurityListUpdateReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_securitiesreferencedata_2eproto();
  return *default_instance_;
}

SecurityListUpdateReport* SecurityListUpdateReport::default_instance_ = NULL;

SecurityListUpdateReport* SecurityListUpdateReport::New() const {
  return new SecurityListUpdateReport;
}

void SecurityListUpdateReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clearing_business_date_ = 0;
    last_fragment_ = false;
    security_report_id_ = GOOGLE_LONGLONG(0);
    if (has_security_req_id()) {
      if (security_req_id_ != &::google::protobuf::internal::kEmptyString) {
        security_req_id_->clear();
      }
    }
    security_request_result_ = 0;
    if (has_security_response_id()) {
      if (security_response_id_ != &::google::protobuf::internal::kEmptyString) {
        security_response_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    security_update_action_ = 0;
    if (has_standard_header()) {
      if (standard_header_ != NULL) standard_header_->::Session::StandardHeader::Clear();
    }
    if (has_standard_trailer()) {
      if (standard_trailer_ != NULL) standard_trailer_->::Session::StandardTrailer::Clear();
    }
    tot_no_related_sym_ = GOOGLE_LONGLONG(0);
    if (has_application_sequence_control()) {
      if (application_sequence_control_ != NULL) application_sequence_control_->::Common::ApplicationSequenceControl::Clear();
    }
    if (has_market_id()) {
      if (market_id_ != &::google::protobuf::internal::kEmptyString) {
        market_id_->clear();
      }
    }
    if (has_market_segment_id()) {
      if (market_segment_id_ != &::google::protobuf::internal::kEmptyString) {
        market_segment_id_->clear();
      }
    }
    if (has_encoded_security_list_desc()) {
      if (encoded_security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
        encoded_security_list_desc_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    encoded_security_list_desc_len_ = 0u;
    if (has_security_list_desc()) {
      if (security_list_desc_ != &::google::protobuf::internal::kEmptyString) {
        security_list_desc_->clear();
      }
    }
    if (has_security_list_id()) {
      if (security_list_id_ != &::google::protobuf::internal::kEmptyString) {
        security_list_id_->clear();
      }
    }
    if (has_security_list_ref_id()) {
      if (security_list_ref_id_ != &::google::protobuf::internal::kEmptyString) {
        security_list_ref_id_->clear();
      }
    }
    security_list_type_ = 0;
    security_list_type_source_ = 0;
    transact_time_ = GOOGLE_LONGLONG(0);
  }
  corporate_action_.Clear();
  sec_lst_upd_rel_sym_grp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecurityListUpdateReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 clearing_business_date = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &clearing_business_date_)));
          set_has_clearing_business_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corporate_action;
        break;
      }

      // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corporate_action:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
              add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
            }
          }
          input->PopLimit(limit);
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::CorporateActionEnum_IsValid(value)) {
            add_corporate_action(static_cast< ::SecuritiesReferenceData::CorporateActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_fragment;
        break;
      }

      // optional bool last_fragment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_fragment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
          set_has_last_fragment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sec_lst_upd_rel_sym_grp;
        break;
      }

      // repeated .SecuritiesReferenceData.SecLstUpdRelSymGrp sec_lst_upd_rel_sym_grp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_lst_upd_rel_sym_grp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sec_lst_upd_rel_sym_grp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sec_lst_upd_rel_sym_grp;
        if (input->ExpectTag(41)) goto parse_security_report_id;
        break;
      }

      // optional sfixed64 security_report_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_security_report_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &security_report_id_)));
          set_has_security_report_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_security_req_id;
        break;
      }

      // optional string security_req_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_req_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_req_id().data(), this->security_req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_security_request_result;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_request_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityRequestResultEnum_IsValid(value)) {
            set_security_request_result(static_cast< ::SecuritiesReferenceData::SecurityRequestResultEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_security_response_id;
        break;
      }

      // optional string security_response_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_response_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_response_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_response_id().data(), this->security_response_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_security_update_action;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_update_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityUpdateActionEnum_IsValid(value)) {
            set_security_update_action(static_cast< ::SecuritiesReferenceData::SecurityUpdateActionEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_standard_header;
        break;
      }

      // optional .Session.StandardHeader standard_header = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_standard_trailer;
        break;
      }

      // optional .Session.StandardTrailer standard_trailer = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_standard_trailer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_standard_trailer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_tot_no_related_sym;
        break;
      }

      // optional sfixed64 tot_no_related_sym = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tot_no_related_sym:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tot_no_related_sym_)));
          set_has_tot_no_related_sym();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_application_sequence_control;
        break;
      }

      // optional .Common.ApplicationSequenceControl application_sequence_control = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application_sequence_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_application_sequence_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_market_id;
        break;
      }

      // optional string market_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_id().data(), this->market_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_market_segment_id;
        break;
      }

      // optional string market_segment_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_market_segment_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_segment_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->market_segment_id().data(), this->market_segment_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_encoded_security_list_desc;
        break;
      }

      // optional bytes encoded_security_list_desc = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_security_list_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encoded_security_list_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_encoded_security_list_desc_len;
        break;
      }

      // optional fixed32 encoded_security_list_desc_len = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_encoded_security_list_desc_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &encoded_security_list_desc_len_)));
          set_has_encoded_security_list_desc_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_security_list_desc;
        break;
      }

      // optional string security_list_desc = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_desc().data(), this->security_list_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_security_list_id;
        break;
      }

      // optional string security_list_id = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_id().data(), this->security_list_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_security_list_ref_id;
        break;
      }

      // optional string security_list_ref_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_list_ref_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_list_ref_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_list_ref_id().data(), this->security_list_ref_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_security_list_type;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeEnum_IsValid(value)) {
            set_security_list_type(static_cast< ::SecuritiesReferenceData::SecurityListTypeEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_security_list_type_source;
        break;
      }

      // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_security_list_type_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SecuritiesReferenceData::SecurityListTypeSourceEnum_IsValid(value)) {
            set_security_list_type_source(static_cast< ::SecuritiesReferenceData::SecurityListTypeSourceEnum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_transact_time;
        break;
      }

      // optional sfixed64 transact_time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_transact_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &transact_time_)));
          set_has_transact_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SecurityListUpdateReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sfixed32 clearing_business_date = 1;
  if (has_clearing_business_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->clearing_business_date(), output);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  if (this->corporate_action_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_corporate_action_cached_byte_size_);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->corporate_action(i), output);
  }

  // optional bool last_fragment = 3;
  if (has_last_fragment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->last_fragment(), output);
  }

  // repeated .SecuritiesReferenceData.SecLstUpdRelSymGrp sec_lst_upd_rel_sym_grp = 4;
  for (int i = 0; i < this->sec_lst_upd_rel_sym_grp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sec_lst_upd_rel_sym_grp(i), output);
  }

  // optional sfixed64 security_report_id = 5;
  if (has_security_report_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(5, this->security_report_id(), output);
  }

  // optional string security_req_id = 6;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->security_req_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 7;
  if (has_security_request_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->security_request_result(), output);
  }

  // optional string security_response_id = 8;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->security_response_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 9;
  if (has_security_update_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->security_update_action(), output);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->standard_header(), output);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->standard_trailer(), output);
  }

  // optional sfixed64 tot_no_related_sym = 12;
  if (has_tot_no_related_sym()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(12, this->tot_no_related_sym(), output);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 13;
  if (has_application_sequence_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->application_sequence_control(), output);
  }

  // optional string market_id = 14;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->market_id(), output);
  }

  // optional string market_segment_id = 15;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->market_segment_id(), output);
  }

  // optional bytes encoded_security_list_desc = 16;
  if (has_encoded_security_list_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->encoded_security_list_desc(), output);
  }

  // optional fixed32 encoded_security_list_desc_len = 17;
  if (has_encoded_security_list_desc_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(17, this->encoded_security_list_desc_len(), output);
  }

  // optional string security_list_desc = 18;
  if (has_security_list_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_desc().data(), this->security_list_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->security_list_desc(), output);
  }

  // optional string security_list_id = 19;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->security_list_id(), output);
  }

  // optional string security_list_ref_id = 20;
  if (has_security_list_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_ref_id().data(), this->security_list_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->security_list_ref_id(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 21;
  if (has_security_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->security_list_type(), output);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 22;
  if (has_security_list_type_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->security_list_type_source(), output);
  }

  // optional sfixed64 transact_time = 23;
  if (has_transact_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(23, this->transact_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SecurityListUpdateReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sfixed32 clearing_business_date = 1;
  if (has_clearing_business_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->clearing_business_date(), target);
  }

  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  if (this->corporate_action_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _corporate_action_cached_byte_size_, target);
  }
  for (int i = 0; i < this->corporate_action_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->corporate_action(i), target);
  }

  // optional bool last_fragment = 3;
  if (has_last_fragment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->last_fragment(), target);
  }

  // repeated .SecuritiesReferenceData.SecLstUpdRelSymGrp sec_lst_upd_rel_sym_grp = 4;
  for (int i = 0; i < this->sec_lst_upd_rel_sym_grp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sec_lst_upd_rel_sym_grp(i), target);
  }

  // optional sfixed64 security_report_id = 5;
  if (has_security_report_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(5, this->security_report_id(), target);
  }

  // optional string security_req_id = 6;
  if (has_security_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_req_id().data(), this->security_req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->security_req_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 7;
  if (has_security_request_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->security_request_result(), target);
  }

  // optional string security_response_id = 8;
  if (has_security_response_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_response_id().data(), this->security_response_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->security_response_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 9;
  if (has_security_update_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->security_update_action(), target);
  }

  // optional .Session.StandardHeader standard_header = 10;
  if (has_standard_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->standard_header(), target);
  }

  // optional .Session.StandardTrailer standard_trailer = 11;
  if (has_standard_trailer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->standard_trailer(), target);
  }

  // optional sfixed64 tot_no_related_sym = 12;
  if (has_tot_no_related_sym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(12, this->tot_no_related_sym(), target);
  }

  // optional .Common.ApplicationSequenceControl application_sequence_control = 13;
  if (has_application_sequence_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->application_sequence_control(), target);
  }

  // optional string market_id = 14;
  if (has_market_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_id().data(), this->market_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->market_id(), target);
  }

  // optional string market_segment_id = 15;
  if (has_market_segment_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->market_segment_id().data(), this->market_segment_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->market_segment_id(), target);
  }

  // optional bytes encoded_security_list_desc = 16;
  if (has_encoded_security_list_desc()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->encoded_security_list_desc(), target);
  }

  // optional fixed32 encoded_security_list_desc_len = 17;
  if (has_encoded_security_list_desc_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(17, this->encoded_security_list_desc_len(), target);
  }

  // optional string security_list_desc = 18;
  if (has_security_list_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_desc().data(), this->security_list_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->security_list_desc(), target);
  }

  // optional string security_list_id = 19;
  if (has_security_list_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_id().data(), this->security_list_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->security_list_id(), target);
  }

  // optional string security_list_ref_id = 20;
  if (has_security_list_ref_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_list_ref_id().data(), this->security_list_ref_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->security_list_ref_id(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 21;
  if (has_security_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->security_list_type(), target);
  }

  // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 22;
  if (has_security_list_type_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->security_list_type_source(), target);
  }

  // optional sfixed64 transact_time = 23;
  if (has_transact_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(23, this->transact_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SecurityListUpdateReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 clearing_business_date = 1;
    if (has_clearing_business_date()) {
      total_size += 1 + 4;
    }

    // optional bool last_fragment = 3;
    if (has_last_fragment()) {
      total_size += 1 + 1;
    }

    // optional sfixed64 security_report_id = 5;
    if (has_security_report_id()) {
      total_size += 1 + 8;
    }

    // optional string security_req_id = 6;
    if (has_security_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_req_id());
    }

    // optional .SecuritiesReferenceData.SecurityRequestResultEnum security_request_result = 7;
    if (has_security_request_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_request_result());
    }

    // optional string security_response_id = 8;
    if (has_security_response_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_response_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SecuritiesReferenceData.SecurityUpdateActionEnum security_update_action = 9;
    if (has_security_update_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_update_action());
    }

    // optional .Session.StandardHeader standard_header = 10;
    if (has_standard_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_header());
    }

    // optional .Session.StandardTrailer standard_trailer = 11;
    if (has_standard_trailer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->standard_trailer());
    }

    // optional sfixed64 tot_no_related_sym = 12;
    if (has_tot_no_related_sym()) {
      total_size += 1 + 8;
    }

    // optional .Common.ApplicationSequenceControl application_sequence_control = 13;
    if (has_application_sequence_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->application_sequence_control());
    }

    // optional string market_id = 14;
    if (has_market_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_id());
    }

    // optional string market_segment_id = 15;
    if (has_market_segment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_segment_id());
    }

    // optional bytes encoded_security_list_desc = 16;
    if (has_encoded_security_list_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encoded_security_list_desc());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed32 encoded_security_list_desc_len = 17;
    if (has_encoded_security_list_desc_len()) {
      total_size += 2 + 4;
    }

    // optional string security_list_desc = 18;
    if (has_security_list_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_desc());
    }

    // optional string security_list_id = 19;
    if (has_security_list_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_id());
    }

    // optional string security_list_ref_id = 20;
    if (has_security_list_ref_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_list_ref_id());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeEnum security_list_type = 21;
    if (has_security_list_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type());
    }

    // optional .SecuritiesReferenceData.SecurityListTypeSourceEnum security_list_type_source = 22;
    if (has_security_list_type_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->security_list_type_source());
    }

    // optional sfixed64 transact_time = 23;
    if (has_transact_time()) {
      total_size += 2 + 8;
    }

  }
  // repeated .SecuritiesReferenceData.CorporateActionEnum corporate_action = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->corporate_action_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->corporate_action(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _corporate_action_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .SecuritiesReferenceData.SecLstUpdRelSymGrp sec_lst_upd_rel_sym_grp = 4;
  total_size += 1 * this->sec_lst_upd_rel_sym_grp_size();
  for (int i = 0; i < this->sec_lst_upd_rel_sym_grp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sec_lst_upd_rel_sym_grp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecurityListUpdateReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecurityListUpdateReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecurityListUpdateReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecurityListUpdateReport::MergeFrom(const SecurityListUpdateReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  corporate_action_.MergeFrom(from.corporate_action_);
  sec_lst_upd_rel_sym_grp_.MergeFrom(from.sec_lst_upd_rel_sym_grp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clearing_business_date()) {
      set_clearing_business_date(from.clearing_business_date());
    }
    if (from.has_last_fragment()) {
      set_last_fragment(from.last_fragment());
    }
    if (from.has_security_report_id()) {
      set_security_report_id(from.security_report_id());
    }
    if (from.has_security_req_id()) {
      set_security_req_id(from.security_req_id());
    }
    if (from.has_security_request_result()) {
      set_security_request_result(from.security_request_result());
    }
    if (from.has_security_response_id()) {
      set_security_response_id(from.security_response_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_security_update_action()) {
      set_security_update_action(from.security_update_action());
    }
    if (from.has_standard_header()) {
      mutable_standard_header()->::Session::StandardHeader::MergeFrom(from.standard_header());
    }
    if (from.has_standard_trailer()) {
      mutable_standard_trailer()->::Session::StandardTrailer::MergeFrom(from.standard_trailer());
    }
    if (from.has_tot_no_related_sym()) {
      set_tot_no_related_sym(from.tot_no_related_sym());
    }
    if (from.has_application_sequence_control()) {
      mutable_application_sequence_control()->::Common::ApplicationSequenceControl::MergeFrom(from.application_sequence_control());
    }
    if (from.has_market_id()) {
      set_market_id(from.market_id());
    }
    if (from.has_market_segment_id()) {
      set_market_segment_id(from.market_segment_id());
    }
    if (from.has_encoded_security_list_desc()) {
      set_encoded_security_list_desc(from.encoded_security_list_desc());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_encoded_security_list_desc_len()) {
      set_encoded_security_list_desc_len(from.encoded_security_list_desc_len());
    }
    if (from.has_security_list_desc()) {
      set_security_list_desc(from.security_list_desc());
    }
    if (from.has_security_list_id()) {
      set_security_list_id(from.security_list_id());
    }
    if (from.has_security_list_ref_id()) {
      set_security_list_ref_id(from.security_list_ref_id());
    }
    if (from.has_security_list_type()) {
      set_security_list_type(from.security_list_type());
    }
    if (from.has_security_list_type_source()) {
      set_security_list_type_source(from.security_list_type_source());
    }
    if (from.has_transact_time()) {
      set_transact_time(from.transact_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecurityListUpdateReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecurityListUpdateReport::CopyFrom(const SecurityListUpdateReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecurityListUpdateReport::IsInitialized() const {

  return true;
}

void SecurityListUpdateReport::Swap(SecurityListUpdateReport* other) {
  if (other != this) {
    std::swap(clearing_business_date_, other->clearing_business_date_);
    corporate_action_.Swap(&other->corporate_action_);
    std::swap(last_fragment_, other->last_fragment_);
    sec_lst_upd_rel_sym_grp_.Swap(&other->sec_lst_upd_rel_sym_grp_);
    std::swap(security_report_id_, other->security_report_id_);
    std::swap(security_req_id_, other->security_req_id_);
    std::swap(security_request_result_, other->security_request_result_);
    std::swap(security_response_id_, other->security_response_id_);
    std::swap(security_update_action_, other->security_update_action_);
    std::swap(standard_header_, other->standard_header_);
    std::swap(standard_trailer_, other->standard_trailer_);
    std::swap(tot_no_related_sym_, other->tot_no_related_sym_);
    std::swap(application_sequence_control_, other->application_sequence_control_);
    std::swap(market_id_, other->market_id_);
    std::swap(market_segment_id_, other->market_segment_id_);
    std::swap(encoded_security_list_desc_, other->encoded_security_list_desc_);
    std::swap(encoded_security_list_desc_len_, other->encoded_security_list_desc_len_);
    std::swap(security_list_desc_, other->security_list_desc_);
    std::swap(security_list_id_, other->security_list_id_);
    std::swap(security_list_ref_id_, other->security_list_ref_id_);
    std::swap(security_list_type_, other->security_list_type_);
    std::swap(security_list_type_source_, other->security_list_type_source_);
    std::swap(transact_time_, other->transact_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecurityListUpdateReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecurityListUpdateReport_descriptor_;
  metadata.reflection = SecurityListUpdateReport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SecuritiesReferenceData

// @@protoc_insertion_point(global_scope)
